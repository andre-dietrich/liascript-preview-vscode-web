// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"6Bcmf":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "eeab4bfb7ced810b";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets, assetsToDispose, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets); // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                } // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle, id) {
    // Execute the module.
    bundle(id); // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            }); // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"l0Bxc":[function(require,module,exports) {
var _index = require("../../typescript/liascript/index");
require("acffe5ddbdeedd3f").then(function(Browser) {
    const ua = window.navigator.userAgent;
    if (ua.indexOf("Trident/") > 0 || ua.indexOf("MSIE ") > 0) {
        console.warn("unsupported browser");
        const elem = document.getElementById("IE-message");
        if (elem) elem.hidden = false;
    } else {
        let debug = false;
        debug = true;
        const app = new _index.LiaScript(new Browser.Connector(), {
            allowSync: true,
            debug
        });
    }
});

},{"../../typescript/liascript/index":"gfvS4","acffe5ddbdeedd3f":"8NtkP"}],"gfvS4":[function(require,module,exports) {
// @ts-ignore
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// ----------------------------------------------------------------------------
parcelHelpers.export(exports, "LiaScript", ()=>LiaScript) /* case Port.RESET: {
     self.connector.reset()
     window.location.reload()
     break
   }
*/ ;
var _mainElm = require("../../elm/Main.elm");
var _log = require("./log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _globals = require("./types/globals");
var _abortcontrollerPolyfillOnlyJs = require("abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js");
var _index = require("../webcomponents/tooltip/index");
// Services
var _console = require("./service/Console");
var _consoleDefault = parcelHelpers.interopDefault(_console);
var _database = require("./service/Database");
var _databaseDefault = parcelHelpers.interopDefault(_database);
var _local = require("./service/Local");
var _localDefault = parcelHelpers.interopDefault(_local);
var _resource = require("./service/Resource");
var _script = require("./service/Script");
var _scriptDefault = parcelHelpers.interopDefault(_script);
var _share = require("./service/Share");
var _shareDefault = parcelHelpers.interopDefault(_share);
var _slide = require("./service/Slide");
var _slideDefault = parcelHelpers.interopDefault(_slide);
var _swipe = require("./service/Swipe");
var _swipeDefault = parcelHelpers.interopDefault(_swipe);
var _sync = require("./service/Sync");
var _syncDefault = parcelHelpers.interopDefault(_sync);
var _tts = require("./service/TTS");
var _translate = require("./service/Translate");
var _translateDefault = parcelHelpers.interopDefault(_translate);
var _zip = require("./service/Zip");
var _zipDefault = parcelHelpers.interopDefault(_zip);
var _torrent = require("./service/Torrent");
var _torrentDefault = parcelHelpers.interopDefault(_torrent);
var _nostr = require("./service/Nostr");
var _nostrDefault = parcelHelpers.interopDefault(_nostr);
// ----------------------------------------------------------------------------
// GLOBAL INITIALIZATION
var _init = require("./init");
// TODO: CHECK window.LIA.defaultCourse functionality
_init.initGlobals();
window.LIA.injectResposivevoice = _tts.inject;
if (typeof queueMicrotask !== "function") window.queueMicrotask = function(callback) {
    Promise.resolve().then(callback);
};
class LiaScript {
    constructor(connector, { allowSync =false , debug =false , fullPage =false , courseUrl =null , script =null , hideURL =false , hasShareAPI  } = {}){
        window.LIA.debug = debug;
        if (hasShareAPI === undefined) hasShareAPI = (0, _shareDefault.default).isSupported();
        this.app = (0, _mainElm.Elm).Main.init({
            //node: elem,
            flags: {
                courseUrl: window.LIA.defaultCourseURL || courseUrl,
                script: script,
                settings: connector.getSettings(),
                seed: Math.round(Math.random() * 10000000),
                screen: {
                    width: window.innerWidth,
                    height: window.innerHeight
                },
                hasShareAPI,
                isFullscreen: !!document.fullscreenElement,
                hasIndex: connector.hasIndex(),
                fullPage: fullPage,
                sync: {
                    support: (0, _syncDefault.default).supported,
                    enabled: allowSync
                },
                hideURL: hideURL
            }
        });
        this.app.ports.copyToClipboard.subscribe((text)=>{
            try {
                navigator.clipboard.writeText(text);
            } catch (e) {
                console.warn("Failed to copy: ", e.message);
            }
        });
        const sendTo = this.app.ports.event2elm.send;
        const sender = function(msg) {
            if (msg.reply) {
                if (window.LIA.debug) (0, _logDefault.default).info(`LIA <<< (${msg.track}) :`, msg.message);
                sendTo(msg);
            }
        };
        window.LIA.send = sender;
        this.connector = connector;
        this.initEventSystem(document.body, this.app.ports.event2js.subscribe, sender);
        let self = this;
        window.LIA.img.load = (src, width, height)=>{
            self.app.ports.media.send([
                src,
                width,
                height
            ]);
        };
        window.LIA.img.click = (url)=>{
            // abuse media port to open modals
            if (document.getElementsByClassName("lia-modal").length === 0) self.app.ports.media.send([
                url,
                null,
                null
            ]);
        };
        window.LIA.showFootnote = (key)=>{
            self.app.ports.footnote.send(key);
        };
        window.LIA.goto = (slide)=>{
            sender({
                reply: true,
                track: [
                    [
                        "goto",
                        -1
                    ]
                ],
                service: "",
                message: {
                    cmd: "goto",
                    param: slide
                }
            });
        };
        window.LIA.gotoNext = ()=>{
            sender({
                reply: true,
                track: [
                    [
                        "goto",
                        -1
                    ]
                ],
                service: "",
                message: {
                    cmd: "next",
                    param: null
                }
            });
        };
        window.LIA.gotoPrevious = ()=>{
            sender({
                reply: true,
                track: [
                    [
                        "goto",
                        -1
                    ]
                ],
                service: "",
                message: {
                    cmd: "prev",
                    param: null
                }
            });
        };
        // Attach a tooltip-div to the end of the DOM
        _index.initTooltip();
    }
    reset() {
        this.app.ports.event2elm.send({
            track: [
                {
                    topic: "reset",
                    id: null
                }
            ],
            message: null
        });
    }
    initEventSystem(elem, jsSubscribe, elmSend) {
        (0, _logDefault.default).info("initEventSystem");
        (0, _databaseDefault.default).init(elmSend, this.connector);
        (0, _localDefault.default).init(elmSend, (0, _databaseDefault.default));
        _tts.Service.init(elmSend);
        (0, _scriptDefault.default).init(elmSend);
        (0, _swipeDefault.default).init(elem, elmSend);
        (0, _translateDefault.default).init(elmSend);
        (0, _syncDefault.default).init(elmSend);
        (0, _zipDefault.default).init(elmSend);
        (0, _torrentDefault.default).init(elmSend, (0, _databaseDefault.default));
        (0, _nostrDefault.default).init(elmSend);
        let connector = this.connector;
        jsSubscribe((event)=>{
            if (window.LIA.debug) (0, _logDefault.default).info(`LIA >>> (${JSON.stringify(event.track)})`, event.service, event.message);
            switch(event.service){
                case (0, _databaseDefault.default).PORT:
                    (0, _databaseDefault.default).handle(event);
                    break;
                case (0, _slideDefault.default).PORT:
                    if (event.message.param.slide) // store the current slide number within the backend
                    connector.slide(event.message.param.slide);
                    (0, _slideDefault.default).handle(event);
                    break;
                case _tts.Service.PORT:
                    _tts.Service.handle(event);
                    break;
                case (0, _scriptDefault.default).PORT:
                    (0, _scriptDefault.default).handle(event);
                    break;
                case (0, _consoleDefault.default).PORT:
                    (0, _consoleDefault.default).handle(event);
                    break;
                case (0, _syncDefault.default).PORT:
                    (0, _syncDefault.default).handle(event);
                    break;
                case (0, _shareDefault.default).PORT:
                    (0, _shareDefault.default).handle(event);
                    break;
                case (0, _resource.Service).PORT:
                    (0, _resource.Service).handle(event);
                    break;
                case (0, _translateDefault.default).PORT:
                    (0, _translateDefault.default).handle(event);
                    break;
                case (0, _localDefault.default).PORT:
                    (0, _localDefault.default).handle(event);
                    break;
                case (0, _zipDefault.default).PORT:
                    (0, _zipDefault.default).handle(event);
                    break;
                case (0, _torrentDefault.default).PORT:
                    (0, _torrentDefault.default).handle(event);
                    break;
                case (0, _nostrDefault.default).PORT:
                    (0, _nostrDefault.default).handle(event);
                    break;
                default:
                    console.warn("Unknown Service => ", event);
            }
        });
    }
}

},{"../../elm/Main.elm":"iRWCQ","./log":"4dsMr","./types/globals":"60gyf","abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js":"8wzf3","../webcomponents/tooltip/index":"3lJKr","./service/Console":"lx71L","./service/Database":"ksx6E","./service/Local":"2RCSc","./service/Resource":"5yqii","./service/Script":"ljmaF","./service/Share":"GV8AJ","./service/Slide":"de3ED","./service/Swipe":"hyzFk","./service/Sync":"65Itr","./service/TTS":"idFt9","./service/Translate":"bOfmx","./service/Zip":"d4zW4","./service/Torrent":"bYHRh","./service/Nostr":"dX9nA","./init":"ifSPH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRWCQ":[function(require,module,exports) {
(function(scope) {
    "use strict";
    function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
    }
    function F2(fun) {
        return F(2, fun, function(a) {
            return function(b) {
                return fun(a, b);
            };
        });
    }
    function F3(fun) {
        return F(3, fun, function(a) {
            return function(b) {
                return function(c) {
                    return fun(a, b, c);
                };
            };
        });
    }
    function F4(fun) {
        return F(4, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return fun(a, b, c, d);
                    };
                };
            };
        });
    }
    function F5(fun) {
        return F(5, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return fun(a, b, c, d, e);
                        };
                    };
                };
            };
        });
    }
    function F6(fun) {
        return F(6, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return fun(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        });
    }
    function F7(fun) {
        return F(7, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return fun(a, b, c, d, e, f, g);
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function F8(fun) {
        return F(8, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return fun(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function F9(fun) {
        return F(9, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return function(i) {
                                            return fun(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function A2(fun, a, b) {
        return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
        return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
        return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
        return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
        return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g) {
        return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
    }
    function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
    }
    function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
    }
    console.warn("Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.");
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
        return [
            value
        ];
    }
    function _JsArray_length(array) {
        return array.length;
    }
    var _JsArray_initialize = F3(function(size, offset, func) {
        var result = new Array(size);
        for(var i = 0; i < size; i++)result[i] = func(offset + i);
        return result;
    });
    var _JsArray_initializeFromList = F2(function(max, ls) {
        var result = new Array(max);
        for(var i = 0; i < max && ls.b; i++){
            result[i] = ls.a;
            ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
    });
    var _JsArray_unsafeGet = F2(function(index, array) {
        return array[index];
    });
    var _JsArray_unsafeSet = F3(function(index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = array[i];
        result[index] = value;
        return result;
    });
    var _JsArray_push = F2(function(value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for(var i = 0; i < length; i++)result[i] = array[i];
        result[length] = value;
        return result;
    });
    var _JsArray_foldl = F3(function(func, acc, array) {
        var length = array.length;
        for(var i = 0; i < length; i++)acc = A2(func, array[i], acc);
        return acc;
    });
    var _JsArray_foldr = F3(function(func, acc, array) {
        for(var i = array.length - 1; i >= 0; i--)acc = A2(func, array[i], acc);
        return acc;
    });
    var _JsArray_map = F2(function(func, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = func(array[i]);
        return result;
    });
    var _JsArray_indexedMap = F3(function(func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = A2(func, offset + i, array[i]);
        return result;
    });
    var _JsArray_slice = F3(function(from, to, array) {
        return array.slice(from, to);
    });
    var _JsArray_appendN = F3(function(n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) itemsToCopy = source.length;
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for(var i = 0; i < destLen; i++)result[i] = dest[i];
        for(var i = 0; i < itemsToCopy; i++)result[i + destLen] = source[i];
        return result;
    });
    // LOG
    var _Debug_log_UNUSED = F2(function(tag, value) {
        return value;
    });
    var _Debug_log = F2(function(tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
    });
    // TODOS
    function _Debug_todo(moduleName, region) {
        return function(message) {
            _Debug_crash(8, moduleName, region, message);
        };
    }
    function _Debug_todoCase(moduleName, region, value) {
        return function(message) {
            _Debug_crash(9, moduleName, region, value, message);
        };
    }
    // TO STRING
    function _Debug_toString_UNUSED(value) {
        return "<internals>";
    }
    function _Debug_toString(value) {
        return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") return _Debug_internalColor(ansi, "<function>");
        if (typeof value === "boolean") return _Debug_ctorColor(ansi, value ? "True" : "False");
        if (typeof value === "number") return _Debug_numberColor(ansi, value + "");
        if (value instanceof String) return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        if (typeof value === "string") return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") return _Debug_internalColor(ansi, "<internals>");
            if (tag[0] === "#") {
                var output = [];
                for(var k in value){
                    if (k === "$") continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") return _Debug_ctorColor(ansi, "Set") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") return _Debug_ctorColor(ansi, "Dict") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            if (tag === "Array_elm_builtin") return _Debug_ctorColor(ansi, "Array") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for(; value.b; value = value.b)output += "," + _Debug_toAnsiString(ansi, value.a);
                return output + "]";
            }
            var output = "";
            for(var i in value){
                if (i === "$") continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === '"' || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        if (typeof File !== "undefined" && value instanceof File) return _Debug_internalColor(ansi, "<" + value.name + ">");
        if (typeof value === "object") {
            var output = [];
            for(var key in value){
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) return "{}";
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
        if (isChar) return s.replace(/\'/g, "\\'");
        else return s.replace(/\"/g, '\\"');
    }
    function _Debug_ctorColor(ansi, string) {
        return ansi ? "\x1b[96m" + string + "\x1b[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
        return ansi ? "\x1b[95m" + string + "\x1b[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
        return ansi ? "\x1b[93m" + string + "\x1b[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
        return ansi ? "\x1b[92m" + string + "\x1b[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
        return ansi ? "\x1b[37m" + string + "\x1b[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
        return ansi ? "\x1b[36m" + string + "\x1b[0m" : string;
    }
    function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    // CRASH
    function _Debug_crash_UNUSED(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash(identifier, fact1, fact2, fact3, fact4) {
        switch(identifier){
            case 0:
                throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');
            case 1:
                throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
            case 2:
                var jsonErrorString = fact1;
                throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
            case 3:
                var portName = fact1;
                throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
            case 4:
                var portName = fact1;
                var problem = fact2;
                throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
            case 5:
                throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');
            case 6:
                var moduleName = fact1;
                throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
            case 8:
                var moduleName = fact1;
                var region = fact2;
                var message = fact3;
                throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
            case 9:
                var moduleName = fact1;
                var region = fact2;
                var value = fact3;
                var message = fact4;
                throw new Error("TODO in module `" + moduleName + "` from the `case` expression " + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    " + _Debug_toString(value).replace("\n", "\n    ") + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
            case 10:
                throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
            case 11:
                throw new Error("Cannot perform mod 0. Division by zero error.");
        }
    }
    function _Debug_regionToString(region) {
        if (region.start.line === region.end.line) return "on line " + region.start.line;
        return "on lines " + region.start.line + " through " + region.end.line;
    }
    // EQUALITY
    function _Utils_eq(x, y) {
        for(var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack));
        return isEqual;
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) return true;
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && _Debug_crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        /**/ if (x.$ === "Set_elm_builtin") {
            x = $elm$core$Set$toList(x);
            y = $elm$core$Set$toList(y);
        }
        if (x.$ === "RBNode_elm_builtin" || x.$ === "RBEmpty_elm_builtin") {
            x = $elm$core$Dict$toList(x);
            y = $elm$core$Dict$toList(y);
        }
        //*/
        /**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/ for(var key in x){
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) return false;
        }
        return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual = F2(function(a, b) {
        return !_Utils_eq(a, b);
    });
    // COMPARISONS
    // Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
    // the particular integer values assigned to LT, EQ, and GT.
    function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
        /**/ if (x instanceof String) {
            var a = x.valueOf();
            var b = y.valueOf();
            return a === b ? 0 : a < b ? -1 : 1;
        }
        //*/
        /**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/ /**/ if (x.$[0] === "#") return (ord = _Utils_cmp(x.a, y.a)) ? ord : (ord = _Utils_cmp(x.b, y.b)) ? ord : _Utils_cmp(x.c, y.c);
        // traverse conses until end of a list or a mismatch
        for(; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b); // WHILE_CONSES
        return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
    }
    var _Utils_lt = F2(function(a, b) {
        return _Utils_cmp(a, b) < 0;
    });
    var _Utils_le = F2(function(a, b) {
        return _Utils_cmp(a, b) < 1;
    });
    var _Utils_gt = F2(function(a, b) {
        return _Utils_cmp(a, b) > 0;
    });
    var _Utils_ge = F2(function(a, b) {
        return _Utils_cmp(a, b) >= 0;
    });
    var _Utils_compare = F2(function(x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    });
    // COMMON VALUES
    var _Utils_Tuple0_UNUSED = 0;
    var _Utils_Tuple0 = {
        $: "#0"
    };
    function _Utils_Tuple2_UNUSED(a, b) {
        return {
            a: a,
            b: b
        };
    }
    function _Utils_Tuple2(a, b) {
        return {
            $: "#2",
            a: a,
            b: b
        };
    }
    function _Utils_Tuple3_UNUSED(a, b, c) {
        return {
            a: a,
            b: b,
            c: c
        };
    }
    function _Utils_Tuple3(a, b, c) {
        return {
            $: "#3",
            a: a,
            b: b,
            c: c
        };
    }
    function _Utils_chr_UNUSED(c) {
        return c;
    }
    function _Utils_chr(c) {
        return new String(c);
    }
    // RECORDS
    function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for(var key in oldRecord)newRecord[key] = oldRecord[key];
        for(var key in updatedFields)newRecord[key] = updatedFields[key];
        return newRecord;
    }
    // APPEND
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
        // append Strings
        if (typeof xs === "string") return xs + ys;
        // append Lists
        if (!xs.b) return ys;
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for(var curr = root; xs.b; xs = xs.b)curr = curr.b = _List_Cons(xs.a, ys);
        return root;
    }
    var _List_Nil_UNUSED = {
        $: 0
    };
    var _List_Nil = {
        $: "[]"
    };
    function _List_Cons_UNUSED(hd, tl) {
        return {
            $: 1,
            a: hd,
            b: tl
        };
    }
    function _List_Cons(hd, tl) {
        return {
            $: "::",
            a: hd,
            b: tl
        };
    }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
        var out = _List_Nil;
        for(var i = arr.length; i--;)out = _List_Cons(arr[i], out);
        return out;
    }
    function _List_toArray(xs) {
        for(var out = []; xs.b; xs = xs.b)out.push(xs.a);
        return out;
    }
    var _List_map2 = F3(function(f, xs, ys) {
        for(var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b)arr.push(A2(f, xs.a, ys.a));
        return _List_fromArray(arr);
    });
    var _List_map3 = F4(function(f, xs, ys, zs) {
        for(var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A3(f, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_map4 = F5(function(f, ws, xs, ys, zs) {
        for(var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_map5 = F6(function(f, vs, ws, xs, ys, zs) {
        for(var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_sortBy = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
            return _Utils_cmp(f(a), f(b));
        }));
    });
    var _List_sortWith = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
            var ord = A2(f, a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    });
    // MATH
    var _Basics_add = F2(function(a, b) {
        return a + b;
    });
    var _Basics_sub = F2(function(a, b) {
        return a - b;
    });
    var _Basics_mul = F2(function(a, b) {
        return a * b;
    });
    var _Basics_fdiv = F2(function(a, b) {
        return a / b;
    });
    var _Basics_idiv = F2(function(a, b) {
        return a / b | 0;
    });
    var _Basics_pow = F2(Math.pow);
    var _Basics_remainderBy = F2(function(b, a) {
        return a % b;
    });
    // https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
    var _Basics_modBy = F2(function(modulus, x) {
        var answer = x % modulus;
        return modulus === 0 ? _Debug_crash(11) : answer > 0 && modulus < 0 || answer < 0 && modulus > 0 ? answer + modulus : answer;
    });
    // TRIGONOMETRY
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2 = F2(Math.atan2);
    // MORE MATH
    function _Basics_toFloat(x) {
        return x;
    }
    function _Basics_truncate(n) {
        return n | 0;
    }
    function _Basics_isInfinite(n) {
        return n === Infinity || n === -Infinity;
    }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    // BOOLEANS
    function _Basics_not(bool) {
        return !bool;
    }
    var _Basics_and = F2(function(a, b) {
        return a && b;
    });
    var _Basics_or = F2(function(a, b) {
        return a || b;
    });
    var _Basics_xor = F2(function(a, b) {
        return a !== b;
    });
    var _String_cons = F2(function(chr, str) {
        return chr + str;
    });
    function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word) ? $elm$core$Maybe$Just(0xD800 <= word && word <= 0xDBFF ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2)) : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))) : $elm$core$Maybe$Nothing;
    }
    var _String_append = F2(function(a, b) {
        return a + b;
    });
    function _String_length(str) {
        return str.length;
    }
    var _String_map = F2(function(func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while(i < len){
            var word = string.charCodeAt(i);
            if (0xD800 <= word && word <= 0xDBFF) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]));
                i += 2;
                continue;
            }
            array[i] = func(_Utils_chr(string[i]));
            i++;
        }
        return array.join("");
    });
    var _String_filter = F2(function(isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while(i < len){
            var char = str[i];
            var word = str.charCodeAt(i);
            i++;
            if (0xD800 <= word && word <= 0xDBFF) {
                char += str[i];
                i++;
            }
            if (isGood(_Utils_chr(char))) arr.push(char);
        }
        return arr.join("");
    });
    function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while(i < len){
            var word = str.charCodeAt(i);
            if (0xD800 <= word && word <= 0xDBFF) {
                arr[len - i] = str[i + 1];
                i++;
                arr[len - i] = str[i - 1];
                i++;
            } else {
                arr[len - i] = str[i];
                i++;
            }
        }
        return arr.join("");
    }
    var _String_foldl = F3(function(func, state, string) {
        var len = string.length;
        var i = 0;
        while(i < len){
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (0xD800 <= word && word <= 0xDBFF) {
                char += string[i];
                i++;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    });
    var _String_foldr = F3(function(func, state, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    });
    var _String_split = F2(function(sep, str) {
        return str.split(sep);
    });
    var _String_join = F2(function(sep, strs) {
        return strs.join(sep);
    });
    var _String_slice = F3(function(start, end, str) {
        return str.slice(start, end);
    });
    function _String_trim(str) {
        return str.trim();
    }
    function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
        return str.toUpperCase();
    }
    function _String_toLower(str) {
        return str.toLowerCase();
    }
    var _String_any = F2(function(isGood, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            if (isGood(_Utils_chr(char))) return true;
        }
        return false;
    });
    var _String_all = F2(function(isGood, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            if (!isGood(_Utils_chr(char))) return false;
        }
        return true;
    });
    var _String_contains = F2(function(sub, str) {
        return str.indexOf(sub) > -1;
    });
    var _String_startsWith = F2(function(sub, str) {
        return str.indexOf(sub) === 0;
    });
    var _String_endsWith = F2(function(sub, str) {
        return str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;
    });
    var _String_indexes = F2(function(sub, str) {
        var subLen = sub.length;
        if (subLen < 1) return _List_Nil;
        var i = 0;
        var is = [];
        while((i = str.indexOf(sub, i)) > -1){
            is.push(i);
            i = i + subLen;
        }
        return _List_fromArray(is);
    });
    // TO STRING
    function _String_fromNumber(number) {
        return number + "";
    }
    // INT CONVERSIONS
    function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 0x2B /* + */  || code0 == 0x2D /* - */  ? 1 : 0;
        for(var i = start; i < str.length; ++i){
            var code = str.charCodeAt(i);
            if (code < 0x30 || 0x39 < code) return $elm$core$Maybe$Nothing;
            total = 10 * total + code - 0x30;
        }
        return i == start ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
    }
    // FLOAT CONVERSIONS
    function _String_toFloat(s) {
        // check if it is a hex, octal, or binary number
        if (s.length === 0 || /[\sxbo]/.test(s)) return $elm$core$Maybe$Nothing;
        var n = +s;
        // faster isNaN check
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
        return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (0xD800 <= code && code <= 0xDBFF) return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000;
        return code;
    }
    function _Char_fromCode(code) {
        return _Utils_chr(code < 0 || 0x10FFFF < code ? "�" : code <= 0xFFFF ? String.fromCharCode(code) : (code -= 0x10000, String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)));
    }
    function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
    }
    /**/ function _Json_errorToString(error) {
        return $elm$json$Json$Decode$errorToString(error);
    }
    //*/
    // CORE DECODERS
    function _Json_succeed(msg) {
        return {
            $: 0,
            a: msg
        };
    }
    function _Json_fail(msg) {
        return {
            $: 1,
            a: msg
        };
    }
    function _Json_decodePrim(decoder) {
        return {
            $: 2,
            b: decoder
        };
    }
    var _Json_decodeInt = _Json_decodePrim(function(value) {
        return typeof value !== "number" ? _Json_expecting("an INT", value) : -2147483647 < value && value < 2147483647 && (value | 0) === value ? $elm$core$Result$Ok(value) : isFinite(value) && !(value % 1) ? $elm$core$Result$Ok(value) : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function(value) {
        return typeof value === "boolean" ? $elm$core$Result$Ok(value) : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function(value) {
        return typeof value === "number" ? $elm$core$Result$Ok(value) : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function(value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function(value) {
        return typeof value === "string" ? $elm$core$Result$Ok(value) : value instanceof String ? $elm$core$Result$Ok(value + "") : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) {
        return {
            $: 3,
            b: decoder
        };
    }
    function _Json_decodeArray(decoder) {
        return {
            $: 4,
            b: decoder
        };
    }
    function _Json_decodeNull(value) {
        return {
            $: 5,
            c: value
        };
    }
    var _Json_decodeField = F2(function(field, decoder) {
        return {
            $: 6,
            d: field,
            b: decoder
        };
    });
    var _Json_decodeIndex = F2(function(index, decoder) {
        return {
            $: 7,
            e: index,
            b: decoder
        };
    });
    function _Json_decodeKeyValuePairs(decoder) {
        return {
            $: 8,
            b: decoder
        };
    }
    function _Json_mapMany(f, decoders) {
        return {
            $: 9,
            f: f,
            g: decoders
        };
    }
    var _Json_andThen = F2(function(callback, decoder) {
        return {
            $: 10,
            b: decoder,
            h: callback
        };
    });
    function _Json_oneOf(decoders) {
        return {
            $: 11,
            g: decoders
        };
    }
    // DECODING OBJECTS
    var _Json_map1 = F2(function(f, d1) {
        return _Json_mapMany(f, [
            d1
        ]);
    });
    var _Json_map2 = F3(function(f, d1, d2) {
        return _Json_mapMany(f, [
            d1,
            d2
        ]);
    });
    var _Json_map3 = F4(function(f, d1, d2, d3) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3
        ]);
    });
    var _Json_map4 = F5(function(f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4
        ]);
    });
    var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5
        ]);
    });
    var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6
        ]);
    });
    var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6,
            d7
        ]);
    });
    var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6,
            d7,
            d8
        ]);
    });
    // DECODE
    var _Json_runOnString = F2(function(decoder, string) {
        try {
            var value = JSON.parse(string);
            return _Json_runHelp(decoder, value);
        } catch (e) {
            return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
    });
    var _Json_run = F2(function(decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
    });
    function _Json_runHelp(decoder, value) {
        switch(decoder.$){
            case 2:
                return decoder.b(value);
            case 5:
                return value === null ? $elm$core$Result$Ok(decoder.c) : _Json_expecting("null", value);
            case 3:
                if (!_Json_isArray(value)) return _Json_expecting("a LIST", value);
                return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
            case 4:
                if (!_Json_isArray(value)) return _Json_expecting("an ARRAY", value);
                return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
            case 6:
                var field = decoder.d;
                if (typeof value !== "object" || value === null || !(field in value)) return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
                var result = _Json_runHelp(decoder.b, value[field]);
                return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));
            case 7:
                var index = decoder.e;
                if (!_Json_isArray(value)) return _Json_expecting("an ARRAY", value);
                if (index >= value.length) return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
                var result = _Json_runHelp(decoder.b, value[index]);
                return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));
            case 8:
                if (typeof value !== "object" || value === null || _Json_isArray(value)) return _Json_expecting("an OBJECT", value);
                var keyValuePairs = _List_Nil;
                // TODO test perf of Object.keys and switch when support is good enough
                for(var key in value)if (value.hasOwnProperty(key)) {
                    var result = _Json_runHelp(decoder.b, value[key]);
                    if (!$elm$core$Result$isOk(result)) return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
                    keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                }
                return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
            case 9:
                var answer = decoder.f;
                var decoders = decoder.g;
                for(var i = 0; i < decoders.length; i++){
                    var result = _Json_runHelp(decoders[i], value);
                    if (!$elm$core$Result$isOk(result)) return result;
                    answer = answer(result.a);
                }
                return $elm$core$Result$Ok(answer);
            case 10:
                var result = _Json_runHelp(decoder.b, value);
                return !$elm$core$Result$isOk(result) ? result : _Json_runHelp(decoder.h(result.a), value);
            case 11:
                var errors = _List_Nil;
                for(var temp = decoder.g; temp.b; temp = temp.b){
                    var result = _Json_runHelp(temp.a, value);
                    if ($elm$core$Result$isOk(result)) return result;
                    errors = _List_Cons(result.a, errors);
                }
                return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
            case 1:
                return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));
            case 0:
                return $elm$core$Result$Ok(decoder.a);
        }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for(var i = 0; i < len; i++){
            var result = _Json_runHelp(decoder, value[i]);
            if (!$elm$core$Result$isOk(result)) return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
            array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
        return Array.isArray(value) || typeof FileList !== "undefined" && value instanceof FileList;
    }
    function _Json_toElmArray(array) {
        return A2($elm$core$Array$initialize, array.length, function(i) {
            return array[i];
        });
    }
    function _Json_expecting(type, value) {
        return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "Expecting " + type, _Json_wrap(value)));
    }
    // EQUALITY
    function _Json_equality(x, y) {
        if (x === y) return true;
        if (x.$ !== y.$) return false;
        switch(x.$){
            case 0:
            case 1:
                return x.a === y.a;
            case 2:
                return x.b === y.b;
            case 5:
                return x.c === y.c;
            case 3:
            case 4:
            case 8:
                return _Json_equality(x.b, y.b);
            case 6:
                return x.d === y.d && _Json_equality(x.b, y.b);
            case 7:
                return x.e === y.e && _Json_equality(x.b, y.b);
            case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g);
            case 10:
                return x.h === y.h && _Json_equality(x.b, y.b);
            case 11:
                return _Json_listEquality(x.g, y.g);
        }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) return false;
        for(var i = 0; i < len; i++){
            if (!_Json_equality(aDecoders[i], bDecoders[i])) return false;
        }
        return true;
    }
    // ENCODE
    var _Json_encode = F2(function(indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    });
    function _Json_wrap(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Json_unwrap(value) {
        return value.a;
    }
    function _Json_wrap_UNUSED(value) {
        return value;
    }
    function _Json_unwrap_UNUSED(value) {
        return value;
    }
    function _Json_emptyArray() {
        return [];
    }
    function _Json_emptyObject() {
        return {};
    }
    var _Json_addField = F3(function(key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
    });
    function _Json_addEntry(func) {
        return F2(function(entry, array) {
            array.push(_Json_unwrap(func(entry)));
            return array;
        });
    }
    var _Json_encodeNull = _Json_wrap(null);
    // TASKS
    function _Scheduler_succeed(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Scheduler_fail(error) {
        return {
            $: 1,
            a: error
        };
    }
    function _Scheduler_binding(callback) {
        return {
            $: 2,
            b: callback,
            c: null
        };
    }
    var _Scheduler_andThen = F2(function(callback, task) {
        return {
            $: 3,
            b: callback,
            d: task
        };
    });
    var _Scheduler_onError = F2(function(callback, task) {
        return {
            $: 4,
            b: callback,
            d: task
        };
    });
    function _Scheduler_receive(callback) {
        return {
            $: 5,
            b: callback
        };
    }
    // PROCESSES
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
        var proc = {
            $: 0,
            e: _Scheduler_guid++,
            f: task,
            g: null,
            h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
    }
    function _Scheduler_spawn(task) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
    }
    function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
    }
    var _Scheduler_send = F2(function(proc, msg) {
        return _Scheduler_binding(function(callback) {
            _Scheduler_rawSend(proc, msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    function _Scheduler_kill(proc) {
        return _Scheduler_binding(function(callback) {
            var task = proc.f;
            if (task.$ === 2 && task.c) task.c();
            proc.f = null;
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    /* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/ var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) return;
        _Scheduler_working = true;
        while(proc = _Scheduler_queue.shift())_Scheduler_step(proc);
        _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
        while(proc.f){
            var rootTag = proc.f.$;
            if (rootTag === 0 || rootTag === 1) {
                while(proc.g && proc.g.$ !== rootTag)proc.g = proc.g.i;
                if (!proc.g) return;
                proc.f = proc.g.b(proc.f.a);
                proc.g = proc.g.i;
            } else if (rootTag === 2) {
                proc.f.c = proc.f.b(function(newRoot) {
                    proc.f = newRoot;
                    _Scheduler_enqueue(proc);
                });
                return;
            } else if (rootTag === 5) {
                if (proc.h.length === 0) return;
                proc.f = proc.f.b(proc.h.shift());
            } else {
                proc.g = {
                    $: rootTag === 3 ? 0 : 1,
                    b: proc.f.b,
                    i: proc.g
                };
                proc.f = proc.f.d;
            }
        }
    }
    function _Process_sleep(time) {
        return _Scheduler_binding(function(callback) {
            var id = setTimeout(function() {
                callback(_Scheduler_succeed(_Utils_Tuple0));
            }, time);
            return function() {
                clearTimeout(id);
            };
        });
    }
    // PROGRAMS
    var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function() {
            return function() {};
        });
    });
    // INITIALIZE A PROGRAM
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2 /**/ , _Json_errorToString(result.a));
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? {
            ports: ports
        } : {};
    }
    // TRACK PRELOADS
    //
    // This is used by code in elm/browser and elm/http
    // to register any HTTP requests that are triggered by init.
    //
    var _Platform_preload;
    function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
    }
    // EFFECT MANAGERS
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        // setup all necessary effect managers
        for(var key in _Platform_effectManagers){
            var manager = _Platform_effectManagers[key];
            if (manager.a) {
                ports = ports || {};
                ports[key] = manager.a(key, sendToApp);
            }
            managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
            b: init,
            c: onEffects,
            d: onSelfMsg,
            e: cmdMap,
            f: subMap
        };
    }
    function _Platform_instantiateManager(info, sendToApp) {
        var router = {
            g: sendToApp,
            h: undefined
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
            return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg) {
                var value = msg.a;
                if (msg.$ === 0) return A3(onSelfMsg, router, value, state);
                return cmdMap && subMap ? A4(onEffects, router, value.i, value.j, state) : A3(onEffects, router, cmdMap ? value.i : value.j, state);
            }));
        }
        return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
    }
    // ROUTING
    var _Platform_sendToApp = F2(function(router, msg) {
        return _Scheduler_binding(function(callback) {
            router.g(msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    var _Platform_sendToSelf = F2(function(router, msg) {
        return A2(_Scheduler_send, router.h, {
            $: 0,
            a: msg
        });
    });
    // BAGS
    function _Platform_leaf(home) {
        return function(value) {
            return {
                $: 1,
                k: home,
                l: value
            };
        };
    }
    function _Platform_batch(list) {
        return {
            $: 2,
            m: list
        };
    }
    var _Platform_map = F2(function(tagger, bag) {
        return {
            $: 3,
            n: tagger,
            o: bag
        };
    });
    // PIPE BAGS INTO EFFECT MANAGERS
    //
    // Effects must be queued!
    //
    // Say your init contains a synchronous command, like Time.now or Time.here
    //
    //   - This will produce a batch of effects (FX_1)
    //   - The synchronous task triggers the subsequent `update` call
    //   - This will produce a batch of effects (FX_2)
    //
    // If we just start dispatching FX_2, subscriptions from FX_2 can be processed
    // before subscriptions from FX_1. No good! Earlier versions of this code had
    // this problem, leading to these reports:
    //
    //   https://github.com/elm/core/issues/980
    //   https://github.com/elm/core/pull/981
    //   https://github.com/elm/compiler/issues/1776
    //
    // The queue is necessary to avoid ordering issues for synchronous commands.
    // Why use true/false here? Why not just check the length of the queue?
    // The goal is to detect "are we currently dispatching effects?" If we
    // are, we need to bail and let the ongoing while loop handle things.
    //
    // Now say the queue has 1 element. When we dequeue the final element,
    // the queue will be empty, but we are still actively dispatching effects.
    // So you could get queue jumping in a really tricky category of cases.
    //
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({
            p: managers,
            q: cmdBag,
            r: subBag
        });
        if (_Platform_effectsActive) return;
        _Platform_effectsActive = true;
        for(var fx; fx = _Platform_effectsQueue.shift();)_Platform_dispatchEffects(fx.p, fx.q, fx.r);
        _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for(var home in managers)_Scheduler_rawSend(managers[home], {
            $: "fx",
            a: effectsDict[home] || {
                i: _List_Nil,
                j: _List_Nil
            }
        });
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch(bag.$){
            case 1:
                var home = bag.k;
                var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
                effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
                return;
            case 2:
                for(var list = bag.m; list.b; list = list.b)_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
                return;
            case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                    s: bag.n,
                    t: taggers
                });
                return;
        }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
            for(var temp = taggers; temp; temp = temp.t)x = temp.s(x);
            return x;
        }
        var map = isCmd ? _Platform_effectManagers[home].e : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || {
            i: _List_Nil,
            j: _List_Nil
        };
        isCmd ? effects.i = _List_Cons(newEffect, effects.i) : effects.j = _List_Cons(newEffect, effects.j);
        return effects;
    }
    // PORTS
    function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) _Debug_crash(3, name);
    }
    // OUTGOING PORTS
    function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            e: _Platform_outgoingPortMap,
            u: converter,
            a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap = F2(function(tagger, value) {
        return value;
    });
    function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        // CREATE MANAGER
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, cmdList, state) {
            for(; cmdList.b; cmdList = cmdList.b){
                // grab a separate reference to subs in case unsubscribe is called
                var currentSubs = subs;
                var value = _Json_unwrap(converter(cmdList.a));
                for(var i = 0; i < currentSubs.length; i++)currentSubs[i](value);
            }
            return init;
        });
        // PUBLIC API
        function subscribe(callback) {
            subs.push(callback);
        }
        function unsubscribe(callback) {
            // copy subs into a new array in case unsubscribe is called within a
            // subscribed callback
            subs = subs.slice();
            var index = subs.indexOf(callback);
            if (index >= 0) subs.splice(index, 1);
        }
        return {
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    }
    // INCOMING PORTS
    function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            f: _Platform_incomingPortMap,
            u: converter,
            a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap = F2(function(tagger, finalTagger) {
        return function(value) {
            return tagger(finalTagger(value));
        };
    });
    function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        // CREATE MANAGER
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, subList, state) {
            subs = subList;
            return init;
        });
        // PUBLIC API
        function send(incomingValue) {
            var result = A2(_Json_run, converter, _Json_wrap(incomingValue));
            $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
            var value = result.a;
            for(var temp = subs; temp.b; temp = temp.b)sendToApp(temp.a(value));
        }
        return {
            send: send
        };
    }
    // EXPORT ELM MODULES
    //
    // Have DEBUG and PROD versions so that we can (1) give nicer errors in
    // debug mode and (2) not pay for the bits needed for that in prod mode.
    //
    function _Platform_export_UNUSED(exports) {
        scope["Elm"] ? _Platform_mergeExportsProd(scope["Elm"], exports) : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsProd(obj, exports) {
        for(var name in exports)name in obj ? name == "init" ? _Debug_crash(6) : _Platform_mergeExportsProd(obj[name], exports[name]) : obj[name] = exports[name];
    }
    function _Platform_export(exports) {
        scope["Elm"] ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports) : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for(var name in exports)name in obj ? name == "init" ? _Debug_crash(6, moduleName) : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name]) : obj[name] = exports[name];
    }
    // HELPERS
    var _VirtualDom_divertHrefToApp;
    var _VirtualDom_doc = typeof document !== "undefined" ? document : {};
    function _VirtualDom_appendChild(parent, child) {
        parent.appendChild(child);
    }
    var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args) {
        // NOTE: this function needs _Platform_export available to work
        /**_UNUSED/
	var node = args['node'];
	//*/ /**/ var node = args && args["node"] ? args["node"] : _Debug_crash(0);
        //*/
        node.parentNode.replaceChild(_VirtualDom_render(virtualNode, function() {}), node);
        return {};
    });
    // TEXT
    function _VirtualDom_text(string) {
        return {
            $: 0,
            a: string
        };
    }
    // NODE
    var _VirtualDom_nodeNS = F2(function(namespace, tag) {
        return F2(function(factList, kidList) {
            for(var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b){
                var kid = kidList.a;
                descendantsCount += kid.b || 0;
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 1,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    });
    var _VirtualDom_node = _VirtualDom_nodeNS(undefined);
    // KEYED NODE
    var _VirtualDom_keyedNodeNS = F2(function(namespace, tag) {
        return F2(function(factList, kidList) {
            for(var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b){
                var kid = kidList.a;
                descendantsCount += kid.b.b || 0;
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 2,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    });
    var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);
    // CUSTOM
    function _VirtualDom_custom(factList, model, render, diff) {
        return {
            $: 3,
            d: _VirtualDom_organizeFacts(factList),
            g: model,
            h: render,
            i: diff
        };
    }
    // MAP
    var _VirtualDom_map = F2(function(tagger, node) {
        return {
            $: 4,
            j: tagger,
            k: node,
            b: 1 + (node.b || 0)
        };
    });
    // LAZY
    function _VirtualDom_thunk(refs, thunk) {
        return {
            $: 5,
            l: refs,
            m: thunk,
            k: undefined
        };
    }
    var _VirtualDom_lazy = F2(function(func, a) {
        return _VirtualDom_thunk([
            func,
            a
        ], function() {
            return func(a);
        });
    });
    var _VirtualDom_lazy2 = F3(function(func, a, b) {
        return _VirtualDom_thunk([
            func,
            a,
            b
        ], function() {
            return A2(func, a, b);
        });
    });
    var _VirtualDom_lazy3 = F4(function(func, a, b, c) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c
        ], function() {
            return A3(func, a, b, c);
        });
    });
    var _VirtualDom_lazy4 = F5(function(func, a, b, c, d) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d
        ], function() {
            return A4(func, a, b, c, d);
        });
    });
    var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e
        ], function() {
            return A5(func, a, b, c, d, e);
        });
    });
    var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f
        ], function() {
            return A6(func, a, b, c, d, e, f);
        });
    });
    var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f,
            g
        ], function() {
            return A7(func, a, b, c, d, e, f, g);
        });
    });
    var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h
        ], function() {
            return A8(func, a, b, c, d, e, f, g, h);
        });
    });
    // FACTS
    var _VirtualDom_on = F2(function(key, handler) {
        return {
            $: "a0",
            n: key,
            o: handler
        };
    });
    var _VirtualDom_style = F2(function(key, value) {
        return {
            $: "a1",
            n: key,
            o: value
        };
    });
    var _VirtualDom_property = F2(function(key, value) {
        return {
            $: "a2",
            n: key,
            o: value
        };
    });
    var _VirtualDom_attribute = F2(function(key, value) {
        return {
            $: "a3",
            n: key,
            o: value
        };
    });
    var _VirtualDom_attributeNS = F3(function(namespace, key, value) {
        return {
            $: "a4",
            n: key,
            o: {
                f: namespace,
                o: value
            }
        };
    });
    // XSS ATTACK VECTOR CHECKS
    //
    // For some reason, tabs can appear in href protocols and it still works.
    // So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
    // in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
    // so freaky.
    //
    // Pulling the regular expressions out to the top level gives a slight speed
    // boost in small benchmarks (4-10%) but hoisting values to reduce allocation
    // can be unpredictable in large programs where JIT may have a harder time with
    // functions are not fully self-contained. The benefit is more that the js and
    // js_html ones are so weird that I prefer to see them near each other.
    var _VirtualDom_RE_script = /^script$/i;
    var _VirtualDom_RE_on_formAction = /^(formAction$)/i;
    var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
    var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;
    function _VirtualDom_noScript(tag) {
        return _VirtualDom_RE_script.test(tag) ? "p" : tag;
    }
    function _VirtualDom_noOnOrFormAction(key) {
        return _VirtualDom_RE_on_formAction.test(key) ? "data-" + key : key;
    }
    function _VirtualDom_noInnerHtmlOrFormAction(key) {
        return key == "formAction" ? "data-" + key : key;
    }
    function _VirtualDom_noJavaScriptUri(value) {
        return _VirtualDom_RE_js.test(value) ? /**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
         : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlUri(value) {
        return _VirtualDom_RE_js_html.test(value) ? /**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
         : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlJson(value) {
        return typeof _Json_unwrap(value) === "string" && _VirtualDom_RE_js_html.test(_Json_unwrap(value)) ? _Json_wrap(/**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
        ) : value;
    }
    // MAP FACTS
    var _VirtualDom_mapAttribute = F2(function(func, attr) {
        return attr.$ === "a0" ? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o)) : attr;
    });
    function _VirtualDom_mapHandler(func, handler) {
        var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
        // 0 = Normal
        // 1 = MayStopPropagation
        // 2 = MayPreventDefault
        // 3 = Custom
        return {
            $: handler.$,
            a: !tag ? A2($elm$json$Json$Decode$map, func, handler.a) : A3($elm$json$Json$Decode$map2, tag < 3 ? _VirtualDom_mapEventTuple : _VirtualDom_mapEventRecord, $elm$json$Json$Decode$succeed(func), handler.a)
        };
    }
    var _VirtualDom_mapEventTuple = F2(function(func, tuple) {
        return _Utils_Tuple2(func(tuple.a), tuple.b);
    });
    var _VirtualDom_mapEventRecord = F2(function(func, record) {
        return {
            message: func(record.message),
            stopPropagation: record.stopPropagation,
            preventDefault: record.preventDefault
        };
    });
    // ORGANIZE FACTS
    function _VirtualDom_organizeFacts(factList) {
        for(var facts = {}; factList.b; factList = factList.b){
            var entry = factList.a;
            var tag = entry.$;
            var key = entry.n;
            var value = entry.o;
            if (tag === "a2") {
                key === "className" ? _VirtualDom_addClass(facts, key, _Json_unwrap(value)) : facts[key] = _Json_unwrap(value);
                continue;
            }
            var subFacts = facts[tag] || (facts[tag] = {});
            tag === "a3" && key === "class" ? _VirtualDom_addClass(subFacts, key, value) : subFacts[key] = value;
        }
        return facts;
    }
    function _VirtualDom_addClass(object, key, newClass) {
        var classes = object[key];
        object[key] = classes ? classes + " " + newClass : newClass;
    }
    // RENDER
    function _VirtualDom_render(vNode, eventNode) {
        var tag = vNode.$;
        if (tag === 5) return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
        if (tag === 0) {
            var n = _VirtualDom_doc.createTextNode(vNode.a);
            n.created_by_elm = true;
            return n;
        }
        if (tag === 4) {
            var subNode = vNode.k;
            var tagger = vNode.j;
            while(subNode.$ === 4){
                typeof tagger !== "object" ? tagger = [
                    tagger,
                    subNode.j
                ] : tagger.push(subNode.j);
                subNode = subNode.k;
            }
            var subEventRoot = {
                j: tagger,
                p: eventNode
            };
            var domNode = _VirtualDom_render(subNode, subEventRoot);
            domNode.elm_event_node_ref = subEventRoot;
            return domNode;
        }
        if (tag === 3) {
            var domNode = vNode.h(vNode.g);
            _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
            return domNode;
        }
        // at this point `tag` must be 1 or 2
        var domNode = vNode.f ? _VirtualDom_doc.createElementNS(vNode.f, vNode.c) : _VirtualDom_doc.createElement(vNode.c);
        domNode.created_by_elm = true;
        if (_VirtualDom_divertHrefToApp && vNode.c == "a") domNode.addEventListener("click", _VirtualDom_divertHrefToApp(domNode));
        _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
        for(var kids = vNode.e, i = 0; i < kids.length; i++)_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
        return domNode;
    }
    // APPLY FACTS
    function _VirtualDom_applyFacts(domNode, eventNode, facts) {
        for(var key in facts){
            var value = facts[key];
            key === "a1" ? _VirtualDom_applyStyles(domNode, value) : key === "a0" ? _VirtualDom_applyEvents(domNode, eventNode, value) : key === "a3" ? _VirtualDom_applyAttrs(domNode, value) : key === "a4" ? _VirtualDom_applyAttrsNS(domNode, value) : (key !== "value" && key !== "checked" || domNode[key] !== value) && (domNode[key] = value);
        }
    }
    // APPLY STYLES
    function _VirtualDom_applyStyles(domNode, styles) {
        var domNodeStyle = domNode.style;
        for(var key in styles)domNodeStyle[key] = styles[key];
    }
    // APPLY ATTRS
    function _VirtualDom_applyAttrs(domNode, attrs) {
        for(var key in attrs){
            var value = attrs[key];
            typeof value !== "undefined" ? domNode.setAttribute(key, value) : domNode.removeAttribute(key);
        }
    }
    // APPLY NAMESPACED ATTRS
    function _VirtualDom_applyAttrsNS(domNode, nsAttrs) {
        for(var key in nsAttrs){
            var pair = nsAttrs[key];
            var namespace = pair.f;
            var value = pair.o;
            typeof value !== "undefined" ? domNode.setAttributeNS(namespace, key, value) : domNode.removeAttributeNS(namespace, key);
        }
    }
    // APPLY EVENTS
    function _VirtualDom_applyEvents(domNode, eventNode, events) {
        var allCallbacks = domNode.elmFs || (domNode.elmFs = {});
        for(var key in events){
            var newHandler = events[key];
            var oldCallback = allCallbacks[key];
            if (!newHandler) {
                domNode.removeEventListener(key, oldCallback);
                allCallbacks[key] = undefined;
                continue;
            }
            if (oldCallback) {
                var oldHandler = oldCallback.q;
                if (oldHandler.$ === newHandler.$) {
                    oldCallback.q = newHandler;
                    continue;
                }
                domNode.removeEventListener(key, oldCallback);
            }
            oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
            domNode.addEventListener(key, oldCallback, _VirtualDom_passiveSupported && {
                passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2
            });
            allCallbacks[key] = oldCallback;
        }
    }
    // PASSIVE EVENTS
    var _VirtualDom_passiveSupported;
    try {
        window.addEventListener("t", null, Object.defineProperty({}, "passive", {
            get: function() {
                _VirtualDom_passiveSupported = true;
            }
        }));
    } catch (e) {}
    // EVENT HANDLERS
    function _VirtualDom_makeCallback(eventNode, initialHandler) {
        function callback(event) {
            var handler = callback.q;
            var result = _Json_runHelp(handler.a, event);
            if (!$elm$core$Result$isOk(result)) return;
            var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
            // 0 = Normal
            // 1 = MayStopPropagation
            // 2 = MayPreventDefault
            // 3 = Custom
            var value = result.a;
            var message = !tag ? value : tag < 3 ? value.a : value.message;
            var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
            var currentEventNode = (stopPropagation && event.stopPropagation(), (tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(), eventNode);
            var tagger;
            var i;
            while(tagger = currentEventNode.j){
                if (typeof tagger == "function") message = tagger(message);
                else for(var i = tagger.length; i--;)message = tagger[i](message);
                currentEventNode = currentEventNode.p;
            }
            currentEventNode(message, stopPropagation); // stopPropagation implies isSync
        }
        callback.q = initialHandler;
        return callback;
    }
    function _VirtualDom_equalEvents(x, y) {
        return x.$ == y.$ && _Json_equality(x.a, y.a);
    }
    // DIFF
    // TODO: Should we do patches like in iOS?
    //
    // type Patch
    //   = At Int Patch
    //   | Batch (List Patch)
    //   | Change ...
    //
    // How could it not be better?
    //
    function _VirtualDom_diff(x, y) {
        var patches = [];
        _VirtualDom_diffHelp(x, y, patches, 0);
        return patches;
    }
    function _VirtualDom_pushPatch(patches, type, index, data) {
        var patch = {
            $: type,
            r: index,
            s: data,
            t: undefined,
            u: undefined
        };
        patches.push(patch);
        return patch;
    }
    function _VirtualDom_diffHelp(x, y, patches, index) {
        if (x === y) return;
        var xType = x.$;
        var yType = y.$;
        // Bail if you run into different types of nodes. Implies that the
        // structure has changed significantly and it's not worth a diff.
        if (xType !== yType) {
            if (xType === 1 && yType === 2) {
                y = _VirtualDom_dekey(y);
                yType = 1;
            } else {
                _VirtualDom_pushPatch(patches, 0, index, y);
                return;
            }
        }
        // Now we know that both nodes are the same $.
        switch(yType){
            case 5:
                var xRefs = x.l;
                var yRefs = y.l;
                var i = xRefs.length;
                var same = i === yRefs.length;
                while(same && i--)same = xRefs[i] === yRefs[i];
                if (same) {
                    y.k = x.k;
                    return;
                }
                y.k = y.m();
                var subPatches = [];
                _VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
                subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
                return;
            case 4:
                // gather nested taggers
                var xTaggers = x.j;
                var yTaggers = y.j;
                var nesting = false;
                var xSubNode = x.k;
                while(xSubNode.$ === 4){
                    nesting = true;
                    typeof xTaggers !== "object" ? xTaggers = [
                        xTaggers,
                        xSubNode.j
                    ] : xTaggers.push(xSubNode.j);
                    xSubNode = xSubNode.k;
                }
                var ySubNode = y.k;
                while(ySubNode.$ === 4){
                    nesting = true;
                    typeof yTaggers !== "object" ? yTaggers = [
                        yTaggers,
                        ySubNode.j
                    ] : yTaggers.push(ySubNode.j);
                    ySubNode = ySubNode.k;
                }
                // Just bail if different numbers of taggers. This implies the
                // structure of the virtual DOM has changed.
                if (nesting && xTaggers.length !== yTaggers.length) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                // check if taggers are "the same"
                if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers) _VirtualDom_pushPatch(patches, 2, index, yTaggers);
                // diff everything below the taggers
                _VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
                return;
            case 0:
                if (x.a !== y.a) _VirtualDom_pushPatch(patches, 3, index, y.a);
                return;
            case 1:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
                return;
            case 2:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
                return;
            case 3:
                if (x.h !== y.h) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
                factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
                var patch = y.i(x.g, y.g);
                patch && _VirtualDom_pushPatch(patches, 5, index, patch);
                return;
        }
    }
    // assumes the incoming arrays are the same length
    function _VirtualDom_pairwiseRefEqual(as, bs) {
        for(var i = 0; i < as.length; i++){
            if (as[i] !== bs[i]) return false;
        }
        return true;
    }
    function _VirtualDom_diffNodes(x, y, patches, index, diffKids) {
        // Bail if obvious indicators have changed. Implies more serious
        // structural changes such that it's not worth it to diff.
        if (x.c !== y.c || x.f !== y.f) {
            _VirtualDom_pushPatch(patches, 0, index, y);
            return;
        }
        var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
        factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
        diffKids(x, y, patches, index);
    }
    // DIFF FACTS
    // TODO Instead of creating a new diff object, it's possible to just test if
    // there *is* a diff. During the actual patch, do the diff again and make the
    // modifications directly. This way, there's no new allocations. Worth it?
    function _VirtualDom_diffFacts(x, y, category) {
        var diff;
        // look for changes and removals
        for(var xKey in x){
            if (xKey === "a1" || xKey === "a0" || xKey === "a3" || xKey === "a4") {
                var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
                if (subDiff) {
                    diff = diff || {};
                    diff[xKey] = subDiff;
                }
                continue;
            }
            // remove if not in the new facts
            if (!(xKey in y)) {
                diff = diff || {};
                diff[xKey] = !category ? typeof x[xKey] === "string" ? "" : null : category === "a1" ? "" : category === "a0" || category === "a3" ? undefined : {
                    f: x[xKey].f,
                    o: undefined
                };
                continue;
            }
            var xValue = x[xKey];
            var yValue = y[xKey];
            // reference equal, so don't worry about it
            if (xValue === yValue && xKey !== "value" && xKey !== "checked" || category === "a0" && _VirtualDom_equalEvents(xValue, yValue)) continue;
            diff = diff || {};
            diff[xKey] = yValue;
        }
        // add new stuff
        for(var yKey in y)if (!(yKey in x)) {
            diff = diff || {};
            diff[yKey] = y[yKey];
        }
        return diff;
    }
    // DIFF KIDS
    function _VirtualDom_diffKids(xParent, yParent, patches, index) {
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        // FIGURE OUT IF THERE ARE INSERTS OR REMOVALS
        if (xLen > yLen) _VirtualDom_pushPatch(patches, 6, index, {
            v: yLen,
            i: xLen - yLen
        });
        else if (xLen < yLen) _VirtualDom_pushPatch(patches, 7, index, {
            v: xLen,
            e: yKids
        });
        // PAIRWISE DIFF EVERYTHING ELSE
        for(var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++){
            var xKid = xKids[i];
            _VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
            index += xKid.b || 0;
        }
    }
    // KEYED DIFF
    function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex) {
        var localPatches = [];
        var changes = {}; // Dict String Entry
        var inserts = []; // Array { index : Int, entry : Entry }
        // type Entry = { tag : String, vnode : VNode, index : Int, data : _ }
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        var xIndex = 0;
        var yIndex = 0;
        var index = rootIndex;
        while(xIndex < xLen && yIndex < yLen){
            var x = xKids[xIndex];
            var y = yKids[yIndex];
            var xKey = x.a;
            var yKey = y.a;
            var xNode = x.b;
            var yNode = y.b;
            var newMatch = undefined;
            var oldMatch = undefined;
            // check if keys match
            if (xKey === yKey) {
                index++;
                _VirtualDom_diffHelp(xNode, yNode, localPatches, index);
                index += xNode.b || 0;
                xIndex++;
                yIndex++;
                continue;
            }
            // look ahead 1 to detect insertions and removals.
            var xNext = xKids[xIndex + 1];
            var yNext = yKids[yIndex + 1];
            if (xNext) {
                var xNextKey = xNext.a;
                var xNextNode = xNext.b;
                oldMatch = yKey === xNextKey;
            }
            if (yNext) {
                var yNextKey = yNext.a;
                var yNextNode = yNext.b;
                newMatch = xKey === yNextKey;
            }
            // swap x and y
            if (newMatch && oldMatch) {
                index++;
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                _VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            // insert y
            if (newMatch) {
                index++;
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                index += xNode.b || 0;
                xIndex += 1;
                yIndex += 2;
                continue;
            }
            // remove x
            if (oldMatch) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 1;
                continue;
            }
            // remove x, insert y
            if (xNext && xNextKey === yNextKey) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            break;
        }
        // eat up any remaining nodes with removeNode and insertNode
        while(xIndex < xLen){
            index++;
            var x = xKids[xIndex];
            var xNode = x.b;
            _VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
            index += xNode.b || 0;
            xIndex++;
        }
        while(yIndex < yLen){
            var endInserts = endInserts || [];
            var y = yKids[yIndex];
            _VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
            yIndex++;
        }
        if (localPatches.length > 0 || inserts.length > 0 || endInserts) _VirtualDom_pushPatch(patches, 8, rootIndex, {
            w: localPatches,
            x: inserts,
            y: endInserts
        });
    }
    // CHANGES FROM KEYED DIFF
    var _VirtualDom_POSTFIX = "_elmW6BL";
    function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts) {
        var entry = changes[key];
        // never seen this key before
        if (!entry) {
            entry = {
                c: 0,
                z: vnode,
                r: yIndex,
                s: undefined
            };
            inserts.push({
                r: yIndex,
                A: entry
            });
            changes[key] = entry;
            return;
        }
        // this key was removed earlier, a match!
        if (entry.c === 1) {
            inserts.push({
                r: yIndex,
                A: entry
            });
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
            entry.r = yIndex;
            entry.s.s = {
                w: subPatches,
                A: entry
            };
            return;
        }
        // this key has already been inserted or moved, a duplicate!
        _VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
    }
    function _VirtualDom_removeNode(changes, localPatches, key, vnode, index) {
        var entry = changes[key];
        // never seen this key before
        if (!entry) {
            var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);
            changes[key] = {
                c: 1,
                z: vnode,
                r: index,
                s: patch
            };
            return;
        }
        // this key was inserted earlier, a match!
        if (entry.c === 0) {
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(vnode, entry.z, subPatches, index);
            _VirtualDom_pushPatch(localPatches, 9, index, {
                w: subPatches,
                A: entry
            });
            return;
        }
        // this key has already been removed or moved, a duplicate!
        _VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
    }
    // ADD DOM NODES
    //
    // Each DOM node has an "index" assigned in order of traversal. It is important
    // to minimize our crawl over the actual DOM, so these indexes (along with the
    // descendantsCount of virtual nodes) let us skip touching entire subtrees of
    // the DOM if we know there are no patches there.
    function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode) {
        _VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
    }
    // assumes `patches` is non-empty and indexes increase monotonically.
    function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {
        var patch = patches[i];
        var index = patch.r;
        while(index === low){
            var patchType = patch.$;
            if (patchType === 1) _VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
            else if (patchType === 8) {
                patch.t = domNode;
                patch.u = eventNode;
                var subPatches = patch.s.w;
                if (subPatches.length > 0) _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
            } else if (patchType === 9) {
                patch.t = domNode;
                patch.u = eventNode;
                var data = patch.s;
                if (data) {
                    data.A.s = domNode;
                    var subPatches = data.w;
                    if (subPatches.length > 0) _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                }
            } else {
                patch.t = domNode;
                patch.u = eventNode;
            }
            i++;
            if (!(patch = patches[i]) || (index = patch.r) > high) return i;
        }
        var tag = vNode.$;
        if (tag === 4) {
            var subNode = vNode.k;
            while(subNode.$ === 4)subNode = subNode.k;
            return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
        }
        // tag must be 1 or 2 at this point
        var vKids = vNode.e;
        var childNodes = domNode.childNodes;
        for(var j = 0, k = 0; j < Math.max(vKids.length, childNodes.length); j++, k++){
            low++;
            var vKid = tag === 1 ? vKids[j] : vKids[j].b;
            var nextLow = low + (vKid.b || 0);
            // 1. if unknown nodes have been inserted
            if (childNodes.length > vKids.length) // skip them
            while(!childNodes[k].created_by_elm){
                console.log("INFO 1: skipping DOM");
                k++;
            }
            // 2. if existing node has been removed
            if (childNodes.length < vKids.length) {
                if (childNodes[k]) {
                    // replace tha node using the old vdom
                    console.log("WARN 1: redrawing DOM");
                    _VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode);
                } else {
                    console.log("WARN 2: redrawing DOM");
                    domNode.appendChild(_VirtualDom_render(vKids[j], eventNode));
                }
            }
            // 3. if existing node has been replaced with unknown node
            if (childNodes.length === vKids.length) {
                if (!childNodes[k].created_by_elm) {
                    // replace tha node using the old vdom
                    console.log("WARN 3: redrawing DOM");
                    _VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode);
                }
            }
            // 4. this is needed for some edge cases
            if (vKids[j].$ === 1 && (childNodes[k].tagName || "").toLowerCase() !== vKids[j].c.toLowerCase()) {
                console.log("WARN 4: redrawing DOM");
                _VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode);
            }
            if (low <= index && index <= nextLow) {
                i = _VirtualDom_addDomNodesHelp(childNodes[k], vKid, patches, i, low, nextLow, eventNode);
                if (!(patch = patches[i]) || (index = patch.r) > high) return i;
            }
            low = nextLow;
        }
        return i;
    }
    // APPLY PATCHES
    function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {
        if (patches.length === 0) return rootDomNode;
        _VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
        return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
    }
    function _VirtualDom_applyPatchesHelp(rootDomNode, patches) {
        for(var i = 0; i < patches.length; i++){
            var patch = patches[i];
            var localDomNode = patch.t;
            var newNode = _VirtualDom_applyPatch(localDomNode, patch);
            if (localDomNode === rootDomNode) rootDomNode = newNode;
        }
        return rootDomNode;
    }
    function _VirtualDom_applyPatch(domNode, patch) {
        switch(patch.$){
            case 0:
                return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);
            case 4:
                _VirtualDom_applyFacts(domNode, patch.u, patch.s);
                return domNode;
            case 3:
                domNode.replaceData(0, domNode.length, patch.s);
                return domNode;
            case 1:
                return _VirtualDom_applyPatchesHelp(domNode, patch.s);
            case 2:
                if (domNode.elm_event_node_ref) domNode.elm_event_node_ref.j = patch.s;
                else domNode.elm_event_node_ref = {
                    j: patch.s,
                    p: patch.u
                };
                return domNode;
            case 6:
                var data = patch.s;
                // patch for extension
                if (domNode.childNodes.length !== data.i + data.v) {
                    console.log("INFO 0: using another logic");
                    var removed = 0;
                    var index = domNode.childNodes.length - 1;
                    while(removed < data.i){
                        var childNode = domNode.childNodes[index];
                        if (childNode.created_by_elm) {
                            domNode.removeChild(childNode);
                            removed++;
                        }
                        index--;
                    }
                    return domNode;
                }
                for(var i = 0; i < data.i; i++)domNode.removeChild(domNode.childNodes[data.v]);
                return domNode;
            case 7:
                var data = patch.s;
                var kids = data.e;
                var i = data.v;
                var theEnd = domNode.childNodes[i];
                for(; i < kids.length; i++)domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
                return domNode;
            case 9:
                var data = patch.s;
                if (!data) {
                    domNode.parentNode.removeChild(domNode);
                    return domNode;
                }
                var entry = data.A;
                if (typeof entry.r !== "undefined") domNode.parentNode.removeChild(domNode);
                entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
                return domNode;
            case 8:
                return _VirtualDom_applyPatchReorder(domNode, patch);
            case 5:
                return patch.s(domNode);
            default:
                _Debug_crash(10); // 'Ran into an unknown patch!'
        }
    }
    function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode) {
        var parentNode = domNode.parentNode;
        var newNode = _VirtualDom_render(vNode, eventNode);
        if (!newNode.elm_event_node_ref) newNode.elm_event_node_ref = domNode.elm_event_node_ref;
        if (parentNode && newNode !== domNode) parentNode.replaceChild(newNode, domNode);
        return newNode;
    }
    function _VirtualDom_applyPatchReorder(domNode, patch) {
        var data = patch.s;
        // remove end inserts
        var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);
        // removals
        domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);
        // inserts
        var inserts = data.x;
        for(var i = 0; i < inserts.length; i++){
            var insert = inserts[i];
            var entry = insert.A;
            var node = entry.c === 2 ? entry.s : _VirtualDom_render(entry.z, patch.u);
            domNode.insertBefore(node, domNode.childNodes[insert.r]);
        }
        // add end inserts
        if (frag) _VirtualDom_appendChild(domNode, frag);
        return domNode;
    }
    function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch) {
        if (!endInserts) return;
        var frag = _VirtualDom_doc.createDocumentFragment();
        for(var i = 0; i < endInserts.length; i++){
            var insert = endInserts[i];
            var entry = insert.A;
            _VirtualDom_appendChild(frag, entry.c === 2 ? entry.s : _VirtualDom_render(entry.z, patch.u));
        }
        return frag;
    }
    function _VirtualDom_virtualize(node) {
        node.created_by_elm = true;
        // TEXT NODES
        if (node.nodeType === 3) return _VirtualDom_text(node.textContent);
        // WEIRD NODES
        if (node.nodeType !== 1) return _VirtualDom_text("");
        // ELEMENT NODES
        var attrList = _List_Nil;
        var attrs = node.attributes;
        for(var i = attrs.length; i--;){
            var attr = attrs[i];
            var name = attr.name;
            var value = attr.value;
            attrList = _List_Cons(A2(_VirtualDom_attribute, name, value), attrList);
        }
        var tag = node.tagName.toLowerCase();
        var kidList = _List_Nil;
        var kids = node.childNodes;
        for(var i = kids.length; i--;)kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
        return A3(_VirtualDom_node, tag, attrList, kidList);
    }
    function _VirtualDom_dekey(keyedNode) {
        var keyedKids = keyedNode.e;
        var len = keyedKids.length;
        var kids = new Array(len);
        for(var i = 0; i < len; i++)kids[i] = keyedKids[i].b;
        return {
            $: 1,
            c: keyedNode.c,
            d: keyedNode.d,
            e: kids,
            f: keyedNode.f,
            b: keyedNode.b
        };
    }
    var _Bitwise_and = F2(function(a, b) {
        return a & b;
    });
    var _Bitwise_or = F2(function(a, b) {
        return a | b;
    });
    var _Bitwise_xor = F2(function(a, b) {
        return a ^ b;
    });
    function _Bitwise_complement(a) {
        return ~a;
    }
    var _Bitwise_shiftLeftBy = F2(function(offset, a) {
        return a << offset;
    });
    var _Bitwise_shiftRightBy = F2(function(offset, a) {
        return a >> offset;
    });
    var _Bitwise_shiftRightZfBy = F2(function(offset, a) {
        return a >>> offset;
    });
    // HELPERS
    function _Debugger_unsafeCoerce(value) {
        return value;
    }
    // PROGRAMS
    var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init), $elm$browser$Debugger$Main$wrapUpdate(impl.update), $elm$browser$Debugger$Main$wrapSubs(impl.subscriptions), function(sendToApp, initialModel) {
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var domNode = args && args["node"] ? args["node"] : _Debug_crash(0);
            var currNode = _VirtualDom_virtualize(domNode);
            var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
            var currPopout;
            var cornerNode = _VirtualDom_doc.createElement("div");
            domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
            var cornerCurr = _VirtualDom_virtualize(cornerNode);
            initialModel.popout.a = sendToApp;
            return _Browser_makeAnimator(initialModel, function(model) {
                var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
                var patches = _VirtualDom_diff(currNode, nextNode);
                domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
                currNode = nextNode;
                // update blocker
                var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
                _Debugger_updateBlocker(currBlocker, nextBlocker);
                currBlocker = nextBlocker;
                // view corner
                var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
                var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
                cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
                cornerCurr = cornerNext;
                if (!model.popout.b) {
                    currPopout = undefined;
                    return;
                }
                // view popout
                _VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
                currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
                var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
                var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
                _VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
                currPopout = nextPopout;
                _VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
            });
        });
    });
    var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init), $elm$browser$Debugger$Main$wrapUpdate(impl.update), $elm$browser$Debugger$Main$wrapSubs(impl.subscriptions), function(sendToApp, initialModel) {
            var divertHrefToApp = impl.setup && impl.setup(function(x) {
                return sendToApp($elm$browser$Debugger$Main$UserMsg(x));
            });
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var bodyNode = _VirtualDom_doc.body;
            var currNode = _VirtualDom_virtualize(bodyNode);
            var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
            var currPopout;
            initialModel.popout.a = sendToApp;
            return _Browser_makeAnimator(initialModel, function(model) {
                _VirtualDom_divertHrefToApp = divertHrefToApp;
                var doc = view($elm$browser$Debugger$Main$getUserModel(model));
                var nextNode = _VirtualDom_node("body")(_List_Nil)(_Utils_ap(A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body), _List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)));
                var patches = _VirtualDom_diff(currNode, nextNode);
                bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
                currNode = nextNode;
                _VirtualDom_divertHrefToApp = 0;
                title !== doc.title && (_VirtualDom_doc.title = title = doc.title);
                // update blocker
                var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
                _Debugger_updateBlocker(currBlocker, nextBlocker);
                currBlocker = nextBlocker;
                // view popout
                if (!model.popout.b) {
                    currPopout = undefined;
                    return;
                }
                _VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
                currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
                var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
                var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
                _VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
                currPopout = nextPopout;
                _VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
            });
        });
    });
    function _Debugger_popout() {
        return {
            b: undefined,
            a: undefined
        };
    }
    function _Debugger_isOpen(popout) {
        return !!popout.b;
    }
    function _Debugger_open(popout) {
        return _Scheduler_binding(function(callback) {
            _Debugger_openWindow(popout);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    function _Debugger_openWindow(popout) {
        var w = $elm$browser$Debugger$Main$initialWindowWidth, h = $elm$browser$Debugger$Main$initialWindowHeight, x = screen.width - w, y = screen.height - h;
        var debuggerWindow = window.open("", "", "width=" + w + ",height=" + h + ",left=" + x + ",top=" + y);
        var doc = debuggerWindow.document;
        doc.title = "Elm Debugger";
        // handle arrow keys
        doc.addEventListener("keydown", function(event) {
            event.metaKey && event.which === 82 && window.location.reload();
            event.key === "ArrowUp" && (popout.a($elm$browser$Debugger$Main$Up), event.preventDefault());
            event.key === "ArrowDown" && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
        });
        // handle window close
        window.addEventListener("unload", close);
        debuggerWindow.addEventListener("unload", function() {
            popout.b = undefined;
            popout.a($elm$browser$Debugger$Main$NoOp);
            window.removeEventListener("unload", close);
        });
        function close() {
            popout.b = undefined;
            popout.a($elm$browser$Debugger$Main$NoOp);
            debuggerWindow.close();
        }
        // register new window
        popout.b = doc;
    }
    // SCROLL
    function _Debugger_scroll(popout) {
        return _Scheduler_binding(function(callback) {
            if (popout.b) {
                var msgs = popout.b.getElementById("elm-debugger-sidebar");
                if (msgs && msgs.scrollTop !== 0) msgs.scrollTop = 0;
            }
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    var _Debugger_scrollTo = F2(function(id, popout) {
        return _Scheduler_binding(function(callback) {
            if (popout.b) {
                var msg = popout.b.getElementById(id);
                if (msg) msg.scrollIntoView(false);
            }
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    // UPLOAD
    function _Debugger_upload(popout) {
        return _Scheduler_binding(function(callback) {
            var doc = popout.b || document;
            var element = doc.createElement("input");
            element.setAttribute("type", "file");
            element.setAttribute("accept", "text/json");
            element.style.display = "none";
            element.addEventListener("change", function(event) {
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    callback(_Scheduler_succeed(e.target.result));
                };
                fileReader.readAsText(event.target.files[0]);
                doc.body.removeChild(element);
            });
            doc.body.appendChild(element);
            element.click();
        });
    }
    // DOWNLOAD
    var _Debugger_download = F2(function(historyLength, json) {
        return _Scheduler_binding(function(callback) {
            var fileName = "history-" + historyLength + ".txt";
            var jsonString = JSON.stringify(json);
            var mime = "text/plain;charset=utf-8";
            var done = _Scheduler_succeed(_Utils_Tuple0);
            // for IE10+
            if (navigator.msSaveBlob) {
                navigator.msSaveBlob(new Blob([
                    jsonString
                ], {
                    type: mime
                }), fileName);
                return callback(done);
            }
            // for HTML5
            var element = document.createElement("a");
            element.setAttribute("href", "data:" + mime + "," + encodeURIComponent(jsonString));
            element.setAttribute("download", fileName);
            element.style.display = "none";
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
            callback(done);
        });
    });
    // POPOUT CONTENT
    function _Debugger_messageToString(value) {
        if (typeof value === "boolean") return value ? "True" : "False";
        if (typeof value === "number") return value + "";
        if (typeof value === "string") return '"' + _Debugger_addSlashes(value, false) + '"';
        if (value instanceof String) return "'" + _Debugger_addSlashes(value, true) + "'";
        if (typeof value !== "object" || value === null || !("$" in value)) return "…";
        if (typeof value.$ === "number") return "…";
        var code = value.$.charCodeAt(0);
        if (code === 0x23 /* # */  || /* a */ 0x61 <= code && code <= 0x7A /* z */ ) return "…";
        if ([
            "Array_elm_builtin",
            "Set_elm_builtin",
            "RBNode_elm_builtin",
            "RBEmpty_elm_builtin"
        ].indexOf(value.$) >= 0) return "…";
        var keys = Object.keys(value);
        switch(keys.length){
            case 1:
                return value.$;
            case 2:
                return value.$ + " " + _Debugger_messageToString(value.a);
            default:
                return value.$ + " … " + _Debugger_messageToString(value[keys[keys.length - 1]]);
        }
    }
    function _Debugger_init(value) {
        if (typeof value === "boolean") return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? "True" : "False"), true, _List_Nil);
        if (typeof value === "number") return $elm$browser$Debugger$Expando$Primitive(value + "");
        if (typeof value === "string") return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
        if (value instanceof String) return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (tag === "::" || tag === "[]") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true, A2($elm$core$List$map, _Debugger_init, value));
            if (tag === "Set_elm_builtin") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true, A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value));
            if (tag === "RBNode_elm_builtin" || tag == "RBEmpty_elm_builtin") return A2($elm$browser$Debugger$Expando$Dictionary, true, A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value));
            if (tag === "Array_elm_builtin") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true, A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value));
            if (typeof tag === "number") return $elm$browser$Debugger$Expando$Primitive("<internals>");
            var char = tag.charCodeAt(0);
            if (char === 35 || 65 <= char && char <= 90) {
                var list = _List_Nil;
                for(var i in value){
                    if (i === "$") continue;
                    list = _List_Cons(_Debugger_init(value[i]), list);
                }
                return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
            }
            return $elm$browser$Debugger$Expando$Primitive("<internals>");
        }
        if (typeof value === "object") {
            var dict = $elm$core$Dict$empty;
            for(var i in value)dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
            return A2($elm$browser$Debugger$Expando$Record, true, dict);
        }
        return $elm$browser$Debugger$Expando$Primitive("<internals>");
    }
    var _Debugger_initCons = F2(function initConsHelp(value, list) {
        return _List_Cons(_Debugger_init(value), list);
    });
    var _Debugger_initKeyValueCons = F3(function(key, value, list) {
        return _List_Cons(_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)), list);
    });
    function _Debugger_addSlashes(str, isChar) {
        var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
        if (isChar) return s.replace(/\'/g, "\\'");
        else return s.replace(/\"/g, '\\"');
    }
    // BLOCK EVENTS
    function _Debugger_updateBlocker(oldBlocker, newBlocker) {
        if (oldBlocker === newBlocker) return;
        var oldEvents = _Debugger_blockerToEvents(oldBlocker);
        var newEvents = _Debugger_blockerToEvents(newBlocker);
        // remove old blockers
        for(var i = 0; i < oldEvents.length; i++)document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
        // add new blockers
        for(var i = 0; i < newEvents.length; i++)document.addEventListener(newEvents[i], _Debugger_blocker, true);
    }
    function _Debugger_blocker(event) {
        if (event.type === "keydown" && event.metaKey && event.which === 82) return;
        var isScroll = event.type === "scroll" || event.type === "wheel";
        for(var node = event.target; node; node = node.parentNode){
            if (isScroll ? node.id === "elm-debugger-details" : node.id === "elm-debugger-overlay") return;
        }
        event.stopPropagation();
        event.preventDefault();
    }
    function _Debugger_blockerToEvents(blocker) {
        return blocker === $elm$browser$Debugger$Overlay$BlockNone ? [] : blocker === $elm$browser$Debugger$Overlay$BlockMost ? _Debugger_mostEvents : _Debugger_allEvents;
    }
    var _Debugger_mostEvents = [
        "click",
        "dblclick",
        "mousemove",
        "mouseup",
        "mousedown",
        "mouseenter",
        "mouseleave",
        "touchstart",
        "touchend",
        "touchcancel",
        "touchmove",
        "pointerdown",
        "pointerup",
        "pointerover",
        "pointerout",
        "pointerenter",
        "pointerleave",
        "pointermove",
        "pointercancel",
        "dragstart",
        "drag",
        "dragend",
        "dragenter",
        "dragover",
        "dragleave",
        "drop",
        "keyup",
        "keydown",
        "keypress",
        "input",
        "change",
        "focus",
        "blur"
    ];
    var _Debugger_allEvents = _Debugger_mostEvents.concat("wheel", "scroll");
    // ELEMENT
    var _Debugger_element;
    var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function(sendToApp, initialModel) {
            var view = impl.view;
            /**_UNUSED/
			var domNode = args['node'];
			//*/ /**/ var domNode = args && args["node"] ? args["node"] : _Debug_crash(0);
            //*/
            var currNode = _VirtualDom_virtualize(domNode);
            return _Browser_makeAnimator(initialModel, function(model) {
                var nextNode = view(model);
                var patches = _VirtualDom_diff(currNode, nextNode);
                domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
                currNode = nextNode;
            });
        });
    });
    // DOCUMENT
    var _Debugger_document;
    var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function(sendToApp, initialModel) {
            var divertHrefToApp = impl.setup && impl.setup(sendToApp);
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var bodyNode = _VirtualDom_doc.body;
            var currNode = _VirtualDom_virtualize(bodyNode);
            return _Browser_makeAnimator(initialModel, function(model) {
                _VirtualDom_divertHrefToApp = divertHrefToApp;
                var doc = view(model);
                var nextNode = _VirtualDom_node("body")(_List_Nil)(doc.body);
                var patches = _VirtualDom_diff(currNode, nextNode);
                bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
                currNode = nextNode;
                _VirtualDom_divertHrefToApp = 0;
                title !== doc.title && (_VirtualDom_doc.title = title = doc.title);
            });
        });
    });
    // ANIMATION
    var _Browser_cancelAnimationFrame = typeof cancelAnimationFrame !== "undefined" ? cancelAnimationFrame : function(id) {
        clearTimeout(id);
    };
    var _Browser_requestAnimationFrame = typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : function(callback) {
        return setTimeout(callback, 1000 / 60);
    };
    function _Browser_makeAnimator(model, draw) {
        draw(model);
        var state = 0;
        function updateIfNeeded() {
            state = state === 1 ? 0 : (_Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1);
        }
        return function(nextModel, isSync) {
            model = nextModel;
            isSync ? (draw(model), state === 2 && (state = 1)) : (state === 0 && _Browser_requestAnimationFrame(updateIfNeeded), state = 2);
        };
    }
    // APPLICATION
    function _Browser_application(impl) {
        var onUrlChange = impl.onUrlChange;
        var onUrlRequest = impl.onUrlRequest;
        var key = function() {
            key.a(onUrlChange(_Browser_getUrl()));
        };
        key["elm-hot-nav-key"] = true;
        return _Browser_document({
            setup: function(sendToApp) {
                key.a = sendToApp;
                _Browser_window.addEventListener("popstate", key);
                _Browser_window.navigator.userAgent.indexOf("Trident") < 0 || _Browser_window.addEventListener("hashchange", key);
                return F2(function(domNode, event) {
                    if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute("download")) {
                        event.preventDefault();
                        var href = domNode.href;
                        var curr = _Browser_getUrl();
                        var next = $elm$url$Url$fromString(href).a;
                        sendToApp(onUrlRequest(next && curr.protocol === next.protocol && curr.host === next.host && curr.port_.a === next.port_.a ? $elm$browser$Browser$Internal(next) : $elm$browser$Browser$External(href)));
                    }
                });
            },
            init: function(flags) {
                return A3(impl.init, flags, _Browser_getUrl(), key);
            },
            view: impl.view,
            update: impl.update,
            subscriptions: impl.subscriptions
        });
    }
    function _Browser_getUrl() {
        return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
    }
    var _Browser_go = F2(function(key, n) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            n && history.go(n);
            key();
        }));
    });
    var _Browser_pushUrl = F2(function(key, url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            history.pushState({}, "", url);
            key();
        }));
    });
    var _Browser_replaceUrl = F2(function(key, url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            history.replaceState({}, "", url);
            key();
        }));
    });
    // GLOBAL EVENTS
    var _Browser_fakeNode = {
        addEventListener: function() {},
        removeEventListener: function() {}
    };
    var _Browser_doc = typeof document !== "undefined" ? document : _Browser_fakeNode;
    var _Browser_window = typeof window !== "undefined" ? window : _Browser_fakeNode;
    var _Browser_on = F3(function(node, eventName, sendToSelf) {
        return _Scheduler_spawn(_Scheduler_binding(function(callback) {
            function handler(event) {
                _Scheduler_rawSpawn(sendToSelf(event));
            }
            node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && {
                passive: true
            });
            return function() {
                node.removeEventListener(eventName, handler);
            };
        }));
    });
    var _Browser_decodeEvent = F2(function(decoder, event) {
        var result = _Json_runHelp(decoder, event);
        return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
    });
    // PAGE VISIBILITY
    function _Browser_visibilityInfo() {
        return typeof _VirtualDom_doc.hidden !== "undefined" ? {
            hidden: "hidden",
            change: "visibilitychange"
        } : typeof _VirtualDom_doc.mozHidden !== "undefined" ? {
            hidden: "mozHidden",
            change: "mozvisibilitychange"
        } : typeof _VirtualDom_doc.msHidden !== "undefined" ? {
            hidden: "msHidden",
            change: "msvisibilitychange"
        } : typeof _VirtualDom_doc.webkitHidden !== "undefined" ? {
            hidden: "webkitHidden",
            change: "webkitvisibilitychange"
        } : {
            hidden: "hidden",
            change: "visibilitychange"
        };
    }
    // ANIMATION FRAMES
    function _Browser_rAF() {
        return _Scheduler_binding(function(callback) {
            var id = _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(Date.now()));
            });
            return function() {
                _Browser_cancelAnimationFrame(id);
            };
        });
    }
    function _Browser_now() {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(Date.now()));
        });
    }
    // DOM STUFF
    function _Browser_withNode(id, doStuff) {
        return _Scheduler_binding(function(callback) {
            _Browser_requestAnimationFrame(function() {
                var node = document.getElementById(id);
                callback(node ? _Scheduler_succeed(doStuff(node)) : _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id)));
            });
        });
    }
    function _Browser_withWindow(doStuff) {
        return _Scheduler_binding(function(callback) {
            _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(doStuff()));
            });
        });
    }
    // FOCUS and BLUR
    var _Browser_call = F2(function(functionName, id) {
        return _Browser_withNode(id, function(node) {
            node[functionName]();
            return _Utils_Tuple0;
        });
    });
    // WINDOW VIEWPORT
    function _Browser_getViewport() {
        return {
            scene: _Browser_getScene(),
            viewport: {
                x: _Browser_window.pageXOffset,
                y: _Browser_window.pageYOffset,
                width: _Browser_doc.documentElement.clientWidth,
                height: _Browser_doc.documentElement.clientHeight
            }
        };
    }
    function _Browser_getScene() {
        var body = _Browser_doc.body;
        var elem = _Browser_doc.documentElement;
        return {
            width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
            height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
        };
    }
    var _Browser_setViewport = F2(function(x, y) {
        return _Browser_withWindow(function() {
            _Browser_window.scroll(x, y);
            return _Utils_Tuple0;
        });
    });
    // ELEMENT VIEWPORT
    function _Browser_getViewportOf(id) {
        return _Browser_withNode(id, function(node) {
            return {
                scene: {
                    width: node.scrollWidth,
                    height: node.scrollHeight
                },
                viewport: {
                    x: node.scrollLeft,
                    y: node.scrollTop,
                    width: node.clientWidth,
                    height: node.clientHeight
                }
            };
        });
    }
    var _Browser_setViewportOf = F3(function(id, x, y) {
        return _Browser_withNode(id, function(node) {
            node.scrollLeft = x;
            node.scrollTop = y;
            return _Utils_Tuple0;
        });
    });
    // ELEMENT
    function _Browser_getElement(id) {
        return _Browser_withNode(id, function(node) {
            var rect = node.getBoundingClientRect();
            var x = _Browser_window.pageXOffset;
            var y = _Browser_window.pageYOffset;
            return {
                scene: _Browser_getScene(),
                viewport: {
                    x: x,
                    y: y,
                    width: _Browser_doc.documentElement.clientWidth,
                    height: _Browser_doc.documentElement.clientHeight
                },
                element: {
                    x: x + rect.left,
                    y: y + rect.top,
                    width: rect.width,
                    height: rect.height
                }
            };
        });
    }
    // LOAD and RELOAD
    function _Browser_reload(skipCache) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback) {
            _VirtualDom_doc.location.reload(skipCache);
        }));
    }
    function _Browser_load(url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback) {
            try {
                _Browser_window.location = url;
            } catch (err) {
                // Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
                // Other browsers reload the page, so let's be consistent about that.
                _VirtualDom_doc.location.reload(false);
            }
        }));
    }
    // CREATE
    var _Regex_never = /.^/;
    var _Regex_fromStringWith = F2(function(options, string) {
        var flags = "g";
        if (options.multiline) flags += "m";
        if (options.caseInsensitive) flags += "i";
        try {
            return $elm$core$Maybe$Just(new RegExp(string, flags));
        } catch (error) {
            return $elm$core$Maybe$Nothing;
        }
    });
    // USE
    var _Regex_contains = F2(function(re, string) {
        return string.match(re) !== null;
    });
    var _Regex_findAtMost = F3(function(n, re, str) {
        var out = [];
        var number = 0;
        var string = str;
        var lastIndex = re.lastIndex;
        var prevLastIndex = -1;
        var result;
        while(number++ < n && (result = re.exec(string))){
            if (prevLastIndex == re.lastIndex) break;
            var i = result.length - 1;
            var subs = new Array(i);
            while(i > 0){
                var submatch = result[i];
                subs[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
            }
            out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
            prevLastIndex = re.lastIndex;
        }
        re.lastIndex = lastIndex;
        return _List_fromArray(out);
    });
    var _Regex_replaceAtMost = F4(function(n, re, replacer, string) {
        var count = 0;
        function jsReplacer(match) {
            if (count++ >= n) return match;
            var i = arguments.length - 3;
            var submatches = new Array(i);
            while(i > 0){
                var submatch = arguments[i];
                submatches[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
            }
            return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
        }
        return string.replace(re, jsReplacer);
    });
    var _Regex_splitAtMost = F3(function(n, re, str) {
        var string = str;
        var out = [];
        var start = re.lastIndex;
        var restoreLastIndex = re.lastIndex;
        while(n--){
            var result = re.exec(string);
            if (!result) break;
            out.push(string.slice(start, result.index));
            start = re.lastIndex;
        }
        out.push(string.slice(start));
        re.lastIndex = restoreLastIndex;
        return _List_fromArray(out);
    });
    var _Regex_infinity = Infinity;
    function _Url_percentEncode(string) {
        return encodeURIComponent(string);
    }
    function _Url_percentDecode(string) {
        try {
            return $elm$core$Maybe$Just(decodeURIComponent(string));
        } catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }
    // SEND REQUEST
    var _Http_toTask = F3(function(router, toTask, request) {
        return _Scheduler_binding(function(callback) {
            function done(response) {
                callback(toTask(request.expect.a(response)));
            }
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function() {
                done($elm$http$Http$NetworkError_);
            });
            xhr.addEventListener("timeout", function() {
                done($elm$http$Http$Timeout_);
            });
            xhr.addEventListener("load", function() {
                done(_Http_toResponse(request.expect.b, xhr));
            });
            $elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);
            try {
                xhr.open(request.method, request.url, true);
            } catch (e) {
                return done($elm$http$Http$BadUrl_(request.url));
            }
            _Http_configureRequest(xhr, request);
            request.body.a && xhr.setRequestHeader("Content-Type", request.body.a);
            xhr.send(request.body.b);
            return function() {
                xhr.c = true;
                xhr.abort();
            };
        });
    });
    // CONFIGURE
    function _Http_configureRequest(xhr, request) {
        for(var headers = request.headers; headers.b; headers = headers.b)xhr.setRequestHeader(headers.a.a, headers.a.b);
        xhr.timeout = request.timeout.a || 0;
        xhr.responseType = request.expect.d;
        xhr.withCredentials = request.allowCookiesFromOtherDomains;
    }
    // RESPONSES
    function _Http_toResponse(toBody, xhr) {
        return A2(200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_, _Http_toMetadata(xhr), toBody(xhr.response));
    }
    // METADATA
    function _Http_toMetadata(xhr) {
        return {
            url: xhr.responseURL,
            statusCode: xhr.status,
            statusText: xhr.statusText,
            headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
        };
    }
    // HEADERS
    function _Http_parseHeaders(rawHeaders) {
        if (!rawHeaders) return $elm$core$Dict$empty;
        var headers = $elm$core$Dict$empty;
        var headerPairs = rawHeaders.split("\r\n");
        for(var i = headerPairs.length; i--;){
            var headerPair = headerPairs[i];
            var index = headerPair.indexOf(": ");
            if (index > 0) {
                var key = headerPair.substring(0, index);
                var value = headerPair.substring(index + 2);
                headers = A3($elm$core$Dict$update, key, function(oldValue) {
                    return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue) ? value + ", " + oldValue.a : value);
                }, headers);
            }
        }
        return headers;
    }
    // EXPECT
    var _Http_expect = F3(function(type, toBody, toValue) {
        return {
            $: 0,
            d: type,
            b: toBody,
            a: toValue
        };
    });
    var _Http_mapExpect = F2(function(func, expect) {
        return {
            $: 0,
            d: expect.d,
            b: expect.b,
            a: function(x) {
                return func(expect.a(x));
            }
        };
    });
    function _Http_toDataView(arrayBuffer) {
        return new DataView(arrayBuffer);
    }
    // BODY and PARTS
    var _Http_emptyBody = {
        $: 0
    };
    var _Http_pair = F2(function(a, b) {
        return {
            $: 0,
            a: a,
            b: b
        };
    });
    function _Http_toFormData(parts) {
        for(var formData = new FormData(); parts.b; parts = parts.b){
            var part = parts.a;
            formData.append(part.a, part.b);
        }
        return formData;
    }
    var _Http_bytesToBlob = F2(function(mime, bytes) {
        return new Blob([
            bytes
        ], {
            type: mime
        });
    });
    // PROGRESS
    function _Http_track(router, xhr, tracker) {
        // TODO check out lengthComputable on loadstart event
        xhr.upload.addEventListener("progress", function(event) {
            if (xhr.c) return;
            _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
                sent: event.loaded,
                size: event.total
            }))));
        });
        xhr.addEventListener("progress", function(event) {
            if (xhr.c) return;
            _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
                received: event.loaded,
                size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
            }))));
        });
    }
    function _Time_now(millisToPosix) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(millisToPosix(Date.now())));
        });
    }
    var _Time_setInterval = F2(function(interval, task) {
        return _Scheduler_binding(function(callback) {
            var id = setInterval(function() {
                _Scheduler_rawSpawn(task);
            }, interval);
            return function() {
                clearInterval(id);
            };
        });
    });
    function _Time_here() {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(A2($elm$time$Time$customZone, -new Date().getTimezoneOffset(), _List_Nil)));
        });
    }
    function _Time_getZoneName() {
        return _Scheduler_binding(function(callback) {
            try {
                var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
            } catch (e) {
                var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
            }
            callback(_Scheduler_succeed(name));
        });
    }
    // BYTES
    function _Bytes_width(bytes) {
        return bytes.byteLength;
    }
    var _Bytes_getHostEndianness = F2(function(le, be) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([
                1
            ]))[0] === 1 ? le : be));
        });
    });
    // ENCODERS
    function _Bytes_encode(encoder) {
        var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
        $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
        return mutableBytes;
    }
    // SIGNED INTEGERS
    var _Bytes_write_i8 = F3(function(mb, i, n) {
        mb.setInt8(i, n);
        return i + 1;
    });
    var _Bytes_write_i16 = F4(function(mb, i, n, isLE) {
        mb.setInt16(i, n, isLE);
        return i + 2;
    });
    var _Bytes_write_i32 = F4(function(mb, i, n, isLE) {
        mb.setInt32(i, n, isLE);
        return i + 4;
    });
    // UNSIGNED INTEGERS
    var _Bytes_write_u8 = F3(function(mb, i, n) {
        mb.setUint8(i, n);
        return i + 1;
    });
    var _Bytes_write_u16 = F4(function(mb, i, n, isLE) {
        mb.setUint16(i, n, isLE);
        return i + 2;
    });
    var _Bytes_write_u32 = F4(function(mb, i, n, isLE) {
        mb.setUint32(i, n, isLE);
        return i + 4;
    });
    // FLOATS
    var _Bytes_write_f32 = F4(function(mb, i, n, isLE) {
        mb.setFloat32(i, n, isLE);
        return i + 4;
    });
    var _Bytes_write_f64 = F4(function(mb, i, n, isLE) {
        mb.setFloat64(i, n, isLE);
        return i + 8;
    });
    // BYTES
    var _Bytes_write_bytes = F3(function(mb, offset, bytes) {
        for(var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)mb.setUint32(offset + i, bytes.getUint32(i));
        for(; i < len; i++)mb.setUint8(offset + i, bytes.getUint8(i));
        return offset + len;
    });
    // STRINGS
    function _Bytes_getStringWidth(string) {
        for(var width = 0, i = 0; i < string.length; i++){
            var code = string.charCodeAt(i);
            width += code < 0x80 ? 1 : code < 0x800 ? 2 : code < 0xD800 || 0xDBFF < code ? 3 : (i++, 4);
        }
        return width;
    }
    var _Bytes_write_string = F3(function(mb, offset, string) {
        for(var i = 0; i < string.length; i++){
            var code = string.charCodeAt(i);
            offset += code < 0x80 ? (mb.setUint8(offset, code), 1) : code < 0x800 ? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */  | (code >>> 6 & 0x1F /* 0b00011111 */ ) << 8 | code & 0x3F /* 0b00111111 */ ), 2) : code < 0xD800 || 0xDBFF < code ? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */  | (code >>> 12 & 0xF /* 0b00001111 */ ) << 8 | code >>> 6 & 0x3F /* 0b00111111 */ ), mb.setUint8(offset + 2, 0x80 /* 0b10000000 */  | code & 0x3F /* 0b00111111 */ ), 3) : (code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */  | (code >>> 18 & 0x7 /* 0b00000111 */ ) << 24 | (code >>> 12 & 0x3F /* 0b00111111 */ ) << 16 | (code >>> 6 & 0x3F /* 0b00111111 */ ) << 8 | code & 0x3F /* 0b00111111 */ ), 4);
        }
        return offset;
    });
    // DECODER
    var _Bytes_decode = F2(function(decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
        } catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    });
    var _Bytes_read_i8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getInt8(offset));
    });
    var _Bytes_read_i16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE));
    });
    var _Bytes_read_i32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE));
    });
    var _Bytes_read_u8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getUint8(offset));
    });
    var _Bytes_read_u16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE));
    });
    var _Bytes_read_u32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE));
    });
    var _Bytes_read_f32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE));
    });
    var _Bytes_read_f64 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE));
    });
    var _Bytes_read_bytes = F3(function(len, bytes, offset) {
        return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
    });
    var _Bytes_read_string = F3(function(len, bytes, offset) {
        var string = "";
        var end = offset + len;
        for(; offset < end;){
            var byte = bytes.getUint8(offset++);
            string += byte < 128 ? String.fromCharCode(byte) : (byte & 0xE0 /* 0b11100000 */ ) === 0xC0 /* 0b11000000 */  ? String.fromCharCode((byte & 0x1F /* 0b00011111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) : (byte & 0xF0 /* 0b11110000 */ ) === 0xE0 /* 0b11100000 */  ? String.fromCharCode((byte & 0xF /* 0b00001111 */ ) << 12 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) : (byte = ((byte & 0x7 /* 0b00000111 */ ) << 18 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 12 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) - 0x10000, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00));
        }
        return _Utils_Tuple2(offset, string);
    });
    var _Bytes_decodeFailure = F2(function() {
        throw 0;
    });
    var $elm$core$Maybe$Just = function(a) {
        return {
            $: "Just",
            a: a
        };
    };
    var $author$project$Update$LinkClicked = function(a) {
        return {
            $: "LinkClicked",
            a: a
        };
    };
    var $elm$core$Maybe$Nothing = {
        $: "Nothing"
    };
    var $author$project$Update$UrlChanged = function(a) {
        return {
            $: "UrlChanged",
            a: a
        };
    };
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr = F3(function(func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function(node, acc) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
            } else {
                var values = node.a;
                return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
            }
        });
        return A3($elm$core$Elm$JsArray$foldr, helper, A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail), tree);
    });
    var $elm$core$Array$toList = function(array) {
        return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Dict$foldr = F3(function(func, acc, t) {
        foldr: while(true){
            if (t.$ === "RBEmpty_elm_builtin") return acc;
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldr, func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    });
    var $elm$core$Dict$toList = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, list) {
            return A2($elm$core$List$cons, _Utils_Tuple2(key, value), list);
        }), _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, keyList) {
            return A2($elm$core$List$cons, key, keyList);
        }), _List_Nil, dict);
    };
    var $elm$core$Set$toList = function(_v0) {
        var dict = _v0.a;
        return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Basics$EQ = {
        $: "EQ"
    };
    var $elm$core$Basics$GT = {
        $: "GT"
    };
    var $elm$core$Basics$LT = {
        $: "LT"
    };
    var $elm$core$Result$Err = function(a) {
        return {
            $: "Err",
            a: a
        };
    };
    var $elm$json$Json$Decode$Failure = F2(function(a, b) {
        return {
            $: "Failure",
            a: a,
            b: b
        };
    });
    var $elm$json$Json$Decode$Field = F2(function(a, b) {
        return {
            $: "Field",
            a: a,
            b: b
        };
    });
    var $elm$json$Json$Decode$Index = F2(function(a, b) {
        return {
            $: "Index",
            a: a,
            b: b
        };
    });
    var $elm$core$Result$Ok = function(a) {
        return {
            $: "Ok",
            a: a
        };
    };
    var $elm$json$Json$Decode$OneOf = function(a) {
        return {
            $: "OneOf",
            a: a
        };
    };
    var $elm$core$Basics$False = {
        $: "False"
    };
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$core$Basics$append = _Utils_append;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join = F2(function(sep, chunks) {
        return A2(_String_join, sep, _List_toArray(chunks));
    });
    var $elm$core$String$split = F2(function(sep, string) {
        return _List_fromArray(A2(_String_split, sep, string));
    });
    var $elm$json$Json$Decode$indent = function(str) {
        return A2($elm$core$String$join, "\n    ", A2($elm$core$String$split, "\n", str));
    };
    var $elm$core$List$foldl = F3(function(func, acc, list) {
        foldl: while(true){
            if (!list.b) return acc;
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    });
    var $elm$core$List$length = function(xs) {
        return A3($elm$core$List$foldl, F2(function(_v0, i) {
            return i + 1;
        }), 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp = F3(function(lo, hi, list) {
        rangeHelp: while(true){
            if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = A2($elm$core$List$cons, hi, list);
                lo = $temp$lo;
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
            } else return list;
        }
    });
    var $elm$core$List$range = F2(function(lo, hi) {
        return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
    });
    var $elm$core$List$indexedMap = F2(function(f, xs) {
        return A3($elm$core$List$map2, f, A2($elm$core$List$range, 0, $elm$core$List$length(xs) - 1), xs);
    });
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return 97 <= code && code <= 122;
    };
    var $elm$core$Char$isUpper = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 90 && 65 <= code;
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function(_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 57 && 48 <= code;
    };
    var $elm$core$Char$isAlphaNum = function(_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char);
    };
    var $elm$core$List$reverse = function(list) {
        return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf = F2(function(i, error) {
        return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    });
    var $elm$json$Json$Decode$errorToString = function(error) {
        return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp = F2(function(error, context) {
        errorToStringHelp: while(true)switch(error.$){
            case "Field":
                var f = error.a;
                var err = error.b;
                var isSimple = function() {
                    var _v1 = $elm$core$String$uncons(f);
                    if (_v1.$ === "Nothing") return false;
                    else {
                        var _v2 = _v1.a;
                        var _char = _v2.a;
                        var rest = _v2.b;
                        return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
                    }
                }();
                var fieldName = isSimple ? "." + f : "['" + (f + "']");
                var $temp$error = err, $temp$context = A2($elm$core$List$cons, fieldName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case "Index":
                var i = error.a;
                var err = error.b;
                var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                var $temp$error = err, $temp$context = A2($elm$core$List$cons, indexName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case "OneOf":
                var errors = error.a;
                if (!errors.b) return "Ran into a Json.Decode.oneOf with no possibilities" + function() {
                    if (!context.b) return "!";
                    else return " at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                }();
                else if (!errors.b.b) {
                    var err = errors.a;
                    var $temp$error = err, $temp$context = context;
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                } else {
                    var starter = function() {
                        if (!context.b) return "Json.Decode.oneOf";
                        else return "The Json.Decode.oneOf at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                    }();
                    var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                    return A2($elm$core$String$join, "\n\n", A2($elm$core$List$cons, introduction, A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
                }
            default:
                var msg = error.a;
                var json = error.b;
                var introduction = function() {
                    if (!context.b) return "Problem with the given value:\n\n";
                    else return "Problem with the value at json" + (A2($elm$core$String$join, "", $elm$core$List$reverse(context)) + ":\n\n    ");
                }();
                return introduction + ($elm$json$Json$Decode$indent(A2($elm$json$Json$Encode$encode, 4, json)) + ("\n\n" + msg));
        }
    });
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin = F4(function(a, b, c, d) {
        return {
            $: "Array_elm_builtin",
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase = F2(function(base, number) {
        return _Basics_log(number) / _Basics_log(base);
    });
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function(a) {
        return {
            $: "Leaf",
            a: a
        };
    };
    var $elm$core$Basics$apL = F2(function(f, x) {
        return f(x);
    });
    var $elm$core$Basics$apR = F2(function(x, f) {
        return f(x);
    });
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$Basics$max = F2(function(x, y) {
        return _Utils_cmp(x, y) > 0 ? x : y;
    });
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function(a) {
        return {
            $: "SubTree",
            a: a
        };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes = F2(function(nodes, acc) {
        compressNodes: while(true){
            var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
            var node = _v0.a;
            var remainingNodes = _v0.b;
            var newAcc = A2($elm$core$List$cons, $elm$core$Array$SubTree(node), acc);
            if (!remainingNodes.b) return $elm$core$List$reverse(newAcc);
            else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
            }
        }
    });
    var $elm$core$Tuple$first = function(_v0) {
        var x = _v0.a;
        return x;
    };
    var $elm$core$Array$treeFromBuilder = F2(function(nodeList, nodeListSize) {
        treeFromBuilder: while(true){
            var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
            if (newNodeSize === 1) return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
            else {
                var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
            }
        }
    });
    var $elm$core$Array$builderToArray = F2(function(reverseNodeList, builder) {
        if (!builder.nodeListSize) return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.tail), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.tail);
        else {
            var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor(A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
            var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
            return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.tail) + treeLen, A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep), tree, builder.tail);
        }
    });
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp = F5(function(fn, fromIndex, len, nodeList, tail) {
        initializeHelp: while(true){
            if (fromIndex < 0) return A2($elm$core$Array$builderToArray, false, {
                nodeList: nodeList,
                nodeListSize: len / $elm$core$Array$branchFactor | 0,
                tail: tail
            });
            else {
                var leaf = $elm$core$Array$Leaf(A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
                var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = A2($elm$core$List$cons, leaf, nodeList), $temp$tail = tail;
                fn = $temp$fn;
                fromIndex = $temp$fromIndex;
                len = $temp$len;
                nodeList = $temp$nodeList;
                tail = $temp$tail;
                continue initializeHelp;
            }
        }
    });
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize = F2(function(len, fn) {
        if (len <= 0) return $elm$core$Array$empty;
        else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
            var initialFromIndex = len - tailLen - $elm$core$Array$branchFactor;
            return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
        }
    });
    var $elm$core$Basics$True = {
        $: "True"
    };
    var $elm$core$Result$isOk = function(result) {
        if (result.$ === "Ok") return true;
        else return false;
    };
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $elm$json$Json$Decode$map = _Json_map1;
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $elm$virtual_dom$VirtualDom$toHandlerInt = function(handler) {
        switch(handler.$){
            case "Normal":
                return 0;
            case "MayStopPropagation":
                return 1;
            case "MayPreventDefault":
                return 2;
            default:
                return 3;
        }
    };
    var $elm$browser$Debugger$Expando$ArraySeq = {
        $: "ArraySeq"
    };
    var $elm$browser$Debugger$Overlay$BlockMost = {
        $: "BlockMost"
    };
    var $elm$browser$Debugger$Overlay$BlockNone = {
        $: "BlockNone"
    };
    var $elm$browser$Debugger$Expando$Constructor = F3(function(a, b, c) {
        return {
            $: "Constructor",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$Dictionary = F2(function(a, b) {
        return {
            $: "Dictionary",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Main$Down = {
        $: "Down"
    };
    var $elm$browser$Debugger$Expando$ListSeq = {
        $: "ListSeq"
    };
    var $elm$browser$Debugger$Main$NoOp = {
        $: "NoOp"
    };
    var $elm$browser$Debugger$Expando$Primitive = function(a) {
        return {
            $: "Primitive",
            a: a
        };
    };
    var $elm$browser$Debugger$Expando$Record = F2(function(a, b) {
        return {
            $: "Record",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Expando$S = function(a) {
        return {
            $: "S",
            a: a
        };
    };
    var $elm$browser$Debugger$Expando$Sequence = F3(function(a, b, c) {
        return {
            $: "Sequence",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$SetSeq = {
        $: "SetSeq"
    };
    var $elm$browser$Debugger$Main$Up = {
        $: "Up"
    };
    var $elm$browser$Debugger$Main$UserMsg = function(a) {
        return {
            $: "UserMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Export = {
        $: "Export"
    };
    var $elm$browser$Debugger$Main$Import = {
        $: "Import"
    };
    var $elm$browser$Debugger$Main$Open = {
        $: "Open"
    };
    var $elm$browser$Debugger$Main$OverlayMsg = function(a) {
        return {
            $: "OverlayMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Resume = {
        $: "Resume"
    };
    var $elm$browser$Debugger$Main$isPaused = function(state) {
        if (state.$ === "Running") return false;
        else return true;
    };
    var $elm$browser$Debugger$History$size = function(history1) {
        return history1.numMessages;
    };
    var $elm$browser$Debugger$Overlay$Accept = function(a) {
        return {
            $: "Accept",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$Choose = F2(function(a, b) {
        return {
            $: "Choose",
            a: a,
            b: b
        };
    });
    var $elm$html$Html$div = _VirtualDom_node("div");
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $elm$html$Html$Attributes$stringProperty = F2(function(key, string) {
        return A2(_VirtualDom_property, key, $elm$json$Json$Encode$string(string));
    });
    var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty("id");
    var $elm$virtual_dom$VirtualDom$Normal = function(a) {
        return {
            $: "Normal",
            a: a
        };
    };
    var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
    var $elm$html$Html$Events$on = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$Normal(decoder));
    });
    var $elm$html$Html$Events$onClick = function(msg) {
        return A2($elm$html$Html$Events$on, "click", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$html$Html$span = _VirtualDom_node("span");
    var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
    var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
    var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
    var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
    var $elm$html$Html$a = _VirtualDom_node("a");
    var $elm$browser$Debugger$Overlay$goodNews1 = "\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n";
    var $elm$browser$Debugger$Overlay$goodNews2 = "\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n";
    var $elm$html$Html$Attributes$href = function(url) {
        return A2($elm$html$Html$Attributes$stringProperty, "href", _VirtualDom_noJavaScriptUri(url));
    };
    var $elm$core$List$foldrHelper = F4(function(fn, acc, ctr, ls) {
        if (!ls.b) return acc;
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) return A2(fn, a, acc);
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) return A2(fn, a, A2(fn, b, acc));
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = ctr > 500 ? A3($elm$core$List$foldl, fn, acc, $elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
                        return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                    }
                }
            }
        }
    });
    var $elm$core$List$foldr = F3(function(fn, acc, ls) {
        return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
    });
    var $elm$core$List$map = F2(function(f, xs) {
        return A3($elm$core$List$foldr, F2(function(x, acc) {
            return A2($elm$core$List$cons, f(x), acc);
        }), _List_Nil, xs);
    });
    var $elm$html$Html$p = _VirtualDom_node("p");
    var $elm$html$Html$ul = _VirtualDom_node("ul");
    var $elm$html$Html$code = _VirtualDom_node("code");
    var $elm$browser$Debugger$Overlay$viewCode = function(name) {
        return A2($elm$html$Html$code, _List_Nil, _List_fromArray([
            $elm$html$Html$text(name)
        ]));
    };
    var $elm$browser$Debugger$Overlay$addCommas = function(items) {
        if (!items.b) return "";
        else {
            if (!items.b.b) {
                var item = items.a;
                return item;
            } else if (!items.b.b.b) {
                var item1 = items.a;
                var _v1 = items.b;
                var item2 = _v1.a;
                return item1 + (" and " + item2);
            } else {
                var lastItem = items.a;
                var otherItems = items.b;
                return A2($elm$core$String$join, ", ", _Utils_ap(otherItems, _List_fromArray([
                    " and " + lastItem
                ])));
            }
        }
    };
    var $elm$html$Html$li = _VirtualDom_node("li");
    var $elm$browser$Debugger$Overlay$problemToString = function(problem) {
        switch(problem.$){
            case "Function":
                return "functions";
            case "Decoder":
                return "JSON decoders";
            case "Task":
                return "tasks";
            case "Process":
                return "processes";
            case "Socket":
                return "web sockets";
            case "Request":
                return "HTTP requests";
            case "Program":
                return "programs";
            default:
                return "virtual DOM values";
        }
    };
    var $elm$browser$Debugger$Overlay$viewProblemType = function(_v0) {
        var name = _v0.name;
        var problems = _v0.problems;
        return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
            $elm$browser$Debugger$Overlay$viewCode(name),
            $elm$html$Html$text(" can contain " + ($elm$browser$Debugger$Overlay$addCommas(A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + "."))
        ]));
    };
    var $elm$browser$Debugger$Overlay$viewBadMetadata = function(_v0) {
        var message = _v0.message;
        var problems = _v0.problems;
        return _List_fromArray([
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("The "),
                $elm$browser$Debugger$Overlay$viewCode(message),
                $elm$html$Html$text(" type of your program cannot be reliably serialized for history files.")
            ])),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:")
            ])),
            A2($elm$html$Html$ul, _List_Nil, A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href("https://guide.elm-lang.org/types/custom_types.html")
                ]), _List_fromArray([
                    $elm$html$Html$text("custom types")
                ])),
                $elm$html$Html$text(", in your messages. From there, your "),
                $elm$browser$Debugger$Overlay$viewCode("update"),
                $elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
            ]))
        ]);
    };
    var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
    var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
    var $elm$browser$Debugger$Overlay$Cancel = {
        $: "Cancel"
    };
    var $elm$browser$Debugger$Overlay$Proceed = {
        $: "Proceed"
    };
    var $elm$html$Html$button = _VirtualDom_node("button");
    var $elm$browser$Debugger$Overlay$viewButtons = function(buttons) {
        var btn = F2(function(msg, string) {
            return A2($elm$html$Html$button, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "margin-right", "20px"),
                $elm$html$Html$Events$onClick(msg)
            ]), _List_fromArray([
                $elm$html$Html$text(string)
            ]));
        });
        var buttonNodes = function() {
            if (buttons.$ === "Accept") {
                var proceed = buttons.a;
                return _List_fromArray([
                    A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
                ]);
            } else {
                var cancel = buttons.a;
                var proceed = buttons.b;
                return _List_fromArray([
                    A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
                    A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
                ]);
            }
        }();
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "height", "60px"),
            A2($elm$html$Html$Attributes$style, "line-height", "60px"),
            A2($elm$html$Html$Attributes$style, "text-align", "right"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), buttonNodes);
    };
    var $elm$browser$Debugger$Overlay$viewMessage = F4(function(config, title, details, buttons) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("elm-debugger-overlay"),
            A2($elm$html$Html$Attributes$style, "position", "fixed"),
            A2($elm$html$Html$Attributes$style, "top", "0"),
            A2($elm$html$Html$Attributes$style, "left", "0"),
            A2($elm$html$Html$Attributes$style, "width", "100vw"),
            A2($elm$html$Html$Attributes$style, "height", "100vh"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "pointer-events", "none"),
            A2($elm$html$Html$Attributes$style, "font-family", "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif"),
            A2($elm$html$Html$Attributes$style, "z-index", "2147483647")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "width", "600px"),
                A2($elm$html$Html$Attributes$style, "height", "100vh"),
                A2($elm$html$Html$Attributes$style, "padding-left", "calc(50% - 300px)"),
                A2($elm$html$Html$Attributes$style, "padding-right", "calc(50% - 300px)"),
                A2($elm$html$Html$Attributes$style, "background-color", "rgba(200, 200, 200, 0.7)"),
                A2($elm$html$Html$Attributes$style, "pointer-events", "auto")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "font-size", "36px"),
                    A2($elm$html$Html$Attributes$style, "height", "80px"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)"),
                    A2($elm$html$Html$Attributes$style, "padding-left", "22px"),
                    A2($elm$html$Html$Attributes$style, "vertical-align", "middle"),
                    A2($elm$html$Html$Attributes$style, "line-height", "80px")
                ]), _List_fromArray([
                    $elm$html$Html$text(title)
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$id("elm-debugger-details"),
                    A2($elm$html$Html$Attributes$style, "padding", " 8px 20px"),
                    A2($elm$html$Html$Attributes$style, "overflow-y", "auto"),
                    A2($elm$html$Html$Attributes$style, "max-height", "calc(100vh - 156px)"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgb(61, 61, 61)")
                ]), details),
                A2($elm$html$Html$map, config.wrap, $elm$browser$Debugger$Overlay$viewButtons(buttons))
            ]))
        ]));
    });
    var $elm$virtual_dom$VirtualDom$attribute = F2(function(key, value) {
        return A2(_VirtualDom_attribute, _VirtualDom_noOnOrFormAction(key), _VirtualDom_noJavaScriptOrHtmlUri(value));
    });
    var $elm$core$Basics$negate = function(n) {
        return -n;
    };
    var $elm$virtual_dom$VirtualDom$nodeNS = F2(function(namespace, tag) {
        return A2(_VirtualDom_nodeNS, namespace, _VirtualDom_noScript(tag));
    });
    var $elm$core$String$fromFloat = _String_fromNumber;
    var $elm$browser$Debugger$Overlay$viewShape = F4(function(x, y, angle, coordinates) {
        return A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "polygon", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "points", coordinates),
            A2($elm$virtual_dom$VirtualDom$attribute, "transform", "translate(" + ($elm$core$String$fromFloat(x) + (" " + ($elm$core$String$fromFloat(y) + (") rotate(" + ($elm$core$String$fromFloat(-angle) + ")"))))))
        ]), _List_Nil);
    });
    var $elm$browser$Debugger$Overlay$elmLogo = A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "svg", _List_fromArray([
        A2($elm$virtual_dom$VirtualDom$attribute, "viewBox", "-300 -300 600 600"),
        A2($elm$virtual_dom$VirtualDom$attribute, "xmlns", "http://www.w3.org/2000/svg"),
        A2($elm$virtual_dom$VirtualDom$attribute, "fill", "currentColor"),
        A2($elm$virtual_dom$VirtualDom$attribute, "width", "24px"),
        A2($elm$virtual_dom$VirtualDom$attribute, "height", "24px")
    ]), _List_fromArray([
        A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "g", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "transform", "scale(1 -1)")
        ]), _List_fromArray([
            A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, "-280,-90 0,190 280,-90"),
            A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, "-280,-90 0,190 280,-90"),
            A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, "-198,-66 0,132 198,-66"),
            A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, "-130,0 0,-130 130,0 0,130"),
            A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, "-191,61 69,61 191,-61 -69,-61"),
            A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, "-130,-44 0,86  130,-44"),
            A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, "-130,-44 0,86  130,-44")
        ]))
    ]));
    var $elm$core$String$length = _String_length;
    var $elm$browser$Debugger$Overlay$viewMiniControls = F2(function(config, numMsgs) {
        var string = $elm$core$String$fromInt(numMsgs);
        var width = $elm$core$String$fromInt(2 + $elm$core$String$length(string));
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "position", "fixed"),
            A2($elm$html$Html$Attributes$style, "bottom", "2em"),
            A2($elm$html$Html$Attributes$style, "right", "2em"),
            A2($elm$html$Html$Attributes$style, "width", "calc(42px + " + (width + "ch)")),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "background-color", "#1293D8"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "font-family", "monospace"),
            A2($elm$html$Html$Attributes$style, "pointer-events", "auto"),
            A2($elm$html$Html$Attributes$style, "z-index", "2147483647"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "justify-content", "center"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            $elm$html$Html$Events$onClick(config.open)
        ]), _List_fromArray([
            $elm$browser$Debugger$Overlay$elmLogo,
            A2($elm$html$Html$span, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding-left", "calc(1ch + 6px)"),
                A2($elm$html$Html$Attributes$style, "padding-right", "1ch")
            ]), _List_fromArray([
                $elm$html$Html$text(string)
            ]))
        ]));
    });
    var $elm$browser$Debugger$Overlay$explanationBad = "\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n";
    var $elm$browser$Debugger$Overlay$explanationRisky = "\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n";
    var $elm$core$List$intersperse = F2(function(sep, xs) {
        if (!xs.b) return _List_Nil;
        else {
            var hd = xs.a;
            var tl = xs.b;
            var step = F2(function(x, rest) {
                return A2($elm$core$List$cons, sep, A2($elm$core$List$cons, x, rest));
            });
            var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
            return A2($elm$core$List$cons, hd, spersed);
        }
    });
    var $elm$browser$Debugger$Overlay$viewMention = F2(function(tags, verbed) {
        var _v0 = A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewCode, $elm$core$List$reverse(tags));
        if (!_v0.b) return $elm$html$Html$text("");
        else {
            if (!_v0.b.b) {
                var tag = _v0.a;
                return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(verbed),
                    tag,
                    $elm$html$Html$text(".")
                ]));
            } else if (!_v0.b.b.b) {
                var tag2 = _v0.a;
                var _v1 = _v0.b;
                var tag1 = _v1.a;
                return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(verbed),
                    tag1,
                    $elm$html$Html$text(" and "),
                    tag2,
                    $elm$html$Html$text(".")
                ]));
            } else {
                var lastTag = _v0.a;
                var otherTags = _v0.b;
                return A2($elm$html$Html$li, _List_Nil, A2($elm$core$List$cons, $elm$html$Html$text(verbed), _Utils_ap(A2($elm$core$List$intersperse, $elm$html$Html$text(", "), $elm$core$List$reverse(otherTags)), _List_fromArray([
                    $elm$html$Html$text(", and "),
                    lastTag,
                    $elm$html$Html$text(".")
                ]))));
            }
        }
    });
    var $elm$browser$Debugger$Overlay$viewChange = function(change) {
        return A2($elm$html$Html$li, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin", "8px 0")
        ]), function() {
            if (change.$ === "AliasChange") {
                var name = change.a;
                return _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "1.5em")
                    ]), _List_fromArray([
                        $elm$browser$Debugger$Overlay$viewCode(name)
                    ]))
                ]);
            } else {
                var name = change.a;
                var removed = change.b.removed;
                var changed = change.b.changed;
                var added = change.b.added;
                var argsMatch = change.b.argsMatch;
                return _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "1.5em")
                    ]), _List_fromArray([
                        $elm$browser$Debugger$Overlay$viewCode(name)
                    ])),
                    A2($elm$html$Html$ul, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "list-style-type", "disc"),
                        A2($elm$html$Html$Attributes$style, "padding-left", "2em")
                    ]), _List_fromArray([
                        A2($elm$browser$Debugger$Overlay$viewMention, removed, "Removed "),
                        A2($elm$browser$Debugger$Overlay$viewMention, changed, "Changed "),
                        A2($elm$browser$Debugger$Overlay$viewMention, added, "Added ")
                    ])),
                    argsMatch ? $elm$html$Html$text("") : $elm$html$Html$text("This may be due to the fact that the type variable names changed.")
                ]);
            }
        }());
    };
    var $elm$browser$Debugger$Overlay$viewReport = F2(function(isBad, report) {
        switch(report.$){
            case "CorruptHistory":
                return _List_fromArray([
                    $elm$html$Html$text("Looks like this history file is corrupt. I cannot understand it.")
                ]);
            case "VersionChanged":
                var old = report.a;
                var _new = report.b;
                return _List_fromArray([
                    $elm$html$Html$text("This history was created with Elm " + (old + (", but you are using Elm " + (_new + " right now."))))
                ]);
            case "MessageChanged":
                var old = report.a;
                var _new = report.b;
                return _List_fromArray([
                    $elm$html$Html$text("To import some other history, the overall message type must be the same. The old history has "),
                    $elm$browser$Debugger$Overlay$viewCode(old),
                    $elm$html$Html$text(" messages, but the new program works with "),
                    $elm$browser$Debugger$Overlay$viewCode(_new),
                    $elm$html$Html$text(" messages.")
                ]);
            default:
                var changes = report.a;
                return _List_fromArray([
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text(isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
                    ])),
                    A2($elm$html$Html$ul, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "list-style-type", "none"),
                        A2($elm$html$Html$Attributes$style, "padding-left", "20px")
                    ]), A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
                ]);
        }
    });
    var $elm$browser$Debugger$Overlay$view = F5(function(config, isPaused, isOpen, numMsgs, state) {
        switch(state.$){
            case "None":
                return isOpen ? $elm$html$Html$text("") : isPaused ? A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$id("elm-debugger-overlay"),
                    A2($elm$html$Html$Attributes$style, "position", "fixed"),
                    A2($elm$html$Html$Attributes$style, "top", "0"),
                    A2($elm$html$Html$Attributes$style, "left", "0"),
                    A2($elm$html$Html$Attributes$style, "width", "100vw"),
                    A2($elm$html$Html$Attributes$style, "height", "100vh"),
                    A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "align-items", "center"),
                    A2($elm$html$Html$Attributes$style, "justify-content", "center"),
                    A2($elm$html$Html$Attributes$style, "pointer-events", "auto"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgba(200, 200, 200, 0.7)"),
                    A2($elm$html$Html$Attributes$style, "color", "white"),
                    A2($elm$html$Html$Attributes$style, "font-family", "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif"),
                    A2($elm$html$Html$Attributes$style, "z-index", "2147483646"),
                    $elm$html$Html$Events$onClick(config.resume)
                ]), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "80px")
                    ]), _List_fromArray([
                        $elm$html$Html$text("Click to Resume")
                    ])),
                    A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
                ])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs);
            case "BadMetadata":
                var badMetadata_ = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Cannot use Import or Export", $elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_), $elm$browser$Debugger$Overlay$Accept("Ok"));
            case "BadImport":
                var report = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Cannot Import History", A2($elm$browser$Debugger$Overlay$viewReport, true, report), $elm$browser$Debugger$Overlay$Accept("Ok"));
            default:
                var report = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Warning", A2($elm$browser$Debugger$Overlay$viewReport, false, report), A2($elm$browser$Debugger$Overlay$Choose, "Cancel", "Import Anyway"));
        }
    });
    var $elm$browser$Debugger$Main$cornerView = function(model) {
        return A5($elm$browser$Debugger$Overlay$view, {
            exportHistory: $elm$browser$Debugger$Main$Export,
            importHistory: $elm$browser$Debugger$Main$Import,
            open: $elm$browser$Debugger$Main$Open,
            resume: $elm$browser$Debugger$Main$Resume,
            wrap: $elm$browser$Debugger$Main$OverlayMsg
        }, $elm$browser$Debugger$Main$isPaused(model.state), _Debugger_isOpen(model.popout), $elm$browser$Debugger$History$size(model.history), model.overlay);
    };
    var $elm$core$Dict$RBEmpty_elm_builtin = {
        $: "RBEmpty_elm_builtin"
    };
    var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
    var $elm$core$Set$foldr = F3(function(func, initialState, _v0) {
        var dict = _v0.a;
        return A3($elm$core$Dict$foldr, F3(function(key, _v1, state) {
            return A2(func, key, state);
        }), initialState, dict);
    });
    var $elm$browser$Debugger$Main$getCurrentModel = function(state) {
        if (state.$ === "Running") {
            var model = state.a;
            return model;
        } else {
            var model = state.b;
            return model;
        }
    };
    var $elm$browser$Debugger$Main$getUserModel = function(model) {
        return $elm$browser$Debugger$Main$getCurrentModel(model.state);
    };
    var $elm$browser$Debugger$Main$initialWindowHeight = 420;
    var $elm$browser$Debugger$Main$initialWindowWidth = 900;
    var $elm$core$Dict$Black = {
        $: "Black"
    };
    var $elm$core$Dict$RBNode_elm_builtin = F5(function(a, b, c, d, e) {
        return {
            $: "RBNode_elm_builtin",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $elm$core$Dict$Red = {
        $: "Red"
    };
    var $elm$core$Dict$balance = F5(function(color, key, value, left, right) {
        if (right.$ === "RBNode_elm_builtin" && right.a.$ === "Red") {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red") {
                var _v3 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, rK, rV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft), rRight);
        } else {
            if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red" && left.d.$ === "RBNode_elm_builtin" && left.d.a.$ === "Red") {
                var _v5 = left.a;
                var lK = left.b;
                var lV = left.c;
                var _v6 = left.d;
                var _v7 = _v6.a;
                var llK = _v6.b;
                var llV = _v6.c;
                var llLeft = _v6.d;
                var llRight = _v6.e;
                var lRight = left.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
        }
    });
    var $elm$core$Basics$compare = _Utils_compare;
    var $elm$core$Dict$insertHelp = F3(function(key, value, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = A2($elm$core$Basics$compare, key, nKey);
            switch(_v1.$){
                case "LT":
                    return A5($elm$core$Dict$balance, nColor, nKey, nValue, A3($elm$core$Dict$insertHelp, key, value, nLeft), nRight);
                case "EQ":
                    return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
                default:
                    return A5($elm$core$Dict$balance, nColor, nKey, nValue, nLeft, A3($elm$core$Dict$insertHelp, key, value, nRight));
            }
        }
    });
    var $elm$core$Dict$insert = F3(function(key, value, dict) {
        var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
        if (_v0.$ === "RBNode_elm_builtin" && _v0.a.$ === "Red") {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
        } else {
            var x = _v0;
            return x;
        }
    });
    var $elm$browser$Debugger$Main$cachedHistory = function(model) {
        var _v0 = model.state;
        if (_v0.$ === "Running") return model.history;
        else {
            var history1 = _v0.e;
            return history1;
        }
    };
    var $elm$virtual_dom$VirtualDom$node = function(tag) {
        return _VirtualDom_node(_VirtualDom_noScript(tag));
    };
    var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
    var $elm$browser$Debugger$Main$DragEnd = {
        $: "DragEnd"
    };
    var $elm$browser$Debugger$Main$getDragStatus = function(layout) {
        if (layout.$ === "Horizontal") {
            var status = layout.a;
            return status;
        } else {
            var status = layout.a;
            return status;
        }
    };
    var $elm$browser$Debugger$Main$Drag = function(a) {
        return {
            $: "Drag",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$DragInfo = F5(function(x, y, down, width, height) {
        return {
            down: down,
            height: height,
            width: width,
            x: x,
            y: y
        };
    });
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $elm$json$Json$Decode$at = F2(function(fields, decoder) {
        return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
    });
    var $elm$json$Json$Decode$float = _Json_decodeFloat;
    var $elm$browser$Debugger$Main$decodeDimension = function(field) {
        return A2($elm$json$Json$Decode$at, _List_fromArray([
            "currentTarget",
            "ownerDocument",
            "defaultView",
            field
        ]), $elm$json$Json$Decode$float);
    };
    var $elm$json$Json$Decode$int = _Json_decodeInt;
    var $elm$json$Json$Decode$map5 = _Json_map5;
    var $elm$browser$Debugger$Main$onMouseMove = A2($elm$html$Html$Events$on, "mousemove", A2($elm$json$Json$Decode$map, $elm$browser$Debugger$Main$Drag, A6($elm$json$Json$Decode$map5, $elm$browser$Debugger$Main$DragInfo, A2($elm$json$Json$Decode$field, "pageX", $elm$json$Json$Decode$float), A2($elm$json$Json$Decode$field, "pageY", $elm$json$Json$Decode$float), A2($elm$json$Json$Decode$field, "buttons", A2($elm$json$Json$Decode$map, function(v) {
        return v === 1;
    }, $elm$json$Json$Decode$int)), $elm$browser$Debugger$Main$decodeDimension("innerWidth"), $elm$browser$Debugger$Main$decodeDimension("innerHeight"))));
    var $elm$html$Html$Events$onMouseUp = function(msg) {
        return A2($elm$html$Html$Events$on, "mouseup", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$browser$Debugger$Main$toDragListeners = function(layout) {
        var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
        if (_v0.$ === "Static") return _List_Nil;
        else return _List_fromArray([
            $elm$browser$Debugger$Main$onMouseMove,
            $elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
        ]);
    };
    var $elm$browser$Debugger$Main$toFlexDirection = function(layout) {
        if (layout.$ === "Horizontal") return "row";
        else return "column-reverse";
    };
    var $elm$browser$Debugger$Main$DragStart = {
        $: "DragStart"
    };
    var $elm$html$Html$Events$onMouseDown = function(msg) {
        return A2($elm$html$Html$Events$on, "mousedown", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$browser$Debugger$Main$toPercent = function(fraction) {
        return $elm$core$String$fromFloat(100 * fraction) + "%";
    };
    var $elm$browser$Debugger$Main$viewDragZone = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "top", "0"),
                A2($elm$html$Html$Attributes$style, "left", $elm$browser$Debugger$Main$toPercent(x)),
                A2($elm$html$Html$Attributes$style, "margin-left", "-5px"),
                A2($elm$html$Html$Attributes$style, "width", "10px"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "cursor", "col-resize"),
                $elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
            ]), _List_Nil);
        } else {
            var y = layout.c;
            return A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "top", $elm$browser$Debugger$Main$toPercent(y)),
                A2($elm$html$Html$Attributes$style, "left", "0"),
                A2($elm$html$Html$Attributes$style, "margin-top", "-5px"),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", "10px"),
                A2($elm$html$Html$Attributes$style, "cursor", "row-resize"),
                $elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
            ]), _List_Nil);
        }
    };
    var $elm$browser$Debugger$Main$TweakExpandoModel = function(a) {
        return {
            $: "TweakExpandoModel",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$TweakExpandoMsg = function(a) {
        return {
            $: "TweakExpandoMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$toExpandoPercents = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return _Utils_Tuple2($elm$browser$Debugger$Main$toPercent(1 - x), "100%");
        } else {
            var y = layout.c;
            return _Utils_Tuple2("100%", $elm$browser$Debugger$Main$toPercent(y));
        }
    };
    var $elm$browser$Debugger$Main$toMouseBlocker = function(layout) {
        var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
        if (_v0.$ === "Static") return "auto";
        else return "none";
    };
    var $elm$browser$Debugger$Expando$Field = F2(function(a, b) {
        return {
            $: "Field",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Expando$Index = F3(function(a, b, c) {
        return {
            $: "Index",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$Key = {
        $: "Key"
    };
    var $elm$browser$Debugger$Expando$None = {
        $: "None"
    };
    var $elm$browser$Debugger$Expando$Toggle = {
        $: "Toggle"
    };
    var $elm$browser$Debugger$Expando$Value = {
        $: "Value"
    };
    var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, "color", "rgb(28, 0, 207)");
    var $elm$core$Basics$composeL = F3(function(g, f, x) {
        return g(f(x));
    });
    var $elm$browser$Debugger$Expando$leftPad = function(maybeKey) {
        if (maybeKey.$ === "Nothing") return _List_Nil;
        else return _List_fromArray([
            A2($elm$html$Html$Attributes$style, "padding-left", "4ch")
        ]);
    };
    var $elm$browser$Debugger$Expando$makeArrow = function(arrow) {
        return A2($elm$html$Html$span, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "color", "#777"),
            A2($elm$html$Html$Attributes$style, "padding-left", "2ch"),
            A2($elm$html$Html$Attributes$style, "width", "2ch"),
            A2($elm$html$Html$Attributes$style, "display", "inline-block")
        ]), _List_fromArray([
            $elm$html$Html$text(arrow)
        ]));
    };
    var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, "color", "rgb(136, 19, 145)");
    var $elm$browser$Debugger$Expando$lineStarter = F3(function(maybeKey, maybeIsClosed, description) {
        var arrow = function() {
            if (maybeIsClosed.$ === "Nothing") return $elm$browser$Debugger$Expando$makeArrow("");
            else {
                if (maybeIsClosed.a) return $elm$browser$Debugger$Expando$makeArrow("▸");
                else return $elm$browser$Debugger$Expando$makeArrow("▾");
            }
        }();
        if (maybeKey.$ === "Nothing") return A2($elm$core$List$cons, arrow, description);
        else {
            var key = maybeKey.a;
            return A2($elm$core$List$cons, arrow, A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                $elm$browser$Debugger$Expando$purple
            ]), _List_fromArray([
                $elm$html$Html$text(key)
            ])), A2($elm$core$List$cons, $elm$html$Html$text(" = "), description)));
        }
    });
    var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, "color", "rgb(196, 26, 22)");
    var $elm$core$Tuple$second = function(_v0) {
        var y = _v0.b;
        return y;
    };
    var $elm$browser$Debugger$Expando$seqTypeToString = F2(function(n, seqType) {
        switch(seqType.$){
            case "ListSeq":
                return "List(" + ($elm$core$String$fromInt(n) + ")");
            case "SetSeq":
                return "Set(" + ($elm$core$String$fromInt(n) + ")");
            default:
                return "Array(" + ($elm$core$String$fromInt(n) + ")");
        }
    });
    var $elm$core$String$slice = _String_slice;
    var $elm$core$String$left = F2(function(n, string) {
        return n < 1 ? "" : A3($elm$core$String$slice, 0, n, string);
    });
    var $elm$core$String$right = F2(function(n, string) {
        return n < 1 ? "" : A3($elm$core$String$slice, -n, $elm$core$String$length(string), string);
    });
    var $elm$browser$Debugger$Expando$elideMiddle = function(str) {
        return $elm$core$String$length(str) <= 18 ? str : A2($elm$core$String$left, 8, str) + ("..." + A2($elm$core$String$right, 8, str));
    };
    var $elm$core$Dict$isEmpty = function(dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return true;
        else return false;
    };
    var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(function(length, starter, entries) {
        if (!entries.b) return _Utils_Tuple2(length + 1, _List_fromArray([
            $elm$html$Html$text("}")
        ]));
        else {
            var field = entries.a;
            var rest = entries.b;
            var nextLength = length + $elm$core$String$length(field) + 1;
            if (nextLength > 18) return _Utils_Tuple2(length + 2, _List_fromArray([
                $elm$html$Html$text("…}")
            ]));
            else {
                var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ",", rest);
                var finalLength = _v1.a;
                var otherHtmls = _v1.b;
                return _Utils_Tuple2(finalLength, A2($elm$core$List$cons, $elm$html$Html$text(starter), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                    $elm$browser$Debugger$Expando$purple
                ]), _List_fromArray([
                    $elm$html$Html$text(field)
                ])), otherHtmls)));
            }
        }
    });
    var $elm$browser$Debugger$Expando$viewTinyHelp = function(str) {
        return _Utils_Tuple2($elm$core$String$length(str), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $elm$core$Maybe$withDefault = F2(function(_default, maybe) {
        if (maybe.$ === "Just") {
            var value = maybe.a;
            return value;
        } else return _default;
    });
    var $elm$browser$Debugger$Expando$viewExtraTiny = function(value) {
        if (value.$ === "Record") {
            var record = value.b;
            return A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, 0, "{", $elm$core$Dict$keys(record));
        } else return $elm$browser$Debugger$Expando$viewTiny(value);
    };
    var $elm$browser$Debugger$Expando$viewTiny = function(value) {
        switch(value.$){
            case "S":
                var stringRep = value.a;
                var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
                return _Utils_Tuple2($elm$core$String$length(str), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$red
                    ]), _List_fromArray([
                        $elm$html$Html$text(str)
                    ]))
                ]));
            case "Primitive":
                var stringRep = value.a;
                return _Utils_Tuple2($elm$core$String$length(stringRep), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$blue
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ]));
            case "Sequence":
                var seqType = value.a;
                var valueList = value.c;
                return $elm$browser$Debugger$Expando$viewTinyHelp(A2($elm$browser$Debugger$Expando$seqTypeToString, $elm$core$List$length(valueList), seqType));
            case "Dictionary":
                var keyValuePairs = value.b;
                return $elm$browser$Debugger$Expando$viewTinyHelp("Dict(" + ($elm$core$String$fromInt($elm$core$List$length(keyValuePairs)) + ")"));
            case "Record":
                var record = value.b;
                return $elm$browser$Debugger$Expando$viewTinyRecord(record);
            default:
                if (!value.c.b) {
                    var maybeName = value.a;
                    return $elm$browser$Debugger$Expando$viewTinyHelp(A2($elm$core$Maybe$withDefault, "Unit", maybeName));
                } else {
                    var maybeName = value.a;
                    var valueList = value.c;
                    return $elm$browser$Debugger$Expando$viewTinyHelp(function() {
                        if (maybeName.$ === "Nothing") return "Tuple(" + ($elm$core$String$fromInt($elm$core$List$length(valueList)) + ")");
                        else {
                            var name = maybeName.a;
                            return name + " …";
                        }
                    }());
                }
        }
    };
    var $elm$browser$Debugger$Expando$viewTinyRecord = function(record) {
        return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(2, _List_fromArray([
            $elm$html$Html$text("{}")
        ])) : A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, 0, "{ ", $elm$core$Dict$toList(record));
    };
    var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(function(length, starter, entries) {
        if (!entries.b) return _Utils_Tuple2(length + 2, _List_fromArray([
            $elm$html$Html$text(" }")
        ]));
        else {
            var _v1 = entries.a;
            var field = _v1.a;
            var value = _v1.b;
            var rest = entries.b;
            var fieldLen = $elm$core$String$length(field);
            var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
            var valueLen = _v2.a;
            var valueHtmls = _v2.b;
            var newLength = length + fieldLen + valueLen + 5;
            if (newLength > 60) return _Utils_Tuple2(length + 4, _List_fromArray([
                $elm$html$Html$text(", … }")
            ]));
            else {
                var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ", ", rest);
                var finalLength = _v3.a;
                var otherHtmls = _v3.b;
                return _Utils_Tuple2(finalLength, A2($elm$core$List$cons, $elm$html$Html$text(starter), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                    $elm$browser$Debugger$Expando$purple
                ]), _List_fromArray([
                    $elm$html$Html$text(field)
                ])), A2($elm$core$List$cons, $elm$html$Html$text(" = "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, valueHtmls), otherHtmls)))));
            }
        }
    });
    var $elm$browser$Debugger$Expando$view = F2(function(maybeKey, expando) {
        switch(expando.$){
            case "S":
                var stringRep = expando.a;
                return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Nothing, _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$red
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ])));
            case "Primitive":
                var stringRep = expando.a;
                return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Nothing, _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$blue
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ])));
            case "Sequence":
                var seqType = expando.a;
                var isClosed = expando.b;
                var valueList = expando.c;
                return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
            case "Dictionary":
                var isClosed = expando.a;
                var keyValuePairs = expando.b;
                return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
            case "Record":
                var isClosed = expando.a;
                var valueDict = expando.b;
                return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
            default:
                var maybeName = expando.a;
                var isClosed = expando.b;
                var valueList = expando.c;
                return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
        }
    });
    var $elm$browser$Debugger$Expando$viewConstructor = F4(function(maybeKey, maybeName, isClosed, valueList) {
        var tinyArgs = A2($elm$core$List$map, A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny), valueList);
        var description = function() {
            var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
            if (_v7.a.$ === "Nothing") {
                if (!_v7.b.b) {
                    var _v8 = _v7.a;
                    return _List_fromArray([
                        $elm$html$Html$text("()")
                    ]);
                } else {
                    var _v9 = _v7.a;
                    var _v10 = _v7.b;
                    var x = _v10.a;
                    var xs = _v10.b;
                    return A2($elm$core$List$cons, $elm$html$Html$text("( "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, x), A3($elm$core$List$foldr, F2(function(args, rest) {
                        return A2($elm$core$List$cons, $elm$html$Html$text(", "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, args), rest));
                    }), _List_fromArray([
                        $elm$html$Html$text(" )")
                    ]), xs)));
                }
            } else if (!_v7.b.b) {
                var name = _v7.a.a;
                return _List_fromArray([
                    $elm$html$Html$text(name)
                ]);
            } else {
                var name = _v7.a.a;
                var _v11 = _v7.b;
                var x = _v11.a;
                var xs = _v11.b;
                return A2($elm$core$List$cons, $elm$html$Html$text(name + " "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, x), A3($elm$core$List$foldr, F2(function(args, rest) {
                    return A2($elm$core$List$cons, $elm$html$Html$text(" "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, args), rest));
                }), _List_Nil, xs)));
            }
        }();
        var _v4 = function() {
            if (!valueList.b) return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
            else {
                if (!valueList.b.b) {
                    var entry = valueList.a;
                    switch(entry.$){
                        case "S":
                            return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
                        case "Primitive":
                            return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
                        case "Sequence":
                            var subValueList = entry.c;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
                        case "Dictionary":
                            var keyValuePairs = entry.b;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
                        case "Record":
                            var record = entry.b;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewRecordOpen(record)));
                        default:
                            var subValueList = entry.c;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
                    }
                } else return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
            }
        }();
        var maybeIsClosed = _v4.a;
        var openHtml = _v4.b;
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
            openHtml
        ]));
    });
    var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(function(index, value) {
        return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just($elm$core$String$fromInt(index)), value));
    });
    var $elm$browser$Debugger$Expando$viewConstructorOpen = function(valueList) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
    };
    var $elm$browser$Debugger$Expando$viewDictionary = F3(function(maybeKey, isClosed, keyValuePairs) {
        var starter = "Dict(" + ($elm$core$String$fromInt($elm$core$List$length(keyValuePairs)) + ")");
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), _List_fromArray([
                $elm$html$Html$text(starter)
            ]))),
            isClosed ? $elm$html$Html$text("") : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
        ]));
    });
    var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(function(index, _v2) {
        var key = _v2.a;
        var value = _v2.b;
        switch(key.$){
            case "S":
                var stringRep = key.a;
                return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(stringRep), value));
            case "Primitive":
                var stringRep = key.a;
                return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(stringRep), value));
            default:
                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                    A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just("key"), key)),
                    A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just("value"), value))
                ]));
        }
    });
    var $elm$browser$Debugger$Expando$viewDictionaryOpen = function(keyValuePairs) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
    };
    var $elm$browser$Debugger$Expando$viewRecord = F3(function(maybeKey, isClosed, record) {
        var _v1 = isClosed ? _Utils_Tuple3($elm$browser$Debugger$Expando$viewTinyRecord(record).b, $elm$html$Html$text(""), $elm$html$Html$text("")) : _Utils_Tuple3(_List_fromArray([
            $elm$html$Html$text("{")
        ]), $elm$browser$Debugger$Expando$viewRecordOpen(record), A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad($elm$core$Maybe$Just(_Utils_Tuple0)), _List_fromArray([
            $elm$html$Html$text("}")
        ])));
        var start = _v1.a;
        var middle = _v1.b;
        var end = _v1.c;
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), start)),
            middle,
            end
        ]));
    });
    var $elm$browser$Debugger$Expando$viewRecordEntry = function(_v0) {
        var field = _v0.a;
        var value = _v0.b;
        return A2($elm$html$Html$map, $elm$browser$Debugger$Expando$Field(field), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(field), value));
    };
    var $elm$browser$Debugger$Expando$viewRecordOpen = function(record) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$map, $elm$browser$Debugger$Expando$viewRecordEntry, $elm$core$Dict$toList(record)));
    };
    var $elm$browser$Debugger$Expando$viewSequence = F4(function(maybeKey, seqType, isClosed, valueList) {
        var starter = A2($elm$browser$Debugger$Expando$seqTypeToString, $elm$core$List$length(valueList), seqType);
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), _List_fromArray([
                $elm$html$Html$text(starter)
            ]))),
            isClosed ? $elm$html$Html$text("") : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
        ]));
    });
    var $elm$browser$Debugger$Expando$viewSequenceOpen = function(values) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
    };
    var $elm$browser$Debugger$Main$viewExpando = F3(function(expandoMsg, expandoModel, layout) {
        var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
        var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
        var w = _v0.a;
        var h = _v0.b;
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "block"),
            A2($elm$html$Html$Attributes$style, "width", "calc(" + (w + " - 4em)")),
            A2($elm$html$Html$Attributes$style, "height", "calc(" + (h + " - 4em)")),
            A2($elm$html$Html$Attributes$style, "padding", "2em"),
            A2($elm$html$Html$Attributes$style, "margin", "0"),
            A2($elm$html$Html$Attributes$style, "overflow", "auto"),
            A2($elm$html$Html$Attributes$style, "pointer-events", block),
            A2($elm$html$Html$Attributes$style, "-webkit-user-select", block),
            A2($elm$html$Html$Attributes$style, "-moz-user-select", block),
            A2($elm$html$Html$Attributes$style, "-ms-user-select", block),
            A2($elm$html$Html$Attributes$style, "user-select", block)
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "color", "#ccc"),
                A2($elm$html$Html$Attributes$style, "padding", "0 0 1em 0")
            ]), _List_fromArray([
                $elm$html$Html$text("-- MESSAGE")
            ])),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$TweakExpandoMsg, A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "color", "#ccc"),
                A2($elm$html$Html$Attributes$style, "padding", "1em 0")
            ]), _List_fromArray([
                $elm$html$Html$text("-- MODEL")
            ])),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$TweakExpandoModel, A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
        ]));
    });
    var $elm$browser$Debugger$Main$Jump = function(a) {
        return {
            $: "Jump",
            a: a
        };
    };
    var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
    var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
    var $elm$browser$Debugger$Main$toHistoryPercents = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return _Utils_Tuple2($elm$browser$Debugger$Main$toPercent(x), "100%");
        } else {
            var y = layout.c;
            return _Utils_Tuple2("100%", $elm$browser$Debugger$Main$toPercent(1 - y));
        }
    };
    var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
    var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
    var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty("className");
    var $elm$browser$Debugger$History$idForMessageIndex = function(index) {
        return "msg-" + $elm$core$String$fromInt(index);
    };
    var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty("title");
    var $elm$browser$Debugger$History$viewMessage = F3(function(currentIndex, index, msg) {
        var messageName = _Debugger_messageToString(msg);
        var className = _Utils_eq(currentIndex, index) ? "elm-debugger-entry elm-debugger-entry-selected" : "elm-debugger-entry";
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id($elm$browser$Debugger$History$idForMessageIndex(index)),
            $elm$html$Html$Attributes$class(className),
            $elm$html$Html$Events$onClick(index)
        ]), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$title(messageName),
                $elm$html$Html$Attributes$class("elm-debugger-entry-content")
            ]), _List_fromArray([
                $elm$html$Html$text(messageName)
            ])),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("elm-debugger-entry-index")
            ]), _List_fromArray([
                $elm$html$Html$text($elm$core$String$fromInt(index))
            ]))
        ]));
    });
    var $elm$browser$Debugger$History$consMsg = F3(function(currentIndex, msg, _v0) {
        var index = _v0.a;
        var rest = _v0.b;
        return _Utils_Tuple2(index + 1, A2($elm$core$List$cons, _Utils_Tuple2($elm$core$String$fromInt(index), A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)), rest));
    });
    var $elm$core$Array$length = function(_v0) {
        var len = _v0.a;
        return len;
    };
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $elm$virtual_dom$VirtualDom$keyedNode = function(tag) {
        return _VirtualDom_keyedNode(_VirtualDom_noScript(tag));
    };
    var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
    var $elm$browser$Debugger$History$maxSnapshotSize = 31;
    var $elm$browser$Debugger$History$showMoreButton = function(numMessages) {
        var nextIndex = numMessages - 1 - $elm$browser$Debugger$History$maxSnapshotSize * 2;
        var labelText = "View more messages";
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("elm-debugger-entry"),
            $elm$html$Html$Events$onClick(nextIndex)
        ]), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$title(labelText),
                $elm$html$Html$Attributes$class("elm-debugger-entry-content")
            ]), _List_fromArray([
                $elm$html$Html$text(labelText)
            ])),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("elm-debugger-entry-index")
            ]), _List_Nil)
        ]));
    };
    var $elm$browser$Debugger$History$styles = A3($elm$html$Html$node, "style", _List_Nil, _List_fromArray([
        $elm$html$Html$text("\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n")
    ]));
    var $elm$core$Basics$ge = _Utils_ge;
    var $elm$browser$Debugger$History$viewSnapshot = F3(function(selectedIndex, index, _v0) {
        var messages = _v0.messages;
        return A3($elm$html$Html$Keyed$node, "div", _List_Nil, A3($elm$core$Array$foldr, $elm$browser$Debugger$History$consMsg(selectedIndex), _Utils_Tuple2(index, _List_Nil), messages).b);
    });
    var $elm$browser$Debugger$History$consSnapshot = F3(function(selectedIndex, snapshot, _v0) {
        var index = _v0.a;
        var rest = _v0.b;
        var nextIndex = index + $elm$core$Array$length(snapshot.messages);
        var selectedIndexHelp = _Utils_cmp(nextIndex, selectedIndex) > 0 && _Utils_cmp(selectedIndex, index) > -1 ? selectedIndex : -1;
        return _Utils_Tuple2(nextIndex, A2($elm$core$List$cons, A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot), rest));
    });
    var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
    var $elm$core$Array$foldl = F3(function(func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function(node, acc) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
            } else {
                var values = node.a;
                return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
            }
        });
        return A3($elm$core$Elm$JsArray$foldl, func, A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree), tail);
    });
    var $elm$browser$Debugger$History$viewAllSnapshots = F3(function(selectedIndex, startIndex, snapshots) {
        return A2($elm$html$Html$div, _List_Nil, A3($elm$core$Array$foldl, $elm$browser$Debugger$History$consSnapshot(selectedIndex), _Utils_Tuple2(startIndex, _List_Nil), snapshots).b);
    });
    var $elm$core$Array$fromListHelp = F3(function(list, nodeList, nodeListSize) {
        fromListHelp: while(true){
            var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
            var jsArray = _v0.a;
            var remainingItems = _v0.b;
            if (_Utils_cmp($elm$core$Elm$JsArray$length(jsArray), $elm$core$Array$branchFactor) < 0) return A2($elm$core$Array$builderToArray, true, {
                nodeList: nodeList,
                nodeListSize: nodeListSize,
                tail: jsArray
            });
            else {
                var $temp$list = remainingItems, $temp$nodeList = A2($elm$core$List$cons, $elm$core$Array$Leaf(jsArray), nodeList), $temp$nodeListSize = nodeListSize + 1;
                list = $temp$list;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue fromListHelp;
            }
        }
    });
    var $elm$core$Array$fromList = function(list) {
        if (!list.b) return $elm$core$Array$empty;
        else return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
    var $elm$core$Array$bitMask = 4294967295 >>> 32 - $elm$core$Array$shiftStep;
    var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
    var $elm$core$Array$getHelp = F3(function(shift, index, tree) {
        getHelp: while(true){
            var pos = $elm$core$Array$bitMask & index >>> shift;
            var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (_v0.$ === "SubTree") {
                var subTree = _v0.a;
                var $temp$shift = shift - $elm$core$Array$shiftStep, $temp$index = index, $temp$tree = subTree;
                shift = $temp$shift;
                index = $temp$index;
                tree = $temp$tree;
                continue getHelp;
            } else {
                var values = _v0.a;
                return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
            }
        }
    });
    var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
    var $elm$core$Array$tailIndex = function(len) {
        return len >>> 5 << 5;
    };
    var $elm$core$Array$get = F2(function(index, _v0) {
        var len = _v0.a;
        var startShift = _v0.b;
        var tree = _v0.c;
        var tail = _v0.d;
        return index < 0 || _Utils_cmp(index, len) > -1 ? $elm$core$Maybe$Nothing : _Utils_cmp(index, $elm$core$Array$tailIndex(len)) > -1 ? $elm$core$Maybe$Just(A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(A3($elm$core$Array$getHelp, startShift, index, tree));
    });
    var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
    var $elm$core$Elm$JsArray$slice = _JsArray_slice;
    var $elm$core$Array$appendHelpBuilder = F2(function(tail, builder) {
        var tailLen = $elm$core$Elm$JsArray$length(tail);
        var notAppended = $elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail) - tailLen;
        var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
        return notAppended < 0 ? {
            nodeList: A2($elm$core$List$cons, $elm$core$Array$Leaf(appended), builder.nodeList),
            nodeListSize: builder.nodeListSize + 1,
            tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
        } : !notAppended ? {
            nodeList: A2($elm$core$List$cons, $elm$core$Array$Leaf(appended), builder.nodeList),
            nodeListSize: builder.nodeListSize + 1,
            tail: $elm$core$Elm$JsArray$empty
        } : {
            nodeList: builder.nodeList,
            nodeListSize: builder.nodeListSize,
            tail: appended
        };
    });
    var $elm$core$List$drop = F2(function(n, list) {
        drop: while(true){
            if (n <= 0) return list;
            else {
                if (!list.b) return list;
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs;
                    n = $temp$n;
                    list = $temp$list;
                    continue drop;
                }
            }
        }
    });
    var $elm$core$Array$sliceLeft = F2(function(from, array) {
        var len = array.a;
        var tree = array.c;
        var tail = array.d;
        if (!from) return array;
        else {
            if (_Utils_cmp(from, $elm$core$Array$tailIndex(len)) > -1) return A4($elm$core$Array$Array_elm_builtin, len - from, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, A3($elm$core$Elm$JsArray$slice, from - $elm$core$Array$tailIndex(len), $elm$core$Elm$JsArray$length(tail), tail));
            else {
                var skipNodes = from / $elm$core$Array$branchFactor | 0;
                var helper = F2(function(node, acc) {
                    if (node.$ === "SubTree") {
                        var subTree = node.a;
                        return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
                    } else {
                        var leaf = node.a;
                        return A2($elm$core$List$cons, leaf, acc);
                    }
                });
                var leafNodes = A3($elm$core$Elm$JsArray$foldr, helper, _List_fromArray([
                    tail
                ]), tree);
                var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
                if (!nodesToInsert.b) return $elm$core$Array$empty;
                else {
                    var head = nodesToInsert.a;
                    var rest = nodesToInsert.b;
                    var firstSlice = from - skipNodes * $elm$core$Array$branchFactor;
                    var initialBuilder = {
                        nodeList: _List_Nil,
                        nodeListSize: 0,
                        tail: A3($elm$core$Elm$JsArray$slice, firstSlice, $elm$core$Elm$JsArray$length(head), head)
                    };
                    return A2($elm$core$Array$builderToArray, true, A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
                }
            }
        }
    });
    var $elm$core$Array$fetchNewTail = F4(function(shift, end, treeEnd, tree) {
        fetchNewTail: while(true){
            var pos = $elm$core$Array$bitMask & treeEnd >>> shift;
            var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (_v0.$ === "SubTree") {
                var sub = _v0.a;
                var $temp$shift = shift - $elm$core$Array$shiftStep, $temp$end = end, $temp$treeEnd = treeEnd, $temp$tree = sub;
                shift = $temp$shift;
                end = $temp$end;
                treeEnd = $temp$treeEnd;
                tree = $temp$tree;
                continue fetchNewTail;
            } else {
                var values = _v0.a;
                return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
            }
        }
    });
    var $elm$core$Array$hoistTree = F3(function(oldShift, newShift, tree) {
        hoistTree: while(true){
            if (_Utils_cmp(oldShift, newShift) < 1 || !$elm$core$Elm$JsArray$length(tree)) return tree;
            else {
                var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
                if (_v0.$ === "SubTree") {
                    var sub = _v0.a;
                    var $temp$oldShift = oldShift - $elm$core$Array$shiftStep, $temp$newShift = newShift, $temp$tree = sub;
                    oldShift = $temp$oldShift;
                    newShift = $temp$newShift;
                    tree = $temp$tree;
                    continue hoistTree;
                } else return tree;
            }
        }
    });
    var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
    var $elm$core$Array$sliceTree = F3(function(shift, endIdx, tree) {
        var lastPos = $elm$core$Array$bitMask & endIdx >>> shift;
        var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
        if (_v0.$ === "SubTree") {
            var sub = _v0.a;
            var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
            return !$elm$core$Elm$JsArray$length(newSub) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3($elm$core$Elm$JsArray$unsafeSet, lastPos, $elm$core$Array$SubTree(newSub), A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
        } else return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
    });
    var $elm$core$Array$sliceRight = F2(function(end, array) {
        var len = array.a;
        var startShift = array.b;
        var tree = array.c;
        var tail = array.d;
        if (_Utils_eq(end, len)) return array;
        else {
            if (_Utils_cmp(end, $elm$core$Array$tailIndex(len)) > -1) return A4($elm$core$Array$Array_elm_builtin, end, startShift, tree, A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
            else {
                var endIdx = $elm$core$Array$tailIndex(end);
                var depth = $elm$core$Basics$floor(A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, A2($elm$core$Basics$max, 1, endIdx - 1)));
                var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
                return A4($elm$core$Array$Array_elm_builtin, end, newShift, A3($elm$core$Array$hoistTree, startShift, newShift, A3($elm$core$Array$sliceTree, startShift, endIdx, tree)), A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
            }
        }
    });
    var $elm$core$Array$translateIndex = F2(function(index, _v0) {
        var len = _v0.a;
        var posIndex = index < 0 ? len + index : index;
        return posIndex < 0 ? 0 : _Utils_cmp(posIndex, len) > 0 ? len : posIndex;
    });
    var $elm$core$Array$slice = F3(function(from, to, array) {
        var correctTo = A2($elm$core$Array$translateIndex, to, array);
        var correctFrom = A2($elm$core$Array$translateIndex, from, array);
        return _Utils_cmp(correctFrom, correctTo) > 0 ? $elm$core$Array$empty : A2($elm$core$Array$sliceLeft, correctFrom, A2($elm$core$Array$sliceRight, correctTo, array));
    });
    var $elm$browser$Debugger$History$viewRecentSnapshots = F3(function(selectedIndex, recentMessagesNum, snapshots) {
        var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
        var arrayLength = $elm$core$Array$length(snapshots);
        var snapshotsToRender = function() {
            var _v0 = _Utils_Tuple2(A2($elm$core$Array$get, arrayLength - 2, snapshots), A2($elm$core$Array$get, arrayLength - 1, snapshots));
            if (_v0.a.$ === "Just" && _v0.b.$ === "Just") {
                var fillerSnapshot = _v0.a.a;
                var recentSnapshot = _v0.b.a;
                return $elm$core$Array$fromList(_List_fromArray([
                    {
                        messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
                        model: fillerSnapshot.model
                    },
                    recentSnapshot
                ]));
            } else return snapshots;
        }();
        var startingIndex = arrayLength * $elm$browser$Debugger$History$maxSnapshotSize - $elm$browser$Debugger$History$maxSnapshotSize - messagesToFill;
        return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
    });
    var $elm$browser$Debugger$History$view = F2(function(maybeIndex, _v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var numMessages = _v0.numMessages;
        var recentMessageStartIndex = numMessages - recent.numMessages;
        var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
        var newStuff = A3($elm$html$Html$Keyed$node, "div", _List_Nil, A3($elm$core$List$foldr, $elm$browser$Debugger$History$consMsg(index), _Utils_Tuple2(recentMessageStartIndex, _List_Nil), recent.messages).b);
        var onlyRenderRecentMessages = !_Utils_eq(index, -1) || $elm$core$Array$length(snapshots) < 2;
        var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("elm-debugger-sidebar"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "overflow-y", "auto"),
            A2($elm$html$Html$Attributes$style, "height", "calc(100% - 72px)")
        ]), A2($elm$core$List$cons, $elm$browser$Debugger$History$styles, A2($elm$core$List$cons, newStuff, A2($elm$core$List$cons, oldStuff, onlyRenderRecentMessages ? _List_Nil : _List_fromArray([
            $elm$browser$Debugger$History$showMoreButton(numMessages)
        ])))));
    });
    var $elm$browser$Debugger$Main$SwapLayout = {
        $: "SwapLayout"
    };
    var $elm$browser$Debugger$Main$toHistoryIcon = function(layout) {
        if (layout.$ === "Horizontal") return "M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z";
        else return "M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z";
    };
    var $elm$browser$Debugger$Main$icon = function(path) {
        return A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "svg", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "viewBox", "0 0 16 16"),
            A2($elm$virtual_dom$VirtualDom$attribute, "xmlns", "http://www.w3.org/2000/svg"),
            A2($elm$virtual_dom$VirtualDom$attribute, "fill", "currentColor"),
            A2($elm$virtual_dom$VirtualDom$attribute, "width", "16px"),
            A2($elm$virtual_dom$VirtualDom$attribute, "height", "16px")
        ]), _List_fromArray([
            A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "path", _List_fromArray([
                A2($elm$virtual_dom$VirtualDom$attribute, "d", path)
            ]), _List_Nil)
        ]));
    };
    var $elm$browser$Debugger$Main$viewHistoryButton = F3(function(label, msg, path) {
        return A2($elm$html$Html$button, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "background", "none"),
            A2($elm$html$Html$Attributes$style, "border", "none"),
            A2($elm$html$Html$Attributes$style, "color", "inherit"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            $elm$html$Html$Events$onClick(msg)
        ]), _List_fromArray([
            $elm$browser$Debugger$Main$icon(path),
            A2($elm$html$Html$span, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding-left", "6px")
            ]), _List_fromArray([
                $elm$html$Html$text(label)
            ]))
        ]));
    });
    var $elm$browser$Debugger$Main$viewHistoryOptions = function(layout) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "justify-content", "space-between"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), _List_fromArray([
            A3($elm$browser$Debugger$Main$viewHistoryButton, "Swap Layout", $elm$browser$Debugger$Main$SwapLayout, $elm$browser$Debugger$Main$toHistoryIcon(layout)),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
                A2($elm$html$Html$Attributes$style, "align-items", "center"),
                A2($elm$html$Html$Attributes$style, "justify-content", "space-between")
            ]), _List_fromArray([
                A3($elm$browser$Debugger$Main$viewHistoryButton, "Import", $elm$browser$Debugger$Main$Import, "M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z"),
                A3($elm$browser$Debugger$Main$viewHistoryButton, "Export", $elm$browser$Debugger$Main$Export, "M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z")
            ]))
        ]));
    };
    var $elm$browser$Debugger$Main$SliderJump = function(a) {
        return {
            $: "SliderJump",
            a: a
        };
    };
    var $elm$core$Basics$composeR = F3(function(f, g, x) {
        return g(f(x));
    });
    var $elm$html$Html$input = _VirtualDom_node("input");
    var $elm$browser$Debugger$Main$isPlaying = function(maybeIndex) {
        if (maybeIndex.$ === "Nothing") return true;
        else return false;
    };
    var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty("max");
    var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty("min");
    var $elm$html$Html$Events$alwaysStop = function(x) {
        return _Utils_Tuple2(x, true);
    };
    var $elm$virtual_dom$VirtualDom$MayStopPropagation = function(a) {
        return {
            $: "MayStopPropagation",
            a: a
        };
    };
    var $elm$html$Html$Events$stopPropagationOn = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
    });
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $elm$html$Html$Events$targetValue = A2($elm$json$Json$Decode$at, _List_fromArray([
        "target",
        "value"
    ]), $elm$json$Json$Decode$string);
    var $elm$html$Html$Events$onInput = function(tagger) {
        return A2($elm$html$Html$Events$stopPropagationOn, "input", A2($elm$json$Json$Decode$map, $elm$html$Html$Events$alwaysStop, A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
    };
    var $elm$core$String$toInt = _String_toInt;
    var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty("type");
    var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty("value");
    var $elm$browser$Debugger$Main$viewPlayButton = function(playing) {
        return A2($elm$html$Html$button, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "background", "#1293D8"),
            A2($elm$html$Html$Attributes$style, "border", "none"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            A2($elm$html$Html$Attributes$style, "width", "36px"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            $elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
        ]), _List_fromArray([
            playing ? $elm$browser$Debugger$Main$icon("M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z") : $elm$browser$Debugger$Main$icon("M2 2l12 7l-12 7z")
        ]));
    };
    var $elm$browser$Debugger$Main$viewHistorySlider = F2(function(history1, maybeIndex) {
        var lastIndex = $elm$browser$Debugger$History$size(history1) - 1;
        var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), _List_fromArray([
            A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewPlayButton, $elm$browser$Debugger$Main$isPlaying(maybeIndex)),
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$type_("range"),
                A2($elm$html$Html$Attributes$style, "width", "calc(100% - 56px)"),
                A2($elm$html$Html$Attributes$style, "height", "36px"),
                A2($elm$html$Html$Attributes$style, "margin", "0 10px"),
                $elm$html$Html$Attributes$min("0"),
                $elm$html$Html$Attributes$max($elm$core$String$fromInt(lastIndex)),
                $elm$html$Html$Attributes$value($elm$core$String$fromInt(selectedIndex)),
                $elm$html$Html$Events$onInput(A2($elm$core$Basics$composeR, $elm$core$String$toInt, A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(lastIndex), $elm$browser$Debugger$Main$SliderJump)))
            ]), _List_Nil)
        ]));
    });
    var $elm$browser$Debugger$Main$viewHistory = F3(function(maybeIndex, history1, layout) {
        var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
        var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
        var w = _v0.a;
        var h = _v0.b;
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", w),
            A2($elm$html$Html$Attributes$style, "height", h),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "column"),
            A2($elm$html$Html$Attributes$style, "color", "#DDDDDD"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(61, 61, 61)"),
            A2($elm$html$Html$Attributes$style, "pointer-events", block),
            A2($elm$html$Html$Attributes$style, "user-select", block)
        ]), _List_fromArray([
            A2($elm$browser$Debugger$Main$viewHistorySlider, history1, maybeIndex),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$Jump, A2($elm$browser$Debugger$History$view, maybeIndex, history1)),
            A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
        ]));
    });
    var $elm$browser$Debugger$Main$popoutView = function(model) {
        var maybeIndex = function() {
            var _v0 = model.state;
            if (_v0.$ === "Running") return $elm$core$Maybe$Nothing;
            else {
                var index = _v0.a;
                return $elm$core$Maybe$Just(index);
            }
        }();
        var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
        return A3($elm$html$Html$node, "body", _Utils_ap($elm$browser$Debugger$Main$toDragListeners(model.layout), _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin", "0"),
            A2($elm$html$Html$Attributes$style, "padding", "0"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "font-family", "monospace"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", $elm$browser$Debugger$Main$toFlexDirection(model.layout))
        ])), _List_fromArray([
            A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
            $elm$browser$Debugger$Main$viewDragZone(model.layout),
            A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
        ]));
    };
    var $elm$browser$Debugger$Overlay$BlockAll = {
        $: "BlockAll"
    };
    var $elm$browser$Debugger$Overlay$toBlockerType = F2(function(isPaused, state) {
        switch(state.$){
            case "None":
                return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
            case "BadMetadata":
                return $elm$browser$Debugger$Overlay$BlockMost;
            case "BadImport":
                return $elm$browser$Debugger$Overlay$BlockMost;
            default:
                return $elm$browser$Debugger$Overlay$BlockMost;
        }
    });
    var $elm$browser$Debugger$Main$toBlockerType = function(model) {
        return A2($elm$browser$Debugger$Overlay$toBlockerType, $elm$browser$Debugger$Main$isPaused(model.state), model.overlay);
    };
    var $elm$browser$Debugger$Main$Horizontal = F3(function(a, b, c) {
        return {
            $: "Horizontal",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Main$Running = function(a) {
        return {
            $: "Running",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Static = {
        $: "Static"
    };
    var $elm$browser$Debugger$Metadata$Error = F2(function(message, problems) {
        return {
            message: message,
            problems: problems
        };
    });
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $elm$browser$Debugger$Metadata$Metadata = F2(function(versions, types) {
        return {
            types: types,
            versions: versions
        };
    });
    var $elm$browser$Debugger$Metadata$Types = F3(function(message, aliases, unions) {
        return {
            aliases: aliases,
            message: message,
            unions: unions
        };
    });
    var $elm$browser$Debugger$Metadata$Alias = F2(function(args, tipe) {
        return {
            args: args,
            tipe: tipe
        };
    });
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$browser$Debugger$Metadata$decodeAlias = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Alias, A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "type", $elm$json$Json$Decode$string));
    var $elm$browser$Debugger$Metadata$Union = F2(function(args, tags) {
        return {
            args: args,
            tags: tags
        };
    });
    var $elm$core$Dict$fromList = function(assocs) {
        return A3($elm$core$List$foldl, F2(function(_v0, dict) {
            var key = _v0.a;
            var value = _v0.b;
            return A3($elm$core$Dict$insert, key, value, dict);
        }), $elm$core$Dict$empty, assocs);
    };
    var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
    var $elm$json$Json$Decode$dict = function(decoder) {
        return A2($elm$json$Json$Decode$map, $elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
    };
    var $elm$browser$Debugger$Metadata$decodeUnion = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Union, A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "tags", $elm$json$Json$Decode$dict($elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $elm$browser$Debugger$Metadata$decodeTypes = A4($elm$json$Json$Decode$map3, $elm$browser$Debugger$Metadata$Types, A2($elm$json$Json$Decode$field, "message", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "aliases", $elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)), A2($elm$json$Json$Decode$field, "unions", $elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
    var $elm$browser$Debugger$Metadata$Versions = function(elm) {
        return {
            elm: elm
        };
    };
    var $elm$browser$Debugger$Metadata$decodeVersions = A2($elm$json$Json$Decode$map, $elm$browser$Debugger$Metadata$Versions, A2($elm$json$Json$Decode$field, "elm", $elm$json$Json$Decode$string));
    var $elm$browser$Debugger$Metadata$decoder = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Metadata, A2($elm$json$Json$Decode$field, "versions", $elm$browser$Debugger$Metadata$decodeVersions), A2($elm$json$Json$Decode$field, "types", $elm$browser$Debugger$Metadata$decodeTypes));
    var $elm$browser$Debugger$Metadata$ProblemType = F2(function(name, problems) {
        return {
            name: name,
            problems: problems
        };
    });
    var $elm$core$List$maybeCons = F3(function(f, mx, xs) {
        var _v0 = f(mx);
        if (_v0.$ === "Just") {
            var x = _v0.a;
            return A2($elm$core$List$cons, x, xs);
        } else return xs;
    });
    var $elm$core$List$filterMap = F2(function(f, xs) {
        return A3($elm$core$List$foldr, $elm$core$List$maybeCons(f), _List_Nil, xs);
    });
    var $elm$core$String$contains = _String_contains;
    var $elm$browser$Debugger$Metadata$hasProblem = F2(function(tipe, _v0) {
        var problem = _v0.a;
        var token = _v0.b;
        return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
    });
    var $elm$browser$Debugger$Metadata$Decoder = {
        $: "Decoder"
    };
    var $elm$browser$Debugger$Metadata$Function = {
        $: "Function"
    };
    var $elm$browser$Debugger$Metadata$Process = {
        $: "Process"
    };
    var $elm$browser$Debugger$Metadata$Program = {
        $: "Program"
    };
    var $elm$browser$Debugger$Metadata$Request = {
        $: "Request"
    };
    var $elm$browser$Debugger$Metadata$Socket = {
        $: "Socket"
    };
    var $elm$browser$Debugger$Metadata$Task = {
        $: "Task"
    };
    var $elm$browser$Debugger$Metadata$VirtualDom = {
        $: "VirtualDom"
    };
    var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray([
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Function, "->"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, "Json.Decode.Decoder"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Task, "Task.Task"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Process, "Process.Id"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, "WebSocket.LowLevel.WebSocket"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Request, "Http.Request"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Program, "Platform.Program"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, "VirtualDom.Node"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, "VirtualDom.Attribute")
    ]);
    var $elm$browser$Debugger$Metadata$findProblems = function(tipe) {
        return A2($elm$core$List$filterMap, $elm$browser$Debugger$Metadata$hasProblem(tipe), $elm$browser$Debugger$Metadata$problemTable);
    };
    var $elm$browser$Debugger$Metadata$collectBadAliases = F3(function(name, _v0, list) {
        var tipe = _v0.tipe;
        var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
        if (!_v1.b) return list;
        else {
            var problems = _v1;
            return A2($elm$core$List$cons, A2($elm$browser$Debugger$Metadata$ProblemType, name, problems), list);
        }
    });
    var $elm$core$List$append = F2(function(xs, ys) {
        if (!ys.b) return xs;
        else return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
    });
    var $elm$core$List$concat = function(lists) {
        return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
    };
    var $elm$core$List$concatMap = F2(function(f, list) {
        return $elm$core$List$concat(A2($elm$core$List$map, f, list));
    });
    var $elm$core$Dict$values = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, valueList) {
            return A2($elm$core$List$cons, value, valueList);
        }), _List_Nil, dict);
    };
    var $elm$browser$Debugger$Metadata$collectBadUnions = F3(function(name, _v0, list) {
        var tags = _v0.tags;
        var _v1 = A2($elm$core$List$concatMap, $elm$browser$Debugger$Metadata$findProblems, $elm$core$List$concat($elm$core$Dict$values(tags)));
        if (!_v1.b) return list;
        else {
            var problems = _v1;
            return A2($elm$core$List$cons, A2($elm$browser$Debugger$Metadata$ProblemType, name, problems), list);
        }
    });
    var $elm$core$Dict$foldl = F3(function(func, acc, dict) {
        foldl: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return acc;
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldl, func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    });
    var $elm$browser$Debugger$Metadata$isPortable = function(_v0) {
        var types = _v0.types;
        var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
        var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
        if (!_v1.b) return $elm$core$Maybe$Nothing;
        else {
            var problems = _v1;
            return $elm$core$Maybe$Just(A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
        }
    };
    var $elm$browser$Debugger$Metadata$decode = function(value) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
        if (_v0.$ === "Err") return $elm$core$Result$Err(A2($elm$browser$Debugger$Metadata$Error, "The compiler is generating bad metadata. This is a compiler bug!", _List_Nil));
        else {
            var metadata = _v0.a;
            var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
            if (_v1.$ === "Nothing") return $elm$core$Result$Ok(metadata);
            else {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
        }
    };
    var $elm$browser$Debugger$History$History = F3(function(snapshots, recent, numMessages) {
        return {
            numMessages: numMessages,
            recent: recent,
            snapshots: snapshots
        };
    });
    var $elm$browser$Debugger$History$RecentHistory = F3(function(model, messages, numMessages) {
        return {
            messages: messages,
            model: model,
            numMessages: numMessages
        };
    });
    var $elm$browser$Debugger$History$empty = function(model) {
        return A3($elm$browser$Debugger$History$History, $elm$core$Array$empty, A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0), 0);
    };
    var $elm$core$Dict$map = F2(function(func, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Dict$RBEmpty_elm_builtin;
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, color, key, A2(func, key, value), A2($elm$core$Dict$map, func, left), A2($elm$core$Dict$map, func, right));
        }
    });
    var $elm$core$Dict$sizeHelp = F2(function(n, dict) {
        sizeHelp: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return n;
            else {
                var left = dict.d;
                var right = dict.e;
                var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right), $temp$dict = left;
                n = $temp$n;
                dict = $temp$dict;
                continue sizeHelp;
            }
        }
    });
    var $elm$core$Dict$size = function(dict) {
        return A2($elm$core$Dict$sizeHelp, 0, dict);
    };
    var $elm$browser$Debugger$Expando$initHelp = F2(function(isOuter, expando) {
        switch(expando.$){
            case "S":
                return expando;
            case "Primitive":
                return expando;
            case "Sequence":
                var seqType = expando.a;
                var isClosed = expando.b;
                var items = expando.c;
                return isOuter ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, A2($elm$core$List$map, $elm$browser$Debugger$Expando$initHelp(false), items)) : $elm$core$List$length(items) <= 8 ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando;
            case "Dictionary":
                var isClosed = expando.a;
                var keyValuePairs = expando.b;
                return isOuter ? A2($elm$browser$Debugger$Expando$Dictionary, false, A2($elm$core$List$map, function(_v1) {
                    var k = _v1.a;
                    var v = _v1.b;
                    return _Utils_Tuple2(k, A2($elm$browser$Debugger$Expando$initHelp, false, v));
                }, keyValuePairs)) : $elm$core$List$length(keyValuePairs) <= 8 ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando;
            case "Record":
                var isClosed = expando.a;
                var entries = expando.b;
                return isOuter ? A2($elm$browser$Debugger$Expando$Record, false, A2($elm$core$Dict$map, F2(function(_v2, v) {
                    return A2($elm$browser$Debugger$Expando$initHelp, false, v);
                }), entries)) : $elm$core$Dict$size(entries) <= 4 ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando;
            default:
                var maybeName = expando.a;
                var isClosed = expando.b;
                var args = expando.c;
                return isOuter ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, A2($elm$core$List$map, $elm$browser$Debugger$Expando$initHelp(false), args)) : $elm$core$List$length(args) <= 4 ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando;
        }
    });
    var $elm$browser$Debugger$Expando$init = function(value) {
        return A2($elm$browser$Debugger$Expando$initHelp, true, _Debugger_init(value));
    };
    var $elm$core$Platform$Cmd$map = _Platform_map;
    var $elm$browser$Debugger$Overlay$None = {
        $: "None"
    };
    var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
    var $elm$browser$Debugger$Main$wrapInit = F4(function(metadata, popout, init, flags) {
        var _v0 = init(flags);
        var userModel = _v0.a;
        var userCommands = _v0.b;
        return _Utils_Tuple2({
            expandoModel: $elm$browser$Debugger$Expando$init(userModel),
            expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
            history: $elm$browser$Debugger$History$empty(userModel),
            layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
            metadata: $elm$browser$Debugger$Metadata$decode(metadata),
            overlay: $elm$browser$Debugger$Overlay$none,
            popout: popout,
            state: $elm$browser$Debugger$Main$Running(userModel)
        }, A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
    });
    var $elm$browser$Debugger$Main$getLatestModel = function(state) {
        if (state.$ === "Running") {
            var model = state.a;
            return model;
        } else {
            var model = state.c;
            return model;
        }
    };
    var $elm$core$Platform$Sub$map = _Platform_map;
    var $elm$browser$Debugger$Main$wrapSubs = F2(function(subscriptions, model) {
        return A2($elm$core$Platform$Sub$map, $elm$browser$Debugger$Main$UserMsg, subscriptions($elm$browser$Debugger$Main$getLatestModel(model.state)));
    });
    var $elm$browser$Debugger$Main$Moving = {
        $: "Moving"
    };
    var $elm$browser$Debugger$Main$Paused = F5(function(a, b, c, d, e) {
        return {
            $: "Paused",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $elm$browser$Debugger$History$Snapshot = F2(function(model, messages) {
        return {
            messages: messages,
            model: model
        };
    });
    var $elm$browser$Debugger$History$addRecent = F3(function(msg, newModel, _v0) {
        var model = _v0.model;
        var messages = _v0.messages;
        var numMessages = _v0.numMessages;
        return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2($elm$core$Maybe$Just(A2($elm$browser$Debugger$History$Snapshot, model, $elm$core$Array$fromList(messages))), A3($elm$browser$Debugger$History$RecentHistory, newModel, _List_fromArray([
            msg
        ]), 1)) : _Utils_Tuple2($elm$core$Maybe$Nothing, A3($elm$browser$Debugger$History$RecentHistory, model, A2($elm$core$List$cons, msg, messages), numMessages + 1));
    });
    var $elm$core$Elm$JsArray$push = _JsArray_push;
    var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
    var $elm$core$Array$insertTailInTree = F4(function(shift, index, tail, tree) {
        var pos = $elm$core$Array$bitMask & index >>> shift;
        if (_Utils_cmp(pos, $elm$core$Elm$JsArray$length(tree)) > -1) {
            if (shift === 5) return A2($elm$core$Elm$JsArray$push, $elm$core$Array$Leaf(tail), tree);
            else {
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
                return A2($elm$core$Elm$JsArray$push, newSub, tree);
            }
        } else {
            var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (value.$ === "SubTree") {
                var subTree = value.a;
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
                return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
            } else {
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$singleton(value)));
                return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
            }
        }
    });
    var $elm$core$Array$unsafeReplaceTail = F2(function(newTail, _v0) {
        var len = _v0.a;
        var startShift = _v0.b;
        var tree = _v0.c;
        var tail = _v0.d;
        var originalTailLen = $elm$core$Elm$JsArray$length(tail);
        var newTailLen = $elm$core$Elm$JsArray$length(newTail);
        var newArrayLen = len + (newTailLen - originalTailLen);
        if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
            var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
            if (overflow) {
                var newShift = startShift + $elm$core$Array$shiftStep;
                var newTree = A4($elm$core$Array$insertTailInTree, newShift, len, newTail, $elm$core$Elm$JsArray$singleton($elm$core$Array$SubTree(tree)));
                return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
            } else return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree), $elm$core$Elm$JsArray$empty);
        } else return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
    });
    var $elm$core$Array$push = F2(function(a, array) {
        var tail = array.d;
        return A2($elm$core$Array$unsafeReplaceTail, A2($elm$core$Elm$JsArray$push, a, tail), array);
    });
    var $elm$browser$Debugger$History$add = F3(function(msg, model, _v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var numMessages = _v0.numMessages;
        var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
        if (_v1.a.$ === "Just") {
            var snapshot = _v1.a.a;
            var newRecent = _v1.b;
            return A3($elm$browser$Debugger$History$History, A2($elm$core$Array$push, snapshot, snapshots), newRecent, numMessages + 1);
        } else {
            var _v2 = _v1.a;
            var newRecent = _v1.b;
            return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
        }
    });
    var $elm$core$Basics$always = F2(function(a, _v0) {
        return a;
    });
    var $elm$browser$Debugger$Overlay$BadImport = function(a) {
        return {
            $: "BadImport",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$RiskyImport = F2(function(a, b) {
        return {
            $: "RiskyImport",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$VersionChanged = F2(function(a, b) {
        return {
            $: "VersionChanged",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$MessageChanged = F2(function(a, b) {
        return {
            $: "MessageChanged",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$SomethingChanged = function(a) {
        return {
            $: "SomethingChanged",
            a: a
        };
    };
    var $elm$browser$Debugger$Report$AliasChange = function(a) {
        return {
            $: "AliasChange",
            a: a
        };
    };
    var $elm$browser$Debugger$Metadata$checkAlias = F4(function(name, old, _new, changes) {
        return _Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args) ? changes : A2($elm$core$List$cons, $elm$browser$Debugger$Report$AliasChange(name), changes);
    });
    var $elm$browser$Debugger$Report$UnionChange = F2(function(a, b) {
        return {
            $: "UnionChange",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Metadata$addTag = F3(function(tag, _v0, changes) {
        return _Utils_update(changes, {
            added: A2($elm$core$List$cons, tag, changes.added)
        });
    });
    var $elm$browser$Debugger$Metadata$checkTag = F4(function(tag, old, _new, changes) {
        return _Utils_eq(old, _new) ? changes : _Utils_update(changes, {
            changed: A2($elm$core$List$cons, tag, changes.changed)
        });
    });
    var $elm$browser$Debugger$Report$TagChanges = F4(function(removed, changed, added, argsMatch) {
        return {
            added: added,
            argsMatch: argsMatch,
            changed: changed,
            removed: removed
        };
    });
    var $elm$browser$Debugger$Report$emptyTagChanges = function(argsMatch) {
        return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
    };
    var $elm$browser$Debugger$Report$hasTagChanges = function(tagChanges) {
        return _Utils_eq(tagChanges, A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
    };
    var $elm$core$Dict$merge = F6(function(leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
        var stepState = F3(function(rKey, rValue, _v0) {
            stepState: while(true){
                var list = _v0.a;
                var result = _v0.b;
                if (!list.b) return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                else {
                    var _v2 = list.a;
                    var lKey = _v2.a;
                    var lValue = _v2.b;
                    var rest = list.b;
                    if (_Utils_cmp(lKey, rKey) < 0) {
                        var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                        rKey = $temp$rKey;
                        rValue = $temp$rValue;
                        _v0 = $temp$_v0;
                        continue stepState;
                    } else {
                        if (_Utils_cmp(lKey, rKey) > 0) return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                        else return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                    }
                }
            }
        });
        var _v3 = A3($elm$core$Dict$foldl, stepState, _Utils_Tuple2($elm$core$Dict$toList(leftDict), initialResult), rightDict);
        var leftovers = _v3.a;
        var intermediateResult = _v3.b;
        return A3($elm$core$List$foldl, F2(function(_v4, result) {
            var k = _v4.a;
            var v = _v4.b;
            return A3(leftStep, k, v, result);
        }), intermediateResult, leftovers);
    });
    var $elm$browser$Debugger$Metadata$removeTag = F3(function(tag, _v0, changes) {
        return _Utils_update(changes, {
            removed: A2($elm$core$List$cons, tag, changes.removed)
        });
    });
    var $elm$browser$Debugger$Metadata$checkUnion = F4(function(name, old, _new, changes) {
        var tagChanges = A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$removeTag, $elm$browser$Debugger$Metadata$checkTag, $elm$browser$Debugger$Metadata$addTag, old.tags, _new.tags, $elm$browser$Debugger$Report$emptyTagChanges(_Utils_eq(old.args, _new.args)));
        return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2($elm$core$List$cons, A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges), changes);
    });
    var $elm$browser$Debugger$Metadata$ignore = F3(function(key, value, report) {
        return report;
    });
    var $elm$browser$Debugger$Metadata$checkTypes = F2(function(old, _new) {
        return !_Utils_eq(old.message, _new.message) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkUnion, $elm$browser$Debugger$Metadata$ignore, old.unions, _new.unions, A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
    });
    var $elm$browser$Debugger$Metadata$check = F2(function(old, _new) {
        return !_Utils_eq(old.versions.elm, _new.versions.elm) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
    });
    var $elm$browser$Debugger$Report$CorruptHistory = {
        $: "CorruptHistory"
    };
    var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
    var $elm$json$Json$Decode$decodeString = _Json_runOnString;
    var $elm$browser$Debugger$Report$Fine = {
        $: "Fine"
    };
    var $elm$browser$Debugger$Report$Impossible = {
        $: "Impossible"
    };
    var $elm$browser$Debugger$Report$Risky = {
        $: "Risky"
    };
    var $elm$core$Basics$not = _Basics_not;
    var $elm$core$List$isEmpty = function(xs) {
        if (!xs.b) return true;
        else return false;
    };
    var $elm$browser$Debugger$Report$some = function(list) {
        return !$elm$core$List$isEmpty(list);
    };
    var $elm$browser$Debugger$Report$evaluateChange = function(change) {
        if (change.$ === "AliasChange") return $elm$browser$Debugger$Report$Impossible;
        else {
            var removed = change.b.removed;
            var changed = change.b.changed;
            var added = change.b.added;
            var argsMatch = change.b.argsMatch;
            return !argsMatch || $elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed) ? $elm$browser$Debugger$Report$Impossible : $elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine;
        }
    };
    var $elm$browser$Debugger$Report$worstCase = F2(function(status, statusList) {
        worstCase: while(true){
            if (!statusList.b) return status;
            else switch(statusList.a.$){
                case "Impossible":
                    var _v1 = statusList.a;
                    return $elm$browser$Debugger$Report$Impossible;
                case "Risky":
                    var _v2 = statusList.a;
                    var rest = statusList.b;
                    var $temp$status = $elm$browser$Debugger$Report$Risky, $temp$statusList = rest;
                    status = $temp$status;
                    statusList = $temp$statusList;
                    continue worstCase;
                default:
                    var _v3 = statusList.a;
                    var rest = statusList.b;
                    var $temp$status = status, $temp$statusList = rest;
                    status = $temp$status;
                    statusList = $temp$statusList;
                    continue worstCase;
            }
        }
    });
    var $elm$browser$Debugger$Report$evaluate = function(report) {
        switch(report.$){
            case "CorruptHistory":
                return $elm$browser$Debugger$Report$Impossible;
            case "VersionChanged":
                return $elm$browser$Debugger$Report$Impossible;
            case "MessageChanged":
                return $elm$browser$Debugger$Report$Impossible;
            default:
                var changes = report.a;
                return A2($elm$browser$Debugger$Report$worstCase, $elm$browser$Debugger$Report$Fine, A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
        }
    };
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $elm$browser$Debugger$Overlay$uploadDecoder = A3($elm$json$Json$Decode$map2, F2(function(x, y) {
        return _Utils_Tuple2(x, y);
    }), A2($elm$json$Json$Decode$field, "metadata", $elm$browser$Debugger$Metadata$decoder), A2($elm$json$Json$Decode$field, "history", $elm$json$Json$Decode$value));
    var $elm$browser$Debugger$Overlay$assessImport = F2(function(metadata, jsonString) {
        var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
        if (_v0.$ === "Err") return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
        else {
            var _v1 = _v0.a;
            var foreignMetadata = _v1.a;
            var rawHistory = _v1.b;
            var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
            var _v2 = $elm$browser$Debugger$Report$evaluate(report);
            switch(_v2.$){
                case "Impossible":
                    return $elm$core$Result$Err($elm$browser$Debugger$Overlay$BadImport(report));
                case "Risky":
                    return $elm$core$Result$Err(A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
                default:
                    return $elm$core$Result$Ok(rawHistory);
            }
        }
    });
    var $elm$core$Platform$Cmd$batch = _Platform_batch;
    var $elm$browser$Debugger$Overlay$close = F2(function(msg, state) {
        switch(state.$){
            case "None":
                return $elm$core$Maybe$Nothing;
            case "BadMetadata":
                return $elm$core$Maybe$Nothing;
            case "BadImport":
                return $elm$core$Maybe$Nothing;
            default:
                var rawHistory = state.b;
                if (msg.$ === "Cancel") return $elm$core$Maybe$Nothing;
                else return $elm$core$Maybe$Just(rawHistory);
        }
    });
    var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
    var $elm$browser$Debugger$History$encodeHelp = F2(function(snapshot, allMessages) {
        return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
    });
    var $elm$json$Json$Encode$list = F2(function(func, entries) {
        return _Json_wrap(A3($elm$core$List$foldl, _Json_addEntry(func), _Json_emptyArray(_Utils_Tuple0), entries));
    });
    var $elm$browser$Debugger$History$encode = function(_v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        return A2($elm$json$Json$Encode$list, $elm$browser$Debugger$History$elmToJs, A3($elm$core$Array$foldr, $elm$browser$Debugger$History$encodeHelp, $elm$core$List$reverse(recent.messages), snapshots));
    };
    var $elm$json$Json$Encode$object = function(pairs) {
        return _Json_wrap(A3($elm$core$List$foldl, F2(function(_v0, obj) {
            var k = _v0.a;
            var v = _v0.b;
            return A3(_Json_addField, k, v, obj);
        }), _Json_emptyObject(_Utils_Tuple0), pairs));
    };
    var $elm$browser$Debugger$Metadata$encodeAlias = function(_v0) {
        var args = _v0.args;
        var tipe = _v0.tipe;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("args", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
            _Utils_Tuple2("type", $elm$json$Json$Encode$string(tipe))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeDict = F2(function(f, dict) {
        return $elm$json$Json$Encode$object($elm$core$Dict$toList(A2($elm$core$Dict$map, F2(function(key, value) {
            return f(value);
        }), dict)));
    });
    var $elm$browser$Debugger$Metadata$encodeUnion = function(_v0) {
        var args = _v0.args;
        var tags = _v0.tags;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("args", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
            _Utils_Tuple2("tags", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$json$Json$Encode$list($elm$json$Json$Encode$string), tags))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeTypes = function(_v0) {
        var message = _v0.message;
        var unions = _v0.unions;
        var aliases = _v0.aliases;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("message", $elm$json$Json$Encode$string(message)),
            _Utils_Tuple2("aliases", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
            _Utils_Tuple2("unions", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeVersions = function(_v0) {
        var elm = _v0.elm;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("elm", $elm$json$Json$Encode$string(elm))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encode = function(_v0) {
        var versions = _v0.versions;
        var types = _v0.types;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("versions", $elm$browser$Debugger$Metadata$encodeVersions(versions)),
            _Utils_Tuple2("types", $elm$browser$Debugger$Metadata$encodeTypes(types))
        ]));
    };
    var $elm$core$Basics$identity = function(x) {
        return x;
    };
    var $elm$core$Task$Perform = function(a) {
        return {
            $: "Perform",
            a: a
        };
    };
    var $elm$core$Task$succeed = _Scheduler_succeed;
    var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
    var $elm$core$Task$andThen = _Scheduler_andThen;
    var $elm$core$Task$map = F2(function(func, taskA) {
        return A2($elm$core$Task$andThen, function(a) {
            return $elm$core$Task$succeed(func(a));
        }, taskA);
    });
    var $elm$core$Task$map2 = F3(function(func, taskA, taskB) {
        return A2($elm$core$Task$andThen, function(a) {
            return A2($elm$core$Task$andThen, function(b) {
                return $elm$core$Task$succeed(A2(func, a, b));
            }, taskB);
        }, taskA);
    });
    var $elm$core$Task$sequence = function(tasks) {
        return A3($elm$core$List$foldr, $elm$core$Task$map2($elm$core$List$cons), $elm$core$Task$succeed(_List_Nil), tasks);
    };
    var $elm$core$Platform$sendToApp = _Platform_sendToApp;
    var $elm$core$Task$spawnCmd = F2(function(router, _v0) {
        var task = _v0.a;
        return _Scheduler_spawn(A2($elm$core$Task$andThen, $elm$core$Platform$sendToApp(router), task));
    });
    var $elm$core$Task$onEffects = F3(function(router, commands, state) {
        return A2($elm$core$Task$map, function(_v0) {
            return _Utils_Tuple0;
        }, $elm$core$Task$sequence(A2($elm$core$List$map, $elm$core$Task$spawnCmd(router), commands)));
    });
    var $elm$core$Task$onSelfMsg = F3(function(_v0, _v1, _v2) {
        return $elm$core$Task$succeed(_Utils_Tuple0);
    });
    var $elm$core$Task$cmdMap = F2(function(tagger, _v0) {
        var task = _v0.a;
        return $elm$core$Task$Perform(A2($elm$core$Task$map, tagger, task));
    });
    _Platform_effectManagers["Task"] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
    var $elm$core$Task$command = _Platform_leaf("Task");
    var $elm$core$Task$perform = F2(function(toMessage, task) {
        return $elm$core$Task$command($elm$core$Task$Perform(A2($elm$core$Task$map, toMessage, task)));
    });
    var $elm$browser$Debugger$Main$download = F2(function(metadata, history1) {
        var historyLength = $elm$browser$Debugger$History$size(history1);
        return A2($elm$core$Task$perform, function(_v0) {
            return $elm$browser$Debugger$Main$NoOp;
        }, A2(_Debugger_download, historyLength, _Json_unwrap($elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("metadata", $elm$browser$Debugger$Metadata$encode(metadata)),
            _Utils_Tuple2("history", $elm$browser$Debugger$History$encode(history1))
        ])))));
    });
    var $elm$browser$Debugger$Main$Vertical = F3(function(a, b, c) {
        return {
            $: "Vertical",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Main$drag = F2(function(info, layout) {
        if (layout.$ === "Horizontal") {
            var status = layout.a;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
        } else {
            var status = layout.a;
            var x = layout.b;
            return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
        }
    });
    var $elm$browser$Debugger$History$Stepping = F2(function(a, b) {
        return {
            $: "Stepping",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$History$Done = F2(function(a, b) {
        return {
            $: "Done",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$History$getHelp = F3(function(update, msg, getResult) {
        if (getResult.$ === "Done") return getResult;
        else {
            var n = getResult.a;
            var model = getResult.b;
            return !n ? A2($elm$browser$Debugger$History$Done, msg, A2(update, msg, model).a) : A2($elm$browser$Debugger$History$Stepping, n - 1, A2(update, msg, model).a);
        }
    });
    var $elm$browser$Debugger$History$undone = function(getResult) {
        undone: while(true)if (getResult.$ === "Done") {
            var msg = getResult.a;
            var model = getResult.b;
            return _Utils_Tuple2(model, msg);
        } else {
            var $temp$getResult = getResult;
            getResult = $temp$getResult;
            continue undone;
        }
    };
    var $elm$browser$Debugger$History$get = F3(function(update, index, history1) {
        get: while(true){
            var recent = history1.recent;
            var snapshotMax = history1.numMessages - recent.numMessages;
            if (_Utils_cmp(index, snapshotMax) > -1) return $elm$browser$Debugger$History$undone(A3($elm$core$List$foldr, $elm$browser$Debugger$History$getHelp(update), A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model), recent.messages));
            else {
                var _v0 = A2($elm$core$Array$get, index / $elm$browser$Debugger$History$maxSnapshotSize | 0, history1.snapshots);
                if (_v0.$ === "Nothing") {
                    var $temp$update = update, $temp$index = index, $temp$history = history1;
                    update = $temp$update;
                    index = $temp$index;
                    history1 = $temp$history;
                    continue get;
                } else {
                    var model = _v0.a.model;
                    var messages = _v0.a.messages;
                    return $elm$browser$Debugger$History$undone(A3($elm$core$Array$foldr, $elm$browser$Debugger$History$getHelp(update), A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model), messages));
                }
            }
        }
    });
    var $elm$browser$Debugger$History$getRecentMsg = function(history1) {
        getRecentMsg: while(true){
            var _v0 = history1.recent.messages;
            if (!_v0.b) {
                var $temp$history = history1;
                history1 = $temp$history;
                continue getRecentMsg;
            } else {
                var first = _v0.a;
                return first;
            }
        }
    };
    var $elm$core$Dict$get = F2(function(targetKey, dict) {
        get: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Maybe$Nothing;
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = A2($elm$core$Basics$compare, targetKey, key);
                switch(_v1.$){
                    case "LT":
                        var $temp$targetKey = targetKey, $temp$dict = left;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                    case "EQ":
                        return $elm$core$Maybe$Just(value);
                    default:
                        var $temp$targetKey = targetKey, $temp$dict = right;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                }
            }
        }
    });
    var $elm$browser$Debugger$Expando$mergeDictHelp = F3(function(oldDict, key, value) {
        var _v12 = A2($elm$core$Dict$get, key, oldDict);
        if (_v12.$ === "Nothing") return value;
        else {
            var oldValue = _v12.a;
            return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
        }
    });
    var $elm$browser$Debugger$Expando$mergeHelp = F2(function(old, _new) {
        var _v3 = _Utils_Tuple2(old, _new);
        _v3$6: while(true)switch(_v3.b.$){
            case "S":
                return _new;
            case "Primitive":
                return _new;
            case "Sequence":
                if (_v3.a.$ === "Sequence") {
                    var _v4 = _v3.a;
                    var isClosed = _v4.b;
                    var oldValues = _v4.c;
                    var _v5 = _v3.b;
                    var seqType = _v5.a;
                    var newValues = _v5.c;
                    return A3($elm$browser$Debugger$Expando$Sequence, seqType, isClosed, A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
                } else break _v3$6;
            case "Dictionary":
                if (_v3.a.$ === "Dictionary") {
                    var _v6 = _v3.a;
                    var isClosed = _v6.a;
                    var _v7 = _v3.b;
                    var keyValuePairs = _v7.b;
                    return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
                } else break _v3$6;
            case "Record":
                if (_v3.a.$ === "Record") {
                    var _v8 = _v3.a;
                    var isClosed = _v8.a;
                    var oldDict = _v8.b;
                    var _v9 = _v3.b;
                    var newDict = _v9.b;
                    return A2($elm$browser$Debugger$Expando$Record, isClosed, A2($elm$core$Dict$map, $elm$browser$Debugger$Expando$mergeDictHelp(oldDict), newDict));
                } else break _v3$6;
            default:
                if (_v3.a.$ === "Constructor") {
                    var _v10 = _v3.a;
                    var isClosed = _v10.b;
                    var oldValues = _v10.c;
                    var _v11 = _v3.b;
                    var maybeName = _v11.a;
                    var newValues = _v11.c;
                    return A3($elm$browser$Debugger$Expando$Constructor, maybeName, isClosed, A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
                } else break _v3$6;
        }
        return _new;
    });
    var $elm$browser$Debugger$Expando$mergeListHelp = F2(function(olds, news) {
        var _v0 = _Utils_Tuple2(olds, news);
        if (!_v0.a.b) return news;
        else {
            if (!_v0.b.b) return news;
            else {
                var _v1 = _v0.a;
                var x = _v1.a;
                var xs = _v1.b;
                var _v2 = _v0.b;
                var y = _v2.a;
                var ys = _v2.b;
                return A2($elm$core$List$cons, A2($elm$browser$Debugger$Expando$mergeHelp, x, y), A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
            }
        }
    });
    var $elm$browser$Debugger$Expando$merge = F2(function(value, expando) {
        return A2($elm$browser$Debugger$Expando$mergeHelp, expando, _Debugger_init(value));
    });
    var $elm$browser$Debugger$Main$jumpUpdate = F3(function(update, index, model) {
        var history1 = $elm$browser$Debugger$Main$cachedHistory(model);
        var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history1);
        var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
        var _v0 = A3($elm$browser$Debugger$History$get, update, index, history1);
        var indexModel = _v0.a;
        var indexMsg = _v0.b;
        return _Utils_update(model, {
            expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
            expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
            state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history1)
        });
    });
    var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
    var $elm$browser$Debugger$History$decoder = F2(function(initialModel, update) {
        var addMessage = F2(function(rawMsg, _v0) {
            var model = _v0.a;
            var history1 = _v0.b;
            var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
            return _Utils_Tuple2(A2(update, msg, model), A3($elm$browser$Debugger$History$add, msg, model, history1));
        });
        var updateModel = function(rawMsgs) {
            return A3($elm$core$List$foldl, addMessage, _Utils_Tuple2(initialModel, $elm$browser$Debugger$History$empty(initialModel)), rawMsgs);
        };
        return A2($elm$json$Json$Decode$map, updateModel, $elm$json$Json$Decode$list($elm$json$Json$Decode$value));
    });
    var $elm$browser$Debugger$History$getInitialModel = function(_v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var _v1 = A2($elm$core$Array$get, 0, snapshots);
        if (_v1.$ === "Just") {
            var model = _v1.a.model;
            return model;
        } else return recent.model;
    };
    var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
    var $elm$browser$Debugger$Main$loadNewHistory = F3(function(rawHistory, update, model) {
        var pureUserUpdate = F2(function(msg, userModel) {
            return A2(update, msg, userModel).a;
        });
        var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
        var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
        var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
        if (_v0.$ === "Err") return _Utils_Tuple2(_Utils_update(model, {
            overlay: $elm$browser$Debugger$Overlay$corruptImport
        }), $elm$core$Platform$Cmd$none);
        else {
            var _v1 = _v0.a;
            var latestUserModel = _v1.a;
            var newHistory = _v1.b;
            return _Utils_Tuple2(_Utils_update(model, {
                expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
                expandoMsg: $elm$browser$Debugger$Expando$init($elm$browser$Debugger$History$getRecentMsg(newHistory)),
                history: newHistory,
                overlay: $elm$browser$Debugger$Overlay$none,
                state: $elm$browser$Debugger$Main$Running(latestUserModel)
            }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Debugger$Main$scroll = function(popout) {
        return A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), _Debugger_scroll(popout));
    };
    var $elm$browser$Debugger$Main$scrollTo = F2(function(id, popout) {
        return A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), A2(_Debugger_scrollTo, id, popout));
    });
    var $elm$browser$Debugger$Main$setDragStatus = F2(function(status, layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
        } else {
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
        }
    });
    var $elm$browser$Debugger$Main$swapLayout = function(layout) {
        if (layout.$ === "Horizontal") {
            var s = layout.a;
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
        } else {
            var s = layout.a;
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
        }
    };
    var $elm$core$Dict$getMin = function(dict) {
        getMin: while(true){
            if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin") {
                var left = dict.d;
                var $temp$dict = left;
                dict = $temp$dict;
                continue getMin;
            } else return dict;
        }
    };
    var $elm$core$Dict$moveRedLeft = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin" && dict.e.$ === "RBNode_elm_builtin") {
            if (dict.e.d.$ === "RBNode_elm_builtin" && dict.e.d.a.$ === "Red") {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var lLeft = _v1.d;
                var lRight = _v1.e;
                var _v2 = dict.e;
                var rClr = _v2.a;
                var rK = _v2.b;
                var rV = _v2.c;
                var rLeft = _v2.d;
                var _v3 = rLeft.a;
                var rlK = rLeft.b;
                var rlV = rLeft.c;
                var rlL = rLeft.d;
                var rlR = rLeft.e;
                var rRight = _v2.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rlK, rlV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), rlL), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
            } else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v4 = dict.d;
                var lClr = _v4.a;
                var lK = _v4.b;
                var lV = _v4.c;
                var lLeft = _v4.d;
                var lRight = _v4.e;
                var _v5 = dict.e;
                var rClr = _v5.a;
                var rK = _v5.b;
                var rV = _v5.c;
                var rLeft = _v5.d;
                var rRight = _v5.e;
                if (clr.$ === "Black") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
                else return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
            }
        } else return dict;
    };
    var $elm$core$Dict$moveRedRight = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin" && dict.e.$ === "RBNode_elm_builtin") {
            if (dict.d.d.$ === "RBNode_elm_builtin" && dict.d.d.a.$ === "Red") {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var _v2 = _v1.d;
                var _v3 = _v2.a;
                var llK = _v2.b;
                var llV = _v2.c;
                var llLeft = _v2.d;
                var llRight = _v2.e;
                var lRight = _v1.e;
                var _v4 = dict.e;
                var rClr = _v4.a;
                var rK = _v4.b;
                var rV = _v4.c;
                var rLeft = _v4.d;
                var rRight = _v4.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, lRight, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
            } else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v5 = dict.d;
                var lClr = _v5.a;
                var lK = _v5.b;
                var lV = _v5.c;
                var lLeft = _v5.d;
                var lRight = _v5.e;
                var _v6 = dict.e;
                var rClr = _v6.a;
                var rK = _v6.b;
                var rV = _v6.c;
                var rLeft = _v6.d;
                var rRight = _v6.e;
                if (clr.$ === "Black") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
                else return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
            }
        } else return dict;
    };
    var $elm$core$Dict$removeHelpPrepEQGT = F7(function(targetKey, dict, color, key, value, left, right) {
        if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red") {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, color, lK, lV, lLeft, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
        } else {
            _v2$2: while(true){
                if (right.$ === "RBNode_elm_builtin" && right.a.$ === "Black") {
                    if (right.d.$ === "RBNode_elm_builtin") {
                        if (right.d.a.$ === "Black") {
                            var _v3 = right.a;
                            var _v4 = right.d;
                            var _v5 = _v4.a;
                            return $elm$core$Dict$moveRedRight(dict);
                        } else break _v2$2;
                    } else {
                        var _v6 = right.a;
                        var _v7 = right.d;
                        return $elm$core$Dict$moveRedRight(dict);
                    }
                } else break _v2$2;
            }
            return dict;
        }
    });
    var $elm$core$Dict$removeMin = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin") {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var lColor = left.a;
            var lLeft = left.d;
            var right = dict.e;
            if (lColor.$ === "Black") {
                if (lLeft.$ === "RBNode_elm_builtin" && lLeft.a.$ === "Red") {
                    var _v3 = lLeft.a;
                    return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
                } else {
                    var _v4 = $elm$core$Dict$moveRedLeft(dict);
                    if (_v4.$ === "RBNode_elm_builtin") {
                        var nColor = _v4.a;
                        var nKey = _v4.b;
                        var nValue = _v4.c;
                        var nLeft = _v4.d;
                        var nRight = _v4.e;
                        return A5($elm$core$Dict$balance, nColor, nKey, nValue, $elm$core$Dict$removeMin(nLeft), nRight);
                    } else return $elm$core$Dict$RBEmpty_elm_builtin;
                }
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
        } else return $elm$core$Dict$RBEmpty_elm_builtin;
    };
    var $elm$core$Dict$removeHelp = F2(function(targetKey, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Dict$RBEmpty_elm_builtin;
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
                if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Black") {
                    var _v4 = left.a;
                    var lLeft = left.d;
                    if (lLeft.$ === "RBNode_elm_builtin" && lLeft.a.$ === "Red") {
                        var _v6 = lLeft.a;
                        return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
                    } else {
                        var _v7 = $elm$core$Dict$moveRedLeft(dict);
                        if (_v7.$ === "RBNode_elm_builtin") {
                            var nColor = _v7.a;
                            var nKey = _v7.b;
                            var nValue = _v7.c;
                            var nLeft = _v7.d;
                            var nRight = _v7.e;
                            return A5($elm$core$Dict$balance, nColor, nKey, nValue, A2($elm$core$Dict$removeHelp, targetKey, nLeft), nRight);
                        } else return $elm$core$Dict$RBEmpty_elm_builtin;
                    }
                } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
            } else return A2($elm$core$Dict$removeHelpEQGT, targetKey, A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
        }
    });
    var $elm$core$Dict$removeHelpEQGT = F2(function(targetKey, dict) {
        if (dict.$ === "RBNode_elm_builtin") {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
                var _v1 = $elm$core$Dict$getMin(right);
                if (_v1.$ === "RBNode_elm_builtin") {
                    var minKey = _v1.b;
                    var minValue = _v1.c;
                    return A5($elm$core$Dict$balance, color, minKey, minValue, left, $elm$core$Dict$removeMin(right));
                } else return $elm$core$Dict$RBEmpty_elm_builtin;
            } else return A5($elm$core$Dict$balance, color, key, value, left, A2($elm$core$Dict$removeHelp, targetKey, right));
        } else return $elm$core$Dict$RBEmpty_elm_builtin;
    });
    var $elm$core$Dict$remove = F2(function(key, dict) {
        var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
        if (_v0.$ === "RBNode_elm_builtin" && _v0.a.$ === "Red") {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
        } else {
            var x = _v0;
            return x;
        }
    });
    var $elm$core$Dict$update = F3(function(targetKey, alter, dictionary) {
        var _v0 = alter(A2($elm$core$Dict$get, targetKey, dictionary));
        if (_v0.$ === "Just") {
            var value = _v0.a;
            return A3($elm$core$Dict$insert, targetKey, value, dictionary);
        } else return A2($elm$core$Dict$remove, targetKey, dictionary);
    });
    var $elm$browser$Debugger$Expando$updateIndex = F3(function(n, func, list) {
        if (!list.b) return _List_Nil;
        else {
            var x = list.a;
            var xs = list.b;
            return n <= 0 ? A2($elm$core$List$cons, func(x), xs) : A2($elm$core$List$cons, x, A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
        }
    });
    var $elm$browser$Debugger$Expando$update = F2(function(msg, value) {
        switch(value.$){
            case "S":
                return value;
            case "Primitive":
                return value;
            case "Sequence":
                var seqType = value.a;
                var isClosed = value.b;
                var valueList = value.c;
                switch(msg.$){
                    case "Toggle":
                        return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
                    case "Index":
                        if (msg.a.$ === "None") {
                            var _v3 = msg.a;
                            var index = msg.b;
                            var subMsg = msg.c;
                            return A3($elm$browser$Debugger$Expando$Sequence, seqType, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, $elm$browser$Debugger$Expando$update(subMsg), valueList));
                        } else return value;
                    default:
                        return value;
                }
            case "Dictionary":
                var isClosed = value.a;
                var keyValuePairs = value.b;
                switch(msg.$){
                    case "Toggle":
                        return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
                    case "Index":
                        var redirect = msg.a;
                        var index = msg.b;
                        var subMsg = msg.c;
                        switch(redirect.$){
                            case "None":
                                return value;
                            case "Key":
                                return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, function(_v6) {
                                    var k = _v6.a;
                                    var v = _v6.b;
                                    return _Utils_Tuple2(A2($elm$browser$Debugger$Expando$update, subMsg, k), v);
                                }, keyValuePairs));
                            default:
                                return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, function(_v7) {
                                    var k = _v7.a;
                                    var v = _v7.b;
                                    return _Utils_Tuple2(k, A2($elm$browser$Debugger$Expando$update, subMsg, v));
                                }, keyValuePairs));
                        }
                    default:
                        return value;
                }
            case "Record":
                var isClosed = value.a;
                var valueDict = value.b;
                switch(msg.$){
                    case "Toggle":
                        return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
                    case "Index":
                        return value;
                    default:
                        var field = msg.a;
                        var subMsg = msg.b;
                        return A2($elm$browser$Debugger$Expando$Record, isClosed, A3($elm$core$Dict$update, field, $elm$browser$Debugger$Expando$updateField(subMsg), valueDict));
                }
            default:
                var maybeName = value.a;
                var isClosed = value.b;
                var valueList = value.c;
                switch(msg.$){
                    case "Toggle":
                        return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
                    case "Index":
                        if (msg.a.$ === "None") {
                            var _v10 = msg.a;
                            var index = msg.b;
                            var subMsg = msg.c;
                            return A3($elm$browser$Debugger$Expando$Constructor, maybeName, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, $elm$browser$Debugger$Expando$update(subMsg), valueList));
                        } else return value;
                    default:
                        return value;
                }
        }
    });
    var $elm$browser$Debugger$Expando$updateField = F2(function(msg, maybeExpando) {
        if (maybeExpando.$ === "Nothing") return maybeExpando;
        else {
            var expando = maybeExpando.a;
            return $elm$core$Maybe$Just(A2($elm$browser$Debugger$Expando$update, msg, expando));
        }
    });
    var $elm$browser$Debugger$Main$Upload = function(a) {
        return {
            $: "Upload",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$upload = function(popout) {
        return A2($elm$core$Task$perform, $elm$browser$Debugger$Main$Upload, _Debugger_upload(popout));
    };
    var $elm$browser$Debugger$Overlay$BadMetadata = function(a) {
        return {
            $: "BadMetadata",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
    var $elm$browser$Debugger$Main$withGoodMetadata = F2(function(model, func) {
        var _v0 = model.metadata;
        if (_v0.$ === "Ok") {
            var metadata = _v0.a;
            return func(metadata);
        } else {
            var error = _v0.a;
            return _Utils_Tuple2(_Utils_update(model, {
                overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
            }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Debugger$Main$wrapUpdate = F3(function(update, msg, model) {
        wrapUpdate: while(true)switch(msg.$){
            case "NoOp":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "UserMsg":
                var userMsg = msg.a;
                var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
                var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
                var _v1 = A2(update, userMsg, userModel);
                var newUserModel = _v1.a;
                var userCmds = _v1.b;
                var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
                var _v2 = model.state;
                if (_v2.$ === "Running") return _Utils_Tuple2(_Utils_update(model, {
                    expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
                    expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
                    history: newHistory,
                    state: $elm$browser$Debugger$Main$Running(newUserModel)
                }), $elm$core$Platform$Cmd$batch(_List_fromArray([
                    commands,
                    $elm$browser$Debugger$Main$scroll(model.popout)
                ])));
                else {
                    var index = _v2.a;
                    var indexModel = _v2.b;
                    var history1 = _v2.e;
                    return _Utils_Tuple2(_Utils_update(model, {
                        history: newHistory,
                        state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history1)
                    }), commands);
                }
            case "TweakExpandoMsg":
                var eMsg = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
                }), $elm$core$Platform$Cmd$none);
            case "TweakExpandoModel":
                var eMsg = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
                }), $elm$core$Platform$Cmd$none);
            case "Resume":
                var _v3 = model.state;
                if (_v3.$ === "Running") return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                else {
                    var userModel = _v3.c;
                    var userMsg = _v3.d;
                    return _Utils_Tuple2(_Utils_update(model, {
                        expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
                        expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
                        state: $elm$browser$Debugger$Main$Running(userModel)
                    }), $elm$browser$Debugger$Main$scroll(model.popout));
                }
            case "Jump":
                var index = msg.a;
                return _Utils_Tuple2(A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model), $elm$core$Platform$Cmd$none);
            case "SliderJump":
                var index = msg.a;
                return _Utils_Tuple2(A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model), A2($elm$browser$Debugger$Main$scrollTo, $elm$browser$Debugger$History$idForMessageIndex(index), model.popout));
            case "Open":
                return _Utils_Tuple2(model, A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), _Debugger_open(model.popout)));
            case "Up":
                var _v4 = model.state;
                if (_v4.$ === "Running") return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                else {
                    var i = _v4.a;
                    var history1 = _v4.e;
                    var targetIndex = i + 1;
                    if (_Utils_cmp(targetIndex, $elm$browser$Debugger$History$size(history1)) < 0) {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex), $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    } else {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$Resume, $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    }
                }
            case "Down":
                var _v5 = model.state;
                if (_v5.$ === "Running") {
                    var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$Jump($elm$browser$Debugger$History$size(model.history) - 1), $temp$model = model;
                    update = $temp$update;
                    msg = $temp$msg;
                    model = $temp$model;
                    continue wrapUpdate;
                } else {
                    var index = _v5.a;
                    if (index > 0) {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1), $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                }
            case "Import":
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(_v6) {
                    return _Utils_Tuple2(model, $elm$browser$Debugger$Main$upload(model.popout));
                });
            case "Export":
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(metadata) {
                    return _Utils_Tuple2(model, A2($elm$browser$Debugger$Main$download, metadata, model.history));
                });
            case "Upload":
                var jsonString = msg.a;
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(metadata) {
                    var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
                    if (_v7.$ === "Err") {
                        var newOverlay = _v7.a;
                        return _Utils_Tuple2(_Utils_update(model, {
                            overlay: newOverlay
                        }), $elm$core$Platform$Cmd$none);
                    } else {
                        var rawHistory = _v7.a;
                        return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
                    }
                });
            case "OverlayMsg":
                var overlayMsg = msg.a;
                var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
                if (_v8.$ === "Nothing") return _Utils_Tuple2(_Utils_update(model, {
                    overlay: $elm$browser$Debugger$Overlay$none
                }), $elm$core$Platform$Cmd$none);
                else {
                    var rawHistory = _v8.a;
                    return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
                }
            case "SwapLayout":
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
                }), $elm$core$Platform$Cmd$none);
            case "DragStart":
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
                }), $elm$core$Platform$Cmd$none);
            case "Drag":
                var info = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
                }), $elm$core$Platform$Cmd$none);
            default:
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
                }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Browser$External = function(a) {
        return {
            $: "External",
            a: a
        };
    };
    var $elm$browser$Browser$Internal = function(a) {
        return {
            $: "Internal",
            a: a
        };
    };
    var $elm$browser$Browser$Dom$NotFound = function(a) {
        return {
            $: "NotFound",
            a: a
        };
    };
    var $elm$url$Url$Dat = {
        $: "Dat"
    };
    var $elm$url$Url$File = {
        $: "File"
    };
    var $elm$url$Url$File2 = {
        $: "File2"
    };
    var $elm$url$Url$Ftp = {
        $: "Ftp"
    };
    var $elm$url$Url$Http = {
        $: "Http"
    };
    var $elm$url$Url$Https = {
        $: "Https"
    };
    var $elm$url$Url$Hyper = {
        $: "Hyper"
    };
    var $elm$url$Url$Ipfs = {
        $: "Ipfs"
    };
    var $elm$url$Url$Ipns = {
        $: "Ipns"
    };
    var $elm$url$Url$Url = F6(function(protocol, host, port_, path, query, fragment) {
        return {
            fragment: fragment,
            host: host,
            path: path,
            port_: port_,
            protocol: protocol,
            query: query
        };
    });
    var $elm$core$String$dropLeft = F2(function(n, string) {
        return n < 1 ? string : A3($elm$core$String$slice, n, $elm$core$String$length(string), string);
    });
    var $elm$core$String$indexes = _String_indexes;
    var $elm$core$String$isEmpty = function(string) {
        return string === "";
    };
    var $elm$url$Url$chompBeforePath = F5(function(protocol, path, params, frag, str) {
        if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, "@", str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, ":", str);
            if (!_v0.b) return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
            else if (!_v0.b.b) {
                var i = _v0.a;
                var _v1 = $elm$core$String$toInt(A2($elm$core$String$dropLeft, i + 1, str));
                if (_v1.$ === "Nothing") return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
                else {
                    var port_ = _v1;
                    return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, A2($elm$core$String$left, i, str), port_, path, params, frag));
                }
            } else {
                if (!_v0.b.b.b) {
                    var _v2 = _v0.b;
                    var i = _v2.a;
                    var _v3 = $elm$core$String$toInt(A2($elm$core$String$dropLeft, i + 1, str));
                    if (_v3.$ === "Nothing") return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
                    else {
                        var port_ = _v3;
                        return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, A2($elm$core$String$left, i, str), port_, path, params, frag));
                    }
                } else return $elm$core$Maybe$Nothing;
            }
        }
    });
    var $elm$url$Url$chompBeforeQuery = F4(function(protocol, params, frag, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "/", str);
            if (!_v0.b) return A5($elm$url$Url$chompBeforePath, protocol, "/", params, frag, str);
            else {
                var i = _v0.a;
                return A5($elm$url$Url$chompBeforePath, protocol, A2($elm$core$String$dropLeft, i, str), params, frag, A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$url$Url$chompBeforeFragment = F3(function(protocol, frag, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "?", str);
            if (!_v0.b) return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
            else {
                var i = _v0.a;
                return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Just(A2($elm$core$String$dropLeft, i + 1, str)), frag, A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$url$Url$chompAfterProtocol = F2(function(protocol, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "#", str);
            if (!_v0.b) return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
            else {
                var i = _v0.a;
                return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Just(A2($elm$core$String$dropLeft, i + 1, str)), A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$core$String$startsWith = _String_startsWith;
    var $elm$url$Url$fromString = function(str) {
        return A2($elm$core$String$startsWith, "http://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Http, A2($elm$core$String$dropLeft, 7, str)) : A2($elm$core$String$startsWith, "https://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Https, A2($elm$core$String$dropLeft, 8, str)) : A2($elm$core$String$startsWith, "file:///", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$File2, A2($elm$core$String$dropLeft, 8, str)) : A2($elm$core$String$startsWith, "file://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$File, A2($elm$core$String$dropLeft, 7, str)) : A2($elm$core$String$startsWith, "ipfs://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Ipfs, A2($elm$core$String$dropLeft, 7, str)) : A2($elm$core$String$startsWith, "ipns://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Ipns, A2($elm$core$String$dropLeft, 7, str)) : A2($elm$core$String$startsWith, "dat://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Dat, A2($elm$core$String$dropLeft, 6, str)) : A2($elm$core$String$startsWith, "ftp://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Ftp, A2($elm$core$String$dropLeft, 6, str)) : A2($elm$core$String$startsWith, "hyper://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Hyper, A2($elm$core$String$dropLeft, 8, str)) : A2($elm$core$String$startsWith, "about:", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Hyper, A2($elm$core$String$dropLeft, 6, str)) : $elm$core$Maybe$Nothing;
    };
    var $elm$core$Basics$never = function(_v0) {
        never: while(true){
            var nvr = _v0.a;
            var $temp$_v0 = nvr;
            _v0 = $temp$_v0;
            continue never;
        }
    };
    var $elm$browser$Browser$application = _Browser_application;
    var $elm$json$Json$Decode$bool = _Json_decodeBool;
    var $author$project$Model$Idle = {
        $: "Idle"
    };
    var $author$project$Model$Loading = {
        $: "Loading"
    };
    var $author$project$Model$Model = F9(function(fullPage, size, hasIndex, code, index, preload, session, state, lia) {
        return {
            code: code,
            fullPage: fullPage,
            hasIndex: hasIndex,
            index: index,
            lia: lia,
            preload: preload,
            session: session,
            size: size,
            state: state
        };
    });
    var $author$project$Session$Session = F4(function(share, key, screen1, url) {
        return {
            key: key,
            screen: screen1,
            share: share,
            url: url
        };
    });
    var $elm$core$Maybe$andThen = F2(function(callback, maybeValue) {
        if (maybeValue.$ === "Just") {
            var value = maybeValue.a;
            return callback(value);
        } else return $elm$core$Maybe$Nothing;
    });
    var $elm$json$Json$Encode$bool = _Json_wrap;
    var $elm$json$Json$Encode$int = _Json_wrap;
    var $author$project$Update$event2js = _Platform_outgoingPort("event2js", function($) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("message", function($) {
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("cmd", $elm$json$Json$Encode$string($.cmd)),
                    _Utils_Tuple2("param", $elm$core$Basics$identity($.param))
                ]));
            }($.message)),
            _Utils_Tuple2("reply", $elm$json$Json$Encode$bool($.reply)),
            _Utils_Tuple2("service", $elm$json$Json$Encode$string($.service)),
            _Utils_Tuple2("track", $elm$json$Json$Encode$list(function($) {
                var a = $.a;
                var b = $.b;
                return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_fromArray([
                    $elm$json$Json$Encode$string(a),
                    $elm$json$Json$Encode$int(b)
                ]));
            })($.track))
        ]));
    });
    var $author$project$Service$Event$Event = F4(function(reply, track, service, message) {
        return {
            message: message,
            reply: reply,
            service: service,
            track: track
        };
    });
    var $author$project$Service$Event$init = A2($author$project$Service$Event$Event, true, _List_Nil);
    var $author$project$Service$Database$event = F2(function(cmd, param) {
        return A2($author$project$Service$Event$init, "db", {
            cmd: cmd,
            param: param
        });
    });
    var $author$project$Service$Database$index_ = function(cmd) {
        return $author$project$Service$Database$event("index_" + cmd);
    };
    var $author$project$Service$Database$index_get = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $author$project$Service$Database$index_("get"));
    var $author$project$Update$getIndex = F2(function(url, model) {
        return _Utils_Tuple2(model, $author$project$Update$event2js($author$project$Service$Database$index_get(url)));
    });
    var $author$project$Session$Class = F2(function(a, b) {
        return {
            $: "Class",
            a: a,
            b: b
        };
    });
    var $author$project$Session$Course = F2(function(a, b) {
        return {
            $: "Course",
            a: a,
            b: b
        };
    });
    var $author$project$Session$Index = {
        $: "Index"
    };
    var $author$project$Session$Room = F3(function(backend, course, room) {
        return {
            backend: backend,
            course: course,
            room: room
        };
    });
    var $truqu$elm_base64$Base64$Decode$pad = function(input) {
        var _v0 = $elm$core$String$length(input) % 4;
        switch(_v0){
            case 3:
                return input + "=";
            case 2:
                return input + "==";
            default:
                return input;
        }
    };
    var $elm$core$Result$andThen = F2(function(callback, result) {
        if (result.$ === "Ok") {
            var value = result.a;
            return callback(value);
        } else {
            var msg = result.a;
            return $elm$core$Result$Err(msg);
        }
    });
    var $truqu$elm_base64$Base64$Decode$charToInt = function(_char) {
        switch(_char.valueOf()){
            case "A":
                return 0;
            case "B":
                return 1;
            case "C":
                return 2;
            case "D":
                return 3;
            case "E":
                return 4;
            case "F":
                return 5;
            case "G":
                return 6;
            case "H":
                return 7;
            case "I":
                return 8;
            case "J":
                return 9;
            case "K":
                return 10;
            case "L":
                return 11;
            case "M":
                return 12;
            case "N":
                return 13;
            case "O":
                return 14;
            case "P":
                return 15;
            case "Q":
                return 16;
            case "R":
                return 17;
            case "S":
                return 18;
            case "T":
                return 19;
            case "U":
                return 20;
            case "V":
                return 21;
            case "W":
                return 22;
            case "X":
                return 23;
            case "Y":
                return 24;
            case "Z":
                return 25;
            case "a":
                return 26;
            case "b":
                return 27;
            case "c":
                return 28;
            case "d":
                return 29;
            case "e":
                return 30;
            case "f":
                return 31;
            case "g":
                return 32;
            case "h":
                return 33;
            case "i":
                return 34;
            case "j":
                return 35;
            case "k":
                return 36;
            case "l":
                return 37;
            case "m":
                return 38;
            case "n":
                return 39;
            case "o":
                return 40;
            case "p":
                return 41;
            case "q":
                return 42;
            case "r":
                return 43;
            case "s":
                return 44;
            case "t":
                return 45;
            case "u":
                return 46;
            case "v":
                return 47;
            case "w":
                return 48;
            case "x":
                return 49;
            case "y":
                return 50;
            case "z":
                return 51;
            case "0":
                return 52;
            case "1":
                return 53;
            case "2":
                return 54;
            case "3":
                return 55;
            case "4":
                return 56;
            case "5":
                return 57;
            case "6":
                return 58;
            case "7":
                return 59;
            case "8":
                return 60;
            case "9":
                return 61;
            case "+":
                return 62;
            case "/":
                return 63;
            default:
                return 0;
        }
    };
    var $elm$core$Bitwise$or = _Bitwise_or;
    var $elm$core$String$cons = _String_cons;
    var $elm$core$String$fromChar = function(_char) {
        return A2($elm$core$String$cons, _char, "");
    };
    var $elm$core$Char$fromCode = _Char_fromCode;
    var $truqu$elm_base64$Base64$Decode$intToString = A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar);
    var $truqu$elm_base64$Base64$Decode$add = F2(function(_char, _v0) {
        var curr = _v0.a;
        var need = _v0.b;
        var res = _v0.c;
        var shiftAndAdd = function(_int) {
            return 63 & _int | curr << 6;
        };
        return !need ? !(128 & _char) ? _Utils_Tuple3(0, 0, _Utils_ap(res, $truqu$elm_base64$Base64$Decode$intToString(_char))) : (224 & _char) === 192 ? _Utils_Tuple3(31 & _char, 1, res) : (240 & _char) === 224 ? _Utils_Tuple3(15 & _char, 2, res) : _Utils_Tuple3(7 & _char, 3, res) : need === 1 ? _Utils_Tuple3(0, 0, _Utils_ap(res, $truqu$elm_base64$Base64$Decode$intToString(shiftAndAdd(_char)))) : _Utils_Tuple3(shiftAndAdd(_char), need - 1, res);
    });
    var $truqu$elm_base64$Base64$Decode$toUTF16 = F2(function(_char, acc) {
        return _Utils_Tuple3(0, 0, A2($truqu$elm_base64$Base64$Decode$add, 255 & _char >>> 0, A2($truqu$elm_base64$Base64$Decode$add, 255 & _char >>> 8, A2($truqu$elm_base64$Base64$Decode$add, 255 & _char >>> 16, acc))));
    });
    var $truqu$elm_base64$Base64$Decode$chomp = F2(function(char_, _v0) {
        var curr = _v0.a;
        var cnt = _v0.b;
        var utf8ToUtf16 = _v0.c;
        var _char = $truqu$elm_base64$Base64$Decode$charToInt(char_);
        if (cnt === 3) return A2($truqu$elm_base64$Base64$Decode$toUTF16, curr | _char, utf8ToUtf16);
        else return _Utils_Tuple3(_char << (3 - cnt) * 6 | curr, cnt + 1, utf8ToUtf16);
    });
    var $elm$core$String$foldl = _String_foldl;
    var $truqu$elm_base64$Base64$Decode$initial = _Utils_Tuple3(0, 0, _Utils_Tuple3(0, 0, ""));
    var $elm$core$Result$map = F2(function(func, ra) {
        if (ra.$ === "Ok") {
            var a = ra.a;
            return $elm$core$Result$Ok(func(a));
        } else {
            var e = ra.a;
            return $elm$core$Result$Err(e);
        }
    });
    var $elm$core$String$dropRight = F2(function(n, string) {
        return n < 1 ? string : A3($elm$core$String$slice, 0, -n, string);
    });
    var $elm$core$String$endsWith = _String_endsWith;
    var $truqu$elm_base64$Base64$Decode$stripNulls = F2(function(input, output) {
        return A2($elm$core$String$endsWith, "==", input) ? A2($elm$core$String$dropRight, 2, output) : A2($elm$core$String$endsWith, "=", input) ? A2($elm$core$String$dropRight, 1, output) : output;
    });
    var $elm$regex$Regex$Match = F4(function(match, index, number, submatches) {
        return {
            index: index,
            match: match,
            number: number,
            submatches: submatches
        };
    });
    var $elm$regex$Regex$contains = _Regex_contains;
    var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
    var $elm$regex$Regex$fromString = function(string) {
        return A2($elm$regex$Regex$fromStringWith, {
            caseInsensitive: false,
            multiline: false
        }, string);
    };
    var $elm$regex$Regex$never = _Regex_never;
    var $truqu$elm_base64$Base64$Decode$validBase64Regex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("^([A-Za-z0-9\\/+]{4})*([A-Za-z0-9\\/+]{2}[A-Za-z0-9\\/+=]{2})?$"));
    var $truqu$elm_base64$Base64$Decode$validate = function(input) {
        return A2($elm$regex$Regex$contains, $truqu$elm_base64$Base64$Decode$validBase64Regex, input) ? $elm$core$Result$Ok(input) : $elm$core$Result$Err("Invalid base64");
    };
    var $truqu$elm_base64$Base64$Decode$wrapUp = function(_v0) {
        var _v1 = _v0.c;
        var need = _v1.b;
        var res = _v1.c;
        return need > 0 ? $elm$core$Result$Err("Invalid UTF-16") : $elm$core$Result$Ok(res);
    };
    var $truqu$elm_base64$Base64$Decode$validateAndDecode = function(input) {
        return A2($elm$core$Result$map, $truqu$elm_base64$Base64$Decode$stripNulls(input), A2($elm$core$Result$andThen, A2($elm$core$Basics$composeR, A2($elm$core$String$foldl, $truqu$elm_base64$Base64$Decode$chomp, $truqu$elm_base64$Base64$Decode$initial), $truqu$elm_base64$Base64$Decode$wrapUp), $truqu$elm_base64$Base64$Decode$validate(input)));
    };
    var $truqu$elm_base64$Base64$Decode$decode = A2($elm$core$Basics$composeR, $truqu$elm_base64$Base64$Decode$pad, $truqu$elm_base64$Base64$Decode$validateAndDecode);
    var $truqu$elm_base64$Base64$decode = $truqu$elm_base64$Base64$Decode$decode;
    var $elm$core$Result$toMaybe = function(result) {
        if (result.$ === "Ok") {
            var v = result.a;
            return $elm$core$Maybe$Just(v);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Session$decodeRoom = A2($elm$core$Basics$composeR, $truqu$elm_base64$Base64$decode, A2($elm$core$Basics$composeR, $elm$core$Result$toMaybe, $elm$core$Maybe$andThen(A2($elm$core$Basics$composeR, $elm$json$Json$Decode$decodeString(A4($elm$json$Json$Decode$map3, $author$project$Session$Room, A2($elm$json$Json$Decode$field, "backend", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "course", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "room", $elm$json$Json$Decode$string))), $elm$core$Result$toMaybe))));
    var $author$project$Session$getType = function(url) {
        var _v0 = url.query;
        if (_v0.$ === "Just") {
            var str = _v0.a;
            var _v1 = $author$project$Session$decodeRoom(str);
            if (_v1.$ === "Just") {
                var room = _v1.a;
                return A2($author$project$Session$Class, room, url.fragment);
            } else return A2($author$project$Session$Course, str, url.fragment);
        } else return $author$project$Session$Index;
    };
    var $elm$url$Url$addPort = F2(function(maybePort, starter) {
        if (maybePort.$ === "Nothing") return starter;
        else {
            var port_ = maybePort.a;
            return starter + (":" + $elm$core$String$fromInt(port_));
        }
    });
    var $elm$url$Url$addPrefixed = F3(function(prefix, maybeSegment, starter) {
        if (maybeSegment.$ === "Nothing") return starter;
        else {
            var segment = maybeSegment.a;
            return _Utils_ap(starter, _Utils_ap(prefix, segment));
        }
    });
    var $elm$url$Url$toString = function(url) {
        var http = function() {
            var _v0 = url.protocol;
            switch(_v0.$){
                case "Http":
                    return "http://";
                case "Https":
                    return "https://";
                case "File":
                    return "file://";
                case "File2":
                    return "file:///";
                case "Ipfs":
                    return "ipfs://";
                case "Ipns":
                    return "ipns://";
                case "Dat":
                    return "dat://";
                case "Ftp":
                    return "ftp://";
                case "Hyper":
                    return "hyper://";
                default:
                    return "about:";
            }
        }();
        return A3($elm$url$Url$addPrefixed, "#", url.fragment, A3($elm$url$Url$addPrefixed, "?", url.query, _Utils_ap(A2($elm$url$Url$addPort, url.port_, _Utils_ap(http, url.host)), url.path)));
    };
    var $author$project$Main$get_base = function(url) {
        return $elm$url$Url$toString(_Utils_update(url, {
            fragment: $elm$core$Maybe$Nothing
        }));
    };
    var $author$project$Const$globalBreakpoints = {
        lg: 1440,
        md: 1024,
        sm: 768,
        xl: 1680,
        xs: 480
    };
    var $author$project$Library$Masonry$Masonry = function(a) {
        return {
            $: "Masonry",
            a: a
        };
    };
    var $author$project$Library$Masonry$empty = function(id) {
        return $author$project$Library$Masonry$Masonry({
            heights: $elm$core$Dict$empty,
            id: id,
            items: _List_Nil
        });
    };
    var $author$project$Index$Model$init = {
        courses: _List_Nil,
        error: $elm$core$Maybe$Nothing,
        initialized: false,
        input: "",
        masonry: $author$project$Library$Masonry$empty($elm$core$Maybe$Just("example-id")),
        modal: $elm$core$Maybe$Nothing
    };
    var $author$project$I18n$Translations$En = {
        $: "En"
    };
    var $author$project$Library$SplitPane$Horizontal = {
        $: "Horizontal"
    };
    var $author$project$Lia$Settings$Types$Textbook = {
        $: "Textbook"
    };
    var $author$project$Lia$Definition$Types$default = F2(function(base, appendix) {
        return {
            appendix: $elm$core$String$isEmpty(appendix) ? "" : "?" + appendix,
            attributes: _List_Nil,
            author: "",
            base: base,
            comment: _List_Nil,
            date: "",
            debug: false,
            email: "",
            formulas: $elm$core$Dict$empty,
            imports: _List_Nil,
            language: "en",
            lightMode: $elm$core$Maybe$Nothing,
            logo: "",
            macro: $elm$core$Dict$empty,
            mode: $elm$core$Maybe$Nothing,
            narrator: "US English Male",
            onload: "",
            resources: _List_Nil,
            section: -1,
            translation: $elm$core$Dict$empty,
            typographic_quotation: {
                _double: _Utils_Tuple2("“", "”"),
                single: _Utils_Tuple2("‘", "’")
            },
            uid: -1,
            version: "0.0.1"
        };
    });
    var $author$project$Lia$Chat$Model$init = {
        input: "",
        messages: $elm$core$Dict$empty
    };
    var $author$project$Lia$Index$Model$init = "";
    var $author$project$Lia$Settings$Types$init = F3(function(hasShareApi, isFullscreen, mode) {
        return {
            action: $elm$core$Maybe$Nothing,
            audio: {
                pitch: "1",
                rate: "1"
            },
            chat: {
                show: false,
                updates: false
            },
            customTheme: $elm$core$Maybe$Nothing,
            edit: $elm$core$Maybe$Nothing,
            editor: "dreamweaver",
            font_size: 100,
            fullscreen: isFullscreen,
            hasShareApi: hasShareApi,
            hideVideoComments: false,
            initialized: false,
            lang: "default",
            light: true,
            mode: mode,
            showQRCode: false,
            sound: true,
            speaking: false,
            support_menu: false,
            sync: $elm$core$Maybe$Just(false),
            table_of_contents: true,
            theme: "default",
            tooltips: false,
            translateWithGoogle: $elm$core$Maybe$Just(false),
            tts: {
                isBrowserSupported: false,
                isResponsiveVoiceSupported: false,
                preferBrowser: false
            }
        };
    });
    var $author$project$Lia$Sync$Types$Disconnected = {
        $: "Disconnected"
    };
    var $author$project$Lia$Sync$Via$Edrys = {
        $: "Edrys"
    };
    var $author$project$Lia$Sync$Via$GUN = function(a) {
        return {
            $: "GUN",
            a: a
        };
    };
    var $author$project$Lia$Sync$Via$MQTT = {
        $: "MQTT"
    };
    var $author$project$Lia$Sync$Via$NoStr = {
        $: "NoStr"
    };
    var $author$project$Lia$Sync$Via$P2PT = function(a) {
        return {
            $: "P2PT",
            a: a
        };
    };
    var $author$project$Lia$Sync$Via$PubNub = function(a) {
        return {
            $: "PubNub",
            a: a
        };
    };
    var $author$project$Lia$Sync$Via$Torrent = {
        $: "Torrent"
    };
    var $elm$core$Set$Set_elm_builtin = function(a) {
        return {
            $: "Set_elm_builtin",
            a: a
        };
    };
    var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
    var $author$project$Lia$Sync$Via$mapHead = F2(function(fn, list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return A2($elm$core$List$cons, fn(x), xs);
        } else return list;
    });
    var $elm$core$String$toLower = _String_toLower;
    var $author$project$Lia$Sync$Via$fromString = function(via) {
        var _v0 = A2($author$project$Lia$Sync$Via$mapHead, $elm$core$String$toLower, A2($elm$core$String$split, "|", via));
        _v0$13: while(true){
            if (_v0.b) {
                if (!_v0.b.b) switch(_v0.a){
                    case "edrys":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$Edrys);
                    case "nostr":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$NoStr);
                    case "mqtt":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$MQTT);
                    case "torrent":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$Torrent);
                    case "gun":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$GUN({
                            persistent: false,
                            urls: ""
                        }));
                    case "p2pt":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$P2PT(""));
                    case "pubnub":
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$PubNub({
                            pubKey: "",
                            subKey: ""
                        }));
                    default:
                        break _v0$13;
                }
                else if (!_v0.b.b.b) switch(_v0.a){
                    case "gun":
                        switch(_v0.b.a){
                            case "f":
                                var _v1 = _v0.b;
                                return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$GUN({
                                    persistent: false,
                                    urls: ""
                                }));
                            case "t":
                                var _v4 = _v0.b;
                                return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$GUN({
                                    persistent: true,
                                    urls: ""
                                }));
                            default:
                                break _v0$13;
                        }
                    case "p2pt":
                        var _v7 = _v0.b;
                        var urls = _v7.a;
                        return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$P2PT(urls));
                    default:
                        break _v0$13;
                }
                else {
                    if (!_v0.b.b.b.b) switch(_v0.a){
                        case "gun":
                            switch(_v0.b.a){
                                case "f":
                                    var _v2 = _v0.b;
                                    var _v3 = _v2.b;
                                    var urls = _v3.a;
                                    return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$GUN({
                                        persistent: false,
                                        urls: urls
                                    }));
                                case "t":
                                    var _v5 = _v0.b;
                                    var _v6 = _v5.b;
                                    var urls = _v6.a;
                                    return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$GUN({
                                        persistent: true,
                                        urls: urls
                                    }));
                                default:
                                    break _v0$13;
                            }
                        case "pubnub":
                            var _v8 = _v0.b;
                            var pub = _v8.a;
                            var _v9 = _v8.b;
                            var sub = _v9.a;
                            return $elm$core$Maybe$Just($author$project$Lia$Sync$Via$PubNub({
                                pubKey: pub,
                                subKey: sub
                            }));
                        default:
                            break _v0$13;
                    }
                    else break _v0$13;
                }
            } else break _v0$13;
        }
        return $elm$core$Maybe$Nothing;
    };
    var $author$project$Const$gunDB_ServerURL = "https://peer.wallie.io/gun";
    var $author$project$Lia$Sync$Types$isMember = F2(function(list, element) {
        isMember: while(true){
            var _v0 = _Utils_Tuple2(list, element);
            _v0$4: while(true){
                if (!_v0.a.b) return _Utils_Tuple2(false, element);
                else switch(_v0.a.a.$){
                    case "GUN":
                        if (_v0.b.$ === "GUN") {
                            var _v1 = _v0.a;
                            return _Utils_Tuple2(true, element);
                        } else break _v0$4;
                    case "PubNub":
                        if (_v0.b.$ === "PubNub") {
                            var _v2 = _v0.a;
                            return _Utils_Tuple2(true, element);
                        } else break _v0$4;
                    case "P2PT":
                        if (_v0.b.$ === "P2PT") {
                            var _v3 = _v0.a;
                            return _Utils_Tuple2(true, element);
                        } else break _v0$4;
                    default:
                        break _v0$4;
                }
            }
            var _v4 = _v0.a;
            var e = _v4.a;
            var es = _v4.b;
            if (_Utils_eq(e, element)) return _Utils_Tuple2(true, element);
            else {
                var $temp$list = es, $temp$element = element;
                list = $temp$list;
                element = $temp$element;
                continue isMember;
            }
        }
    });
    var $author$project$Const$webTorrent_TrackerURLs = "wss://tracker.openwebtorrent.com, wss://tracker.webtorrent.dev, wss://tracker.files.fm:7073/announce, wss://tracker.openwebtorrent.com:443/announce";
    var $author$project$Lia$Sync$Types$init = function(supportedBackends) {
        var supported = A2($elm$core$List$filterMap, $author$project$Lia$Sync$Via$fromString, supportedBackends);
        return {
            data: {
                code: $elm$core$Dict$empty,
                cursor: _List_Nil,
                quiz: $elm$core$Dict$empty,
                survey: $elm$core$Dict$empty
            },
            error: $elm$core$Maybe$Nothing,
            password: "",
            peers: $elm$core$Set$empty,
            room: "",
            scriptsEnabled: false,
            state: $author$project$Lia$Sync$Types$Disconnected,
            sync: {
                open: false,
                select: $elm$core$Maybe$Nothing,
                support: A2($elm$core$List$map, $author$project$Lia$Sync$Types$isMember(supported), _List_fromArray([
                    $author$project$Lia$Sync$Via$GUN({
                        persistent: false,
                        urls: $author$project$Const$gunDB_ServerURL
                    }),
                    $author$project$Lia$Sync$Via$MQTT,
                    $author$project$Lia$Sync$Via$NoStr,
                    $author$project$Lia$Sync$Via$P2PT($author$project$Const$webTorrent_TrackerURLs),
                    $author$project$Lia$Sync$Via$PubNub({
                        pubKey: "",
                        subKey: ""
                    }),
                    $author$project$Lia$Sync$Via$Torrent,
                    $author$project$Lia$Sync$Via$Edrys
                ]))
            }
        };
    };
    var $author$project$Library$Overlay$Move = {
        $: "Move"
    };
    var $author$project$Library$Overlay$Position = F2(function(x, y) {
        return {
            x: x,
            y: y
        };
    });
    var $author$project$Library$Overlay$Size = F2(function(width, height) {
        return {
            height: height,
            width: width
        };
    });
    var $author$project$Library$Overlay$init = {
        drag: $elm$core$Maybe$Nothing,
        followOffset: $elm$core$Maybe$Nothing,
        initialPosition: A2($author$project$Library$Overlay$Position, 20, 100),
        initialSize: A2($author$project$Library$Overlay$Size, 200, 200),
        mode: $author$project$Library$Overlay$Move,
        position: A2($author$project$Library$Overlay$Position, 20, 100),
        resize: $elm$core$Maybe$Nothing,
        resizeOffset: $elm$core$Maybe$Nothing,
        size: A2($author$project$Library$Overlay$Size, 200, 200)
    };
    var $author$project$Library$SplitPane$Draggable = function(a) {
        return {
            $: "Draggable",
            a: a
        };
    };
    var $author$project$Library$SplitPane$State = function(a) {
        return {
            $: "State",
            a: a
        };
    };
    var $author$project$Library$SplitPane$Percentage = function(a) {
        return {
            $: "Percentage",
            a: a
        };
    };
    var $elm$core$Basics$min = F2(function(x, y) {
        return _Utils_cmp(x, y) < 0 ? x : y;
    });
    var $author$project$Library$SplitPane$Bound$createBound = F2(function(a, b) {
        return _Utils_Tuple2(A2($elm$core$Basics$min, a, b), A2($elm$core$Basics$max, a, b));
    });
    var $author$project$Library$SplitPane$Bound$boundTo = function(_v0) {
        var a = _v0.a;
        var b = _v0.b;
        return A2($elm$core$Basics$composeL, $elm$core$Basics$min(b), $elm$core$Basics$max(a));
    };
    var $author$project$Library$SplitPane$Bound$putValue = F2(function(_v0, value) {
        var bound = _v0.b;
        return _Utils_Tuple2(A2($author$project$Library$SplitPane$Bound$boundTo, bound, value), bound);
    });
    var $author$project$Library$SplitPane$Bound$createBounded = F2(function(value, bound) {
        return A2($author$project$Library$SplitPane$Bound$putValue, _Utils_Tuple2(value, bound), value);
    });
    var $author$project$Library$SplitPane$percentage = F2(function(x, bound) {
        var newBound = function() {
            if (bound.$ === "Just") {
                var _v1 = bound.a;
                var lower = _v1.a;
                var upper = _v1.b;
                return A2($author$project$Library$SplitPane$Bound$createBound, lower, upper);
            } else return A2($author$project$Library$SplitPane$Bound$createBound, 0.0, 1.0);
        }();
        return $author$project$Library$SplitPane$Percentage(A2($author$project$Library$SplitPane$Bound$createBounded, x, newBound));
    });
    var $author$project$Library$SplitPane$init = function(o) {
        return $author$project$Library$SplitPane$State({
            dragState: $author$project$Library$SplitPane$Draggable($elm$core$Maybe$Nothing),
            orientation: o,
            splitterPosition: A2($author$project$Library$SplitPane$percentage, 0.5, $elm$core$Maybe$Nothing)
        });
    };
    var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
    var $elm$core$List$head = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(x);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Parser$PatReplace$regex = A2($elm$core$Basics$composeR, $elm$regex$Regex$fromString, $elm$core$Maybe$withDefault($elm$regex$Regex$never));
    var $author$project$Lia$Parser$PatReplace$check = F2(function(pattern, url) {
        var _v0 = $elm$core$List$head(A3($elm$regex$Regex$findAtMost, 1, $author$project$Lia$Parser$PatReplace$regex(pattern), url));
        if (_v0.$ === "Just") {
            var match = _v0.a;
            return A2($elm$core$Maybe$withDefault, $elm$core$Maybe$Nothing, $elm$core$List$head(match.submatches));
        } else return $elm$core$Maybe$Nothing;
    });
    var $author$project$Lia$Parser$PatReplace$replace = F2(function(patterns, url) {
        replace: while(true){
            if (!patterns.b) return _Utils_Tuple2(false, url);
            else {
                var t = patterns.a;
                var ts = patterns.b;
                var _v1 = A2($author$project$Lia$Parser$PatReplace$check, t.pattern, url);
                if (_v1.$ === "Just") {
                    var str = _v1.a;
                    return _Utils_Tuple2(true, A2(t.by, url, str));
                } else {
                    var $temp$patterns = ts, $temp$url = url;
                    patterns = $temp$patterns;
                    url = $temp$url;
                    continue replace;
                }
            }
        }
    });
    var $elm$core$String$replace = F3(function(before, after, string) {
        return A2($elm$core$String$join, after, A2($elm$core$String$split, before, string));
    });
    var $author$project$Lia$Parser$UrlPattern$Generic$root = $elm$core$Basics$append("(?:http(?:s)?://)?(?:www\\.)?");
    var $author$project$Const$urlProxy = "https://api.allorigins.win/raw?url=";
    var $author$project$Lia$Parser$PatReplace$urlProxy = A3($elm$core$String$replace, "?", "\\?", A3($elm$core$String$replace, ".", "\\.", $author$project$Const$urlProxy));
    var $author$project$Lia$Parser$PatReplace$repo = A2($elm$core$Basics$composeR, $author$project$Lia$Parser$PatReplace$replace(_List_fromArray([
        {
            by: F2(function(_v0, w) {
                return "https://github.com/" + function() {
                    var _v1 = A2($elm$core$String$split, "/", w);
                    _v1$2: while(true){
                        if (_v1.b && _v1.b.b && _v1.b.b.b) {
                            if (_v1.b.b.b.b) switch(_v1.b.b.a){
                                case "blob":
                                    var user = _v1.a;
                                    var _v2 = _v1.b;
                                    var repository = _v2.a;
                                    var _v3 = _v2.b;
                                    var _v4 = _v3.b;
                                    var hash = _v4.a;
                                    return user + ("/" + (repository + ("/tree/" + hash)));
                                case "refs":
                                    if (_v1.b.b.b.a === "heads" && _v1.b.b.b.b.b) {
                                        var user = _v1.a;
                                        var _v5 = _v1.b;
                                        var repository = _v5.a;
                                        var _v6 = _v5.b;
                                        var _v7 = _v6.b;
                                        var _v8 = _v7.b;
                                        var branch = _v8.a;
                                        return user + ("/" + (repository + ("/tree/" + branch)));
                                    } else break _v1$2;
                                default:
                                    break _v1$2;
                            }
                            else break _v1$2;
                        } else return w;
                    }
                    var user = _v1.a;
                    var _v9 = _v1.b;
                    var repository = _v9.a;
                    var _v10 = _v9.b;
                    var branch = _v10.a;
                    return user + ("/" + (repository + ("/tree/" + branch)));
                }();
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("raw.githubusercontent\\.com/(.*)")
        },
        {
            by: F2(function(_v11, w) {
                return "https://gitlab.com/" + A3($elm$core$String$replace, "-/raw/", "-/tree/", w);
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root($author$project$Lia$Parser$PatReplace$urlProxy + "https://gitlab\\.com/(.*)")
        },
        {
            by: F2(function(_v12, w) {
                var _v13 = A2($elm$core$List$map, $elm$core$String$split("."), A2($elm$core$String$split, "/", w));
                if (_v13.b && _v13.a.b && _v13.a.b.b && _v13.a.b.a === "gitlab" && _v13.a.b.b.b && _v13.a.b.b.a === "io" && !_v13.a.b.b.b.b && _v13.b.b && _v13.b.a.b && !_v13.b.a.b.b) {
                    var _v14 = _v13.a;
                    var user = _v14.a;
                    var _v15 = _v14.b;
                    var _v16 = _v15.b;
                    var _v17 = _v13.b;
                    var _v18 = _v17.a;
                    var project = _v18.a;
                    return "https://gitlab.com/" + (user + ("/" + project));
                } else return "https://" + w;
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(.*\\.gitlab\\.io/.*)")
        },
        {
            by: F2(function(_v19, w) {
                return "https://dropbox.com/s/" + w;
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("dl\\.dropbox\\.com/s/(.*)")
        }
    ])), function(_v20) {
        var found = _v20.a;
        var string = _v20.b;
        return found ? $elm$core$Maybe$Just(A3($elm$core$String$replace, $author$project$Const$urlProxy, "", string)) : $elm$core$Maybe$Nothing;
    });
    var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
    var $elm$json$Json$Decode$null = _Json_decodeNull;
    var $elm$json$Json$Decode$oneOf = _Json_oneOf;
    var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(function(path, valDecoder, fallback) {
        var nullOr = function(decoder) {
            return $elm$json$Json$Decode$oneOf(_List_fromArray([
                decoder,
                $elm$json$Json$Decode$null(fallback)
            ]));
        };
        var handleResult = function(input) {
            var _v0 = A2($elm$json$Json$Decode$decodeValue, A2($elm$json$Json$Decode$at, path, $elm$json$Json$Decode$value), input);
            if (_v0.$ === "Ok") {
                var rawValue = _v0.a;
                var _v1 = A2($elm$json$Json$Decode$decodeValue, nullOr(valDecoder), rawValue);
                if (_v1.$ === "Ok") {
                    var finalResult = _v1.a;
                    return $elm$json$Json$Decode$succeed(finalResult);
                } else return A2($elm$json$Json$Decode$at, path, nullOr(valDecoder));
            } else return $elm$json$Json$Decode$succeed(fallback);
        };
        return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
    });
    var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(function(key, valDecoder, fallback, decoder) {
        return A2($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder, _List_fromArray([
            key
        ]), valDecoder, fallback), decoder);
    });
    var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(function(key, valDecoder, decoder) {
        return A2($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom, A2($elm$json$Json$Decode$field, key, valDecoder), decoder);
    });
    var $author$project$Lia$Settings$Json$settings = function(model) {
        return function(toc) {
            return function(mode) {
                return function(theme) {
                    return function(light) {
                        return function(editor) {
                            return function(font_size) {
                                return function(sound) {
                                    return function(lang) {
                                        return function(tooltips) {
                                            return function(preferBrowserTTS) {
                                                return function(hideVideoComments) {
                                                    return function(audio) {
                                                        var tts = model.tts;
                                                        return _Utils_update(model, {
                                                            audio: audio,
                                                            editor: editor,
                                                            font_size: font_size,
                                                            hideVideoComments: hideVideoComments,
                                                            lang: lang,
                                                            light: light,
                                                            mode: mode,
                                                            sound: sound,
                                                            table_of_contents: toc,
                                                            theme: theme,
                                                            tooltips: tooltips,
                                                            tts: _Utils_update(tts, {
                                                                preferBrowser: preferBrowserTTS
                                                            })
                                                        });
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Lia$Settings$Json$toMode = function(_v0) {
        return $elm$json$Json$Decode$succeed($author$project$Lia$Settings$Types$Textbook);
    };
    var $author$project$Lia$Settings$Json$toModel = function(model) {
        return $elm$json$Json$Decode$decodeValue(A4($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional, "audio", A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "rate", A2($elm$json$Json$Decode$map, $elm$core$String$fromFloat, $elm$json$Json$Decode$float), A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "pitch", A2($elm$json$Json$Decode$map, $elm$core$String$fromFloat, $elm$json$Json$Decode$float), $elm$json$Json$Decode$succeed(F2(function(pitch, rate) {
            return {
                pitch: pitch,
                rate: rate
            };
        })))), {
            pitch: "1",
            rate: "1"
        }, A4($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional, "hideVideoComments", $elm$json$Json$Decode$bool, false, A4($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional, "preferBrowserTTS", $elm$json$Json$Decode$bool, true, A4($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional, "tooltips", $elm$json$Json$Decode$bool, false, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "lang", $elm$json$Json$Decode$string, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "sound", $elm$json$Json$Decode$bool, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "font_size", $elm$json$Json$Decode$int, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "editor", $elm$json$Json$Decode$string, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "light", $elm$json$Json$Decode$bool, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "theme", $elm$json$Json$Decode$string, A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "mode", A2($elm$json$Json$Decode$andThen, $author$project$Lia$Settings$Json$toMode, $elm$json$Json$Decode$string), A3($NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required, "table_of_contents", $elm$json$Json$Decode$bool, $elm$json$Json$Decode$succeed(function(record) {
            return A2($author$project$Lia$Settings$Json$settings, model, record);
        }))))))))))))));
    };
    var $elm_community$list_extra$List$Extra$last = function(items) {
        last: while(true){
            if (!items.b) return $elm$core$Maybe$Nothing;
            else if (!items.b.b) {
                var x = items.a;
                return $elm$core$Maybe$Just(x);
            } else {
                var rest = items.b;
                var $temp$items = rest;
                items = $temp$items;
                continue last;
            }
        }
    };
    var $elm$core$List$tail = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(xs);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Utils$urlQuery = A2($elm$core$Basics$composeR, $elm$core$String$split("?"), A2($elm$core$Basics$composeR, $elm$core$List$tail, $elm$core$Maybe$andThen($elm_community$list_extra$List$Extra$last)));
    var $elm$core$Result$withDefault = F2(function(def, result) {
        if (result.$ === "Ok") {
            var a = result.a;
            return a;
        } else return def;
    });
    var $author$project$Lia$Model$init = function(_v0) {
        var seed = _v0.seed;
        var hasShareApi = _v0.hasShareApi;
        var openTOC = _v0.openTOC;
        var isFullscreen = _v0.isFullscreen;
        var settings = _v0.settings;
        var backends = _v0.backends;
        var url = _v0.url;
        var readme = _v0.readme;
        var origin = _v0.origin;
        var anchor = _v0.anchor;
        var _default = A3($author$project$Lia$Settings$Types$init, hasShareApi, isFullscreen, $author$project$Lia$Settings$Types$Textbook);
        return {
            anchor: anchor,
            chat: $author$project$Lia$Chat$Model$init,
            definition: A2($author$project$Lia$Definition$Types$default, url, A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlQuery(readme))),
            error: $elm$core$Maybe$Nothing,
            index_model: $author$project$Lia$Index$Model$init,
            langCode: "en",
            langCodeOriginal: "en",
            langName: $elm$core$Maybe$Nothing,
            media: $elm$core$Dict$empty,
            modal: $elm$core$Maybe$Nothing,
            origin: origin,
            overlayVideo: $author$project$Library$Overlay$init,
            pane: $author$project$Library$SplitPane$init($author$project$Library$SplitPane$Horizontal),
            persistent: false,
            readme: readme,
            repositoryUrl: $author$project$Lia$Parser$PatReplace$repo(readme),
            resource: _List_Nil,
            search_index: $elm$core$Basics$identity,
            section_active: 0,
            sections: $elm$core$Array$empty,
            seed: seed,
            settings: function(set) {
                return _Utils_update(set, {
                    sync: $elm$core$List$isEmpty(backends.support) || !backends.enabled ? $elm$core$Maybe$Nothing : set.sync,
                    table_of_contents: openTOC
                });
            }(A2($elm$core$Result$withDefault, _default, A2($author$project$Lia$Settings$Json$toModel, _default, settings))),
            sync: $author$project$Lia$Sync$Types$init(backends.support),
            title: "Lia",
            to_do: _List_Nil,
            translation: $author$project$I18n$Translations$En,
            url: url
        };
    };
    var $author$project$Lia$Script$init = $author$project$Lia$Model$init;
    var $author$project$Service$Event$withNoReply = function(e) {
        return _Utils_update(e, {
            reply: false
        });
    };
    var $author$project$Service$Local$event = F2(function(cmd, message) {
        return $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "local", {
            cmd: cmd,
            param: message
        }));
    });
    var $elm$json$Json$Encode$null = _Json_encodeNull;
    var $author$project$Service$Local$clear = A2($author$project$Service$Local$event, "clear", $elm$json$Json$Encode$null);
    var $author$project$Service$Database$index_list = A2($author$project$Service$Database$index_, "list", $elm$json$Json$Encode$null);
    var $author$project$Service$Event$push = F2(function(po, to) {
        return _Utils_update(to, {
            track: A2($elm$core$List$cons, _Utils_Tuple2(po, -1), to.track)
        });
    });
    var $author$project$Update$initIndex = function(model) {
        return _Utils_Tuple2(model, $elm$core$Platform$Cmd$batch(A2($elm$core$List$map, $author$project$Update$event2js, _List_fromArray([
            A2($author$project$Service$Event$push, "index", $author$project$Service$Database$index_list),
            $author$project$Service$Local$clear
        ]))));
    };
    var $author$project$Lia$Parser$UrlPattern$Codeberg$by = F2(function(_v0, w) {
        var _v1 = A2($elm$core$String$split, "/", w);
        _v1$3: while(true){
            if (_v1.b && _v1.b.b && _v1.b.b.b) switch(_v1.b.b.a){
                case "repos":
                    if (_v1.a === "api" && _v1.b.a === "v1") {
                        var _v2 = _v1.b;
                        var _v3 = _v2.b;
                        var params = _v3.b;
                        return "https://codeberg.org/api/v1/repos/" + A2($elm$core$String$join, "/", params);
                    } else break _v1$3;
                case "raw":
                    if (_v1.b.b.b.b && _v1.b.b.b.a === "branch" && _v1.b.b.b.b.b) {
                        var user = _v1.a;
                        var _v4 = _v1.b;
                        var repository = _v4.a;
                        var _v5 = _v4.b;
                        var _v6 = _v5.b;
                        var _v7 = _v6.b;
                        var branch = _v7.a;
                        var filePath = _v7.b;
                        return "https://codeberg.org/api/v1/repos/" + (A2($elm$core$String$join, "/", _List_fromArray([
                            user,
                            repository,
                            "raw",
                            A2($elm$core$String$join, "/", filePath)
                        ])) + ("?ref=" + branch));
                    } else break _v1$3;
                case "src":
                    if (_v1.b.b.b.b && _v1.b.b.b.a === "branch" && _v1.b.b.b.b.b) {
                        var user = _v1.a;
                        var _v8 = _v1.b;
                        var repository = _v8.a;
                        var _v9 = _v8.b;
                        var _v10 = _v9.b;
                        var _v11 = _v10.b;
                        var branch = _v11.a;
                        var filePath = _v11.b;
                        return "https://codeberg.org/api/v1/repos/" + (A2($elm$core$String$join, "/", _List_fromArray([
                            user,
                            repository,
                            "raw",
                            A2($elm$core$String$join, "/", filePath)
                        ])) + ("?ref=" + branch));
                    } else break _v1$3;
                default:
                    break _v1$3;
            }
            else break _v1$3;
        }
        return "https://codeberg.org/" + w;
    });
    var $author$project$Lia$Parser$UrlPattern$DropBox$by = F2(function(_v0, w) {
        return "https://dl.dropbox.com/" + w;
    });
    var $author$project$Lia$Parser$UrlPattern$GitHub$by = F2(function(_v0, w) {
        return "https://raw.githubusercontent.com/" + function() {
            var _v1 = A2($elm$core$String$split, "/", w);
            _v1$3: while(true){
                if (_v1.b && _v1.b.b) {
                    if (!_v1.b.b.b) {
                        var _v2 = _v1.b;
                        return w + "/master/README.md";
                    } else switch(_v1.b.b.a){
                        case "tree":
                            var _v3 = _v1.b;
                            var _v4 = _v3.b;
                            return A3($elm$core$String$replace, "/tree/", "/", w) + "/README.md";
                        case "raw":
                            if (_v1.b.b.b.b && _v1.b.b.b.a === "refs" && _v1.b.b.b.b.b && _v1.b.b.b.b.a === "heads") {
                                var _v5 = _v1.b;
                                var _v6 = _v5.b;
                                var _v7 = _v6.b;
                                var _v8 = _v7.b;
                                return A3($elm$core$String$replace, "/raw/refs/heads", "/refs/heads", w);
                            } else break _v1$3;
                        default:
                            break _v1$3;
                    }
                } else break _v1$3;
            }
            return A3($elm$core$String$replace, "/blob/", "/", w);
        }();
    });
    var $elm$url$Url$percentEncode = _Url_percentEncode;
    var $author$project$Lia$Parser$UrlPattern$GitLab$by = F2(function(_v0, w) {
        var baseUrl = A2($elm$core$Maybe$withDefault, w, $elm$core$List$head(A2($elm$core$String$split, "?", w)));
        var parts = A2($elm$core$String$split, "/", baseUrl);
        _v1$3: while(true){
            if (parts.b && parts.b.b && parts.b.b.b) switch(parts.b.b.a){
                case "projects":
                    if (parts.a === "api" && parts.b.a === "v4") {
                        var _v2 = parts.b;
                        var _v3 = _v2.b;
                        var params = _v3.b;
                        return "https://gitlab.com/api/v4/projects/" + A2($elm$core$String$join, "/", params);
                    } else break _v1$3;
                case "-":
                    if (parts.b.b.b.b && parts.b.b.b.b.b) switch(parts.b.b.b.a){
                        case "raw":
                            var user = parts.a;
                            var _v4 = parts.b;
                            var repository = _v4.a;
                            var _v5 = _v4.b;
                            var _v6 = _v5.b;
                            var _v7 = _v6.b;
                            var branch = _v7.a;
                            var filePath = _v7.b;
                            return "https://gitlab.com/api/v4/projects/" + (A2($elm$core$String$join, "/", _List_fromArray([
                                $elm$url$Url$percentEncode(user + ("/" + repository)),
                                "repository/files",
                                A2($elm$core$String$join, "/", filePath),
                                "raw"
                            ])) + ("?ref=" + branch));
                        case "blob":
                            var user = parts.a;
                            var _v8 = parts.b;
                            var repository = _v8.a;
                            var _v9 = _v8.b;
                            var _v10 = _v9.b;
                            var _v11 = _v10.b;
                            var branch = _v11.a;
                            var filePath = _v11.b;
                            return "https://gitlab.com/api/v4/projects/" + (A2($elm$core$String$join, "/", _List_fromArray([
                                $elm$url$Url$percentEncode(user + ("/" + repository)),
                                "repository/files",
                                A2($elm$core$String$join, "/", filePath),
                                "raw"
                            ])) + ("?ref=" + branch));
                        default:
                            break _v1$3;
                    }
                    else break _v1$3;
                default:
                    break _v1$3;
            }
            else break _v1$3;
        }
        return "https://gitlab.com/" + w;
    });
    var $truqu$elm_base64$Base64$Encode$intToBase64 = function(i) {
        switch(i){
            case 0:
                return "A";
            case 1:
                return "B";
            case 2:
                return "C";
            case 3:
                return "D";
            case 4:
                return "E";
            case 5:
                return "F";
            case 6:
                return "G";
            case 7:
                return "H";
            case 8:
                return "I";
            case 9:
                return "J";
            case 10:
                return "K";
            case 11:
                return "L";
            case 12:
                return "M";
            case 13:
                return "N";
            case 14:
                return "O";
            case 15:
                return "P";
            case 16:
                return "Q";
            case 17:
                return "R";
            case 18:
                return "S";
            case 19:
                return "T";
            case 20:
                return "U";
            case 21:
                return "V";
            case 22:
                return "W";
            case 23:
                return "X";
            case 24:
                return "Y";
            case 25:
                return "Z";
            case 26:
                return "a";
            case 27:
                return "b";
            case 28:
                return "c";
            case 29:
                return "d";
            case 30:
                return "e";
            case 31:
                return "f";
            case 32:
                return "g";
            case 33:
                return "h";
            case 34:
                return "i";
            case 35:
                return "j";
            case 36:
                return "k";
            case 37:
                return "l";
            case 38:
                return "m";
            case 39:
                return "n";
            case 40:
                return "o";
            case 41:
                return "p";
            case 42:
                return "q";
            case 43:
                return "r";
            case 44:
                return "s";
            case 45:
                return "t";
            case 46:
                return "u";
            case 47:
                return "v";
            case 48:
                return "w";
            case 49:
                return "x";
            case 50:
                return "y";
            case 51:
                return "z";
            case 52:
                return "0";
            case 53:
                return "1";
            case 54:
                return "2";
            case 55:
                return "3";
            case 56:
                return "4";
            case 57:
                return "5";
            case 58:
                return "6";
            case 59:
                return "7";
            case 60:
                return "8";
            case 61:
                return "9";
            case 62:
                return "+";
            default:
                return "/";
        }
    };
    var $truqu$elm_base64$Base64$Encode$toBase64 = function(_int) {
        return _Utils_ap($truqu$elm_base64$Base64$Encode$intToBase64(63 & _int >>> 18), _Utils_ap($truqu$elm_base64$Base64$Encode$intToBase64(63 & _int >>> 12), _Utils_ap($truqu$elm_base64$Base64$Encode$intToBase64(63 & _int >>> 6), $truqu$elm_base64$Base64$Encode$intToBase64(63 & _int >>> 0))));
    };
    var $truqu$elm_base64$Base64$Encode$add = F2(function(_char, _v0) {
        var res = _v0.a;
        var count = _v0.b;
        var acc = _v0.c;
        var current = acc << 8 | _char;
        if (count === 2) return _Utils_Tuple3(_Utils_ap(res, $truqu$elm_base64$Base64$Encode$toBase64(current)), 0, 0);
        else return _Utils_Tuple3(res, count + 1, current);
    });
    var $truqu$elm_base64$Base64$Encode$chomp = F2(function(char_, acc) {
        var _char = $elm$core$Char$toCode(char_);
        return _char < 128 ? A2($truqu$elm_base64$Base64$Encode$add, _char, acc) : _char < 2048 ? A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char, A2($truqu$elm_base64$Base64$Encode$add, 192 | _char >>> 6, acc)) : _char < 55296 || _char >= 57344 && _char <= 65535 ? A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char, A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char >>> 6, A2($truqu$elm_base64$Base64$Encode$add, 224 | _char >>> 12, acc))) : A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char, A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char >>> 6, A2($truqu$elm_base64$Base64$Encode$add, 128 | 63 & _char >>> 12, A2($truqu$elm_base64$Base64$Encode$add, 240 | _char >>> 18, acc))));
    });
    var $truqu$elm_base64$Base64$Encode$initial = _Utils_Tuple3("", 0, 0);
    var $truqu$elm_base64$Base64$Encode$wrapUp = function(_v0) {
        var res = _v0.a;
        var cnt = _v0.b;
        var acc = _v0.c;
        switch(cnt){
            case 1:
                return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & acc >>> 2) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & acc << 4) + "=="));
            case 2:
                return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & acc >>> 10) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & acc >>> 4) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & acc << 2) + "=")));
            default:
                return res;
        }
    };
    var $truqu$elm_base64$Base64$Encode$encode = function(input) {
        return $truqu$elm_base64$Base64$Encode$wrapUp(A3($elm$core$String$foldl, $truqu$elm_base64$Base64$Encode$chomp, $truqu$elm_base64$Base64$Encode$initial, input));
    };
    var $truqu$elm_base64$Base64$encode = $truqu$elm_base64$Base64$Encode$encode;
    var $author$project$Lia$Parser$UrlPattern$OneDrive$createOneDriveLink = function(url) {
        var base64 = $truqu$elm_base64$Base64$encode(url);
        var modifiedBase64 = A3($elm$core$String$replace, "+", "-", A3($elm$core$String$replace, "/", "_", base64));
        var finalBase64 = A2($elm$core$String$endsWith, "=", modifiedBase64) ? A2($elm$core$String$dropRight, 1, modifiedBase64) : modifiedBase64;
        return "https://api.onedrive.com/v1.0/shares/u!" + (finalBase64 + "/root/content");
    };
    var $author$project$Lia$Parser$UrlPattern$OneDrive$by = F2(function(_v0, w) {
        return $author$project$Lia$Parser$UrlPattern$OneDrive$createOneDriveLink("https://onedrive.live.com/" + w);
    });
    var $elm$core$List$filter = F2(function(isGood, list) {
        return A3($elm$core$List$foldr, F2(function(x, xs) {
            return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
        }), _List_Nil, list);
    });
    var $elm$core$Maybe$map = F2(function(f, maybe) {
        if (maybe.$ === "Just") {
            var value = maybe.a;
            return $elm$core$Maybe$Just(f(value));
        } else return $elm$core$Maybe$Nothing;
    });
    var $elm$core$Tuple$pair = F2(function(a, b) {
        return _Utils_Tuple2(a, b);
    });
    var $elm$core$List$takeReverse = F3(function(n, list, kept) {
        takeReverse: while(true){
            if (n <= 0) return kept;
            else {
                if (!list.b) return kept;
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs, $temp$kept = A2($elm$core$List$cons, x, kept);
                    n = $temp$n;
                    list = $temp$list;
                    kept = $temp$kept;
                    continue takeReverse;
                }
            }
        }
    });
    var $elm$core$List$takeTailRec = F2(function(n, list) {
        return $elm$core$List$reverse(A3($elm$core$List$takeReverse, n, list, _List_Nil));
    });
    var $elm$core$List$takeFast = F3(function(ctr, n, list) {
        if (n <= 0) return _List_Nil;
        else {
            var _v0 = _Utils_Tuple2(n, list);
            _v0$1: while(true){
                _v0$5: while(true){
                    if (!_v0.b.b) return list;
                    else if (_v0.b.b.b) switch(_v0.a){
                        case 1:
                            break _v0$1;
                        case 2:
                            var _v2 = _v0.b;
                            var x = _v2.a;
                            var _v3 = _v2.b;
                            var y = _v3.a;
                            return _List_fromArray([
                                x,
                                y
                            ]);
                        case 3:
                            if (_v0.b.b.b.b) {
                                var _v4 = _v0.b;
                                var x = _v4.a;
                                var _v5 = _v4.b;
                                var y = _v5.a;
                                var _v6 = _v5.b;
                                var z = _v6.a;
                                return _List_fromArray([
                                    x,
                                    y,
                                    z
                                ]);
                            } else break _v0$5;
                        default:
                            if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
                                var _v7 = _v0.b;
                                var x = _v7.a;
                                var _v8 = _v7.b;
                                var y = _v8.a;
                                var _v9 = _v8.b;
                                var z = _v9.a;
                                var _v10 = _v9.b;
                                var w = _v10.a;
                                var tl = _v10.b;
                                return ctr > 1000 ? A2($elm$core$List$cons, x, A2($elm$core$List$cons, y, A2($elm$core$List$cons, z, A2($elm$core$List$cons, w, A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2($elm$core$List$cons, x, A2($elm$core$List$cons, y, A2($elm$core$List$cons, z, A2($elm$core$List$cons, w, A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
                            } else break _v0$5;
                    }
                    else {
                        if (_v0.a === 1) break _v0$1;
                        else break _v0$5;
                    }
                }
                return list;
            }
            var _v1 = _v0.b;
            var x = _v1.a;
            return _List_fromArray([
                x
            ]);
        }
    });
    var $elm$core$List$take = F2(function(n, list) {
        return A3($elm$core$List$takeFast, 0, n, list);
    });
    var $author$project$Lia$Parser$UrlPattern$GitLab$byGeneric = F2(function(_v0, w) {
        var baseUrl = A2($elm$core$Maybe$withDefault, w, $elm$core$List$head(A2($elm$core$String$split, "?", w)));
        var urlParts = A2($elm$core$String$split, "/", baseUrl);
        var dashIndex = A2($elm$core$Maybe$withDefault, -1, A2($elm$core$Maybe$map, $elm$core$Tuple$first, $elm$core$List$head(A2($elm$core$List$filter, function(_v1) {
            var part = _v1.b;
            return part === "-";
        }, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, urlParts)))));
        var domain = A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(urlParts));
        var repository = dashIndex > 1 ? A2($elm$core$String$join, "/", A2($elm$core$List$take, dashIndex - 1, A2($elm$core$List$drop, 1, urlParts))) : "";
        var accessType = dashIndex >= 0 && _Utils_cmp($elm$core$List$length(urlParts), dashIndex + 1) > 0 ? A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$List$drop, dashIndex + 1, urlParts))) : "";
        var branch = accessType !== "" && _Utils_cmp($elm$core$List$length(urlParts), dashIndex + 2) > 0 ? A2($elm$core$Maybe$withDefault, "main", $elm$core$List$head(A2($elm$core$List$drop, dashIndex + 2, urlParts))) : "main";
        var filePath = branch !== "" && _Utils_cmp($elm$core$List$length(urlParts), dashIndex + 3) > 0 ? A2($elm$core$String$join, "/", A2($elm$core$List$drop, dashIndex + 3, urlParts)) : "README.md";
        return "https://" + (domain + ("/api/v4/projects/" + ($elm$url$Url$percentEncode(repository) + ("/repository/files/" + ($elm$url$Url$percentEncode(filePath) + ("/raw?ref=" + branch))))));
    });
    var $author$project$Lia$Parser$UrlPattern$NextCloud$byGeneric = F2(function(_v0, w) {
        var baseUrl = function() {
            var _v1 = A2($elm$core$String$split, "?", w);
            if (_v1.b) {
                var base = _v1.a;
                return base;
            } else return w;
        }();
        return A2($elm$core$String$endsWith, "/download", baseUrl) ? "https://" + baseUrl : "https://" + (baseUrl + "/download");
    });
    var $author$project$Lia$Parser$UrlPattern$Codeberg$pattern = $author$project$Lia$Parser$UrlPattern$Generic$root("codeberg\\.org/(.*)");
    var $author$project$Lia$Parser$UrlPattern$DropBox$pattern = $author$project$Lia$Parser$UrlPattern$Generic$root("dropbox\\.com/(.*)");
    var $author$project$Lia$Parser$UrlPattern$GitHub$pattern = $author$project$Lia$Parser$UrlPattern$Generic$root("github\\.com/(.*)");
    var $author$project$Lia$Parser$UrlPattern$GitLab$pattern = $author$project$Lia$Parser$UrlPattern$Generic$root("gitlab\\.com/(.*)");
    var $author$project$Lia$Parser$UrlPattern$OneDrive$pattern = $author$project$Lia$Parser$UrlPattern$Generic$root("onedrive\\.live\\.com/(.*)");
    var $author$project$Lia$Parser$UrlPattern$GitLab$patternGeneric = "gitlab://(.*)";
    var $author$project$Lia$Parser$UrlPattern$NextCloud$patternGeneric = "nextcloud://(.*)";
    var $author$project$Lia$Parser$PatReplace$link = function(url) {
        return A2($elm$core$String$startsWith, $author$project$Const$urlProxy, url) ? url : A2($author$project$Lia$Parser$PatReplace$replace, _List_fromArray([
            {
                by: $author$project$Lia$Parser$UrlPattern$GitHub$by,
                pattern: $author$project$Lia$Parser$UrlPattern$GitHub$pattern
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$DropBox$by,
                pattern: $author$project$Lia$Parser$UrlPattern$DropBox$pattern
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$OneDrive$by,
                pattern: $author$project$Lia$Parser$UrlPattern$OneDrive$pattern
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$Codeberg$by,
                pattern: $author$project$Lia$Parser$UrlPattern$Generic$root($author$project$Lia$Parser$UrlPattern$Codeberg$pattern)
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$GitLab$by,
                pattern: $author$project$Lia$Parser$UrlPattern$GitLab$pattern
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$GitLab$byGeneric,
                pattern: $author$project$Lia$Parser$UrlPattern$GitLab$patternGeneric
            },
            {
                by: $author$project$Lia$Parser$UrlPattern$NextCloud$byGeneric,
                pattern: $author$project$Lia$Parser$UrlPattern$NextCloud$patternGeneric
            }
        ]), url).b;
    };
    var $author$project$Index$Version$getMajor = function(ver) {
        var _v0 = A2($elm$core$List$map, $elm$core$String$toInt, A2($elm$core$String$split, ".", ver));
        if (_v0.b && _v0.a.$ === "Just") {
            var major = _v0.a.a;
            return major;
        } else return 0;
    };
    var $elm$core$List$sortBy = _List_sortBy;
    var $author$project$Index$Version$toInt = function(str) {
        var _v0 = A2($elm$core$List$map, $elm$core$String$toInt, A2($elm$core$String$split, ".", str));
        if (_v0.b && _v0.a.$ === "Just") {
            if (_v0.b.b && _v0.b.a.$ === "Just") {
                if (_v0.b.b.b && _v0.b.b.a.$ === "Just") {
                    var major = _v0.a.a;
                    var _v1 = _v0.b;
                    var minor = _v1.a.a;
                    var _v2 = _v1.b;
                    var patch = _v2.a.a;
                    return 10000 * major + 100 * minor + patch;
                } else {
                    var major = _v0.a.a;
                    var _v3 = _v0.b;
                    var minor = _v3.a.a;
                    return 10000 * major + 100 * minor;
                }
            } else {
                var major = _v0.a.a;
                return 10000 * major;
            }
        } else return 0;
    };
    var $author$project$Index$Version$sort = $elm$core$List$sortBy($author$project$Index$Version$toInt);
    var $author$project$Index$Version$max = A2($elm$core$Basics$composeR, $author$project$Index$Version$sort, A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$core$List$head));
    var $author$project$Index$Update$inCache = F2(function(version, course) {
        return !!$author$project$Index$Version$getMajor(version) && _Utils_eq($author$project$Index$Version$toInt(version), A2($elm$core$Maybe$withDefault, -1, A2($elm$core$Maybe$map, $author$project$Index$Version$toInt, $author$project$Index$Version$max(A2($elm$core$List$map, A2($elm$core$Basics$composeR, function($) {
            return $.definition;
        }, function($) {
            return $.version;
        }), $elm$core$Dict$values(course.versions))))));
    });
    var $author$project$Service$Database$toJson = function(_v0) {
        var version = _v0.version;
        var url = _v0.url;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("version", $elm$json$Json$Encode$int($author$project$Index$Version$getMajor(version))),
            _Utils_Tuple2("url", $elm$json$Json$Encode$string(url))
        ]));
    };
    var $author$project$Service$Database$index_restore = A2($elm$core$Basics$composeR, $author$project$Service$Database$toJson, $author$project$Service$Database$index_("restore"));
    var $elm$core$String$trim = _String_trim;
    var $elm$core$Dict$union = F2(function(t1, t2) {
        return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
    });
    var $author$project$Lia$Definition$Types$add_macros = F2(function(orig, temp) {
        return _Utils_update(orig, {
            attributes: A2($elm$core$List$append, orig.attributes, temp.attributes),
            formulas: A2($elm$core$Dict$union, orig.formulas, temp.formulas),
            macro: A2($elm$core$Dict$union, orig.macro, temp.macro),
            onload: $elm$core$String$trim(_Utils_ap(orig.onload, !_Utils_eq(orig.onload, temp.onload) ? "\n" + temp.onload : "")),
            resources: A2($elm$core$List$append, orig.resources, temp.resources)
        });
    });
    var $author$project$Service$Resource$event = F2(function(type_, param_) {
        return $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "resource", {
            cmd: type_,
            param: $elm$json$Json$Encode$string(param_)
        }));
    });
    var $author$project$Service$Resource$link = function(url) {
        return A2($author$project$Service$Resource$event, "link", url);
    };
    var $elm$core$List$any = F2(function(isOkay, list) {
        any: while(true){
            if (!list.b) return false;
            else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) return true;
                else {
                    var $temp$isOkay = isOkay, $temp$list = xs;
                    isOkay = $temp$isOkay;
                    list = $temp$list;
                    continue any;
                }
            }
        }
    });
    var $elm$core$List$member = F2(function(x, xs) {
        return A2($elm$core$List$any, function(a) {
            return _Utils_eq(a, x);
        }, xs);
    });
    var $author$project$Service$Resource$script = function(url) {
        return A2($author$project$Service$Resource$event, "script", url);
    };
    var $author$project$Service$Resource$script_module = function(url) {
        return A2($author$project$Service$Resource$event, "module", url);
    };
    var $author$project$Lia$Model$loadResource = F2(function(old, _new) {
        var member = function(x) {
            return !A2($elm$core$List$member, x, old);
        };
        var to_load = A2($elm$core$List$filter, member, _new);
        return _Utils_Tuple2(A2($elm$core$List$append, old, to_load), A2($elm$core$List$map, function(res) {
            switch(res.$){
                case "Script":
                    var url = res.a;
                    return $author$project$Service$Resource$script(url);
                case "Link":
                    var url = res.a;
                    return $author$project$Service$Resource$link(url);
                default:
                    var url = res.a;
                    return $author$project$Service$Resource$script_module(url);
            }
        }, to_load));
    });
    var $author$project$Lia$Script$add_todos = F2(function(definition, model) {
        var _v0 = A2($author$project$Lia$Model$loadResource, model.resource, definition.resources);
        var res = _v0.a;
        var events = _v0.b;
        return _Utils_update(model, {
            definition: A2($author$project$Lia$Definition$Types$add_macros, model.definition, definition),
            resource: res,
            to_do: A2($elm$core$List$append, model.to_do, $elm$core$List$reverse(events))
        });
    });
    var $elm$core$String$foldr = _String_foldr;
    var $elm$core$String$toList = function(string) {
        return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
    };
    var $author$project$Lia$Utils$checkFalse = function(string) {
        var _v0 = $elm$core$String$toList($elm$core$String$toLower($elm$core$String$trim(string)));
        _v0$4: while(true){
            if (_v0.b) {
                if (!_v0.b.b) {
                    if ("0" === _v0.a.valueOf()) return false;
                    else break _v0$4;
                } else {
                    if (_v0.b.b.b) switch(_v0.a.valueOf()){
                        case "f":
                            if ("a" === _v0.b.a.valueOf() && "l" === _v0.b.b.a.valueOf() && _v0.b.b.b.b && "s" === _v0.b.b.b.a.valueOf() && _v0.b.b.b.b.b && "e" === _v0.b.b.b.b.a.valueOf()) {
                                var _v1 = _v0.b;
                                var _v2 = _v1.b;
                                var _v3 = _v2.b;
                                var _v4 = _v3.b;
                                return false;
                            } else break _v0$4;
                        case "o":
                            if ("f" === _v0.b.a.valueOf() && "f" === _v0.b.b.a.valueOf()) {
                                var _v5 = _v0.b;
                                var _v6 = _v5.b;
                                return false;
                            } else break _v0$4;
                        case "d":
                            if ("i" === _v0.b.a.valueOf() && "s" === _v0.b.b.a.valueOf() && _v0.b.b.b.b && "a" === _v0.b.b.b.a.valueOf() && _v0.b.b.b.b.b && "b" === _v0.b.b.b.b.a.valueOf() && _v0.b.b.b.b.b.b && "l" === _v0.b.b.b.b.b.a.valueOf() && _v0.b.b.b.b.b.b.b && "e" === _v0.b.b.b.b.b.b.a.valueOf()) {
                                var _v7 = _v0.b;
                                var _v8 = _v7.b;
                                var _v9 = _v8.b;
                                var _v10 = _v9.b;
                                var _v11 = _v10.b;
                                var _v12 = _v11.b;
                                return false;
                            } else break _v0$4;
                        default:
                            break _v0$4;
                    }
                    else break _v0$4;
                }
            } else break _v0$4;
        }
        return true;
    };
    var $author$project$Lia$Utils$checkPersistency = A2($elm$core$Basics$composeR, $elm$core$Dict$get("persistent"), A2($elm$core$Basics$composeR, $elm$core$Maybe$map($author$project$Lia$Utils$checkFalse), $elm$core$Maybe$withDefault(false)));
    var $author$project$I18n$Translations$Am = {
        $: "Am"
    };
    var $author$project$I18n$Translations$Ar = {
        $: "Ar"
    };
    var $author$project$I18n$Translations$Bg = {
        $: "Bg"
    };
    var $author$project$I18n$Translations$Bn = {
        $: "Bn"
    };
    var $author$project$I18n$Translations$De = {
        $: "De"
    };
    var $author$project$I18n$Translations$Es = {
        $: "Es"
    };
    var $author$project$I18n$Translations$Fa = {
        $: "Fa"
    };
    var $author$project$I18n$Translations$Fr = {
        $: "Fr"
    };
    var $author$project$I18n$Translations$Hi = {
        $: "Hi"
    };
    var $author$project$I18n$Translations$Hy = {
        $: "Hy"
    };
    var $author$project$I18n$Translations$It = {
        $: "It"
    };
    var $author$project$I18n$Translations$Ja = {
        $: "Ja"
    };
    var $author$project$I18n$Translations$Ka = {
        $: "Ka"
    };
    var $author$project$I18n$Translations$Ko = {
        $: "Ko"
    };
    var $author$project$I18n$Translations$Nl = {
        $: "Nl"
    };
    var $author$project$I18n$Translations$Pa = {
        $: "Pa"
    };
    var $author$project$I18n$Translations$Pt = {
        $: "Pt"
    };
    var $author$project$I18n$Translations$Ru = {
        $: "Ru"
    };
    var $author$project$I18n$Translations$Sw = {
        $: "Sw"
    };
    var $author$project$I18n$Translations$Tw = {
        $: "Tw"
    };
    var $author$project$I18n$Translations$Uk = {
        $: "Uk"
    };
    var $author$project$I18n$Translations$Ur = {
        $: "Ur"
    };
    var $author$project$I18n$Translations$Zh = {
        $: "Zh"
    };
    var $author$project$I18n$Translations$getLnFromCode = function(code) {
        var _v0 = $elm$core$String$toLower(code);
        switch(_v0){
            case "am":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Am);
            case "ar":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ar);
            case "bg":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Bg);
            case "bn":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Bn);
            case "de":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$De);
            case "es":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Es);
            case "fa":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Fa);
            case "fr":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Fr);
            case "hi":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Hi);
            case "hy":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Hy);
            case "it":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$It);
            case "ja":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ja);
            case "ka":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ka);
            case "ko":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ko);
            case "nl":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Nl);
            case "pa":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Pa);
            case "pt":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Pt);
            case "ru":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ru);
            case "sw":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Sw);
            case "tw":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Tw);
            case "uk":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Uk);
            case "ur":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Ur);
            case "zh":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$Zh);
            case "en":
                return $elm$core$Maybe$Just($author$project$I18n$Translations$En);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$Lia$Script$openInLiveEditor = function(url) {
        return $elm$core$Maybe$Just("https://liascript.github.io/LiveEditor/?/show/file/" + url);
    };
    var $andre_dietrich$parser_combinators$Combine$ParseLocation = F3(function(source, line, column) {
        return {
            column: column,
            line: line,
            source: source
        };
    });
    var $andre_dietrich$parser_combinators$Combine$currentLocation = function(stream) {
        var find = F3(function(position, currentLine_, lines) {
            find: while(true){
                if (!lines.b) return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, "", currentLine_, position);
                else {
                    var line = lines.a;
                    var rest = lines.b;
                    var length = $elm$core$String$length(line);
                    var lengthPlusNL = length + 1;
                    if (_Utils_eq(position, length)) return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
                    else {
                        if (_Utils_cmp(position, length) > 0) {
                            var $temp$position = position - lengthPlusNL, $temp$currentLine_ = currentLine_ + 1, $temp$lines = rest;
                            position = $temp$position;
                            currentLine_ = $temp$currentLine_;
                            lines = $temp$lines;
                            continue find;
                        } else return A3($andre_dietrich$parser_combinators$Combine$ParseLocation, line, currentLine_, position);
                    }
                }
            }
        });
        return A3(find, stream.position, 0, A2($elm$core$String$split, "\n", stream.data));
    };
    var $author$project$Const$urlLiascript = "https://LiaScript.github.io";
    var $author$project$Const$urlLiascriptCourse = $author$project$Const$urlLiascript + "/course/?";
    var $author$project$Error$Message$emptyFile = "> The file you want me to load does not contain any content. Everything I see is only an empty string...\n    \nIf you see this in message in an editor, try to copy and paste the following code:\n\n```` md\n<!--\nauthor:   Your Name\n\nemail:    your@mail.org\n\nversion:  0.0.1\n\nlanguage: en\n\nnarrator: US English Female\n\ncomment:  Try to write a short comment about\n          your course, multiline is also okay.\n-->\n\n# Course Main Title\n\nThis is your **course** initialization stub.\n\nPlease see the [Docs](" + ($author$project$Const$urlLiascriptCourse + ("https://raw.githubusercontent.com/liaScript/docs/master/README.md)\nto find out what is possible in [LiaScript](" + ($author$project$Const$urlLiascript + (').\n\nIf you want to use instant help in your Atom IDE, please type **lia** to see all available shortcuts.\n\n## Markdown\n\nYou can use common [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) syntax to create your course, such as:\n\n1. Lists\n2. ordered or\n\n   * unordered\n   * ones ...\n\n\n| Header 1   | Header 2   |\n| :--------- | :--------- |\n| Item 1     | Item 2     |\n\n\nImages:\n\n![images](https://farm2.static.flickr.com/1618/26701766821_7bea494826.jpg)\n\n\n### Extensions\n\n     --{{0}}--\nBut you can also include other features such as spoken text.\n\n      --{{1}}--\nInsert any kind of audio file:\n\n       {{1}}\n?[audio](https://bigsoundbank.com/UPLOAD/mp3/1068.mp3)\n\n\n     --{{2}}--\nEven videos or change the language completely.\n\n       {{2-3}}\n!?[video](https://www.youtube.com/watch?v=bICfKRyKTwE)\n\n\n      --{{3 Russian Female}}--\nПервоначально создан в 2004 году Джоном Грубером (англ. John Gruber) и Аароном\nШварцем. Многие идеи языка были позаимствованы из существующих соглашений по\nразметке текста в электронных письмах...\n\n\n    {{3}}\nType "voice" to see a list of all available languages.\n\n\n### Styling\n\n<!-- class = "animated rollIn" style = "animation-delay: 2s; color: purple" -->\nThe whole text-block should appear in purple color and with a wobbling effect.\nWhich is a **bad** example, please use it with caution ...\n~~ only this is red ;-) ~~ <!-- class = "animated infinite bounce" style = "color: red;" -->\n\n## Charts\n\nUse ASCII-Art to draw diagrams:\n\n                                    Multiline\n    1.9 |    DOTS\n        |                 ***\n      y |               *     *\n      - | r r r r r r r*r r r r*r r r r r r r\n      a |             *         *\n      x |            *           *\n      i | B B B B B * B B B B B B * B B B B B\n      s |         *                 *\n        | *  * *                       * *  *\n     -1 +------------------------------------\n        0              x-axis               1\n\n## Quizzes\n\n### A Textquiz\n\nWhat did the **fish** say when he hit a **concrete wall**?\n\n    [[dam]]\n\n### Multiple Choice\n\nJust add as many points as you wish:\n\n    [[X]] Only the **X** marks the correct point.\n    [[ ]] Empty ones are wrong.\n    [[X]] ...\n\n### Single Choice\n\nJust add as many points as you wish:\n\n    [( )] ...\n    [(X)] <-- Only the **X** is allowed.\n    [( )] ...\n\n\n## Executable Code\n\nYou can make your code executable and define projects:\n\n``` js     -EvalScript.js\nlet who = data.first_name + " " + data.last_name;\n\nif(data.online) {\n  who + " is online"; }\nelse {\n  who + " is NOT online"; }\n```\n``` json    +Data.json\n{\n  "first_name" :  "Sammy",\n  "last_name"  :  "Shark",\n  "online"     :  true\n}\n```\n<script>\n  // insert the JSON dataset into the local variable data\n  let data = @input(1);\n\n  // eval the script that uses this dataset\n  eval(`@input(0)`);\n</script>\n\n\n## More\n\nFind out what you also can do ...\n\n' + ($author$project$Const$urlLiascriptCourse + "https://raw.githubusercontent.com/liaScript/docs/master/README.md\n````\n")))));
    var $elm$core$String$append = _String_append;
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $elm$core$String$repeatHelp = F3(function(n, chunk, result) {
        return n <= 0 ? result : A3($elm$core$String$repeatHelp, n >> 1, _Utils_ap(chunk, chunk), !(n & 1) ? result : _Utils_ap(result, chunk));
    });
    var $elm$core$String$repeat = F2(function(n, chunk) {
        return A3($elm$core$String$repeatHelp, n, chunk, "");
    });
    var $elm$core$String$padLeft = F3(function(n, _char, string) {
        return _Utils_ap(A2($elm$core$String$repeat, n - $elm$core$String$length(string), $elm$core$String$fromChar(_char)), string);
    });
    var $author$project$Lia$Parser$Parser$formatError = F2(function(ms, stream) {
        var separator = "\n\n";
        var separatorOffset = $elm$core$String$length(separator);
        var location = $andre_dietrich$parser_combinators$Combine$currentLocation(stream);
        var padding = location.column + separatorOffset + 2;
        var expectationSeparator = "\n* ";
        return "Parse error around line: " + ($elm$core$String$fromInt(location.line) + (separator + (location.source + ("\n" + (A3($elm$core$String$padLeft, padding, _Utils_chr(" "), "^") + ("\nI expected one of the following:\n" + (expectationSeparator + A2($elm$core$String$join, expectationSeparator, A2($elm$core$List$map, function(s) {
            return A2($elm$core$String$append, s, "\n");
        }, ms)))))))));
    });
    var $andre_dietrich$parser_combinators$Combine$Parser = function(a) {
        return {
            $: "Parser",
            a: a
        };
    };
    var $andre_dietrich$parser_combinators$Combine$app = function(_v0) {
        var inner = _v0.a;
        return inner;
    };
    var $andre_dietrich$parser_combinators$Combine$andThen = F2(function(f, p) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
            if (_v0.c.$ === "Ok") {
                var rstate = _v0.a;
                var rstream = _v0.b;
                var res = _v0.c.a;
                return A3($andre_dietrich$parser_combinators$Combine$app, f(res), rstate, rstream);
            } else {
                var estate = _v0.a;
                var estream = _v0.b;
                var ms = _v0.c.a;
                return _Utils_Tuple3(estate, estream, $elm$core$Result$Err(ms));
            }
        }));
    });
    var $pilatch$flip$Flip$flip = F3(function(_function, argB, argA) {
        return A2(_function, argA, argB);
    });
    var $andre_dietrich$parser_combinators$Combine$bimap = F3(function(fok, ferr, p) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
            if (_v0.c.$ === "Ok") {
                var rstate = _v0.a;
                var rstream = _v0.b;
                var res = _v0.c.a;
                return _Utils_Tuple3(rstate, rstream, $elm$core$Result$Ok(fok(res)));
            } else {
                var estate = _v0.a;
                var estream = _v0.b;
                var ms = _v0.c.a;
                return _Utils_Tuple3(estate, estream, $elm$core$Result$Err(ferr(ms)));
            }
        }));
    });
    var $andre_dietrich$parser_combinators$Combine$map = F2(function(f, p) {
        return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
    });
    var $andre_dietrich$parser_combinators$Combine$andMap = F2(function(rp, lp) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp), lp);
    });
    var $andre_dietrich$parser_combinators$Combine$ignore = F2(function(p1, p2) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, p1, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, p2));
    });
    var $author$project$Lia$Markdown$Code$Types$Model = F2(function(evaluate, highlight) {
        return {
            evaluate: evaluate,
            highlight: highlight
        };
    });
    var $author$project$Lia$Markdown$Code$Types$init = A2($author$project$Lia$Markdown$Code$Types$Model, $elm$core$Array$empty, $elm$core$Array$empty);
    var $author$project$Lia$Markdown$Effect$Model$Model = F5(function(visible, effects, comments, javascript, speaking) {
        return {
            comments: comments,
            effects: effects,
            javascript: javascript,
            speaking: speaking,
            visible: visible
        };
    });
    var $author$project$Lia$Markdown$Effect$Model$init = A5($author$project$Lia$Markdown$Effect$Model$Model, 0, 0, $elm$core$Dict$empty, $elm$core$Array$empty, $elm$core$Maybe$Nothing);
    var $author$project$Lia$Markdown$Footnote$Model$init = $elm$core$Dict$empty;
    var $author$project$Lia$Markdown$Quiz$Multi$Types$Quiz = F3(function(elements, options, solution) {
        return {
            elements: elements,
            options: options,
            solution: solution
        };
    });
    var $author$project$Lia$Markdown$Quiz$Multi$Types$init = A3($author$project$Lia$Markdown$Quiz$Multi$Types$Quiz, _List_Nil, $elm$core$Array$empty, $elm$core$Array$empty);
    var $author$project$Lia$Parser$Context$init = F3(function(seed, search_index, global) {
        return {
            abort: {
                isTrue: false,
                stack: _List_Nil
            },
            code_model: $author$project$Lia$Markdown$Code$Types$init,
            defines: global,
            defines_updated: false,
            effect_id: 0,
            effect_model: $author$project$Lia$Markdown$Effect$Model$init,
            effect_number: _List_fromArray([
                0
            ]),
            footnotes: $author$project$Lia$Markdown$Footnote$Model$init,
            gallery_vector: $elm$core$Array$empty,
            indentation: _List_Nil,
            indentation_skip: false,
            input: {
                blocks: $author$project$Lia$Markdown$Quiz$Multi$Types$init,
                grouping: false,
                isEnabled: false
            },
            quiz_vector: $elm$core$Array$empty,
            search_index: A2($elm$core$Maybe$withDefault, $elm$core$Basics$identity, search_index),
            seed: A2($elm$core$Maybe$withDefault, 0, seed),
            survey_vector: $elm$core$Array$empty,
            table_vector: $elm$core$Array$empty,
            task_vector: $elm$core$Array$empty
        };
    });
    var $andre_dietrich$parser_combinators$Combine$keep = F2(function(p1, p2) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, p1, A2($andre_dietrich$parser_combinators$Combine$map, $pilatch$flip$Flip$flip($elm$core$Basics$always), p2));
    });
    var $andre_dietrich$parser_combinators$Combine$or = F2(function(lp, rp) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
            if (_v0.c.$ === "Ok") {
                var res = _v0;
                return res;
            } else {
                var lms = _v0.c.a;
                var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
                if (_v1.c.$ === "Ok") {
                    var res = _v1;
                    return res;
                } else {
                    var rms = _v1.c.a;
                    return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_Utils_ap(lms, rms)));
                }
            }
        }));
    });
    var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
    var $andre_dietrich$parser_combinators$Combine$onerror = F2(function(m, p) {
        return A2($andre_dietrich$parser_combinators$Combine$mapError, $elm$core$Basics$always(_List_fromArray([
            m
        ])), p);
    });
    var $andre_dietrich$parser_combinators$Combine$primitive = $andre_dietrich$parser_combinators$Combine$Parser;
    var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function(pred) {
        return $andre_dietrich$parser_combinators$Combine$primitive(F2(function(state, stream) {
            var message = "could not satisfy predicate";
            var _v0 = $elm$core$String$uncons(stream.input);
            if (_v0.$ === "Just") {
                var _v1 = _v0.a;
                var h = _v1.a;
                var rest = _v1.b;
                return pred(h) ? _Utils_Tuple3(state, _Utils_update(stream, {
                    input: rest,
                    position: stream.position + 1
                }), $elm$core$Result$Ok(h)) : _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_fromArray([
                    message
                ])));
            } else return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_fromArray([
                message
            ])));
        }));
    };
    var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2($andre_dietrich$parser_combinators$Combine$onerror, "expected any character", $andre_dietrich$parser_combinators$Combine$Char$satisfy($elm$core$Basics$always(true)));
    var $andre_dietrich$parser_combinators$Combine$manyTill = F2(function(p, end_) {
        var accumulate = F3(function(acc, state, stream) {
            accumulate: while(true){
                var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
                if (_v0.c.$ === "Ok") {
                    var rstate = _v0.a;
                    var rstream = _v0.b;
                    return _Utils_Tuple3(rstate, rstream, $elm$core$Result$Ok($elm$core$List$reverse(acc)));
                } else {
                    var estate = _v0.a;
                    var estream = _v0.b;
                    var ms = _v0.c.a;
                    var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
                    if (_v1.c.$ === "Ok") {
                        var rstate = _v1.a;
                        var rstream = _v1.b;
                        var res = _v1.c.a;
                        var $temp$acc = A2($elm$core$List$cons, res, acc), $temp$state = rstate, $temp$stream = rstream;
                        acc = $temp$acc;
                        state = $temp$state;
                        stream = $temp$stream;
                        continue accumulate;
                    } else return _Utils_Tuple3(estate, estream, $elm$core$Result$Err(ms));
                }
            }
        });
        return $andre_dietrich$parser_combinators$Combine$Parser(accumulate(_List_Nil));
    });
    var $andre_dietrich$parser_combinators$Combine$string = function(s) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            if (A2($elm$core$String$startsWith, s, stream.input)) {
                var len = $elm$core$String$length(s);
                var pos = stream.position + len;
                var rem = A2($elm$core$String$dropLeft, len, stream.input);
                return _Utils_Tuple3(state, _Utils_update(stream, {
                    input: rem,
                    position: pos
                }), $elm$core$Result$Ok(s));
            } else return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_fromArray([
                'expected "' + (s + '"')
            ])));
        }));
    };
    var $andre_dietrich$parser_combinators$Combine$succeed = function(res) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return _Utils_Tuple3(state, stream, $elm$core$Result$Ok(res));
        }));
    };
    var $author$project$Lia$Markdown$Inline$Parser$ignore_comment = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(_List_Nil), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$manyTill, $andre_dietrich$parser_combinators$Combine$Char$anyChar, $andre_dietrich$parser_combinators$Combine$string("--->")), $andre_dietrich$parser_combinators$Combine$string("<!---")));
    var $andre_dietrich$parser_combinators$Combine$regexer = F5(function(input, output, pat, state, stream) {
        var pattern = A2($elm$core$String$startsWith, "^", pat) ? pat : "^" + pat;
        var _v0 = A3($elm$regex$Regex$findAtMost, 1, A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, input(pattern)), stream.input);
        if (_v0.b && !_v0.b.b) {
            var match = _v0.a;
            var len = $elm$core$String$length(match.match);
            var pos = stream.position + len;
            var rem = A2($elm$core$String$dropLeft, len, stream.input);
            return _Utils_Tuple3(state, _Utils_update(stream, {
                input: rem,
                position: pos
            }), $elm$core$Result$Ok(output(match)));
        } else return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_fromArray([
            "expected input matching Regexp /" + (pattern + "/")
        ])));
    });
    var $andre_dietrich$parser_combinators$Combine$regex = A2($elm$core$Basics$composeR, A2($andre_dietrich$parser_combinators$Combine$regexer, $elm$regex$Regex$fromString, function($) {
        return $.match;
    }), $andre_dietrich$parser_combinators$Combine$Parser);
    var $andre_dietrich$parser_combinators$Combine$whitespace = A2($andre_dietrich$parser_combinators$Combine$onerror, "optional whitespace", $andre_dietrich$parser_combinators$Combine$regex("\\s*"));
    var $author$project$Lia$Markdown$Inline$Parser$comment = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$ignore_comment, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, p, $andre_dietrich$parser_combinators$Combine$string("-->")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$string("<!--"))));
    };
    var $andre_dietrich$parser_combinators$Combine$emptyErr = $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
        return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_Nil));
    }));
    var $andre_dietrich$parser_combinators$Combine$choice = function(xs) {
        return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
    };
    var $andre_dietrich$parser_combinators$Combine$maybe = function(p) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
            if (_v0.c.$ === "Ok") {
                var rstate = _v0.a;
                var rstream = _v0.b;
                var res = _v0.c.a;
                return _Utils_Tuple3(rstate, rstream, $elm$core$Result$Ok($elm$core$Maybe$Just(res)));
            } else return _Utils_Tuple3(state, stream, $elm$core$Result$Ok($elm$core$Maybe$Nothing));
        }));
    };
    var $author$project$Lia$Definition$Parser$start = $andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$string("@"));
    var $author$project$Lia$Definition$Parser$key = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("\\w+[\\w\\-.\\d]*"), $author$project$Lia$Definition$Parser$start);
    var $elm$core$String$words = _String_words;
    var $author$project$Lia$Definition$Parser$reduce = A2($elm$core$Basics$composeR, $elm$core$String$words, $elm$core$String$join(" "));
    var $author$project$Lia$Definition$Parser$lines = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Definition$Parser$reduce, $andre_dietrich$parser_combinators$Combine$regex("([ 	].*|[ 	]*\n)+"));
    var $elm$core$String$fromList = _String_fromList;
    var $author$project$Lia$Parser$Helper$stringTill = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$fromList, A2($andre_dietrich$parser_combinators$Combine$manyTill, $andre_dietrich$parser_combinators$Combine$Char$anyChar, p));
    };
    var $author$project$Lia$Definition$Parser$multiline = $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string("\n@end"));
    var $author$project$Lia$Definition$Parser$value = A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Definition$Parser$lines, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*:")), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Definition$Parser$multiline, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n")));
    var $author$project$Lia$Definition$Parser$key_value = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Definition$Parser$value, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Definition$Parser$key));
    var $andre_dietrich$parser_combinators$Combine$onsuccess = function(res) {
        return $andre_dietrich$parser_combinators$Combine$map($elm$core$Basics$always(res));
    };
    var $andre_dietrich$parser_combinators$Combine$skip = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$onsuccess, _Utils_Tuple0, p);
    };
    var $author$project$Lia$Definition$Types$Link = function(a) {
        return {
            $: "Link",
            a: a
        };
    };
    var $author$project$Lia$Definition$Types$Module = function(a) {
        return {
            $: "Module",
            a: a
        };
    };
    var $author$project$Lia$Settings$Types$Presentation = {
        $: "Presentation"
    };
    var $author$project$Lia$Definition$Types$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Settings$Types$Slides = {
        $: "Slides"
    };
    var $author$project$Lia$Markdown$Macro$Parser$add = F2(function(_v0, def) {
        var name = _v0.a;
        var code = _v0.b;
        return _Utils_update(def, {
            macro: A3($elm$core$Dict$insert, name, code, def.macro)
        });
    });
    var $author$project$Lia$Markdown$HTML$Attributes$allowedProtocol = function(url) {
        var _v0 = $elm$core$String$toLower(A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$String$split, ":", url))));
        switch(_v0){
            case "https":
                return true;
            case "http":
                return true;
            case "data":
                return true;
            case "file":
                return true;
            case "hyper":
                return true;
            case "dat":
                return true;
            case "ipfs":
                return true;
            case "ipns":
                return true;
            case "blob":
                return true;
            case "mailto":
                return true;
            case "tel":
                return true;
            default:
                return false;
        }
    };
    var $author$project$Lia$Markdown$HTML$Attributes$toURL = F3(function(basis, appendix, url) {
        return $author$project$Lia$Markdown$HTML$Attributes$allowedProtocol(url) || A2($elm$core$String$startsWith, "#", url) ? url : _Utils_ap(basis, _Utils_ap(url, appendix));
    });
    var $author$project$Lia$Definition$Types$append = F5(function(to, base, appendix, urls, list) {
        return A2($elm$core$List$append, list, A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$HTML$Attributes$toURL, base, appendix), to), $elm$core$String$words(urls)));
    });
    var $author$project$Lia$Definition$Types$addToResources = F3(function(to, urls, def) {
        return _Utils_update(def, {
            resources: A5($author$project$Lia$Definition$Types$append, to, def.base, def.appendix, urls, def.resources)
        });
    });
    var $author$project$Lia$Definition$Types$add_formula = F2(function(str, def) {
        var _v0 = A2($elm$core$String$split, " ", $elm$core$String$trim(str));
        if (_v0.b) {
            var name = _v0.a;
            var formula = _v0.b;
            return _Utils_update(def, {
                formulas: A3($elm$core$Dict$insert, A2($elm$core$String$startsWith, "\\", name) ? name : "\\" + name, $elm$core$String$trim(A2($elm$core$String$join, " ", formula)), def.formulas)
            });
        } else return def;
    });
    var $author$project$Lia$Definition$Types$add_imports = F2(function(url, def) {
        return _Utils_update(def, {
            imports: A5($author$project$Lia$Definition$Types$append, $author$project$Lia$Parser$PatReplace$link, def.base, def.appendix, url, def.imports)
        });
    });
    var $author$project$Lia$Definition$Types$add_translation = F2(function(str, def) {
        var _v0 = $elm$core$String$words(str);
        if (_v0.b && _v0.b.b && !_v0.b.b.b) {
            var lang = _v0.a;
            var _v1 = _v0.b;
            var url = _v1.a;
            return _Utils_update(def, {
                translation: A3($elm$core$Dict$insert, lang, A3($author$project$Lia$Markdown$HTML$Attributes$toURL, def.base, def.appendix, url), def.translation)
            });
        } else return def;
    });
    var $author$project$Lia$Markdown$Inline$Types$Audio = F3(function(a, b, c) {
        return {
            $: "Audio",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Bold = F2(function(a, b) {
        return {
            $: "Bold",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Chars = F2(function(a, b) {
        return {
            $: "Chars",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Container = F2(function(a, b) {
        return {
            $: "Container",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$EInline = F2(function(a, b) {
        return {
            $: "EInline",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Embed = F3(function(a, b, c) {
        return {
            $: "Embed",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$IHTML = F2(function(a, b) {
        return {
            $: "IHTML",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Image = F3(function(a, b, c) {
        return {
            $: "Image",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Italic = F2(function(a, b) {
        return {
            $: "Italic",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Link = F3(function(a, b, c) {
        return {
            $: "Link",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Mail = F3(function(a, b, c) {
        return {
            $: "Mail",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Movie = F3(function(a, b, c) {
        return {
            $: "Movie",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Preview_Lia = function(a) {
        return {
            $: "Preview_Lia",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Inline$Types$Preview_Link = function(a) {
        return {
            $: "Preview_Link",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Inline$Types$QR_Link = F2(function(a, b) {
        return {
            $: "QR_Link",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Quiz = F2(function(a, b) {
        return {
            $: "Quiz",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Ref = F2(function(a, b) {
        return {
            $: "Ref",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Script = F2(function(a, b) {
        return {
            $: "Script",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Strike = F2(function(a, b) {
        return {
            $: "Strike",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Superscript = F2(function(a, b) {
        return {
            $: "Superscript",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Types$Underline = F2(function(a, b) {
        return {
            $: "Underline",
            a: a,
            b: b
        };
    });
    var $andre_dietrich$parser_combinators$Combine$modifyState = function(f) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return A3($andre_dietrich$parser_combinators$Combine$app, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0), f(state), stream);
        }));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Types$push = F2(function(_v0, quiz) {
        var options = _v0.options;
        var solution = _v0.solution;
        return _Utils_update(quiz, {
            options: A2($elm$core$Array$push, options, quiz.options),
            solution: A2($elm$core$Array$push, solution, quiz.solution)
        });
    });
    var $andre_dietrich$parser_combinators$Combine$withState = function(f) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return A3($andre_dietrich$parser_combinators$Combine$app, f(state), state, stream);
        }));
    };
    var $author$project$Lia$Parser$Input$add = function(_v0) {
        var length = _v0.a;
        var block = _v0.b;
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
            var input = state.input;
            return input.isEnabled || input.grouping ? _Utils_update(state, {
                input: _Utils_update(input, {
                    blocks: A2($author$project$Lia$Markdown$Quiz$Multi$Types$push, block, input.blocks)
                })
            }) : state;
        }), $andre_dietrich$parser_combinators$Combine$withState(function(state) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2($elm$core$String$fromFloat((length + 2) * 0.4) + "em", state.input.isEnabled || state.input.grouping ? $elm$core$Array$length(state.input.blocks.options) : -1));
        }));
    };
    var $author$project$Lia$Parser$Context$addAbort = function(name) {
        return $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
            return _Utils_update(s, {
                abort: {
                    isTrue: false,
                    stack: A2($elm$core$List$cons, name, s.abort.stack)
                }
            });
        });
    };
    var $author$project$Lia$Markdown$Effect$Model$Content = F5(function(visible, attr, content, audio, video) {
        return {
            attr: attr,
            audio: audio,
            content: content,
            video: video,
            visible: visible
        };
    });
    var $author$project$Lia$Markdown$Effect$Model$Element = F2(function(narrator, content) {
        return {
            content: content,
            narrator: narrator
        };
    });
    var $author$project$Lia$Markdown$Effect$Parser$addTo = F2(function(file, array) {
        if (file.$ === "Nothing") return array;
        else {
            var f = file.a;
            return A2($elm$core$Array$push, f, array);
        }
    });
    var $author$project$Lia$Markdown$Effect$Parser$get_counter = function(idx) {
        return $andre_dietrich$parser_combinators$Combine$withState(function(s) {
            return $andre_dietrich$parser_combinators$Combine$succeed(function() {
                var _v0 = A2($elm$core$Dict$get, idx, s.effect_model.comments);
                if (_v0.$ === "Just") {
                    var e = _v0.a;
                    return $elm$core$Array$length(e.content) - 1;
                } else return 0;
            }());
        });
    };
    var $author$project$Lia$Markdown$Effect$Parser$hasMediaContent = F2(function(start, par) {
        _v0$2: while(true){
            if (par.b && par.a.$ === "Ref") switch(par.a.a.$){
                case "Audio":
                    if (!par.a.a.b.a) {
                        var _v1 = par.a;
                        var _v2 = _v1.a;
                        var _v3 = _v2.b;
                        var audio = _v3.b;
                        var par2 = par.b;
                        return {
                            audio: $elm$core$Maybe$Just(audio),
                            paragraph: par2,
                            video: $elm$core$Maybe$Nothing
                        };
                    } else break _v0$2;
                case "Movie":
                    if (!par.a.a.b.a) {
                        var _v4 = par.a;
                        var _v5 = _v4.a;
                        var _v6 = _v5.b;
                        var video = _v6.b;
                        var par2 = par.b;
                        return {
                            audio: $elm$core$Maybe$Nothing,
                            paragraph: par2,
                            video: $elm$core$Maybe$Just(video)
                        };
                    } else break _v0$2;
                default:
                    break _v0$2;
            }
            else break _v0$2;
        }
        return start ? function(result) {
            return _Utils_update(result, {
                paragraph: $elm$core$List$reverse(result.paragraph)
            });
        }(A2($author$project$Lia$Markdown$Effect$Parser$hasMediaContent, false, $elm$core$List$reverse(par))) : {
            audio: $elm$core$Maybe$Nothing,
            paragraph: par,
            video: $elm$core$Maybe$Nothing
        };
    });
    var $author$project$Lia$Markdown$Effect$Parser$add_comment = F2(function(visible, _v0) {
        var idx = _v0.a;
        var temp_narrator = _v0.b;
        var par = _v0.c;
        var rslt = function(id2) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(idx, id2));
        };
        var mod = function(s) {
            return _Utils_update(s, {
                effect_model: function() {
                    var e = s.effect_model;
                    var _v1 = A2($author$project$Lia$Markdown$Effect$Parser$hasMediaContent, true, par);
                    var audio = _v1.audio;
                    var video = _v1.video;
                    var paragraph = _v1.paragraph;
                    return _Utils_update(e, {
                        comments: function() {
                            var _v2 = A2($elm$core$Dict$get, idx, e.comments);
                            if (_v2.$ === "Just") {
                                var cmt = _v2.a;
                                return A3($elm$core$Dict$insert, idx, _Utils_update(cmt, {
                                    content: A2($elm$core$Array$push, A5($author$project$Lia$Markdown$Effect$Model$Content, visible, _List_Nil, paragraph, A2($author$project$Lia$Markdown$Effect$Parser$addTo, audio, $elm$core$Array$empty), A2($author$project$Lia$Markdown$Effect$Parser$addTo, video, $elm$core$Array$empty)), cmt.content)
                                }), e.comments);
                            } else {
                                var narrator = A2($elm$core$Maybe$withDefault, s.defines.narrator, A2($elm$core$Maybe$map, $elm$core$String$trim, temp_narrator));
                                return A3($elm$core$Dict$insert, idx, A2($author$project$Lia$Markdown$Effect$Model$Element, narrator, $elm$core$Array$fromList(_List_fromArray([
                                    A5($author$project$Lia$Markdown$Effect$Model$Content, visible, _List_Nil, paragraph, A2($author$project$Lia$Markdown$Effect$Parser$addTo, audio, $elm$core$Array$empty), A2($author$project$Lia$Markdown$Effect$Parser$addTo, video, $elm$core$Array$empty))
                                ]))), e.comments);
                            }
                        }()
                    });
                }()
            });
        };
        return A2($andre_dietrich$parser_combinators$Combine$andThen, rslt, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$get_counter(idx), $andre_dietrich$parser_combinators$Combine$modifyState(mod)));
    });
    var $andre_dietrich$parser_combinators$Combine$fail = function(m) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return _Utils_Tuple3(state, stream, $elm$core$Result$Err(_List_fromArray([
                m
            ])));
        }));
    };
    var $andre_dietrich$parser_combinators$Combine$Num$unwrap = function(value) {
        if (value.$ === "Just") {
            var v = value.a;
            return $andre_dietrich$parser_combinators$Combine$succeed(v);
        } else return $andre_dietrich$parser_combinators$Combine$fail("impossible state in Combine.Num.unwrap");
    };
    var $andre_dietrich$parser_combinators$Combine$Num$int = A2($andre_dietrich$parser_combinators$Combine$onerror, "expected an int", A2($andre_dietrich$parser_combinators$Combine$andThen, A2($elm$core$Basics$composeR, $elm$core$String$toInt, $andre_dietrich$parser_combinators$Combine$Num$unwrap), $andre_dietrich$parser_combinators$Combine$regex("-?(?:0|[1-9]\\d*)")));
    var $author$project$Lia$Markdown$Effect$Parser$effect_number = function() {
        var state = function(n) {
            return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(n), $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
                return _Utils_update(s, {
                    effect_model: function() {
                        if (_Utils_cmp(n, s.effect_model.effects) > 0) {
                            var e = s.effect_model;
                            return _Utils_update(e, {
                                effects: n
                            });
                        } else return s.effect_model;
                    }(),
                    effect_number: A2($elm$core$List$cons, n, s.effect_number)
                });
            }));
        };
        return A2($andre_dietrich$parser_combinators$Combine$andThen, state, $andre_dietrich$parser_combinators$Combine$Num$int);
    }();
    var $author$project$Lia$Parser$Helper$c_frame = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$length, $andre_dietrich$parser_combinators$Combine$regex("(`){3,}"));
    var $elm$core$String$concat = function(strings) {
        return A2($elm$core$String$join, "", strings);
    };
    var $author$project$Lia$Parser$Indentation$par_ = function(s) {
        return _Utils_eq(s.indentation, _List_Nil) ? $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : s.indentation_skip ? $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0)) : $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$regex($elm$core$String$concat(s.indentation)));
    };
    var $author$project$Lia$Parser$Indentation$skip_ = F2(function(bool, state) {
        return _Utils_update(state, {
            indentation_skip: bool
        });
    });
    var $author$project$Lia$Parser$Indentation$check = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Parser$Indentation$skip_(false)), $andre_dietrich$parser_combinators$Combine$withState($author$project$Lia$Parser$Indentation$par_));
    var $elm$core$List$singleton = function(value) {
        return _List_fromArray([
            value
        ]);
    };
    var $author$project$Lia$Markdown$Macro$Parser$code_block = function(backticks_count) {
        var backticks = A2($elm$core$String$repeat, backticks_count, "`");
        return A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$String$concat, A2($elm$core$Basics$composeR, $elm$core$String$dropRight(1), $elm$core$List$singleton)), A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("(.(?!" + (backticks + "))*\n?")), $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$string(backticks), $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))));
    };
    var $author$project$Lia$Markdown$Macro$Parser$debugEnvironment = F2(function(env, code) {
        return env ? "<lia-keep><pre id='ls'><code style='background: #CCCCCC; white-space: pre;'>" + (code + "</code></pre></lia-keep>") : code;
    });
    var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
    var $author$project$Lia$Markdown$Macro$Parser$debugReplace = F3(function(pat, fn, string) {
        var _v0 = $elm$regex$Regex$fromString(pat);
        if (_v0.$ === "Just") {
            var regex = _v0.a;
            return A3($elm$regex$Regex$replace, regex, fn, string);
        } else return string;
    });
    var $author$project$Lia$Markdown$Macro$Parser$debug = function(env) {
        return A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Macro$Parser$debugReplace, "[*+`{}#^|$\\[\\]]", A2($elm$core$Basics$composeR, function($) {
            return $.match;
        }, $elm$core$Basics$append("\\"))), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "<", "\\<"), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, ">", "\\>"), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "\\\\`", "`"), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "\n", "<br id='ls'>"), A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Macro$Parser$debugReplace, "@[a-zA-Z]+[\\w\\d._\\-]*", function(x) {
            return x.match !== "@input" ? "@-" + x.match : x.match;
        }), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "\\<br id='ls'\\>", "<br id='ls'>"), $author$project$Lia$Markdown$Macro$Parser$debugEnvironment(env))))))));
    };
    var $author$project$Lia$Markdown$Macro$Parser$get = F2(function(name, def) {
        var _v0 = A2($elm$core$String$startsWith, "@@", name) ? _Utils_Tuple3(true, true, A2($elm$core$String$dropLeft, 2, name)) : A2($elm$core$String$startsWith, "@-@", name) ? _Utils_Tuple3(true, false, A2($elm$core$String$dropLeft, 3, name)) : _Utils_Tuple3(false, false, A2($elm$core$String$dropLeft, 1, name));
        var isDebug = _v0.a;
        var deepDebug = _v0.b;
        var id = _v0.c;
        return A2($elm$core$Maybe$map, function(x) {
            return _Utils_Tuple3(isDebug, deepDebug, x);
        }, function() {
            switch(id){
                case "author":
                    return $elm$core$Maybe$Just(def.author);
                case "date":
                    return $elm$core$Maybe$Just(def.date);
                case "email":
                    return $elm$core$Maybe$Just(def.email);
                case "version":
                    return $elm$core$Maybe$Just(def.version);
                case "section":
                    return $elm$core$Maybe$Just($elm$core$String$fromInt(def.section));
                case "uid":
                    return $elm$core$Maybe$Just($elm$core$String$fromInt(def.section) + ("_" + $elm$core$String$fromInt(def.uid)));
                default:
                    return A2($elm$core$Dict$get, id, def.macro);
            }
        }());
    });
    var $author$project$Lia$Markdown$Macro$Parser$guard_pattern = "iex3OAQpP4u3QT9xq";
    var $author$project$Lia$Markdown$Macro$Parser$guard = A2($elm$core$String$replace, "\\@", $author$project$Lia$Markdown$Macro$Parser$guard_pattern);
    var $elm$core$String$lines = _String_lines;
    var $andre_dietrich$parser_combinators$Combine$many = function(p) {
        var accumulate = F3(function(acc, state, stream) {
            accumulate: while(true){
                var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
                if (_v0.c.$ === "Ok") {
                    var rstate = _v0.a;
                    var rstream = _v0.b;
                    var res = _v0.c.a;
                    if (_Utils_eq(stream, rstream)) return _Utils_Tuple3(rstate, rstream, $elm$core$List$reverse(acc));
                    else {
                        var $temp$acc = A2($elm$core$List$cons, res, acc), $temp$state = rstate, $temp$stream = rstream;
                        acc = $temp$acc;
                        state = $temp$state;
                        stream = $temp$stream;
                        continue accumulate;
                    }
                } else return _Utils_Tuple3(state, stream, $elm$core$List$reverse(acc));
            }
        });
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v1 = A3(accumulate, _List_Nil, state, stream);
            var rstate = _v1.a;
            var rstream = _v1.b;
            var res = _v1.c;
            return _Utils_Tuple3(rstate, rstream, $elm$core$Result$Ok(res));
        }));
    };
    var $andre_dietrich$parser_combinators$Combine$many1 = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$many(p), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
    };
    var $elm$core$Tuple$mapSecond = F2(function(func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(x, func(y));
    });
    var $andre_dietrich$parser_combinators$Combine$modifyInput = function(f) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return A3($andre_dietrich$parser_combinators$Combine$app, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0), state, _Utils_update(stream, {
                input: f(stream.input)
            }));
        }));
    };
    var $andre_dietrich$parser_combinators$Combine$optional = F2(function(res, p) {
        return A2($andre_dietrich$parser_combinators$Combine$or, p, $andre_dietrich$parser_combinators$Combine$succeed(res));
    });
    var $author$project$Lia$Parser$Helper$inlineCode = A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$String$replace, "\\`", "`"), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("`"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("([^`\n\\\\]*|\\\\`|\\\\)+"), $andre_dietrich$parser_combinators$Combine$string("`"))));
    var $author$project$Lia$Markdown$Macro$Parser$parameter = $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$andThen, function(startLength) {
            return $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string(A2($elm$core$String$repeat, startLength, "`")));
        }, $author$project$Lia$Parser$Helper$c_frame),
        $author$project$Lia$Parser$Helper$inlineCode,
        $andre_dietrich$parser_combinators$Combine$regex("[^),]+")
    ]));
    var $andre_dietrich$parser_combinators$Combine$between = F3(function(lp, rp, p) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, rp, A2($andre_dietrich$parser_combinators$Combine$keep, p, lp));
    });
    var $andre_dietrich$parser_combinators$Combine$parens = A2($andre_dietrich$parser_combinators$Combine$between, $andre_dietrich$parser_combinators$Combine$string("("), $andre_dietrich$parser_combinators$Combine$string(")"));
    var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(function(sep, p) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$many(A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
    });
    var $andre_dietrich$parser_combinators$Combine$sepBy = F2(function(sep, p) {
        return A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p), $andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
    });
    var $author$project$Lia$Markdown$Macro$Parser$parameter_list = A2($andre_dietrich$parser_combinators$Combine$optional, _List_Nil, $andre_dietrich$parser_combinators$Combine$parens(A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$string(","), $author$project$Lia$Markdown$Macro$Parser$parameter)));
    var $author$project$Lia$Markdown$Macro$Parser$identifier = $andre_dietrich$parser_combinators$Combine$regex("\\w[\\w\\d._]+");
    var $author$project$Lia$Markdown$Macro$Parser$start = A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, false, A2($andre_dietrich$parser_combinators$Combine$onsuccess, true, $andre_dietrich$parser_combinators$Combine$string("'"))), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(ad, escape, name_) {
        return _Utils_Tuple2(_Utils_ap(ad, name_), escape);
    }), $andre_dietrich$parser_combinators$Combine$regex("@-?@?")));
    var $author$project$Lia$Markdown$Macro$Parser$pattern = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Macro$Parser$identifier, $author$project$Lia$Markdown$Macro$Parser$start);
    var $andre_dietrich$parser_combinators$Combine$putState = function(state) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(_v0, stream) {
            return A3($andre_dietrich$parser_combinators$Combine$app, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0), state, stream);
        }));
    };
    var $author$project$Lia$Markdown$Macro$Parser$reference_macro = A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
        return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
    }), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("(\\)|[^)]*\\))"), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex("[^) ]*"), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(list, url, _v0) {
        var baseURL = _v0.a;
        var appendix = _v0.b;
        return A2($elm$core$List$append, list, _List_fromArray([
            A3($author$project$Lia$Markdown$HTML$Attributes$toURL, baseURL, appendix, url)
        ]));
    }), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("]("), $author$project$Lia$Markdown$Macro$Parser$parameter_list))))), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Macro$Parser$identifier, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("["), $author$project$Lia$Markdown$Macro$Parser$start))));
    var $andre_dietrich$parser_combinators$Combine$InputStream = F3(function(data, input, position) {
        return {
            data: data,
            input: input,
            position: position
        };
    });
    var $andre_dietrich$parser_combinators$Combine$initStream = function(s) {
        return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
    };
    var $andre_dietrich$parser_combinators$Combine$runParser = F3(function(p, st, s) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, st, $andre_dietrich$parser_combinators$Combine$initStream(s));
        if (_v0.c.$ === "Ok") {
            var state = _v0.a;
            var stream = _v0.b;
            var res = _v0.c.a;
            return $elm$core$Result$Ok(_Utils_Tuple3(state, stream, res));
        } else {
            var state = _v0.a;
            var stream = _v0.b;
            var ms = _v0.c.a;
            return $elm$core$Result$Err(_Utils_Tuple3(state, stream, ms));
        }
    });
    var $author$project$Lia$Markdown$Macro$Parser$simple_macro = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Macro$Parser$parameter_list, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Markdown$Macro$Parser$pattern));
    var $author$project$Lia$Utils$toEscapeString = function(str) {
        return A3($elm$core$String$replace, "${", "\\${", A3($elm$core$String$replace, "	", "\\t", A3($elm$core$String$replace, "\n", "\\n", A3($elm$core$String$replace, "`", "\\`", A3($elm$core$String$replace, "'", "\\'", A3($elm$core$String$replace, '"', '\\"', A3($elm$core$String$replace, "\\", "\\\\", str)))))));
    };
    var $author$project$Lia$Markdown$Macro$Parser$uid_update = function(state) {
        var def = state.defines;
        return _Utils_update(state, {
            defines: _Utils_update(def, {
                uid: def.uid + 1
            })
        });
    };
    var $author$project$Lia$Markdown$Macro$Parser$uid_macro = A2($andre_dietrich$parser_combinators$Combine$onsuccess, _Utils_Tuple2(_Utils_Tuple2("@uid", false), _List_Nil), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Markdown$Macro$Parser$uid_update), $andre_dietrich$parser_combinators$Combine$string("@uid")));
    var $author$project$Lia$Markdown$Macro$Parser$unguard = A2($elm$core$String$replace, $author$project$Lia$Markdown$Macro$Parser$guard_pattern, "\\@");
    var $author$project$Lia$Markdown$Macro$Parser$eval_parameter = F2(function(param, _v8) {
        var state = _v8.a;
        var i = _v8.b;
        var code = _v8.c;
        var _v9 = A2($author$project$Lia$Markdown$Macro$Parser$macro_parse, state, $author$project$Lia$Markdown$Macro$Parser$guard(param));
        var new_state = _v9.a;
        var new_param = _v9.b;
        return _Utils_Tuple3(new_state, i + 1, $author$project$Lia$Markdown$Macro$Parser$unguard(A3($elm$core$String$replace, "@" + $elm$core$String$fromInt(i), new_param, A3($elm$core$String$replace, "@'" + $elm$core$String$fromInt(i), $author$project$Lia$Utils$toEscapeString(new_param), $author$project$Lia$Markdown$Macro$Parser$guard(code)))));
    });
    var $author$project$Lia$Markdown$Macro$Parser$inject_macro = function(_v3) {
        var _v4 = _v3.a;
        var name = _v4.a;
        var escape = _v4.b;
        var params = _v3.b;
        var inject = function(state) {
            var _v5 = A2($author$project$Lia$Markdown$Macro$Parser$get, name, state.defines);
            if (_v5.$ === "Just") {
                var _v6 = _v5.a;
                var isDebug = _v6.a;
                var deepDebug = _v6.b;
                var code = _v6.c;
                var code_ = _Utils_eq(state.indentation, _List_Nil) ? code : A2($elm$core$String$join, "\n" + A3($elm$core$String$replace, "*", "", A3($elm$core$String$replace, "?", "", $elm$core$String$concat(state.indentation))), $elm$core$String$lines(code));
                var _v7 = A3($elm$core$List$foldl, $author$project$Lia$Markdown$Macro$Parser$eval_parameter, _Utils_Tuple3(state, 0, code_), params);
                var new_state = _v7.a;
                var new_code = _v7.c;
                return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$putState(new_state), $andre_dietrich$parser_combinators$Combine$modifyInput($elm$core$Basics$append((isDebug ? $author$project$Lia$Markdown$Macro$Parser$debug(deepDebug) : $elm$core$Basics$identity)(escape ? $author$project$Lia$Utils$toEscapeString(new_code) : new_code))));
            } else return $andre_dietrich$parser_combinators$Combine$fail("macro definition not found");
        };
        return $andre_dietrich$parser_combinators$Combine$withState(inject);
    };
    var $author$project$Lia$Markdown$Macro$Parser$macro_parse = F2(function(defines, str) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$concat, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$regex("@input[^@]+"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[^@]+"), $author$project$Lia$Markdown$Macro$Parser$cyclic$macro())))), defines, str);
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var state = _v1.a;
            var stream = _v1.b;
            var s = _v1.c;
            return stream.input === "" ? _Utils_Tuple2(state, s) : A2($elm$core$Tuple$mapSecond, $elm$core$Basics$append(s), A2($author$project$Lia$Markdown$Macro$Parser$macro_parse, state, stream.input));
        } else return _Utils_Tuple2(defines, str);
    });
    function $author$project$Lia$Markdown$Macro$Parser$cyclic$macro() {
        return $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$many1($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Macro$Parser$inject_macro, $author$project$Lia$Markdown$Macro$Parser$uid_macro),
            A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Macro$Parser$inject_macro, $author$project$Lia$Markdown$Macro$Parser$simple_macro),
            A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Macro$Parser$inject_macro, $author$project$Lia$Markdown$Macro$Parser$reference_macro),
            $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing()
        ])))));
    }
    function $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing() {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, function(_v2) {
            var backticks = _v2.a;
            var name = _v2.b;
            return A2($andre_dietrich$parser_combinators$Combine$andThen, function(params) {
                return A2($andre_dietrich$parser_combinators$Combine$andThen, function(p) {
                    return $author$project$Lia$Markdown$Macro$Parser$inject_macro(_Utils_Tuple2(name, p));
                }, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$append(params), $author$project$Lia$Markdown$Macro$Parser$code_block(backticks)));
            }, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n"), $author$project$Lia$Markdown$Macro$Parser$parameter_list));
        }, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Macro$Parser$pattern, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*[a-zA-Z0-9_]*[	 ]*"), $author$project$Lia$Parser$Helper$c_frame))));
    }
    try {
        var $author$project$Lia$Markdown$Macro$Parser$macro = $author$project$Lia$Markdown$Macro$Parser$cyclic$macro();
        $author$project$Lia$Markdown$Macro$Parser$cyclic$macro = function() {
            return $author$project$Lia$Markdown$Macro$Parser$macro;
        };
        var $author$project$Lia$Markdown$Macro$Parser$macro_listing = $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing();
        $author$project$Lia$Markdown$Macro$Parser$cyclic$macro_listing = function() {
            return $author$project$Lia$Markdown$Macro$Parser$macro_listing;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Macro.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    eval_parameter\n  │     ↓\n  │    macro\n  │     ↓\n  │    inject_macro\n  │     ↓\n  │    macro_listing\n  │     ↓\n  │    macro_parse\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Markdown$Effect$Parser$reset_effect_number = $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
        return _Utils_update(s, {
            effect_number: A2($elm$core$List$drop, 1, s.effect_number)
        });
    });
    var $author$project$Lia$Parser$Helper$spaces1 = $andre_dietrich$parser_combinators$Combine$regex("[	 ]+");
    var $author$project$Lia$Markdown$Effect$Parser$hidden_comment = $andre_dietrich$parser_combinators$Combine$skip(A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$add_comment(false), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Effect$Parser$reset_effect_number, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$manyTill, $andre_dietrich$parser_combinators$Combine$Char$anyChar, $andre_dietrich$parser_combinators$Combine$string("-->")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("}}--[	 ]*"), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[A-Za-z0-9 ]+"), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces1))), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(i, voice, text) {
        return _Utils_Tuple3(i, voice, _List_fromArray([
            A2($author$project$Lia$Markdown$Inline$Types$Chars, $elm$core$String$trim($elm$core$String$fromList(text)), _List_Nil)
        ]));
    }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$effect_number, $andre_dietrich$parser_combinators$Combine$regex("<!--[	 ]*--{{")))))))));
    var $author$project$Lia$Markdown$Inline$Parser$comments = $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$many($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$skip($author$project$Lia$Markdown$Inline$Parser$ignore_comment),
        $author$project$Lia$Markdown$Effect$Parser$hidden_comment,
        $andre_dietrich$parser_combinators$Combine$skip($author$project$Lia$Markdown$Inline$Parser$ignore_comment)
    ]))));
    var $author$project$Lia$Markdown$HTML$Attributes$base = F3(function(url, appendix, _v0) {
        var key = _v0.a;
        var value = _v0.b;
        return _Utils_Tuple2(key, key === "src" || key === "href" || key === "data" || key === "data-src" || key === "formaction" || key === "poster" ? A3($author$project$Lia$Markdown$HTML$Attributes$toURL, url, appendix, value) : value);
    });
    var $author$project$Lia$Markdown$HTML$NamedCharacterReferences$dict = $elm$core$Dict$fromList(_List_fromArray([
        _Utils_Tuple2("Aacute", "\xc1"),
        _Utils_Tuple2("aacute", "\xe1"),
        _Utils_Tuple2("Abreve", "Ă"),
        _Utils_Tuple2("abreve", "ă"),
        _Utils_Tuple2("ac", "∾"),
        _Utils_Tuple2("acd", "∿"),
        _Utils_Tuple2("acE", "∾̳"),
        _Utils_Tuple2("Acirc", "\xc2"),
        _Utils_Tuple2("acirc", "\xe2"),
        _Utils_Tuple2("acute", "\xb4"),
        _Utils_Tuple2("Acy", "А"),
        _Utils_Tuple2("acy", "а"),
        _Utils_Tuple2("AElig", "\xc6"),
        _Utils_Tuple2("aelig", "\xe6"),
        _Utils_Tuple2("af", "⁡"),
        _Utils_Tuple2("Afr", "\uD835\uDD04"),
        _Utils_Tuple2("afr", "\uD835\uDD1E"),
        _Utils_Tuple2("Agrave", "\xc0"),
        _Utils_Tuple2("agrave", "\xe0"),
        _Utils_Tuple2("alefsym", "ℵ"),
        _Utils_Tuple2("aleph", "ℵ"),
        _Utils_Tuple2("Alpha", "Α"),
        _Utils_Tuple2("alpha", "α"),
        _Utils_Tuple2("Amacr", "Ā"),
        _Utils_Tuple2("amacr", "ā"),
        _Utils_Tuple2("amalg", "⨿"),
        _Utils_Tuple2("amp", "&"),
        _Utils_Tuple2("AMP", "&"),
        _Utils_Tuple2("andand", "⩕"),
        _Utils_Tuple2("And", "⩓"),
        _Utils_Tuple2("and", "∧"),
        _Utils_Tuple2("andd", "⩜"),
        _Utils_Tuple2("andslope", "⩘"),
        _Utils_Tuple2("andv", "⩚"),
        _Utils_Tuple2("ang", "∠"),
        _Utils_Tuple2("ange", "⦤"),
        _Utils_Tuple2("angle", "∠"),
        _Utils_Tuple2("angmsdaa", "⦨"),
        _Utils_Tuple2("angmsdab", "⦩"),
        _Utils_Tuple2("angmsdac", "⦪"),
        _Utils_Tuple2("angmsdad", "⦫"),
        _Utils_Tuple2("angmsdae", "⦬"),
        _Utils_Tuple2("angmsdaf", "⦭"),
        _Utils_Tuple2("angmsdag", "⦮"),
        _Utils_Tuple2("angmsdah", "⦯"),
        _Utils_Tuple2("angmsd", "∡"),
        _Utils_Tuple2("angrt", "∟"),
        _Utils_Tuple2("angrtvb", "⊾"),
        _Utils_Tuple2("angrtvbd", "⦝"),
        _Utils_Tuple2("angsph", "∢"),
        _Utils_Tuple2("angst", "\xc5"),
        _Utils_Tuple2("angzarr", "⍼"),
        _Utils_Tuple2("Aogon", "Ą"),
        _Utils_Tuple2("aogon", "ą"),
        _Utils_Tuple2("Aopf", "\uD835\uDD38"),
        _Utils_Tuple2("aopf", "\uD835\uDD52"),
        _Utils_Tuple2("apacir", "⩯"),
        _Utils_Tuple2("ap", "≈"),
        _Utils_Tuple2("apE", "⩰"),
        _Utils_Tuple2("ape", "≊"),
        _Utils_Tuple2("apid", "≋"),
        _Utils_Tuple2("apos", "'"),
        _Utils_Tuple2("ApplyFunction", "⁡"),
        _Utils_Tuple2("approx", "≈"),
        _Utils_Tuple2("approxeq", "≊"),
        _Utils_Tuple2("Aring", "\xc5"),
        _Utils_Tuple2("aring", "\xe5"),
        _Utils_Tuple2("Ascr", "\uD835\uDC9C"),
        _Utils_Tuple2("ascr", "\uD835\uDCB6"),
        _Utils_Tuple2("Assign", "≔"),
        _Utils_Tuple2("ast", "*"),
        _Utils_Tuple2("asymp", "≈"),
        _Utils_Tuple2("asympeq", "≍"),
        _Utils_Tuple2("Atilde", "\xc3"),
        _Utils_Tuple2("atilde", "\xe3"),
        _Utils_Tuple2("Auml", "\xc4"),
        _Utils_Tuple2("auml", "\xe4"),
        _Utils_Tuple2("awconint", "∳"),
        _Utils_Tuple2("awint", "⨑"),
        _Utils_Tuple2("backcong", "≌"),
        _Utils_Tuple2("backepsilon", "϶"),
        _Utils_Tuple2("backprime", "‵"),
        _Utils_Tuple2("backsim", "∽"),
        _Utils_Tuple2("backsimeq", "⋍"),
        _Utils_Tuple2("Backslash", "∖"),
        _Utils_Tuple2("Barv", "⫧"),
        _Utils_Tuple2("barvee", "⊽"),
        _Utils_Tuple2("barwed", "⌅"),
        _Utils_Tuple2("Barwed", "⌆"),
        _Utils_Tuple2("barwedge", "⌅"),
        _Utils_Tuple2("bbrk", "⎵"),
        _Utils_Tuple2("bbrktbrk", "⎶"),
        _Utils_Tuple2("bcong", "≌"),
        _Utils_Tuple2("Bcy", "Б"),
        _Utils_Tuple2("bcy", "б"),
        _Utils_Tuple2("bdquo", "„"),
        _Utils_Tuple2("becaus", "∵"),
        _Utils_Tuple2("because", "∵"),
        _Utils_Tuple2("Because", "∵"),
        _Utils_Tuple2("bemptyv", "⦰"),
        _Utils_Tuple2("bepsi", "϶"),
        _Utils_Tuple2("bernou", "ℬ"),
        _Utils_Tuple2("Bernoullis", "ℬ"),
        _Utils_Tuple2("Beta", "Β"),
        _Utils_Tuple2("beta", "β"),
        _Utils_Tuple2("beth", "ℶ"),
        _Utils_Tuple2("between", "≬"),
        _Utils_Tuple2("Bfr", "\uD835\uDD05"),
        _Utils_Tuple2("bfr", "\uD835\uDD1F"),
        _Utils_Tuple2("bigcap", "⋂"),
        _Utils_Tuple2("bigcirc", "◯"),
        _Utils_Tuple2("bigcup", "⋃"),
        _Utils_Tuple2("bigodot", "⨀"),
        _Utils_Tuple2("bigoplus", "⨁"),
        _Utils_Tuple2("bigotimes", "⨂"),
        _Utils_Tuple2("bigsqcup", "⨆"),
        _Utils_Tuple2("bigstar", "★"),
        _Utils_Tuple2("bigtriangledown", "▽"),
        _Utils_Tuple2("bigtriangleup", "△"),
        _Utils_Tuple2("biguplus", "⨄"),
        _Utils_Tuple2("bigvee", "⋁"),
        _Utils_Tuple2("bigwedge", "⋀"),
        _Utils_Tuple2("bkarow", "⤍"),
        _Utils_Tuple2("blacklozenge", "⧫"),
        _Utils_Tuple2("blacksquare", "▪"),
        _Utils_Tuple2("blacktriangle", "▴"),
        _Utils_Tuple2("blacktriangledown", "▾"),
        _Utils_Tuple2("blacktriangleleft", "◂"),
        _Utils_Tuple2("blacktriangleright", "▸"),
        _Utils_Tuple2("blank", "␣"),
        _Utils_Tuple2("blk12", "▒"),
        _Utils_Tuple2("blk14", "░"),
        _Utils_Tuple2("blk34", "▓"),
        _Utils_Tuple2("block", "█"),
        _Utils_Tuple2("bne", "=⃥"),
        _Utils_Tuple2("bnequiv", "≡⃥"),
        _Utils_Tuple2("bNot", "⫭"),
        _Utils_Tuple2("bnot", "⌐"),
        _Utils_Tuple2("Bopf", "\uD835\uDD39"),
        _Utils_Tuple2("bopf", "\uD835\uDD53"),
        _Utils_Tuple2("bot", "⊥"),
        _Utils_Tuple2("bottom", "⊥"),
        _Utils_Tuple2("bowtie", "⋈"),
        _Utils_Tuple2("boxbox", "⧉"),
        _Utils_Tuple2("boxdl", "┐"),
        _Utils_Tuple2("boxdL", "╕"),
        _Utils_Tuple2("boxDl", "╖"),
        _Utils_Tuple2("boxDL", "╗"),
        _Utils_Tuple2("boxdr", "┌"),
        _Utils_Tuple2("boxdR", "╒"),
        _Utils_Tuple2("boxDr", "╓"),
        _Utils_Tuple2("boxDR", "╔"),
        _Utils_Tuple2("boxh", "─"),
        _Utils_Tuple2("boxH", "═"),
        _Utils_Tuple2("boxhd", "┬"),
        _Utils_Tuple2("boxHd", "╤"),
        _Utils_Tuple2("boxhD", "╥"),
        _Utils_Tuple2("boxHD", "╦"),
        _Utils_Tuple2("boxhu", "┴"),
        _Utils_Tuple2("boxHu", "╧"),
        _Utils_Tuple2("boxhU", "╨"),
        _Utils_Tuple2("boxHU", "╩"),
        _Utils_Tuple2("boxminus", "⊟"),
        _Utils_Tuple2("boxplus", "⊞"),
        _Utils_Tuple2("boxtimes", "⊠"),
        _Utils_Tuple2("boxul", "┘"),
        _Utils_Tuple2("boxuL", "╛"),
        _Utils_Tuple2("boxUl", "╜"),
        _Utils_Tuple2("boxUL", "╝"),
        _Utils_Tuple2("boxur", "└"),
        _Utils_Tuple2("boxuR", "╘"),
        _Utils_Tuple2("boxUr", "╙"),
        _Utils_Tuple2("boxUR", "╚"),
        _Utils_Tuple2("boxv", "│"),
        _Utils_Tuple2("boxV", "║"),
        _Utils_Tuple2("boxvh", "┼"),
        _Utils_Tuple2("boxvH", "╪"),
        _Utils_Tuple2("boxVh", "╫"),
        _Utils_Tuple2("boxVH", "╬"),
        _Utils_Tuple2("boxvl", "┤"),
        _Utils_Tuple2("boxvL", "╡"),
        _Utils_Tuple2("boxVl", "╢"),
        _Utils_Tuple2("boxVL", "╣"),
        _Utils_Tuple2("boxvr", "├"),
        _Utils_Tuple2("boxvR", "╞"),
        _Utils_Tuple2("boxVr", "╟"),
        _Utils_Tuple2("boxVR", "╠"),
        _Utils_Tuple2("bprime", "‵"),
        _Utils_Tuple2("breve", "˘"),
        _Utils_Tuple2("Breve", "˘"),
        _Utils_Tuple2("brvbar", "\xa6"),
        _Utils_Tuple2("bscr", "\uD835\uDCB7"),
        _Utils_Tuple2("Bscr", "ℬ"),
        _Utils_Tuple2("bsemi", "⁏"),
        _Utils_Tuple2("bsim", "∽"),
        _Utils_Tuple2("bsime", "⋍"),
        _Utils_Tuple2("bsolb", "⧅"),
        _Utils_Tuple2("bsol", "\\"),
        _Utils_Tuple2("bsolhsub", "⟈"),
        _Utils_Tuple2("bull", "•"),
        _Utils_Tuple2("bullet", "•"),
        _Utils_Tuple2("bump", "≎"),
        _Utils_Tuple2("bumpE", "⪮"),
        _Utils_Tuple2("bumpe", "≏"),
        _Utils_Tuple2("Bumpeq", "≎"),
        _Utils_Tuple2("bumpeq", "≏"),
        _Utils_Tuple2("Cacute", "Ć"),
        _Utils_Tuple2("cacute", "ć"),
        _Utils_Tuple2("capand", "⩄"),
        _Utils_Tuple2("capbrcup", "⩉"),
        _Utils_Tuple2("capcap", "⩋"),
        _Utils_Tuple2("cap", "∩"),
        _Utils_Tuple2("Cap", "⋒"),
        _Utils_Tuple2("capcup", "⩇"),
        _Utils_Tuple2("capdot", "⩀"),
        _Utils_Tuple2("CapitalDifferentialD", "ⅅ"),
        _Utils_Tuple2("caps", "∩︀"),
        _Utils_Tuple2("caret", "⁁"),
        _Utils_Tuple2("caron", "ˇ"),
        _Utils_Tuple2("Cayleys", "ℭ"),
        _Utils_Tuple2("ccaps", "⩍"),
        _Utils_Tuple2("Ccaron", "Č"),
        _Utils_Tuple2("ccaron", "č"),
        _Utils_Tuple2("Ccedil", "\xc7"),
        _Utils_Tuple2("ccedil", "\xe7"),
        _Utils_Tuple2("Ccirc", "Ĉ"),
        _Utils_Tuple2("ccirc", "ĉ"),
        _Utils_Tuple2("Cconint", "∰"),
        _Utils_Tuple2("ccups", "⩌"),
        _Utils_Tuple2("ccupssm", "⩐"),
        _Utils_Tuple2("Cdot", "Ċ"),
        _Utils_Tuple2("cdot", "ċ"),
        _Utils_Tuple2("cedil", "\xb8"),
        _Utils_Tuple2("Cedilla", "\xb8"),
        _Utils_Tuple2("cemptyv", "⦲"),
        _Utils_Tuple2("cent", "\xa2"),
        _Utils_Tuple2("centerdot", "\xb7"),
        _Utils_Tuple2("CenterDot", "\xb7"),
        _Utils_Tuple2("cfr", "\uD835\uDD20"),
        _Utils_Tuple2("Cfr", "ℭ"),
        _Utils_Tuple2("CHcy", "Ч"),
        _Utils_Tuple2("chcy", "ч"),
        _Utils_Tuple2("check", "✓"),
        _Utils_Tuple2("checkmark", "✓"),
        _Utils_Tuple2("Chi", "Χ"),
        _Utils_Tuple2("chi", "χ"),
        _Utils_Tuple2("circ", "ˆ"),
        _Utils_Tuple2("circeq", "≗"),
        _Utils_Tuple2("circlearrowleft", "↺"),
        _Utils_Tuple2("circlearrowright", "↻"),
        _Utils_Tuple2("circledast", "⊛"),
        _Utils_Tuple2("circledcirc", "⊚"),
        _Utils_Tuple2("circleddash", "⊝"),
        _Utils_Tuple2("CircleDot", "⊙"),
        _Utils_Tuple2("circledR", "\xae"),
        _Utils_Tuple2("circledS", "Ⓢ"),
        _Utils_Tuple2("CircleMinus", "⊖"),
        _Utils_Tuple2("CirclePlus", "⊕"),
        _Utils_Tuple2("CircleTimes", "⊗"),
        _Utils_Tuple2("cir", "○"),
        _Utils_Tuple2("cirE", "⧃"),
        _Utils_Tuple2("cire", "≗"),
        _Utils_Tuple2("cirfnint", "⨐"),
        _Utils_Tuple2("cirmid", "⫯"),
        _Utils_Tuple2("cirscir", "⧂"),
        _Utils_Tuple2("ClockwiseContourIntegral", "∲"),
        _Utils_Tuple2("CloseCurlyDoubleQuote", "”"),
        _Utils_Tuple2("CloseCurlyQuote", "’"),
        _Utils_Tuple2("clubs", "♣"),
        _Utils_Tuple2("clubsuit", "♣"),
        _Utils_Tuple2("colon", ":"),
        _Utils_Tuple2("Colon", "∷"),
        _Utils_Tuple2("Colone", "⩴"),
        _Utils_Tuple2("colone", "≔"),
        _Utils_Tuple2("coloneq", "≔"),
        _Utils_Tuple2("comma", ","),
        _Utils_Tuple2("commat", "@"),
        _Utils_Tuple2("comp", "∁"),
        _Utils_Tuple2("compfn", "∘"),
        _Utils_Tuple2("complement", "∁"),
        _Utils_Tuple2("complexes", "ℂ"),
        _Utils_Tuple2("cong", "≅"),
        _Utils_Tuple2("congdot", "⩭"),
        _Utils_Tuple2("Congruent", "≡"),
        _Utils_Tuple2("conint", "∮"),
        _Utils_Tuple2("Conint", "∯"),
        _Utils_Tuple2("ContourIntegral", "∮"),
        _Utils_Tuple2("copf", "\uD835\uDD54"),
        _Utils_Tuple2("Copf", "ℂ"),
        _Utils_Tuple2("coprod", "∐"),
        _Utils_Tuple2("Coproduct", "∐"),
        _Utils_Tuple2("copy", "\xa9"),
        _Utils_Tuple2("COPY", "\xa9"),
        _Utils_Tuple2("copysr", "℗"),
        _Utils_Tuple2("CounterClockwiseContourIntegral", "∳"),
        _Utils_Tuple2("crarr", "↵"),
        _Utils_Tuple2("cross", "✗"),
        _Utils_Tuple2("Cross", "⨯"),
        _Utils_Tuple2("Cscr", "\uD835\uDC9E"),
        _Utils_Tuple2("cscr", "\uD835\uDCB8"),
        _Utils_Tuple2("csub", "⫏"),
        _Utils_Tuple2("csube", "⫑"),
        _Utils_Tuple2("csup", "⫐"),
        _Utils_Tuple2("csupe", "⫒"),
        _Utils_Tuple2("ctdot", "⋯"),
        _Utils_Tuple2("cudarrl", "⤸"),
        _Utils_Tuple2("cudarrr", "⤵"),
        _Utils_Tuple2("cuepr", "⋞"),
        _Utils_Tuple2("cuesc", "⋟"),
        _Utils_Tuple2("cularr", "↶"),
        _Utils_Tuple2("cularrp", "⤽"),
        _Utils_Tuple2("cupbrcap", "⩈"),
        _Utils_Tuple2("cupcap", "⩆"),
        _Utils_Tuple2("CupCap", "≍"),
        _Utils_Tuple2("cup", "∪"),
        _Utils_Tuple2("Cup", "⋓"),
        _Utils_Tuple2("cupcup", "⩊"),
        _Utils_Tuple2("cupdot", "⊍"),
        _Utils_Tuple2("cupor", "⩅"),
        _Utils_Tuple2("cups", "∪︀"),
        _Utils_Tuple2("curarr", "↷"),
        _Utils_Tuple2("curarrm", "⤼"),
        _Utils_Tuple2("curlyeqprec", "⋞"),
        _Utils_Tuple2("curlyeqsucc", "⋟"),
        _Utils_Tuple2("curlyvee", "⋎"),
        _Utils_Tuple2("curlywedge", "⋏"),
        _Utils_Tuple2("curren", "\xa4"),
        _Utils_Tuple2("curvearrowleft", "↶"),
        _Utils_Tuple2("curvearrowright", "↷"),
        _Utils_Tuple2("cuvee", "⋎"),
        _Utils_Tuple2("cuwed", "⋏"),
        _Utils_Tuple2("cwconint", "∲"),
        _Utils_Tuple2("cwint", "∱"),
        _Utils_Tuple2("cylcty", "⌭"),
        _Utils_Tuple2("dagger", "†"),
        _Utils_Tuple2("Dagger", "‡"),
        _Utils_Tuple2("daleth", "ℸ"),
        _Utils_Tuple2("darr", "↓"),
        _Utils_Tuple2("Darr", "↡"),
        _Utils_Tuple2("dArr", "⇓"),
        _Utils_Tuple2("dash", "‐"),
        _Utils_Tuple2("Dashv", "⫤"),
        _Utils_Tuple2("dashv", "⊣"),
        _Utils_Tuple2("dbkarow", "⤏"),
        _Utils_Tuple2("dblac", "˝"),
        _Utils_Tuple2("Dcaron", "Ď"),
        _Utils_Tuple2("dcaron", "ď"),
        _Utils_Tuple2("Dcy", "Д"),
        _Utils_Tuple2("dcy", "д"),
        _Utils_Tuple2("ddagger", "‡"),
        _Utils_Tuple2("ddarr", "⇊"),
        _Utils_Tuple2("DD", "ⅅ"),
        _Utils_Tuple2("dd", "ⅆ"),
        _Utils_Tuple2("DDotrahd", "⤑"),
        _Utils_Tuple2("ddotseq", "⩷"),
        _Utils_Tuple2("deg", "\xb0"),
        _Utils_Tuple2("Del", "∇"),
        _Utils_Tuple2("Delta", "Δ"),
        _Utils_Tuple2("delta", "δ"),
        _Utils_Tuple2("demptyv", "⦱"),
        _Utils_Tuple2("dfisht", "⥿"),
        _Utils_Tuple2("Dfr", "\uD835\uDD07"),
        _Utils_Tuple2("dfr", "\uD835\uDD21"),
        _Utils_Tuple2("dHar", "⥥"),
        _Utils_Tuple2("dharl", "⇃"),
        _Utils_Tuple2("dharr", "⇂"),
        _Utils_Tuple2("DiacriticalAcute", "\xb4"),
        _Utils_Tuple2("DiacriticalDot", "˙"),
        _Utils_Tuple2("DiacriticalDoubleAcute", "˝"),
        _Utils_Tuple2("DiacriticalGrave", "`"),
        _Utils_Tuple2("DiacriticalTilde", "˜"),
        _Utils_Tuple2("diam", "⋄"),
        _Utils_Tuple2("diamond", "⋄"),
        _Utils_Tuple2("Diamond", "⋄"),
        _Utils_Tuple2("diamondsuit", "♦"),
        _Utils_Tuple2("diams", "♦"),
        _Utils_Tuple2("die", "\xa8"),
        _Utils_Tuple2("DifferentialD", "ⅆ"),
        _Utils_Tuple2("digamma", "ϝ"),
        _Utils_Tuple2("disin", "⋲"),
        _Utils_Tuple2("div", "\xf7"),
        _Utils_Tuple2("divide", "\xf7"),
        _Utils_Tuple2("divideontimes", "⋇"),
        _Utils_Tuple2("divonx", "⋇"),
        _Utils_Tuple2("DJcy", "Ђ"),
        _Utils_Tuple2("djcy", "ђ"),
        _Utils_Tuple2("dlcorn", "⌞"),
        _Utils_Tuple2("dlcrop", "⌍"),
        _Utils_Tuple2("dollar", "$"),
        _Utils_Tuple2("Dopf", "\uD835\uDD3B"),
        _Utils_Tuple2("dopf", "\uD835\uDD55"),
        _Utils_Tuple2("Dot", "\xa8"),
        _Utils_Tuple2("dot", "˙"),
        _Utils_Tuple2("DotDot", "⃜"),
        _Utils_Tuple2("doteq", "≐"),
        _Utils_Tuple2("doteqdot", "≑"),
        _Utils_Tuple2("DotEqual", "≐"),
        _Utils_Tuple2("dotminus", "∸"),
        _Utils_Tuple2("dotplus", "∔"),
        _Utils_Tuple2("dotsquare", "⊡"),
        _Utils_Tuple2("doublebarwedge", "⌆"),
        _Utils_Tuple2("DoubleContourIntegral", "∯"),
        _Utils_Tuple2("DoubleDot", "\xa8"),
        _Utils_Tuple2("DoubleDownArrow", "⇓"),
        _Utils_Tuple2("DoubleLeftArrow", "⇐"),
        _Utils_Tuple2("DoubleLeftRightArrow", "⇔"),
        _Utils_Tuple2("DoubleLeftTee", "⫤"),
        _Utils_Tuple2("DoubleLongLeftArrow", "⟸"),
        _Utils_Tuple2("DoubleLongLeftRightArrow", "⟺"),
        _Utils_Tuple2("DoubleLongRightArrow", "⟹"),
        _Utils_Tuple2("DoubleRightArrow", "⇒"),
        _Utils_Tuple2("DoubleRightTee", "⊨"),
        _Utils_Tuple2("DoubleUpArrow", "⇑"),
        _Utils_Tuple2("DoubleUpDownArrow", "⇕"),
        _Utils_Tuple2("DoubleVerticalBar", "∥"),
        _Utils_Tuple2("DownArrowBar", "⤓"),
        _Utils_Tuple2("downarrow", "↓"),
        _Utils_Tuple2("DownArrow", "↓"),
        _Utils_Tuple2("Downarrow", "⇓"),
        _Utils_Tuple2("DownArrowUpArrow", "⇵"),
        _Utils_Tuple2("DownBreve", "̑"),
        _Utils_Tuple2("downdownarrows", "⇊"),
        _Utils_Tuple2("downharpoonleft", "⇃"),
        _Utils_Tuple2("downharpoonright", "⇂"),
        _Utils_Tuple2("DownLeftRightVector", "⥐"),
        _Utils_Tuple2("DownLeftTeeVector", "⥞"),
        _Utils_Tuple2("DownLeftVectorBar", "⥖"),
        _Utils_Tuple2("DownLeftVector", "↽"),
        _Utils_Tuple2("DownRightTeeVector", "⥟"),
        _Utils_Tuple2("DownRightVectorBar", "⥗"),
        _Utils_Tuple2("DownRightVector", "⇁"),
        _Utils_Tuple2("DownTeeArrow", "↧"),
        _Utils_Tuple2("DownTee", "⊤"),
        _Utils_Tuple2("drbkarow", "⤐"),
        _Utils_Tuple2("drcorn", "⌟"),
        _Utils_Tuple2("drcrop", "⌌"),
        _Utils_Tuple2("Dscr", "\uD835\uDC9F"),
        _Utils_Tuple2("dscr", "\uD835\uDCB9"),
        _Utils_Tuple2("DScy", "Ѕ"),
        _Utils_Tuple2("dscy", "ѕ"),
        _Utils_Tuple2("dsol", "⧶"),
        _Utils_Tuple2("Dstrok", "Đ"),
        _Utils_Tuple2("dstrok", "đ"),
        _Utils_Tuple2("dtdot", "⋱"),
        _Utils_Tuple2("dtri", "▿"),
        _Utils_Tuple2("dtrif", "▾"),
        _Utils_Tuple2("duarr", "⇵"),
        _Utils_Tuple2("duhar", "⥯"),
        _Utils_Tuple2("dwangle", "⦦"),
        _Utils_Tuple2("DZcy", "Џ"),
        _Utils_Tuple2("dzcy", "џ"),
        _Utils_Tuple2("dzigrarr", "⟿"),
        _Utils_Tuple2("Eacute", "\xc9"),
        _Utils_Tuple2("eacute", "\xe9"),
        _Utils_Tuple2("easter", "⩮"),
        _Utils_Tuple2("Ecaron", "Ě"),
        _Utils_Tuple2("ecaron", "ě"),
        _Utils_Tuple2("Ecirc", "\xca"),
        _Utils_Tuple2("ecirc", "\xea"),
        _Utils_Tuple2("ecir", "≖"),
        _Utils_Tuple2("ecolon", "≕"),
        _Utils_Tuple2("Ecy", "Э"),
        _Utils_Tuple2("ecy", "э"),
        _Utils_Tuple2("eDDot", "⩷"),
        _Utils_Tuple2("Edot", "Ė"),
        _Utils_Tuple2("edot", "ė"),
        _Utils_Tuple2("eDot", "≑"),
        _Utils_Tuple2("ee", "ⅇ"),
        _Utils_Tuple2("efDot", "≒"),
        _Utils_Tuple2("Efr", "\uD835\uDD08"),
        _Utils_Tuple2("efr", "\uD835\uDD22"),
        _Utils_Tuple2("eg", "⪚"),
        _Utils_Tuple2("Egrave", "\xc8"),
        _Utils_Tuple2("egrave", "\xe8"),
        _Utils_Tuple2("egs", "⪖"),
        _Utils_Tuple2("egsdot", "⪘"),
        _Utils_Tuple2("el", "⪙"),
        _Utils_Tuple2("Element", "∈"),
        _Utils_Tuple2("elinters", "⏧"),
        _Utils_Tuple2("ell", "ℓ"),
        _Utils_Tuple2("els", "⪕"),
        _Utils_Tuple2("elsdot", "⪗"),
        _Utils_Tuple2("Emacr", "Ē"),
        _Utils_Tuple2("emacr", "ē"),
        _Utils_Tuple2("empty", "∅"),
        _Utils_Tuple2("emptyset", "∅"),
        _Utils_Tuple2("EmptySmallSquare", "◻"),
        _Utils_Tuple2("emptyv", "∅"),
        _Utils_Tuple2("EmptyVerySmallSquare", "▫"),
        _Utils_Tuple2("emsp13", " "),
        _Utils_Tuple2("emsp14", " "),
        _Utils_Tuple2("emsp", " "),
        _Utils_Tuple2("ENG", "Ŋ"),
        _Utils_Tuple2("eng", "ŋ"),
        _Utils_Tuple2("ensp", " "),
        _Utils_Tuple2("Eogon", "Ę"),
        _Utils_Tuple2("eogon", "ę"),
        _Utils_Tuple2("Eopf", "\uD835\uDD3C"),
        _Utils_Tuple2("eopf", "\uD835\uDD56"),
        _Utils_Tuple2("epar", "⋕"),
        _Utils_Tuple2("eparsl", "⧣"),
        _Utils_Tuple2("eplus", "⩱"),
        _Utils_Tuple2("epsi", "ε"),
        _Utils_Tuple2("Epsilon", "Ε"),
        _Utils_Tuple2("epsilon", "ε"),
        _Utils_Tuple2("epsiv", "ϵ"),
        _Utils_Tuple2("eqcirc", "≖"),
        _Utils_Tuple2("eqcolon", "≕"),
        _Utils_Tuple2("eqsim", "≂"),
        _Utils_Tuple2("eqslantgtr", "⪖"),
        _Utils_Tuple2("eqslantless", "⪕"),
        _Utils_Tuple2("Equal", "⩵"),
        _Utils_Tuple2("equals", "="),
        _Utils_Tuple2("EqualTilde", "≂"),
        _Utils_Tuple2("equest", "≟"),
        _Utils_Tuple2("Equilibrium", "⇌"),
        _Utils_Tuple2("equiv", "≡"),
        _Utils_Tuple2("equivDD", "⩸"),
        _Utils_Tuple2("eqvparsl", "⧥"),
        _Utils_Tuple2("erarr", "⥱"),
        _Utils_Tuple2("erDot", "≓"),
        _Utils_Tuple2("escr", "ℯ"),
        _Utils_Tuple2("Escr", "ℰ"),
        _Utils_Tuple2("esdot", "≐"),
        _Utils_Tuple2("Esim", "⩳"),
        _Utils_Tuple2("esim", "≂"),
        _Utils_Tuple2("Eta", "Η"),
        _Utils_Tuple2("eta", "η"),
        _Utils_Tuple2("ETH", "\xd0"),
        _Utils_Tuple2("eth", "\xf0"),
        _Utils_Tuple2("Euml", "\xcb"),
        _Utils_Tuple2("euml", "\xeb"),
        _Utils_Tuple2("euro", "€"),
        _Utils_Tuple2("excl", "!"),
        _Utils_Tuple2("exist", "∃"),
        _Utils_Tuple2("Exists", "∃"),
        _Utils_Tuple2("expectation", "ℰ"),
        _Utils_Tuple2("exponentiale", "ⅇ"),
        _Utils_Tuple2("ExponentialE", "ⅇ"),
        _Utils_Tuple2("fallingdotseq", "≒"),
        _Utils_Tuple2("Fcy", "Ф"),
        _Utils_Tuple2("fcy", "ф"),
        _Utils_Tuple2("female", "♀"),
        _Utils_Tuple2("ffilig", "ﬃ"),
        _Utils_Tuple2("fflig", "ﬀ"),
        _Utils_Tuple2("ffllig", "ﬄ"),
        _Utils_Tuple2("Ffr", "\uD835\uDD09"),
        _Utils_Tuple2("ffr", "\uD835\uDD23"),
        _Utils_Tuple2("filig", "ﬁ"),
        _Utils_Tuple2("FilledSmallSquare", "◼"),
        _Utils_Tuple2("FilledVerySmallSquare", "▪"),
        _Utils_Tuple2("fjlig", "fj"),
        _Utils_Tuple2("flat", "♭"),
        _Utils_Tuple2("fllig", "ﬂ"),
        _Utils_Tuple2("fltns", "▱"),
        _Utils_Tuple2("fnof", "ƒ"),
        _Utils_Tuple2("Fopf", "\uD835\uDD3D"),
        _Utils_Tuple2("fopf", "\uD835\uDD57"),
        _Utils_Tuple2("forall", "∀"),
        _Utils_Tuple2("ForAll", "∀"),
        _Utils_Tuple2("fork", "⋔"),
        _Utils_Tuple2("forkv", "⫙"),
        _Utils_Tuple2("Fouriertrf", "ℱ"),
        _Utils_Tuple2("fpartint", "⨍"),
        _Utils_Tuple2("frac12", "\xbd"),
        _Utils_Tuple2("frac13", "⅓"),
        _Utils_Tuple2("frac14", "\xbc"),
        _Utils_Tuple2("frac15", "⅕"),
        _Utils_Tuple2("frac16", "⅙"),
        _Utils_Tuple2("frac18", "⅛"),
        _Utils_Tuple2("frac23", "⅔"),
        _Utils_Tuple2("frac25", "⅖"),
        _Utils_Tuple2("frac34", "\xbe"),
        _Utils_Tuple2("frac35", "⅗"),
        _Utils_Tuple2("frac38", "⅜"),
        _Utils_Tuple2("frac45", "⅘"),
        _Utils_Tuple2("frac56", "⅚"),
        _Utils_Tuple2("frac58", "⅝"),
        _Utils_Tuple2("frac78", "⅞"),
        _Utils_Tuple2("frasl", "⁄"),
        _Utils_Tuple2("frown", "⌢"),
        _Utils_Tuple2("fscr", "\uD835\uDCBB"),
        _Utils_Tuple2("Fscr", "ℱ"),
        _Utils_Tuple2("gacute", "ǵ"),
        _Utils_Tuple2("Gamma", "Γ"),
        _Utils_Tuple2("gamma", "γ"),
        _Utils_Tuple2("Gammad", "Ϝ"),
        _Utils_Tuple2("gammad", "ϝ"),
        _Utils_Tuple2("gap", "⪆"),
        _Utils_Tuple2("Gbreve", "Ğ"),
        _Utils_Tuple2("gbreve", "ğ"),
        _Utils_Tuple2("Gcedil", "Ģ"),
        _Utils_Tuple2("Gcirc", "Ĝ"),
        _Utils_Tuple2("gcirc", "ĝ"),
        _Utils_Tuple2("Gcy", "Г"),
        _Utils_Tuple2("gcy", "г"),
        _Utils_Tuple2("Gdot", "Ġ"),
        _Utils_Tuple2("gdot", "ġ"),
        _Utils_Tuple2("ge", "≥"),
        _Utils_Tuple2("gE", "≧"),
        _Utils_Tuple2("gEl", "⪌"),
        _Utils_Tuple2("gel", "⋛"),
        _Utils_Tuple2("geq", "≥"),
        _Utils_Tuple2("geqq", "≧"),
        _Utils_Tuple2("geqslant", "⩾"),
        _Utils_Tuple2("gescc", "⪩"),
        _Utils_Tuple2("ges", "⩾"),
        _Utils_Tuple2("gesdot", "⪀"),
        _Utils_Tuple2("gesdoto", "⪂"),
        _Utils_Tuple2("gesdotol", "⪄"),
        _Utils_Tuple2("gesl", "⋛︀"),
        _Utils_Tuple2("gesles", "⪔"),
        _Utils_Tuple2("Gfr", "\uD835\uDD0A"),
        _Utils_Tuple2("gfr", "\uD835\uDD24"),
        _Utils_Tuple2("gg", "≫"),
        _Utils_Tuple2("Gg", "⋙"),
        _Utils_Tuple2("ggg", "⋙"),
        _Utils_Tuple2("gimel", "ℷ"),
        _Utils_Tuple2("GJcy", "Ѓ"),
        _Utils_Tuple2("gjcy", "ѓ"),
        _Utils_Tuple2("gla", "⪥"),
        _Utils_Tuple2("gl", "≷"),
        _Utils_Tuple2("glE", "⪒"),
        _Utils_Tuple2("glj", "⪤"),
        _Utils_Tuple2("gnap", "⪊"),
        _Utils_Tuple2("gnapprox", "⪊"),
        _Utils_Tuple2("gne", "⪈"),
        _Utils_Tuple2("gnE", "≩"),
        _Utils_Tuple2("gneq", "⪈"),
        _Utils_Tuple2("gneqq", "≩"),
        _Utils_Tuple2("gnsim", "⋧"),
        _Utils_Tuple2("Gopf", "\uD835\uDD3E"),
        _Utils_Tuple2("gopf", "\uD835\uDD58"),
        _Utils_Tuple2("grave", "`"),
        _Utils_Tuple2("GreaterEqual", "≥"),
        _Utils_Tuple2("GreaterEqualLess", "⋛"),
        _Utils_Tuple2("GreaterFullEqual", "≧"),
        _Utils_Tuple2("GreaterGreater", "⪢"),
        _Utils_Tuple2("GreaterLess", "≷"),
        _Utils_Tuple2("GreaterSlantEqual", "⩾"),
        _Utils_Tuple2("GreaterTilde", "≳"),
        _Utils_Tuple2("Gscr", "\uD835\uDCA2"),
        _Utils_Tuple2("gscr", "ℊ"),
        _Utils_Tuple2("gsim", "≳"),
        _Utils_Tuple2("gsime", "⪎"),
        _Utils_Tuple2("gsiml", "⪐"),
        _Utils_Tuple2("gtcc", "⪧"),
        _Utils_Tuple2("gtcir", "⩺"),
        _Utils_Tuple2("gt", ">"),
        _Utils_Tuple2("GT", ">"),
        _Utils_Tuple2("Gt", "≫"),
        _Utils_Tuple2("gtdot", "⋗"),
        _Utils_Tuple2("gtlPar", "⦕"),
        _Utils_Tuple2("gtquest", "⩼"),
        _Utils_Tuple2("gtrapprox", "⪆"),
        _Utils_Tuple2("gtrarr", "⥸"),
        _Utils_Tuple2("gtrdot", "⋗"),
        _Utils_Tuple2("gtreqless", "⋛"),
        _Utils_Tuple2("gtreqqless", "⪌"),
        _Utils_Tuple2("gtrless", "≷"),
        _Utils_Tuple2("gtrsim", "≳"),
        _Utils_Tuple2("gvertneqq", "≩︀"),
        _Utils_Tuple2("gvnE", "≩︀"),
        _Utils_Tuple2("Hacek", "ˇ"),
        _Utils_Tuple2("hairsp", " "),
        _Utils_Tuple2("half", "\xbd"),
        _Utils_Tuple2("hamilt", "ℋ"),
        _Utils_Tuple2("HARDcy", "Ъ"),
        _Utils_Tuple2("hardcy", "ъ"),
        _Utils_Tuple2("harrcir", "⥈"),
        _Utils_Tuple2("harr", "↔"),
        _Utils_Tuple2("hArr", "⇔"),
        _Utils_Tuple2("harrw", "↭"),
        _Utils_Tuple2("Hat", "^"),
        _Utils_Tuple2("hbar", "ℏ"),
        _Utils_Tuple2("Hcirc", "Ĥ"),
        _Utils_Tuple2("hcirc", "ĥ"),
        _Utils_Tuple2("hearts", "♥"),
        _Utils_Tuple2("heartsuit", "♥"),
        _Utils_Tuple2("hellip", "…"),
        _Utils_Tuple2("hercon", "⊹"),
        _Utils_Tuple2("hfr", "\uD835\uDD25"),
        _Utils_Tuple2("Hfr", "ℌ"),
        _Utils_Tuple2("HilbertSpace", "ℋ"),
        _Utils_Tuple2("hksearow", "⤥"),
        _Utils_Tuple2("hkswarow", "⤦"),
        _Utils_Tuple2("hoarr", "⇿"),
        _Utils_Tuple2("homtht", "∻"),
        _Utils_Tuple2("hookleftarrow", "↩"),
        _Utils_Tuple2("hookrightarrow", "↪"),
        _Utils_Tuple2("hopf", "\uD835\uDD59"),
        _Utils_Tuple2("Hopf", "ℍ"),
        _Utils_Tuple2("horbar", "―"),
        _Utils_Tuple2("HorizontalLine", "─"),
        _Utils_Tuple2("hscr", "\uD835\uDCBD"),
        _Utils_Tuple2("Hscr", "ℋ"),
        _Utils_Tuple2("hslash", "ℏ"),
        _Utils_Tuple2("Hstrok", "Ħ"),
        _Utils_Tuple2("hstrok", "ħ"),
        _Utils_Tuple2("HumpDownHump", "≎"),
        _Utils_Tuple2("HumpEqual", "≏"),
        _Utils_Tuple2("hybull", "⁃"),
        _Utils_Tuple2("hyphen", "‐"),
        _Utils_Tuple2("Iacute", "\xcd"),
        _Utils_Tuple2("iacute", "\xed"),
        _Utils_Tuple2("ic", "⁣"),
        _Utils_Tuple2("Icirc", "\xce"),
        _Utils_Tuple2("icirc", "\xee"),
        _Utils_Tuple2("Icy", "И"),
        _Utils_Tuple2("icy", "и"),
        _Utils_Tuple2("Idot", "İ"),
        _Utils_Tuple2("IEcy", "Е"),
        _Utils_Tuple2("iecy", "е"),
        _Utils_Tuple2("iexcl", "\xa1"),
        _Utils_Tuple2("iff", "⇔"),
        _Utils_Tuple2("ifr", "\uD835\uDD26"),
        _Utils_Tuple2("Ifr", "ℑ"),
        _Utils_Tuple2("Igrave", "\xcc"),
        _Utils_Tuple2("igrave", "\xec"),
        _Utils_Tuple2("ii", "ⅈ"),
        _Utils_Tuple2("iiiint", "⨌"),
        _Utils_Tuple2("iiint", "∭"),
        _Utils_Tuple2("iinfin", "⧜"),
        _Utils_Tuple2("iiota", "℩"),
        _Utils_Tuple2("IJlig", "Ĳ"),
        _Utils_Tuple2("ijlig", "ĳ"),
        _Utils_Tuple2("Imacr", "Ī"),
        _Utils_Tuple2("imacr", "ī"),
        _Utils_Tuple2("image", "ℑ"),
        _Utils_Tuple2("ImaginaryI", "ⅈ"),
        _Utils_Tuple2("imagline", "ℐ"),
        _Utils_Tuple2("imagpart", "ℑ"),
        _Utils_Tuple2("imath", "ı"),
        _Utils_Tuple2("Im", "ℑ"),
        _Utils_Tuple2("imof", "⊷"),
        _Utils_Tuple2("imped", "Ƶ"),
        _Utils_Tuple2("Implies", "⇒"),
        _Utils_Tuple2("incare", "℅"),
        _Utils_Tuple2("in", "∈"),
        _Utils_Tuple2("infin", "∞"),
        _Utils_Tuple2("infintie", "⧝"),
        _Utils_Tuple2("inodot", "ı"),
        _Utils_Tuple2("intcal", "⊺"),
        _Utils_Tuple2("int", "∫"),
        _Utils_Tuple2("Int", "∬"),
        _Utils_Tuple2("integers", "ℤ"),
        _Utils_Tuple2("Integral", "∫"),
        _Utils_Tuple2("intercal", "⊺"),
        _Utils_Tuple2("Intersection", "⋂"),
        _Utils_Tuple2("intlarhk", "⨗"),
        _Utils_Tuple2("intprod", "⨼"),
        _Utils_Tuple2("InvisibleComma", "⁣"),
        _Utils_Tuple2("InvisibleTimes", "⁢"),
        _Utils_Tuple2("IOcy", "Ё"),
        _Utils_Tuple2("iocy", "ё"),
        _Utils_Tuple2("Iogon", "Į"),
        _Utils_Tuple2("iogon", "į"),
        _Utils_Tuple2("Iopf", "\uD835\uDD40"),
        _Utils_Tuple2("iopf", "\uD835\uDD5A"),
        _Utils_Tuple2("Iota", "Ι"),
        _Utils_Tuple2("iota", "ι"),
        _Utils_Tuple2("iprod", "⨼"),
        _Utils_Tuple2("iquest", "\xbf"),
        _Utils_Tuple2("iscr", "\uD835\uDCBE"),
        _Utils_Tuple2("Iscr", "ℐ"),
        _Utils_Tuple2("isin", "∈"),
        _Utils_Tuple2("isindot", "⋵"),
        _Utils_Tuple2("isinE", "⋹"),
        _Utils_Tuple2("isins", "⋴"),
        _Utils_Tuple2("isinsv", "⋳"),
        _Utils_Tuple2("isinv", "∈"),
        _Utils_Tuple2("it", "⁢"),
        _Utils_Tuple2("Itilde", "Ĩ"),
        _Utils_Tuple2("itilde", "ĩ"),
        _Utils_Tuple2("Iukcy", "І"),
        _Utils_Tuple2("iukcy", "і"),
        _Utils_Tuple2("Iuml", "\xcf"),
        _Utils_Tuple2("iuml", "\xef"),
        _Utils_Tuple2("Jcirc", "Ĵ"),
        _Utils_Tuple2("jcirc", "ĵ"),
        _Utils_Tuple2("Jcy", "Й"),
        _Utils_Tuple2("jcy", "й"),
        _Utils_Tuple2("Jfr", "\uD835\uDD0D"),
        _Utils_Tuple2("jfr", "\uD835\uDD27"),
        _Utils_Tuple2("jmath", "ȷ"),
        _Utils_Tuple2("Jopf", "\uD835\uDD41"),
        _Utils_Tuple2("jopf", "\uD835\uDD5B"),
        _Utils_Tuple2("Jscr", "\uD835\uDCA5"),
        _Utils_Tuple2("jscr", "\uD835\uDCBF"),
        _Utils_Tuple2("Jsercy", "Ј"),
        _Utils_Tuple2("jsercy", "ј"),
        _Utils_Tuple2("Jukcy", "Є"),
        _Utils_Tuple2("jukcy", "є"),
        _Utils_Tuple2("Kappa", "Κ"),
        _Utils_Tuple2("kappa", "κ"),
        _Utils_Tuple2("kappav", "ϰ"),
        _Utils_Tuple2("Kcedil", "Ķ"),
        _Utils_Tuple2("kcedil", "ķ"),
        _Utils_Tuple2("Kcy", "К"),
        _Utils_Tuple2("kcy", "к"),
        _Utils_Tuple2("Kfr", "\uD835\uDD0E"),
        _Utils_Tuple2("kfr", "\uD835\uDD28"),
        _Utils_Tuple2("kgreen", "ĸ"),
        _Utils_Tuple2("KHcy", "Х"),
        _Utils_Tuple2("khcy", "х"),
        _Utils_Tuple2("KJcy", "Ќ"),
        _Utils_Tuple2("kjcy", "ќ"),
        _Utils_Tuple2("Kopf", "\uD835\uDD42"),
        _Utils_Tuple2("kopf", "\uD835\uDD5C"),
        _Utils_Tuple2("Kscr", "\uD835\uDCA6"),
        _Utils_Tuple2("kscr", "\uD835\uDCC0"),
        _Utils_Tuple2("lAarr", "⇚"),
        _Utils_Tuple2("Lacute", "Ĺ"),
        _Utils_Tuple2("lacute", "ĺ"),
        _Utils_Tuple2("laemptyv", "⦴"),
        _Utils_Tuple2("lagran", "ℒ"),
        _Utils_Tuple2("Lambda", "Λ"),
        _Utils_Tuple2("lambda", "λ"),
        _Utils_Tuple2("lang", "⟨"),
        _Utils_Tuple2("Lang", "⟪"),
        _Utils_Tuple2("langd", "⦑"),
        _Utils_Tuple2("langle", "⟨"),
        _Utils_Tuple2("lap", "⪅"),
        _Utils_Tuple2("Laplacetrf", "ℒ"),
        _Utils_Tuple2("laquo", "\xab"),
        _Utils_Tuple2("larrb", "⇤"),
        _Utils_Tuple2("larrbfs", "⤟"),
        _Utils_Tuple2("larr", "←"),
        _Utils_Tuple2("Larr", "↞"),
        _Utils_Tuple2("lArr", "⇐"),
        _Utils_Tuple2("larrfs", "⤝"),
        _Utils_Tuple2("larrhk", "↩"),
        _Utils_Tuple2("larrlp", "↫"),
        _Utils_Tuple2("larrpl", "⤹"),
        _Utils_Tuple2("larrsim", "⥳"),
        _Utils_Tuple2("larrtl", "↢"),
        _Utils_Tuple2("latail", "⤙"),
        _Utils_Tuple2("lAtail", "⤛"),
        _Utils_Tuple2("lat", "⪫"),
        _Utils_Tuple2("late", "⪭"),
        _Utils_Tuple2("lates", "⪭︀"),
        _Utils_Tuple2("lbarr", "⤌"),
        _Utils_Tuple2("lBarr", "⤎"),
        _Utils_Tuple2("lbbrk", "❲"),
        _Utils_Tuple2("lbrace", "{"),
        _Utils_Tuple2("lbrack", "["),
        _Utils_Tuple2("lbrke", "⦋"),
        _Utils_Tuple2("lbrksld", "⦏"),
        _Utils_Tuple2("lbrkslu", "⦍"),
        _Utils_Tuple2("Lcaron", "Ľ"),
        _Utils_Tuple2("lcaron", "ľ"),
        _Utils_Tuple2("Lcedil", "Ļ"),
        _Utils_Tuple2("lcedil", "ļ"),
        _Utils_Tuple2("lceil", "⌈"),
        _Utils_Tuple2("lcub", "{"),
        _Utils_Tuple2("Lcy", "Л"),
        _Utils_Tuple2("lcy", "л"),
        _Utils_Tuple2("ldca", "⤶"),
        _Utils_Tuple2("ldquo", "“"),
        _Utils_Tuple2("ldquor", "„"),
        _Utils_Tuple2("ldrdhar", "⥧"),
        _Utils_Tuple2("ldrushar", "⥋"),
        _Utils_Tuple2("ldsh", "↲"),
        _Utils_Tuple2("le", "≤"),
        _Utils_Tuple2("lE", "≦"),
        _Utils_Tuple2("LeftAngleBracket", "⟨"),
        _Utils_Tuple2("LeftArrowBar", "⇤"),
        _Utils_Tuple2("leftarrow", "←"),
        _Utils_Tuple2("LeftArrow", "←"),
        _Utils_Tuple2("Leftarrow", "⇐"),
        _Utils_Tuple2("LeftArrowRightArrow", "⇆"),
        _Utils_Tuple2("leftarrowtail", "↢"),
        _Utils_Tuple2("LeftCeiling", "⌈"),
        _Utils_Tuple2("LeftDoubleBracket", "⟦"),
        _Utils_Tuple2("LeftDownTeeVector", "⥡"),
        _Utils_Tuple2("LeftDownVectorBar", "⥙"),
        _Utils_Tuple2("LeftDownVector", "⇃"),
        _Utils_Tuple2("LeftFloor", "⌊"),
        _Utils_Tuple2("leftharpoondown", "↽"),
        _Utils_Tuple2("leftharpoonup", "↼"),
        _Utils_Tuple2("leftleftarrows", "⇇"),
        _Utils_Tuple2("leftrightarrow", "↔"),
        _Utils_Tuple2("LeftRightArrow", "↔"),
        _Utils_Tuple2("Leftrightarrow", "⇔"),
        _Utils_Tuple2("leftrightarrows", "⇆"),
        _Utils_Tuple2("leftrightharpoons", "⇋"),
        _Utils_Tuple2("leftrightsquigarrow", "↭"),
        _Utils_Tuple2("LeftRightVector", "⥎"),
        _Utils_Tuple2("LeftTeeArrow", "↤"),
        _Utils_Tuple2("LeftTee", "⊣"),
        _Utils_Tuple2("LeftTeeVector", "⥚"),
        _Utils_Tuple2("leftthreetimes", "⋋"),
        _Utils_Tuple2("LeftTriangleBar", "⧏"),
        _Utils_Tuple2("LeftTriangle", "⊲"),
        _Utils_Tuple2("LeftTriangleEqual", "⊴"),
        _Utils_Tuple2("LeftUpDownVector", "⥑"),
        _Utils_Tuple2("LeftUpTeeVector", "⥠"),
        _Utils_Tuple2("LeftUpVectorBar", "⥘"),
        _Utils_Tuple2("LeftUpVector", "↿"),
        _Utils_Tuple2("LeftVectorBar", "⥒"),
        _Utils_Tuple2("LeftVector", "↼"),
        _Utils_Tuple2("lEg", "⪋"),
        _Utils_Tuple2("leg", "⋚"),
        _Utils_Tuple2("leq", "≤"),
        _Utils_Tuple2("leqq", "≦"),
        _Utils_Tuple2("leqslant", "⩽"),
        _Utils_Tuple2("lescc", "⪨"),
        _Utils_Tuple2("les", "⩽"),
        _Utils_Tuple2("lesdot", "⩿"),
        _Utils_Tuple2("lesdoto", "⪁"),
        _Utils_Tuple2("lesdotor", "⪃"),
        _Utils_Tuple2("lesg", "⋚︀"),
        _Utils_Tuple2("lesges", "⪓"),
        _Utils_Tuple2("lessapprox", "⪅"),
        _Utils_Tuple2("lessdot", "⋖"),
        _Utils_Tuple2("lesseqgtr", "⋚"),
        _Utils_Tuple2("lesseqqgtr", "⪋"),
        _Utils_Tuple2("LessEqualGreater", "⋚"),
        _Utils_Tuple2("LessFullEqual", "≦"),
        _Utils_Tuple2("LessGreater", "≶"),
        _Utils_Tuple2("lessgtr", "≶"),
        _Utils_Tuple2("LessLess", "⪡"),
        _Utils_Tuple2("lesssim", "≲"),
        _Utils_Tuple2("LessSlantEqual", "⩽"),
        _Utils_Tuple2("LessTilde", "≲"),
        _Utils_Tuple2("lfisht", "⥼"),
        _Utils_Tuple2("lfloor", "⌊"),
        _Utils_Tuple2("Lfr", "\uD835\uDD0F"),
        _Utils_Tuple2("lfr", "\uD835\uDD29"),
        _Utils_Tuple2("lg", "≶"),
        _Utils_Tuple2("lgE", "⪑"),
        _Utils_Tuple2("lHar", "⥢"),
        _Utils_Tuple2("lhard", "↽"),
        _Utils_Tuple2("lharu", "↼"),
        _Utils_Tuple2("lharul", "⥪"),
        _Utils_Tuple2("lhblk", "▄"),
        _Utils_Tuple2("LJcy", "Љ"),
        _Utils_Tuple2("ljcy", "љ"),
        _Utils_Tuple2("llarr", "⇇"),
        _Utils_Tuple2("ll", "≪"),
        _Utils_Tuple2("Ll", "⋘"),
        _Utils_Tuple2("llcorner", "⌞"),
        _Utils_Tuple2("Lleftarrow", "⇚"),
        _Utils_Tuple2("llhard", "⥫"),
        _Utils_Tuple2("lltri", "◺"),
        _Utils_Tuple2("Lmidot", "Ŀ"),
        _Utils_Tuple2("lmidot", "ŀ"),
        _Utils_Tuple2("lmoustache", "⎰"),
        _Utils_Tuple2("lmoust", "⎰"),
        _Utils_Tuple2("lnap", "⪉"),
        _Utils_Tuple2("lnapprox", "⪉"),
        _Utils_Tuple2("lne", "⪇"),
        _Utils_Tuple2("lnE", "≨"),
        _Utils_Tuple2("lneq", "⪇"),
        _Utils_Tuple2("lneqq", "≨"),
        _Utils_Tuple2("lnsim", "⋦"),
        _Utils_Tuple2("loang", "⟬"),
        _Utils_Tuple2("loarr", "⇽"),
        _Utils_Tuple2("lobrk", "⟦"),
        _Utils_Tuple2("longleftarrow", "⟵"),
        _Utils_Tuple2("LongLeftArrow", "⟵"),
        _Utils_Tuple2("Longleftarrow", "⟸"),
        _Utils_Tuple2("longleftrightarrow", "⟷"),
        _Utils_Tuple2("LongLeftRightArrow", "⟷"),
        _Utils_Tuple2("Longleftrightarrow", "⟺"),
        _Utils_Tuple2("longmapsto", "⟼"),
        _Utils_Tuple2("longrightarrow", "⟶"),
        _Utils_Tuple2("LongRightArrow", "⟶"),
        _Utils_Tuple2("Longrightarrow", "⟹"),
        _Utils_Tuple2("looparrowleft", "↫"),
        _Utils_Tuple2("looparrowright", "↬"),
        _Utils_Tuple2("lopar", "⦅"),
        _Utils_Tuple2("Lopf", "\uD835\uDD43"),
        _Utils_Tuple2("lopf", "\uD835\uDD5D"),
        _Utils_Tuple2("loplus", "⨭"),
        _Utils_Tuple2("lotimes", "⨴"),
        _Utils_Tuple2("lowast", "∗"),
        _Utils_Tuple2("lowbar", "_"),
        _Utils_Tuple2("LowerLeftArrow", "↙"),
        _Utils_Tuple2("LowerRightArrow", "↘"),
        _Utils_Tuple2("loz", "◊"),
        _Utils_Tuple2("lozenge", "◊"),
        _Utils_Tuple2("lozf", "⧫"),
        _Utils_Tuple2("lpar", "("),
        _Utils_Tuple2("lparlt", "⦓"),
        _Utils_Tuple2("lrarr", "⇆"),
        _Utils_Tuple2("lrcorner", "⌟"),
        _Utils_Tuple2("lrhar", "⇋"),
        _Utils_Tuple2("lrhard", "⥭"),
        _Utils_Tuple2("lrm", "‎"),
        _Utils_Tuple2("lrtri", "⊿"),
        _Utils_Tuple2("lsaquo", "‹"),
        _Utils_Tuple2("lscr", "\uD835\uDCC1"),
        _Utils_Tuple2("Lscr", "ℒ"),
        _Utils_Tuple2("lsh", "↰"),
        _Utils_Tuple2("Lsh", "↰"),
        _Utils_Tuple2("lsim", "≲"),
        _Utils_Tuple2("lsime", "⪍"),
        _Utils_Tuple2("lsimg", "⪏"),
        _Utils_Tuple2("lsqb", "["),
        _Utils_Tuple2("lsquo", "‘"),
        _Utils_Tuple2("lsquor", "‚"),
        _Utils_Tuple2("Lstrok", "Ł"),
        _Utils_Tuple2("lstrok", "ł"),
        _Utils_Tuple2("ltcc", "⪦"),
        _Utils_Tuple2("ltcir", "⩹"),
        _Utils_Tuple2("lt", "<"),
        _Utils_Tuple2("LT", "<"),
        _Utils_Tuple2("Lt", "≪"),
        _Utils_Tuple2("ltdot", "⋖"),
        _Utils_Tuple2("lthree", "⋋"),
        _Utils_Tuple2("ltimes", "⋉"),
        _Utils_Tuple2("ltlarr", "⥶"),
        _Utils_Tuple2("ltquest", "⩻"),
        _Utils_Tuple2("ltri", "◃"),
        _Utils_Tuple2("ltrie", "⊴"),
        _Utils_Tuple2("ltrif", "◂"),
        _Utils_Tuple2("ltrPar", "⦖"),
        _Utils_Tuple2("lurdshar", "⥊"),
        _Utils_Tuple2("luruhar", "⥦"),
        _Utils_Tuple2("lvertneqq", "≨︀"),
        _Utils_Tuple2("lvnE", "≨︀"),
        _Utils_Tuple2("macr", "\xaf"),
        _Utils_Tuple2("male", "♂"),
        _Utils_Tuple2("malt", "✠"),
        _Utils_Tuple2("maltese", "✠"),
        _Utils_Tuple2("Map", "⤅"),
        _Utils_Tuple2("map", "↦"),
        _Utils_Tuple2("mapsto", "↦"),
        _Utils_Tuple2("mapstodown", "↧"),
        _Utils_Tuple2("mapstoleft", "↤"),
        _Utils_Tuple2("mapstoup", "↥"),
        _Utils_Tuple2("marker", "▮"),
        _Utils_Tuple2("mcomma", "⨩"),
        _Utils_Tuple2("Mcy", "М"),
        _Utils_Tuple2("mcy", "м"),
        _Utils_Tuple2("mdash", "—"),
        _Utils_Tuple2("mDDot", "∺"),
        _Utils_Tuple2("measuredangle", "∡"),
        _Utils_Tuple2("MediumSpace", " "),
        _Utils_Tuple2("Mellintrf", "ℳ"),
        _Utils_Tuple2("Mfr", "\uD835\uDD10"),
        _Utils_Tuple2("mfr", "\uD835\uDD2A"),
        _Utils_Tuple2("mho", "℧"),
        _Utils_Tuple2("micro", "\xb5"),
        _Utils_Tuple2("midast", "*"),
        _Utils_Tuple2("midcir", "⫰"),
        _Utils_Tuple2("mid", "∣"),
        _Utils_Tuple2("middot", "\xb7"),
        _Utils_Tuple2("minusb", "⊟"),
        _Utils_Tuple2("minus", "−"),
        _Utils_Tuple2("minusd", "∸"),
        _Utils_Tuple2("minusdu", "⨪"),
        _Utils_Tuple2("MinusPlus", "∓"),
        _Utils_Tuple2("mlcp", "⫛"),
        _Utils_Tuple2("mldr", "…"),
        _Utils_Tuple2("mnplus", "∓"),
        _Utils_Tuple2("models", "⊧"),
        _Utils_Tuple2("Mopf", "\uD835\uDD44"),
        _Utils_Tuple2("mopf", "\uD835\uDD5E"),
        _Utils_Tuple2("mp", "∓"),
        _Utils_Tuple2("mscr", "\uD835\uDCC2"),
        _Utils_Tuple2("Mscr", "ℳ"),
        _Utils_Tuple2("mstpos", "∾"),
        _Utils_Tuple2("Mu", "Μ"),
        _Utils_Tuple2("mu", "μ"),
        _Utils_Tuple2("multimap", "⊸"),
        _Utils_Tuple2("mumap", "⊸"),
        _Utils_Tuple2("nabla", "∇"),
        _Utils_Tuple2("Nacute", "Ń"),
        _Utils_Tuple2("nacute", "ń"),
        _Utils_Tuple2("nang", "∠⃒"),
        _Utils_Tuple2("nap", "≉"),
        _Utils_Tuple2("napE", "⩰̸"),
        _Utils_Tuple2("napid", "≋̸"),
        _Utils_Tuple2("napos", "ŉ"),
        _Utils_Tuple2("napprox", "≉"),
        _Utils_Tuple2("natural", "♮"),
        _Utils_Tuple2("naturals", "ℕ"),
        _Utils_Tuple2("natur", "♮"),
        _Utils_Tuple2("nbsp", "\xa0"),
        _Utils_Tuple2("nbump", "≎̸"),
        _Utils_Tuple2("nbumpe", "≏̸"),
        _Utils_Tuple2("ncap", "⩃"),
        _Utils_Tuple2("Ncaron", "Ň"),
        _Utils_Tuple2("ncaron", "ň"),
        _Utils_Tuple2("Ncedil", "Ņ"),
        _Utils_Tuple2("ncedil", "ņ"),
        _Utils_Tuple2("ncong", "≇"),
        _Utils_Tuple2("ncongdot", "⩭̸"),
        _Utils_Tuple2("ncup", "⩂"),
        _Utils_Tuple2("Ncy", "Н"),
        _Utils_Tuple2("ncy", "н"),
        _Utils_Tuple2("ndash", "–"),
        _Utils_Tuple2("nearhk", "⤤"),
        _Utils_Tuple2("nearr", "↗"),
        _Utils_Tuple2("neArr", "⇗"),
        _Utils_Tuple2("nearrow", "↗"),
        _Utils_Tuple2("ne", "≠"),
        _Utils_Tuple2("nedot", "≐̸"),
        _Utils_Tuple2("NegativeMediumSpace", "​"),
        _Utils_Tuple2("NegativeThickSpace", "​"),
        _Utils_Tuple2("NegativeThinSpace", "​"),
        _Utils_Tuple2("NegativeVeryThinSpace", "​"),
        _Utils_Tuple2("nequiv", "≢"),
        _Utils_Tuple2("nesear", "⤨"),
        _Utils_Tuple2("nesim", "≂̸"),
        _Utils_Tuple2("NestedGreaterGreater", "≫"),
        _Utils_Tuple2("NestedLessLess", "≪"),
        _Utils_Tuple2("NewLine", "\n"),
        _Utils_Tuple2("nexist", "∄"),
        _Utils_Tuple2("nexists", "∄"),
        _Utils_Tuple2("Nfr", "\uD835\uDD11"),
        _Utils_Tuple2("nfr", "\uD835\uDD2B"),
        _Utils_Tuple2("ngE", "≧̸"),
        _Utils_Tuple2("nge", "≱"),
        _Utils_Tuple2("ngeq", "≱"),
        _Utils_Tuple2("ngeqq", "≧̸"),
        _Utils_Tuple2("ngeqslant", "⩾̸"),
        _Utils_Tuple2("nges", "⩾̸"),
        _Utils_Tuple2("nGg", "⋙̸"),
        _Utils_Tuple2("ngsim", "≵"),
        _Utils_Tuple2("nGt", "≫⃒"),
        _Utils_Tuple2("ngt", "≯"),
        _Utils_Tuple2("ngtr", "≯"),
        _Utils_Tuple2("nGtv", "≫̸"),
        _Utils_Tuple2("nharr", "↮"),
        _Utils_Tuple2("nhArr", "⇎"),
        _Utils_Tuple2("nhpar", "⫲"),
        _Utils_Tuple2("ni", "∋"),
        _Utils_Tuple2("nis", "⋼"),
        _Utils_Tuple2("nisd", "⋺"),
        _Utils_Tuple2("niv", "∋"),
        _Utils_Tuple2("NJcy", "Њ"),
        _Utils_Tuple2("njcy", "њ"),
        _Utils_Tuple2("nlarr", "↚"),
        _Utils_Tuple2("nlArr", "⇍"),
        _Utils_Tuple2("nldr", "‥"),
        _Utils_Tuple2("nlE", "≦̸"),
        _Utils_Tuple2("nle", "≰"),
        _Utils_Tuple2("nleftarrow", "↚"),
        _Utils_Tuple2("nLeftarrow", "⇍"),
        _Utils_Tuple2("nleftrightarrow", "↮"),
        _Utils_Tuple2("nLeftrightarrow", "⇎"),
        _Utils_Tuple2("nleq", "≰"),
        _Utils_Tuple2("nleqq", "≦̸"),
        _Utils_Tuple2("nleqslant", "⩽̸"),
        _Utils_Tuple2("nles", "⩽̸"),
        _Utils_Tuple2("nless", "≮"),
        _Utils_Tuple2("nLl", "⋘̸"),
        _Utils_Tuple2("nlsim", "≴"),
        _Utils_Tuple2("nLt", "≪⃒"),
        _Utils_Tuple2("nlt", "≮"),
        _Utils_Tuple2("nltri", "⋪"),
        _Utils_Tuple2("nltrie", "⋬"),
        _Utils_Tuple2("nLtv", "≪̸"),
        _Utils_Tuple2("nmid", "∤"),
        _Utils_Tuple2("NoBreak", "⁠"),
        _Utils_Tuple2("NonBreakingSpace", "\xa0"),
        _Utils_Tuple2("nopf", "\uD835\uDD5F"),
        _Utils_Tuple2("Nopf", "ℕ"),
        _Utils_Tuple2("Not", "⫬"),
        _Utils_Tuple2("not", "\xac"),
        _Utils_Tuple2("NotCongruent", "≢"),
        _Utils_Tuple2("NotCupCap", "≭"),
        _Utils_Tuple2("NotDoubleVerticalBar", "∦"),
        _Utils_Tuple2("NotElement", "∉"),
        _Utils_Tuple2("NotEqual", "≠"),
        _Utils_Tuple2("NotEqualTilde", "≂̸"),
        _Utils_Tuple2("NotExists", "∄"),
        _Utils_Tuple2("NotGreater", "≯"),
        _Utils_Tuple2("NotGreaterEqual", "≱"),
        _Utils_Tuple2("NotGreaterFullEqual", "≧̸"),
        _Utils_Tuple2("NotGreaterGreater", "≫̸"),
        _Utils_Tuple2("NotGreaterLess", "≹"),
        _Utils_Tuple2("NotGreaterSlantEqual", "⩾̸"),
        _Utils_Tuple2("NotGreaterTilde", "≵"),
        _Utils_Tuple2("NotHumpDownHump", "≎̸"),
        _Utils_Tuple2("NotHumpEqual", "≏̸"),
        _Utils_Tuple2("notin", "∉"),
        _Utils_Tuple2("notindot", "⋵̸"),
        _Utils_Tuple2("notinE", "⋹̸"),
        _Utils_Tuple2("notinva", "∉"),
        _Utils_Tuple2("notinvb", "⋷"),
        _Utils_Tuple2("notinvc", "⋶"),
        _Utils_Tuple2("NotLeftTriangleBar", "⧏̸"),
        _Utils_Tuple2("NotLeftTriangle", "⋪"),
        _Utils_Tuple2("NotLeftTriangleEqual", "⋬"),
        _Utils_Tuple2("NotLess", "≮"),
        _Utils_Tuple2("NotLessEqual", "≰"),
        _Utils_Tuple2("NotLessGreater", "≸"),
        _Utils_Tuple2("NotLessLess", "≪̸"),
        _Utils_Tuple2("NotLessSlantEqual", "⩽̸"),
        _Utils_Tuple2("NotLessTilde", "≴"),
        _Utils_Tuple2("NotNestedGreaterGreater", "⪢̸"),
        _Utils_Tuple2("NotNestedLessLess", "⪡̸"),
        _Utils_Tuple2("notni", "∌"),
        _Utils_Tuple2("notniva", "∌"),
        _Utils_Tuple2("notnivb", "⋾"),
        _Utils_Tuple2("notnivc", "⋽"),
        _Utils_Tuple2("NotPrecedes", "⊀"),
        _Utils_Tuple2("NotPrecedesEqual", "⪯̸"),
        _Utils_Tuple2("NotPrecedesSlantEqual", "⋠"),
        _Utils_Tuple2("NotReverseElement", "∌"),
        _Utils_Tuple2("NotRightTriangleBar", "⧐̸"),
        _Utils_Tuple2("NotRightTriangle", "⋫"),
        _Utils_Tuple2("NotRightTriangleEqual", "⋭"),
        _Utils_Tuple2("NotSquareSubset", "⊏̸"),
        _Utils_Tuple2("NotSquareSubsetEqual", "⋢"),
        _Utils_Tuple2("NotSquareSuperset", "⊐̸"),
        _Utils_Tuple2("NotSquareSupersetEqual", "⋣"),
        _Utils_Tuple2("NotSubset", "⊂⃒"),
        _Utils_Tuple2("NotSubsetEqual", "⊈"),
        _Utils_Tuple2("NotSucceeds", "⊁"),
        _Utils_Tuple2("NotSucceedsEqual", "⪰̸"),
        _Utils_Tuple2("NotSucceedsSlantEqual", "⋡"),
        _Utils_Tuple2("NotSucceedsTilde", "≿̸"),
        _Utils_Tuple2("NotSuperset", "⊃⃒"),
        _Utils_Tuple2("NotSupersetEqual", "⊉"),
        _Utils_Tuple2("NotTilde", "≁"),
        _Utils_Tuple2("NotTildeEqual", "≄"),
        _Utils_Tuple2("NotTildeFullEqual", "≇"),
        _Utils_Tuple2("NotTildeTilde", "≉"),
        _Utils_Tuple2("NotVerticalBar", "∤"),
        _Utils_Tuple2("nparallel", "∦"),
        _Utils_Tuple2("npar", "∦"),
        _Utils_Tuple2("nparsl", "⫽⃥"),
        _Utils_Tuple2("npart", "∂̸"),
        _Utils_Tuple2("npolint", "⨔"),
        _Utils_Tuple2("npr", "⊀"),
        _Utils_Tuple2("nprcue", "⋠"),
        _Utils_Tuple2("nprec", "⊀"),
        _Utils_Tuple2("npreceq", "⪯̸"),
        _Utils_Tuple2("npre", "⪯̸"),
        _Utils_Tuple2("nrarrc", "⤳̸"),
        _Utils_Tuple2("nrarr", "↛"),
        _Utils_Tuple2("nrArr", "⇏"),
        _Utils_Tuple2("nrarrw", "↝̸"),
        _Utils_Tuple2("nrightarrow", "↛"),
        _Utils_Tuple2("nRightarrow", "⇏"),
        _Utils_Tuple2("nrtri", "⋫"),
        _Utils_Tuple2("nrtrie", "⋭"),
        _Utils_Tuple2("nsc", "⊁"),
        _Utils_Tuple2("nsccue", "⋡"),
        _Utils_Tuple2("nsce", "⪰̸"),
        _Utils_Tuple2("Nscr", "\uD835\uDCA9"),
        _Utils_Tuple2("nscr", "\uD835\uDCC3"),
        _Utils_Tuple2("nshortmid", "∤"),
        _Utils_Tuple2("nshortparallel", "∦"),
        _Utils_Tuple2("nsim", "≁"),
        _Utils_Tuple2("nsime", "≄"),
        _Utils_Tuple2("nsimeq", "≄"),
        _Utils_Tuple2("nsmid", "∤"),
        _Utils_Tuple2("nspar", "∦"),
        _Utils_Tuple2("nsqsube", "⋢"),
        _Utils_Tuple2("nsqsupe", "⋣"),
        _Utils_Tuple2("nsub", "⊄"),
        _Utils_Tuple2("nsubE", "⫅̸"),
        _Utils_Tuple2("nsube", "⊈"),
        _Utils_Tuple2("nsubset", "⊂⃒"),
        _Utils_Tuple2("nsubseteq", "⊈"),
        _Utils_Tuple2("nsubseteqq", "⫅̸"),
        _Utils_Tuple2("nsucc", "⊁"),
        _Utils_Tuple2("nsucceq", "⪰̸"),
        _Utils_Tuple2("nsup", "⊅"),
        _Utils_Tuple2("nsupE", "⫆̸"),
        _Utils_Tuple2("nsupe", "⊉"),
        _Utils_Tuple2("nsupset", "⊃⃒"),
        _Utils_Tuple2("nsupseteq", "⊉"),
        _Utils_Tuple2("nsupseteqq", "⫆̸"),
        _Utils_Tuple2("ntgl", "≹"),
        _Utils_Tuple2("Ntilde", "\xd1"),
        _Utils_Tuple2("ntilde", "\xf1"),
        _Utils_Tuple2("ntlg", "≸"),
        _Utils_Tuple2("ntriangleleft", "⋪"),
        _Utils_Tuple2("ntrianglelefteq", "⋬"),
        _Utils_Tuple2("ntriangleright", "⋫"),
        _Utils_Tuple2("ntrianglerighteq", "⋭"),
        _Utils_Tuple2("Nu", "Ν"),
        _Utils_Tuple2("nu", "ν"),
        _Utils_Tuple2("num", "#"),
        _Utils_Tuple2("numero", "№"),
        _Utils_Tuple2("numsp", " "),
        _Utils_Tuple2("nvap", "≍⃒"),
        _Utils_Tuple2("nvdash", "⊬"),
        _Utils_Tuple2("nvDash", "⊭"),
        _Utils_Tuple2("nVdash", "⊮"),
        _Utils_Tuple2("nVDash", "⊯"),
        _Utils_Tuple2("nvge", "≥⃒"),
        _Utils_Tuple2("nvgt", ">⃒"),
        _Utils_Tuple2("nvHarr", "⤄"),
        _Utils_Tuple2("nvinfin", "⧞"),
        _Utils_Tuple2("nvlArr", "⤂"),
        _Utils_Tuple2("nvle", "≤⃒"),
        _Utils_Tuple2("nvlt", "<⃒"),
        _Utils_Tuple2("nvltrie", "⊴⃒"),
        _Utils_Tuple2("nvrArr", "⤃"),
        _Utils_Tuple2("nvrtrie", "⊵⃒"),
        _Utils_Tuple2("nvsim", "∼⃒"),
        _Utils_Tuple2("nwarhk", "⤣"),
        _Utils_Tuple2("nwarr", "↖"),
        _Utils_Tuple2("nwArr", "⇖"),
        _Utils_Tuple2("nwarrow", "↖"),
        _Utils_Tuple2("nwnear", "⤧"),
        _Utils_Tuple2("Oacute", "\xd3"),
        _Utils_Tuple2("oacute", "\xf3"),
        _Utils_Tuple2("oast", "⊛"),
        _Utils_Tuple2("Ocirc", "\xd4"),
        _Utils_Tuple2("ocirc", "\xf4"),
        _Utils_Tuple2("ocir", "⊚"),
        _Utils_Tuple2("Ocy", "О"),
        _Utils_Tuple2("ocy", "о"),
        _Utils_Tuple2("odash", "⊝"),
        _Utils_Tuple2("Odblac", "Ő"),
        _Utils_Tuple2("odblac", "ő"),
        _Utils_Tuple2("odiv", "⨸"),
        _Utils_Tuple2("odot", "⊙"),
        _Utils_Tuple2("odsold", "⦼"),
        _Utils_Tuple2("OElig", "Œ"),
        _Utils_Tuple2("oelig", "œ"),
        _Utils_Tuple2("ofcir", "⦿"),
        _Utils_Tuple2("Ofr", "\uD835\uDD12"),
        _Utils_Tuple2("ofr", "\uD835\uDD2C"),
        _Utils_Tuple2("ogon", "˛"),
        _Utils_Tuple2("Ograve", "\xd2"),
        _Utils_Tuple2("ograve", "\xf2"),
        _Utils_Tuple2("ogt", "⧁"),
        _Utils_Tuple2("ohbar", "⦵"),
        _Utils_Tuple2("ohm", "Ω"),
        _Utils_Tuple2("oint", "∮"),
        _Utils_Tuple2("olarr", "↺"),
        _Utils_Tuple2("olcir", "⦾"),
        _Utils_Tuple2("olcross", "⦻"),
        _Utils_Tuple2("oline", "‾"),
        _Utils_Tuple2("olt", "⧀"),
        _Utils_Tuple2("Omacr", "Ō"),
        _Utils_Tuple2("omacr", "ō"),
        _Utils_Tuple2("Omega", "Ω"),
        _Utils_Tuple2("omega", "ω"),
        _Utils_Tuple2("Omicron", "Ο"),
        _Utils_Tuple2("omicron", "ο"),
        _Utils_Tuple2("omid", "⦶"),
        _Utils_Tuple2("ominus", "⊖"),
        _Utils_Tuple2("Oopf", "\uD835\uDD46"),
        _Utils_Tuple2("oopf", "\uD835\uDD60"),
        _Utils_Tuple2("opar", "⦷"),
        _Utils_Tuple2("OpenCurlyDoubleQuote", "“"),
        _Utils_Tuple2("OpenCurlyQuote", "‘"),
        _Utils_Tuple2("operp", "⦹"),
        _Utils_Tuple2("oplus", "⊕"),
        _Utils_Tuple2("orarr", "↻"),
        _Utils_Tuple2("Or", "⩔"),
        _Utils_Tuple2("or", "∨"),
        _Utils_Tuple2("ord", "⩝"),
        _Utils_Tuple2("order", "ℴ"),
        _Utils_Tuple2("orderof", "ℴ"),
        _Utils_Tuple2("ordf", "\xaa"),
        _Utils_Tuple2("ordm", "\xba"),
        _Utils_Tuple2("origof", "⊶"),
        _Utils_Tuple2("oror", "⩖"),
        _Utils_Tuple2("orslope", "⩗"),
        _Utils_Tuple2("orv", "⩛"),
        _Utils_Tuple2("oS", "Ⓢ"),
        _Utils_Tuple2("Oscr", "\uD835\uDCAA"),
        _Utils_Tuple2("oscr", "ℴ"),
        _Utils_Tuple2("Oslash", "\xd8"),
        _Utils_Tuple2("oslash", "\xf8"),
        _Utils_Tuple2("osol", "⊘"),
        _Utils_Tuple2("Otilde", "\xd5"),
        _Utils_Tuple2("otilde", "\xf5"),
        _Utils_Tuple2("otimesas", "⨶"),
        _Utils_Tuple2("Otimes", "⨷"),
        _Utils_Tuple2("otimes", "⊗"),
        _Utils_Tuple2("Ouml", "\xd6"),
        _Utils_Tuple2("ouml", "\xf6"),
        _Utils_Tuple2("ovbar", "⌽"),
        _Utils_Tuple2("OverBar", "‾"),
        _Utils_Tuple2("OverBrace", "⏞"),
        _Utils_Tuple2("OverBracket", "⎴"),
        _Utils_Tuple2("OverParenthesis", "⏜"),
        _Utils_Tuple2("para", "\xb6"),
        _Utils_Tuple2("parallel", "∥"),
        _Utils_Tuple2("par", "∥"),
        _Utils_Tuple2("parsim", "⫳"),
        _Utils_Tuple2("parsl", "⫽"),
        _Utils_Tuple2("part", "∂"),
        _Utils_Tuple2("PartialD", "∂"),
        _Utils_Tuple2("Pcy", "П"),
        _Utils_Tuple2("pcy", "п"),
        _Utils_Tuple2("percnt", "%"),
        _Utils_Tuple2("period", "."),
        _Utils_Tuple2("permil", "‰"),
        _Utils_Tuple2("perp", "⊥"),
        _Utils_Tuple2("pertenk", "‱"),
        _Utils_Tuple2("Pfr", "\uD835\uDD13"),
        _Utils_Tuple2("pfr", "\uD835\uDD2D"),
        _Utils_Tuple2("Phi", "Φ"),
        _Utils_Tuple2("phi", "φ"),
        _Utils_Tuple2("phiv", "ϕ"),
        _Utils_Tuple2("phmmat", "ℳ"),
        _Utils_Tuple2("phone", "☎"),
        _Utils_Tuple2("Pi", "Π"),
        _Utils_Tuple2("pi", "π"),
        _Utils_Tuple2("pitchfork", "⋔"),
        _Utils_Tuple2("piv", "ϖ"),
        _Utils_Tuple2("planck", "ℏ"),
        _Utils_Tuple2("planckh", "ℎ"),
        _Utils_Tuple2("plankv", "ℏ"),
        _Utils_Tuple2("plusacir", "⨣"),
        _Utils_Tuple2("plusb", "⊞"),
        _Utils_Tuple2("pluscir", "⨢"),
        _Utils_Tuple2("plus", "+"),
        _Utils_Tuple2("plusdo", "∔"),
        _Utils_Tuple2("plusdu", "⨥"),
        _Utils_Tuple2("pluse", "⩲"),
        _Utils_Tuple2("PlusMinus", "\xb1"),
        _Utils_Tuple2("plusmn", "\xb1"),
        _Utils_Tuple2("plussim", "⨦"),
        _Utils_Tuple2("plustwo", "⨧"),
        _Utils_Tuple2("pm", "\xb1"),
        _Utils_Tuple2("Poincareplane", "ℌ"),
        _Utils_Tuple2("pointint", "⨕"),
        _Utils_Tuple2("popf", "\uD835\uDD61"),
        _Utils_Tuple2("Popf", "ℙ"),
        _Utils_Tuple2("pound", "\xa3"),
        _Utils_Tuple2("prap", "⪷"),
        _Utils_Tuple2("Pr", "⪻"),
        _Utils_Tuple2("pr", "≺"),
        _Utils_Tuple2("prcue", "≼"),
        _Utils_Tuple2("precapprox", "⪷"),
        _Utils_Tuple2("prec", "≺"),
        _Utils_Tuple2("preccurlyeq", "≼"),
        _Utils_Tuple2("Precedes", "≺"),
        _Utils_Tuple2("PrecedesEqual", "⪯"),
        _Utils_Tuple2("PrecedesSlantEqual", "≼"),
        _Utils_Tuple2("PrecedesTilde", "≾"),
        _Utils_Tuple2("preceq", "⪯"),
        _Utils_Tuple2("precnapprox", "⪹"),
        _Utils_Tuple2("precneqq", "⪵"),
        _Utils_Tuple2("precnsim", "⋨"),
        _Utils_Tuple2("pre", "⪯"),
        _Utils_Tuple2("prE", "⪳"),
        _Utils_Tuple2("precsim", "≾"),
        _Utils_Tuple2("prime", "′"),
        _Utils_Tuple2("Prime", "″"),
        _Utils_Tuple2("primes", "ℙ"),
        _Utils_Tuple2("prnap", "⪹"),
        _Utils_Tuple2("prnE", "⪵"),
        _Utils_Tuple2("prnsim", "⋨"),
        _Utils_Tuple2("prod", "∏"),
        _Utils_Tuple2("Product", "∏"),
        _Utils_Tuple2("profalar", "⌮"),
        _Utils_Tuple2("profline", "⌒"),
        _Utils_Tuple2("profsurf", "⌓"),
        _Utils_Tuple2("prop", "∝"),
        _Utils_Tuple2("Proportional", "∝"),
        _Utils_Tuple2("Proportion", "∷"),
        _Utils_Tuple2("propto", "∝"),
        _Utils_Tuple2("prsim", "≾"),
        _Utils_Tuple2("prurel", "⊰"),
        _Utils_Tuple2("Pscr", "\uD835\uDCAB"),
        _Utils_Tuple2("pscr", "\uD835\uDCC5"),
        _Utils_Tuple2("Psi", "Ψ"),
        _Utils_Tuple2("psi", "ψ"),
        _Utils_Tuple2("puncsp", " "),
        _Utils_Tuple2("Qfr", "\uD835\uDD14"),
        _Utils_Tuple2("qfr", "\uD835\uDD2E"),
        _Utils_Tuple2("qint", "⨌"),
        _Utils_Tuple2("qopf", "\uD835\uDD62"),
        _Utils_Tuple2("Qopf", "ℚ"),
        _Utils_Tuple2("qprime", "⁗"),
        _Utils_Tuple2("Qscr", "\uD835\uDCAC"),
        _Utils_Tuple2("qscr", "\uD835\uDCC6"),
        _Utils_Tuple2("quaternions", "ℍ"),
        _Utils_Tuple2("quatint", "⨖"),
        _Utils_Tuple2("quest", "?"),
        _Utils_Tuple2("questeq", "≟"),
        _Utils_Tuple2("quot", '"'),
        _Utils_Tuple2("QUOT", '"'),
        _Utils_Tuple2("rAarr", "⇛"),
        _Utils_Tuple2("race", "∽̱"),
        _Utils_Tuple2("Racute", "Ŕ"),
        _Utils_Tuple2("racute", "ŕ"),
        _Utils_Tuple2("radic", "√"),
        _Utils_Tuple2("raemptyv", "⦳"),
        _Utils_Tuple2("rang", "⟩"),
        _Utils_Tuple2("Rang", "⟫"),
        _Utils_Tuple2("rangd", "⦒"),
        _Utils_Tuple2("range", "⦥"),
        _Utils_Tuple2("rangle", "⟩"),
        _Utils_Tuple2("raquo", "\xbb"),
        _Utils_Tuple2("rarrap", "⥵"),
        _Utils_Tuple2("rarrb", "⇥"),
        _Utils_Tuple2("rarrbfs", "⤠"),
        _Utils_Tuple2("rarrc", "⤳"),
        _Utils_Tuple2("rarr", "→"),
        _Utils_Tuple2("Rarr", "↠"),
        _Utils_Tuple2("rArr", "⇒"),
        _Utils_Tuple2("rarrfs", "⤞"),
        _Utils_Tuple2("rarrhk", "↪"),
        _Utils_Tuple2("rarrlp", "↬"),
        _Utils_Tuple2("rarrpl", "⥅"),
        _Utils_Tuple2("rarrsim", "⥴"),
        _Utils_Tuple2("Rarrtl", "⤖"),
        _Utils_Tuple2("rarrtl", "↣"),
        _Utils_Tuple2("rarrw", "↝"),
        _Utils_Tuple2("ratail", "⤚"),
        _Utils_Tuple2("rAtail", "⤜"),
        _Utils_Tuple2("ratio", "∶"),
        _Utils_Tuple2("rationals", "ℚ"),
        _Utils_Tuple2("rbarr", "⤍"),
        _Utils_Tuple2("rBarr", "⤏"),
        _Utils_Tuple2("RBarr", "⤐"),
        _Utils_Tuple2("rbbrk", "❳"),
        _Utils_Tuple2("rbrace", "}"),
        _Utils_Tuple2("rbrack", "]"),
        _Utils_Tuple2("rbrke", "⦌"),
        _Utils_Tuple2("rbrksld", "⦎"),
        _Utils_Tuple2("rbrkslu", "⦐"),
        _Utils_Tuple2("Rcaron", "Ř"),
        _Utils_Tuple2("rcaron", "ř"),
        _Utils_Tuple2("Rcedil", "Ŗ"),
        _Utils_Tuple2("rcedil", "ŗ"),
        _Utils_Tuple2("rceil", "⌉"),
        _Utils_Tuple2("rcub", "}"),
        _Utils_Tuple2("Rcy", "Р"),
        _Utils_Tuple2("rcy", "р"),
        _Utils_Tuple2("rdca", "⤷"),
        _Utils_Tuple2("rdldhar", "⥩"),
        _Utils_Tuple2("rdquo", "”"),
        _Utils_Tuple2("rdquor", "”"),
        _Utils_Tuple2("rdsh", "↳"),
        _Utils_Tuple2("real", "ℜ"),
        _Utils_Tuple2("realine", "ℛ"),
        _Utils_Tuple2("realpart", "ℜ"),
        _Utils_Tuple2("reals", "ℝ"),
        _Utils_Tuple2("Re", "ℜ"),
        _Utils_Tuple2("rect", "▭"),
        _Utils_Tuple2("reg", "\xae"),
        _Utils_Tuple2("REG", "\xae"),
        _Utils_Tuple2("ReverseElement", "∋"),
        _Utils_Tuple2("ReverseEquilibrium", "⇋"),
        _Utils_Tuple2("ReverseUpEquilibrium", "⥯"),
        _Utils_Tuple2("rfisht", "⥽"),
        _Utils_Tuple2("rfloor", "⌋"),
        _Utils_Tuple2("rfr", "\uD835\uDD2F"),
        _Utils_Tuple2("Rfr", "ℜ"),
        _Utils_Tuple2("rHar", "⥤"),
        _Utils_Tuple2("rhard", "⇁"),
        _Utils_Tuple2("rharu", "⇀"),
        _Utils_Tuple2("rharul", "⥬"),
        _Utils_Tuple2("Rho", "Ρ"),
        _Utils_Tuple2("rho", "ρ"),
        _Utils_Tuple2("rhov", "ϱ"),
        _Utils_Tuple2("RightAngleBracket", "⟩"),
        _Utils_Tuple2("RightArrowBar", "⇥"),
        _Utils_Tuple2("rightarrow", "→"),
        _Utils_Tuple2("RightArrow", "→"),
        _Utils_Tuple2("Rightarrow", "⇒"),
        _Utils_Tuple2("RightArrowLeftArrow", "⇄"),
        _Utils_Tuple2("rightarrowtail", "↣"),
        _Utils_Tuple2("RightCeiling", "⌉"),
        _Utils_Tuple2("RightDoubleBracket", "⟧"),
        _Utils_Tuple2("RightDownTeeVector", "⥝"),
        _Utils_Tuple2("RightDownVectorBar", "⥕"),
        _Utils_Tuple2("RightDownVector", "⇂"),
        _Utils_Tuple2("RightFloor", "⌋"),
        _Utils_Tuple2("rightharpoondown", "⇁"),
        _Utils_Tuple2("rightharpoonup", "⇀"),
        _Utils_Tuple2("rightleftarrows", "⇄"),
        _Utils_Tuple2("rightleftharpoons", "⇌"),
        _Utils_Tuple2("rightrightarrows", "⇉"),
        _Utils_Tuple2("rightsquigarrow", "↝"),
        _Utils_Tuple2("RightTeeArrow", "↦"),
        _Utils_Tuple2("RightTee", "⊢"),
        _Utils_Tuple2("RightTeeVector", "⥛"),
        _Utils_Tuple2("rightthreetimes", "⋌"),
        _Utils_Tuple2("RightTriangleBar", "⧐"),
        _Utils_Tuple2("RightTriangle", "⊳"),
        _Utils_Tuple2("RightTriangleEqual", "⊵"),
        _Utils_Tuple2("RightUpDownVector", "⥏"),
        _Utils_Tuple2("RightUpTeeVector", "⥜"),
        _Utils_Tuple2("RightUpVectorBar", "⥔"),
        _Utils_Tuple2("RightUpVector", "↾"),
        _Utils_Tuple2("RightVectorBar", "⥓"),
        _Utils_Tuple2("RightVector", "⇀"),
        _Utils_Tuple2("ring", "˚"),
        _Utils_Tuple2("risingdotseq", "≓"),
        _Utils_Tuple2("rlarr", "⇄"),
        _Utils_Tuple2("rlhar", "⇌"),
        _Utils_Tuple2("rlm", "‏"),
        _Utils_Tuple2("rmoustache", "⎱"),
        _Utils_Tuple2("rmoust", "⎱"),
        _Utils_Tuple2("rnmid", "⫮"),
        _Utils_Tuple2("roang", "⟭"),
        _Utils_Tuple2("roarr", "⇾"),
        _Utils_Tuple2("robrk", "⟧"),
        _Utils_Tuple2("ropar", "⦆"),
        _Utils_Tuple2("ropf", "\uD835\uDD63"),
        _Utils_Tuple2("Ropf", "ℝ"),
        _Utils_Tuple2("roplus", "⨮"),
        _Utils_Tuple2("rotimes", "⨵"),
        _Utils_Tuple2("RoundImplies", "⥰"),
        _Utils_Tuple2("rpar", ")"),
        _Utils_Tuple2("rpargt", "⦔"),
        _Utils_Tuple2("rppolint", "⨒"),
        _Utils_Tuple2("rrarr", "⇉"),
        _Utils_Tuple2("Rrightarrow", "⇛"),
        _Utils_Tuple2("rsaquo", "›"),
        _Utils_Tuple2("rscr", "\uD835\uDCC7"),
        _Utils_Tuple2("Rscr", "ℛ"),
        _Utils_Tuple2("rsh", "↱"),
        _Utils_Tuple2("Rsh", "↱"),
        _Utils_Tuple2("rsqb", "]"),
        _Utils_Tuple2("rsquo", "’"),
        _Utils_Tuple2("rsquor", "’"),
        _Utils_Tuple2("rthree", "⋌"),
        _Utils_Tuple2("rtimes", "⋊"),
        _Utils_Tuple2("rtri", "▹"),
        _Utils_Tuple2("rtrie", "⊵"),
        _Utils_Tuple2("rtrif", "▸"),
        _Utils_Tuple2("rtriltri", "⧎"),
        _Utils_Tuple2("RuleDelayed", "⧴"),
        _Utils_Tuple2("ruluhar", "⥨"),
        _Utils_Tuple2("rx", "℞"),
        _Utils_Tuple2("Sacute", "Ś"),
        _Utils_Tuple2("sacute", "ś"),
        _Utils_Tuple2("sbquo", "‚"),
        _Utils_Tuple2("scap", "⪸"),
        _Utils_Tuple2("Scaron", "Š"),
        _Utils_Tuple2("scaron", "š"),
        _Utils_Tuple2("Sc", "⪼"),
        _Utils_Tuple2("sc", "≻"),
        _Utils_Tuple2("sccue", "≽"),
        _Utils_Tuple2("sce", "⪰"),
        _Utils_Tuple2("scE", "⪴"),
        _Utils_Tuple2("Scedil", "Ş"),
        _Utils_Tuple2("scedil", "ş"),
        _Utils_Tuple2("Scirc", "Ŝ"),
        _Utils_Tuple2("scirc", "ŝ"),
        _Utils_Tuple2("scnap", "⪺"),
        _Utils_Tuple2("scnE", "⪶"),
        _Utils_Tuple2("scnsim", "⋩"),
        _Utils_Tuple2("scpolint", "⨓"),
        _Utils_Tuple2("scsim", "≿"),
        _Utils_Tuple2("Scy", "С"),
        _Utils_Tuple2("scy", "с"),
        _Utils_Tuple2("sdotb", "⊡"),
        _Utils_Tuple2("sdot", "⋅"),
        _Utils_Tuple2("sdote", "⩦"),
        _Utils_Tuple2("searhk", "⤥"),
        _Utils_Tuple2("searr", "↘"),
        _Utils_Tuple2("seArr", "⇘"),
        _Utils_Tuple2("searrow", "↘"),
        _Utils_Tuple2("sect", "\xa7"),
        _Utils_Tuple2("semi", ";"),
        _Utils_Tuple2("seswar", "⤩"),
        _Utils_Tuple2("setminus", "∖"),
        _Utils_Tuple2("setmn", "∖"),
        _Utils_Tuple2("sext", "✶"),
        _Utils_Tuple2("Sfr", "\uD835\uDD16"),
        _Utils_Tuple2("sfr", "\uD835\uDD30"),
        _Utils_Tuple2("sfrown", "⌢"),
        _Utils_Tuple2("sharp", "♯"),
        _Utils_Tuple2("SHCHcy", "Щ"),
        _Utils_Tuple2("shchcy", "щ"),
        _Utils_Tuple2("SHcy", "Ш"),
        _Utils_Tuple2("shcy", "ш"),
        _Utils_Tuple2("ShortDownArrow", "↓"),
        _Utils_Tuple2("ShortLeftArrow", "←"),
        _Utils_Tuple2("shortmid", "∣"),
        _Utils_Tuple2("shortparallel", "∥"),
        _Utils_Tuple2("ShortRightArrow", "→"),
        _Utils_Tuple2("ShortUpArrow", "↑"),
        _Utils_Tuple2("shy", "\xad"),
        _Utils_Tuple2("Sigma", "Σ"),
        _Utils_Tuple2("sigma", "σ"),
        _Utils_Tuple2("sigmaf", "ς"),
        _Utils_Tuple2("sigmav", "ς"),
        _Utils_Tuple2("sim", "∼"),
        _Utils_Tuple2("simdot", "⩪"),
        _Utils_Tuple2("sime", "≃"),
        _Utils_Tuple2("simeq", "≃"),
        _Utils_Tuple2("simg", "⪞"),
        _Utils_Tuple2("simgE", "⪠"),
        _Utils_Tuple2("siml", "⪝"),
        _Utils_Tuple2("simlE", "⪟"),
        _Utils_Tuple2("simne", "≆"),
        _Utils_Tuple2("simplus", "⨤"),
        _Utils_Tuple2("simrarr", "⥲"),
        _Utils_Tuple2("slarr", "←"),
        _Utils_Tuple2("SmallCircle", "∘"),
        _Utils_Tuple2("smallsetminus", "∖"),
        _Utils_Tuple2("smashp", "⨳"),
        _Utils_Tuple2("smeparsl", "⧤"),
        _Utils_Tuple2("smid", "∣"),
        _Utils_Tuple2("smile", "⌣"),
        _Utils_Tuple2("smt", "⪪"),
        _Utils_Tuple2("smte", "⪬"),
        _Utils_Tuple2("smtes", "⪬︀"),
        _Utils_Tuple2("SOFTcy", "Ь"),
        _Utils_Tuple2("softcy", "ь"),
        _Utils_Tuple2("solbar", "⌿"),
        _Utils_Tuple2("solb", "⧄"),
        _Utils_Tuple2("sol", "/"),
        _Utils_Tuple2("Sopf", "\uD835\uDD4A"),
        _Utils_Tuple2("sopf", "\uD835\uDD64"),
        _Utils_Tuple2("spades", "♠"),
        _Utils_Tuple2("spadesuit", "♠"),
        _Utils_Tuple2("spar", "∥"),
        _Utils_Tuple2("sqcap", "⊓"),
        _Utils_Tuple2("sqcaps", "⊓︀"),
        _Utils_Tuple2("sqcup", "⊔"),
        _Utils_Tuple2("sqcups", "⊔︀"),
        _Utils_Tuple2("Sqrt", "√"),
        _Utils_Tuple2("sqsub", "⊏"),
        _Utils_Tuple2("sqsube", "⊑"),
        _Utils_Tuple2("sqsubset", "⊏"),
        _Utils_Tuple2("sqsubseteq", "⊑"),
        _Utils_Tuple2("sqsup", "⊐"),
        _Utils_Tuple2("sqsupe", "⊒"),
        _Utils_Tuple2("sqsupset", "⊐"),
        _Utils_Tuple2("sqsupseteq", "⊒"),
        _Utils_Tuple2("square", "□"),
        _Utils_Tuple2("Square", "□"),
        _Utils_Tuple2("SquareIntersection", "⊓"),
        _Utils_Tuple2("SquareSubset", "⊏"),
        _Utils_Tuple2("SquareSubsetEqual", "⊑"),
        _Utils_Tuple2("SquareSuperset", "⊐"),
        _Utils_Tuple2("SquareSupersetEqual", "⊒"),
        _Utils_Tuple2("SquareUnion", "⊔"),
        _Utils_Tuple2("squarf", "▪"),
        _Utils_Tuple2("squ", "□"),
        _Utils_Tuple2("squf", "▪"),
        _Utils_Tuple2("srarr", "→"),
        _Utils_Tuple2("Sscr", "\uD835\uDCAE"),
        _Utils_Tuple2("sscr", "\uD835\uDCC8"),
        _Utils_Tuple2("ssetmn", "∖"),
        _Utils_Tuple2("ssmile", "⌣"),
        _Utils_Tuple2("sstarf", "⋆"),
        _Utils_Tuple2("Star", "⋆"),
        _Utils_Tuple2("star", "☆"),
        _Utils_Tuple2("starf", "★"),
        _Utils_Tuple2("straightepsilon", "ϵ"),
        _Utils_Tuple2("straightphi", "ϕ"),
        _Utils_Tuple2("strns", "\xaf"),
        _Utils_Tuple2("sub", "⊂"),
        _Utils_Tuple2("Sub", "⋐"),
        _Utils_Tuple2("subdot", "⪽"),
        _Utils_Tuple2("subE", "⫅"),
        _Utils_Tuple2("sube", "⊆"),
        _Utils_Tuple2("subedot", "⫃"),
        _Utils_Tuple2("submult", "⫁"),
        _Utils_Tuple2("subnE", "⫋"),
        _Utils_Tuple2("subne", "⊊"),
        _Utils_Tuple2("subplus", "⪿"),
        _Utils_Tuple2("subrarr", "⥹"),
        _Utils_Tuple2("subset", "⊂"),
        _Utils_Tuple2("Subset", "⋐"),
        _Utils_Tuple2("subseteq", "⊆"),
        _Utils_Tuple2("subseteqq", "⫅"),
        _Utils_Tuple2("SubsetEqual", "⊆"),
        _Utils_Tuple2("subsetneq", "⊊"),
        _Utils_Tuple2("subsetneqq", "⫋"),
        _Utils_Tuple2("subsim", "⫇"),
        _Utils_Tuple2("subsub", "⫕"),
        _Utils_Tuple2("subsup", "⫓"),
        _Utils_Tuple2("succapprox", "⪸"),
        _Utils_Tuple2("succ", "≻"),
        _Utils_Tuple2("succcurlyeq", "≽"),
        _Utils_Tuple2("Succeeds", "≻"),
        _Utils_Tuple2("SucceedsEqual", "⪰"),
        _Utils_Tuple2("SucceedsSlantEqual", "≽"),
        _Utils_Tuple2("SucceedsTilde", "≿"),
        _Utils_Tuple2("succeq", "⪰"),
        _Utils_Tuple2("succnapprox", "⪺"),
        _Utils_Tuple2("succneqq", "⪶"),
        _Utils_Tuple2("succnsim", "⋩"),
        _Utils_Tuple2("succsim", "≿"),
        _Utils_Tuple2("SuchThat", "∋"),
        _Utils_Tuple2("sum", "∑"),
        _Utils_Tuple2("Sum", "∑"),
        _Utils_Tuple2("sung", "♪"),
        _Utils_Tuple2("sup1", "\xb9"),
        _Utils_Tuple2("sup2", "\xb2"),
        _Utils_Tuple2("sup3", "\xb3"),
        _Utils_Tuple2("sup", "⊃"),
        _Utils_Tuple2("Sup", "⋑"),
        _Utils_Tuple2("supdot", "⪾"),
        _Utils_Tuple2("supdsub", "⫘"),
        _Utils_Tuple2("supE", "⫆"),
        _Utils_Tuple2("supe", "⊇"),
        _Utils_Tuple2("supedot", "⫄"),
        _Utils_Tuple2("Superset", "⊃"),
        _Utils_Tuple2("SupersetEqual", "⊇"),
        _Utils_Tuple2("suphsol", "⟉"),
        _Utils_Tuple2("suphsub", "⫗"),
        _Utils_Tuple2("suplarr", "⥻"),
        _Utils_Tuple2("supmult", "⫂"),
        _Utils_Tuple2("supnE", "⫌"),
        _Utils_Tuple2("supne", "⊋"),
        _Utils_Tuple2("supplus", "⫀"),
        _Utils_Tuple2("supset", "⊃"),
        _Utils_Tuple2("Supset", "⋑"),
        _Utils_Tuple2("supseteq", "⊇"),
        _Utils_Tuple2("supseteqq", "⫆"),
        _Utils_Tuple2("supsetneq", "⊋"),
        _Utils_Tuple2("supsetneqq", "⫌"),
        _Utils_Tuple2("supsim", "⫈"),
        _Utils_Tuple2("supsub", "⫔"),
        _Utils_Tuple2("supsup", "⫖"),
        _Utils_Tuple2("swarhk", "⤦"),
        _Utils_Tuple2("swarr", "↙"),
        _Utils_Tuple2("swArr", "⇙"),
        _Utils_Tuple2("swarrow", "↙"),
        _Utils_Tuple2("swnwar", "⤪"),
        _Utils_Tuple2("szlig", "\xdf"),
        _Utils_Tuple2("Tab", "	"),
        _Utils_Tuple2("target", "⌖"),
        _Utils_Tuple2("Tau", "Τ"),
        _Utils_Tuple2("tau", "τ"),
        _Utils_Tuple2("tbrk", "⎴"),
        _Utils_Tuple2("Tcaron", "Ť"),
        _Utils_Tuple2("tcaron", "ť"),
        _Utils_Tuple2("Tcedil", "Ţ"),
        _Utils_Tuple2("tcedil", "ţ"),
        _Utils_Tuple2("Tcy", "Т"),
        _Utils_Tuple2("tcy", "т"),
        _Utils_Tuple2("tdot", "⃛"),
        _Utils_Tuple2("telrec", "⌕"),
        _Utils_Tuple2("Tfr", "\uD835\uDD17"),
        _Utils_Tuple2("tfr", "\uD835\uDD31"),
        _Utils_Tuple2("there4", "∴"),
        _Utils_Tuple2("therefore", "∴"),
        _Utils_Tuple2("Therefore", "∴"),
        _Utils_Tuple2("Theta", "Θ"),
        _Utils_Tuple2("theta", "θ"),
        _Utils_Tuple2("thetasym", "ϑ"),
        _Utils_Tuple2("thetav", "ϑ"),
        _Utils_Tuple2("thickapprox", "≈"),
        _Utils_Tuple2("thicksim", "∼"),
        _Utils_Tuple2("ThickSpace", "  "),
        _Utils_Tuple2("ThinSpace", " "),
        _Utils_Tuple2("thinsp", " "),
        _Utils_Tuple2("thkap", "≈"),
        _Utils_Tuple2("thksim", "∼"),
        _Utils_Tuple2("THORN", "\xde"),
        _Utils_Tuple2("thorn", "\xfe"),
        _Utils_Tuple2("tilde", "˜"),
        _Utils_Tuple2("Tilde", "∼"),
        _Utils_Tuple2("TildeEqual", "≃"),
        _Utils_Tuple2("TildeFullEqual", "≅"),
        _Utils_Tuple2("TildeTilde", "≈"),
        _Utils_Tuple2("timesbar", "⨱"),
        _Utils_Tuple2("timesb", "⊠"),
        _Utils_Tuple2("times", "\xd7"),
        _Utils_Tuple2("timesd", "⨰"),
        _Utils_Tuple2("tint", "∭"),
        _Utils_Tuple2("toea", "⤨"),
        _Utils_Tuple2("topbot", "⌶"),
        _Utils_Tuple2("topcir", "⫱"),
        _Utils_Tuple2("top", "⊤"),
        _Utils_Tuple2("Topf", "\uD835\uDD4B"),
        _Utils_Tuple2("topf", "\uD835\uDD65"),
        _Utils_Tuple2("topfork", "⫚"),
        _Utils_Tuple2("tosa", "⤩"),
        _Utils_Tuple2("tprime", "‴"),
        _Utils_Tuple2("trade", "™"),
        _Utils_Tuple2("TRADE", "™"),
        _Utils_Tuple2("triangle", "▵"),
        _Utils_Tuple2("triangledown", "▿"),
        _Utils_Tuple2("triangleleft", "◃"),
        _Utils_Tuple2("trianglelefteq", "⊴"),
        _Utils_Tuple2("triangleq", "≜"),
        _Utils_Tuple2("triangleright", "▹"),
        _Utils_Tuple2("trianglerighteq", "⊵"),
        _Utils_Tuple2("tridot", "◬"),
        _Utils_Tuple2("trie", "≜"),
        _Utils_Tuple2("triminus", "⨺"),
        _Utils_Tuple2("TripleDot", "⃛"),
        _Utils_Tuple2("triplus", "⨹"),
        _Utils_Tuple2("trisb", "⧍"),
        _Utils_Tuple2("tritime", "⨻"),
        _Utils_Tuple2("trpezium", "⏢"),
        _Utils_Tuple2("Tscr", "\uD835\uDCAF"),
        _Utils_Tuple2("tscr", "\uD835\uDCC9"),
        _Utils_Tuple2("TScy", "Ц"),
        _Utils_Tuple2("tscy", "ц"),
        _Utils_Tuple2("TSHcy", "Ћ"),
        _Utils_Tuple2("tshcy", "ћ"),
        _Utils_Tuple2("Tstrok", "Ŧ"),
        _Utils_Tuple2("tstrok", "ŧ"),
        _Utils_Tuple2("twixt", "≬"),
        _Utils_Tuple2("twoheadleftarrow", "↞"),
        _Utils_Tuple2("twoheadrightarrow", "↠"),
        _Utils_Tuple2("Uacute", "\xda"),
        _Utils_Tuple2("uacute", "\xfa"),
        _Utils_Tuple2("uarr", "↑"),
        _Utils_Tuple2("Uarr", "↟"),
        _Utils_Tuple2("uArr", "⇑"),
        _Utils_Tuple2("Uarrocir", "⥉"),
        _Utils_Tuple2("Ubrcy", "Ў"),
        _Utils_Tuple2("ubrcy", "ў"),
        _Utils_Tuple2("Ubreve", "Ŭ"),
        _Utils_Tuple2("ubreve", "ŭ"),
        _Utils_Tuple2("Ucirc", "\xdb"),
        _Utils_Tuple2("ucirc", "\xfb"),
        _Utils_Tuple2("Ucy", "У"),
        _Utils_Tuple2("ucy", "у"),
        _Utils_Tuple2("udarr", "⇅"),
        _Utils_Tuple2("Udblac", "Ű"),
        _Utils_Tuple2("udblac", "ű"),
        _Utils_Tuple2("udhar", "⥮"),
        _Utils_Tuple2("ufisht", "⥾"),
        _Utils_Tuple2("Ufr", "\uD835\uDD18"),
        _Utils_Tuple2("ufr", "\uD835\uDD32"),
        _Utils_Tuple2("Ugrave", "\xd9"),
        _Utils_Tuple2("ugrave", "\xf9"),
        _Utils_Tuple2("uHar", "⥣"),
        _Utils_Tuple2("uharl", "↿"),
        _Utils_Tuple2("uharr", "↾"),
        _Utils_Tuple2("uhblk", "▀"),
        _Utils_Tuple2("ulcorn", "⌜"),
        _Utils_Tuple2("ulcorner", "⌜"),
        _Utils_Tuple2("ulcrop", "⌏"),
        _Utils_Tuple2("ultri", "◸"),
        _Utils_Tuple2("Umacr", "Ū"),
        _Utils_Tuple2("umacr", "ū"),
        _Utils_Tuple2("uml", "\xa8"),
        _Utils_Tuple2("UnderBar", "_"),
        _Utils_Tuple2("UnderBrace", "⏟"),
        _Utils_Tuple2("UnderBracket", "⎵"),
        _Utils_Tuple2("UnderParenthesis", "⏝"),
        _Utils_Tuple2("Union", "⋃"),
        _Utils_Tuple2("UnionPlus", "⊎"),
        _Utils_Tuple2("Uogon", "Ų"),
        _Utils_Tuple2("uogon", "ų"),
        _Utils_Tuple2("Uopf", "\uD835\uDD4C"),
        _Utils_Tuple2("uopf", "\uD835\uDD66"),
        _Utils_Tuple2("UpArrowBar", "⤒"),
        _Utils_Tuple2("uparrow", "↑"),
        _Utils_Tuple2("UpArrow", "↑"),
        _Utils_Tuple2("Uparrow", "⇑"),
        _Utils_Tuple2("UpArrowDownArrow", "⇅"),
        _Utils_Tuple2("updownarrow", "↕"),
        _Utils_Tuple2("UpDownArrow", "↕"),
        _Utils_Tuple2("Updownarrow", "⇕"),
        _Utils_Tuple2("UpEquilibrium", "⥮"),
        _Utils_Tuple2("upharpoonleft", "↿"),
        _Utils_Tuple2("upharpoonright", "↾"),
        _Utils_Tuple2("uplus", "⊎"),
        _Utils_Tuple2("UpperLeftArrow", "↖"),
        _Utils_Tuple2("UpperRightArrow", "↗"),
        _Utils_Tuple2("upsi", "υ"),
        _Utils_Tuple2("Upsi", "ϒ"),
        _Utils_Tuple2("upsih", "ϒ"),
        _Utils_Tuple2("Upsilon", "Υ"),
        _Utils_Tuple2("upsilon", "υ"),
        _Utils_Tuple2("UpTeeArrow", "↥"),
        _Utils_Tuple2("UpTee", "⊥"),
        _Utils_Tuple2("upuparrows", "⇈"),
        _Utils_Tuple2("urcorn", "⌝"),
        _Utils_Tuple2("urcorner", "⌝"),
        _Utils_Tuple2("urcrop", "⌎"),
        _Utils_Tuple2("Uring", "Ů"),
        _Utils_Tuple2("uring", "ů"),
        _Utils_Tuple2("urtri", "◹"),
        _Utils_Tuple2("Uscr", "\uD835\uDCB0"),
        _Utils_Tuple2("uscr", "\uD835\uDCCA"),
        _Utils_Tuple2("utdot", "⋰"),
        _Utils_Tuple2("Utilde", "Ũ"),
        _Utils_Tuple2("utilde", "ũ"),
        _Utils_Tuple2("utri", "▵"),
        _Utils_Tuple2("utrif", "▴"),
        _Utils_Tuple2("uuarr", "⇈"),
        _Utils_Tuple2("Uuml", "\xdc"),
        _Utils_Tuple2("uuml", "\xfc"),
        _Utils_Tuple2("uwangle", "⦧"),
        _Utils_Tuple2("vangrt", "⦜"),
        _Utils_Tuple2("varepsilon", "ϵ"),
        _Utils_Tuple2("varkappa", "ϰ"),
        _Utils_Tuple2("varnothing", "∅"),
        _Utils_Tuple2("varphi", "ϕ"),
        _Utils_Tuple2("varpi", "ϖ"),
        _Utils_Tuple2("varpropto", "∝"),
        _Utils_Tuple2("varr", "↕"),
        _Utils_Tuple2("vArr", "⇕"),
        _Utils_Tuple2("varrho", "ϱ"),
        _Utils_Tuple2("varsigma", "ς"),
        _Utils_Tuple2("varsubsetneq", "⊊︀"),
        _Utils_Tuple2("varsubsetneqq", "⫋︀"),
        _Utils_Tuple2("varsupsetneq", "⊋︀"),
        _Utils_Tuple2("varsupsetneqq", "⫌︀"),
        _Utils_Tuple2("vartheta", "ϑ"),
        _Utils_Tuple2("vartriangleleft", "⊲"),
        _Utils_Tuple2("vartriangleright", "⊳"),
        _Utils_Tuple2("vBar", "⫨"),
        _Utils_Tuple2("Vbar", "⫫"),
        _Utils_Tuple2("vBarv", "⫩"),
        _Utils_Tuple2("Vcy", "В"),
        _Utils_Tuple2("vcy", "в"),
        _Utils_Tuple2("vdash", "⊢"),
        _Utils_Tuple2("vDash", "⊨"),
        _Utils_Tuple2("Vdash", "⊩"),
        _Utils_Tuple2("VDash", "⊫"),
        _Utils_Tuple2("Vdashl", "⫦"),
        _Utils_Tuple2("veebar", "⊻"),
        _Utils_Tuple2("vee", "∨"),
        _Utils_Tuple2("Vee", "⋁"),
        _Utils_Tuple2("veeeq", "≚"),
        _Utils_Tuple2("vellip", "⋮"),
        _Utils_Tuple2("verbar", "|"),
        _Utils_Tuple2("Verbar", "‖"),
        _Utils_Tuple2("vert", "|"),
        _Utils_Tuple2("Vert", "‖"),
        _Utils_Tuple2("VerticalBar", "∣"),
        _Utils_Tuple2("VerticalLine", "|"),
        _Utils_Tuple2("VerticalSeparator", "❘"),
        _Utils_Tuple2("VerticalTilde", "≀"),
        _Utils_Tuple2("VeryThinSpace", " "),
        _Utils_Tuple2("Vfr", "\uD835\uDD19"),
        _Utils_Tuple2("vfr", "\uD835\uDD33"),
        _Utils_Tuple2("vltri", "⊲"),
        _Utils_Tuple2("vnsub", "⊂⃒"),
        _Utils_Tuple2("vnsup", "⊃⃒"),
        _Utils_Tuple2("Vopf", "\uD835\uDD4D"),
        _Utils_Tuple2("vopf", "\uD835\uDD67"),
        _Utils_Tuple2("vprop", "∝"),
        _Utils_Tuple2("vrtri", "⊳"),
        _Utils_Tuple2("Vscr", "\uD835\uDCB1"),
        _Utils_Tuple2("vscr", "\uD835\uDCCB"),
        _Utils_Tuple2("vsubnE", "⫋︀"),
        _Utils_Tuple2("vsubne", "⊊︀"),
        _Utils_Tuple2("vsupnE", "⫌︀"),
        _Utils_Tuple2("vsupne", "⊋︀"),
        _Utils_Tuple2("Vvdash", "⊪"),
        _Utils_Tuple2("vzigzag", "⦚"),
        _Utils_Tuple2("Wcirc", "Ŵ"),
        _Utils_Tuple2("wcirc", "ŵ"),
        _Utils_Tuple2("wedbar", "⩟"),
        _Utils_Tuple2("wedge", "∧"),
        _Utils_Tuple2("Wedge", "⋀"),
        _Utils_Tuple2("wedgeq", "≙"),
        _Utils_Tuple2("weierp", "℘"),
        _Utils_Tuple2("Wfr", "\uD835\uDD1A"),
        _Utils_Tuple2("wfr", "\uD835\uDD34"),
        _Utils_Tuple2("Wopf", "\uD835\uDD4E"),
        _Utils_Tuple2("wopf", "\uD835\uDD68"),
        _Utils_Tuple2("wp", "℘"),
        _Utils_Tuple2("wr", "≀"),
        _Utils_Tuple2("wreath", "≀"),
        _Utils_Tuple2("Wscr", "\uD835\uDCB2"),
        _Utils_Tuple2("wscr", "\uD835\uDCCC"),
        _Utils_Tuple2("xcap", "⋂"),
        _Utils_Tuple2("xcirc", "◯"),
        _Utils_Tuple2("xcup", "⋃"),
        _Utils_Tuple2("xdtri", "▽"),
        _Utils_Tuple2("Xfr", "\uD835\uDD1B"),
        _Utils_Tuple2("xfr", "\uD835\uDD35"),
        _Utils_Tuple2("xharr", "⟷"),
        _Utils_Tuple2("xhArr", "⟺"),
        _Utils_Tuple2("Xi", "Ξ"),
        _Utils_Tuple2("xi", "ξ"),
        _Utils_Tuple2("xlarr", "⟵"),
        _Utils_Tuple2("xlArr", "⟸"),
        _Utils_Tuple2("xmap", "⟼"),
        _Utils_Tuple2("xnis", "⋻"),
        _Utils_Tuple2("xodot", "⨀"),
        _Utils_Tuple2("Xopf", "\uD835\uDD4F"),
        _Utils_Tuple2("xopf", "\uD835\uDD69"),
        _Utils_Tuple2("xoplus", "⨁"),
        _Utils_Tuple2("xotime", "⨂"),
        _Utils_Tuple2("xrarr", "⟶"),
        _Utils_Tuple2("xrArr", "⟹"),
        _Utils_Tuple2("Xscr", "\uD835\uDCB3"),
        _Utils_Tuple2("xscr", "\uD835\uDCCD"),
        _Utils_Tuple2("xsqcup", "⨆"),
        _Utils_Tuple2("xuplus", "⨄"),
        _Utils_Tuple2("xutri", "△"),
        _Utils_Tuple2("xvee", "⋁"),
        _Utils_Tuple2("xwedge", "⋀"),
        _Utils_Tuple2("Yacute", "\xdd"),
        _Utils_Tuple2("yacute", "\xfd"),
        _Utils_Tuple2("YAcy", "Я"),
        _Utils_Tuple2("yacy", "я"),
        _Utils_Tuple2("Ycirc", "Ŷ"),
        _Utils_Tuple2("ycirc", "ŷ"),
        _Utils_Tuple2("Ycy", "Ы"),
        _Utils_Tuple2("ycy", "ы"),
        _Utils_Tuple2("yen", "\xa5"),
        _Utils_Tuple2("Yfr", "\uD835\uDD1C"),
        _Utils_Tuple2("yfr", "\uD835\uDD36"),
        _Utils_Tuple2("YIcy", "Ї"),
        _Utils_Tuple2("yicy", "ї"),
        _Utils_Tuple2("Yopf", "\uD835\uDD50"),
        _Utils_Tuple2("yopf", "\uD835\uDD6A"),
        _Utils_Tuple2("Yscr", "\uD835\uDCB4"),
        _Utils_Tuple2("yscr", "\uD835\uDCCE"),
        _Utils_Tuple2("YUcy", "Ю"),
        _Utils_Tuple2("yucy", "ю"),
        _Utils_Tuple2("yuml", "\xff"),
        _Utils_Tuple2("Yuml", "Ÿ"),
        _Utils_Tuple2("Zacute", "Ź"),
        _Utils_Tuple2("zacute", "ź"),
        _Utils_Tuple2("Zcaron", "Ž"),
        _Utils_Tuple2("zcaron", "ž"),
        _Utils_Tuple2("Zcy", "З"),
        _Utils_Tuple2("zcy", "з"),
        _Utils_Tuple2("Zdot", "Ż"),
        _Utils_Tuple2("zdot", "ż"),
        _Utils_Tuple2("zeetrf", "ℨ"),
        _Utils_Tuple2("ZeroWidthSpace", "​"),
        _Utils_Tuple2("Zeta", "Ζ"),
        _Utils_Tuple2("zeta", "ζ"),
        _Utils_Tuple2("zfr", "\uD835\uDD37"),
        _Utils_Tuple2("Zfr", "ℨ"),
        _Utils_Tuple2("ZHcy", "Ж"),
        _Utils_Tuple2("zhcy", "ж"),
        _Utils_Tuple2("zigrarr", "⇝"),
        _Utils_Tuple2("zopf", "\uD835\uDD6B"),
        _Utils_Tuple2("Zopf", "ℤ"),
        _Utils_Tuple2("Zscr", "\uD835\uDCB5"),
        _Utils_Tuple2("zscr", "\uD835\uDCCF"),
        _Utils_Tuple2("zwj", "‍"),
        _Utils_Tuple2("zwnj", "‌")
    ]));
    var $author$project$Lia$Markdown$HTML$Attributes$namedCharacterReference = A2($andre_dietrich$parser_combinators$Combine$map, function(reference) {
        return A2($elm$core$Maybe$withDefault, "&" + (reference + ";"), A2($elm$core$Dict$get, reference, $author$project$Lia$Markdown$HTML$NamedCharacterReferences$dict));
    }, $andre_dietrich$parser_combinators$Combine$regex("[a-zA-Z]+"));
    var $elm$core$Basics$pow = _Basics_pow;
    var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(function(position, chars, accumulated) {
        fromStringHelp: while(true){
            if (!chars.b) return $elm$core$Result$Ok(accumulated);
            else {
                var _char = chars.a;
                var rest = chars.b;
                switch(_char.valueOf()){
                    case "0":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated;
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "1":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "2":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 2 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "3":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 3 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "4":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 4 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "5":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 5 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "6":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 6 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "7":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 7 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "8":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 8 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "9":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 9 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "a":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 10 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "b":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 11 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "c":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 12 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "d":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 13 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "e":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 14 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    case "f":
                        var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 15 * A2($elm$core$Basics$pow, 16, position);
                        position = $temp$position;
                        chars = $temp$chars;
                        accumulated = $temp$accumulated;
                        continue fromStringHelp;
                    default:
                        var nonHex = _char;
                        return $elm$core$Result$Err($elm$core$String$fromChar(nonHex) + " is not a valid hexadecimal character.");
                }
            }
        }
    });
    var $elm$core$Result$mapError = F2(function(f, result) {
        if (result.$ === "Ok") {
            var v = result.a;
            return $elm$core$Result$Ok(v);
        } else {
            var e = result.a;
            return $elm$core$Result$Err(f(e));
        }
    });
    var $rtfeldman$elm_hex$Hex$fromString = function(str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Result$Err("Empty strings are not valid hexadecimal strings.");
        else {
            var result = function() {
                if (A2($elm$core$String$startsWith, "-", str)) {
                    var list = A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail($elm$core$String$toList(str)));
                    return A2($elm$core$Result$map, $elm$core$Basics$negate, A3($rtfeldman$elm_hex$Hex$fromStringHelp, $elm$core$List$length(list) - 1, list, 0));
                } else return A3($rtfeldman$elm_hex$Hex$fromStringHelp, $elm$core$String$length(str) - 1, $elm$core$String$toList(str), 0);
            }();
            var formatError = function(err) {
                return A2($elm$core$String$join, " ", _List_fromArray([
                    '"' + (str + '"'),
                    "is not a valid hexadecimal string because",
                    err
                ]));
            };
            return A2($elm$core$Result$mapError, formatError, result);
        }
    };
    var $author$project$Lia$Markdown$HTML$Attributes$hexadecimal = A2($andre_dietrich$parser_combinators$Combine$andThen, function(hex) {
        var _v0 = $rtfeldman$elm_hex$Hex$fromString($elm$core$String$toLower(hex));
        if (_v0.$ === "Ok") {
            var value = _v0.a;
            return $andre_dietrich$parser_combinators$Combine$succeed(value);
        } else {
            var err = _v0.a;
            return $andre_dietrich$parser_combinators$Combine$fail(err);
        }
    }, $andre_dietrich$parser_combinators$Combine$regex("[0-9a-fA-F]+"));
    var $author$project$Lia$Markdown$HTML$Attributes$numericCharacterReference = function() {
        var codePoint = $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$HTML$Attributes$hexadecimal, $andre_dietrich$parser_combinators$Combine$regex("(x|X)")),
            A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$Num$int, $andre_dietrich$parser_combinators$Combine$regex("0*"))
        ]));
        return A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar), codePoint), $andre_dietrich$parser_combinators$Combine$string("#"));
    }();
    var $author$project$Lia$Markdown$HTML$Attributes$characterReference = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(";"), $author$project$Lia$Markdown$HTML$Attributes$namedCharacterReference),
        A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(";"), $author$project$Lia$Markdown$HTML$Attributes$numericCharacterReference),
        $andre_dietrich$parser_combinators$Combine$succeed("&")
    ])), $andre_dietrich$parser_combinators$Combine$string("&"));
    var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue = function(quote) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(quote), A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$concat, $andre_dietrich$parser_combinators$Combine$many($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$String$replace, "\\" + quote, quote), $andre_dietrich$parser_combinators$Combine$regex("([^" + (quote + ("]*|\\\\" + (quote + "|\\\\)*"))))),
            $author$project$Lia$Markdown$HTML$Attributes$characterReference
        ])))), $andre_dietrich$parser_combinators$Combine$string(quote)));
    };
    var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeUnquotedValue = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$concat, $andre_dietrich$parser_combinators$Combine$many1($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$regex("[^\\s\"'=<>`&]+"),
        $author$project$Lia$Markdown$HTML$Attributes$characterReference
    ]))));
    var $author$project$Lia$Markdown$HTML$Attributes$tagAttributeValue = A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $author$project$Lia$Markdown$HTML$Attributes$tagAttributeUnquotedValue,
        $author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue('"'),
        $author$project$Lia$Markdown$HTML$Attributes$tagAttributeQuotedValue("'")
    ])), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$string("="))), $andre_dietrich$parser_combinators$Combine$succeed(""));
    var $author$project$Lia$Markdown$HTML$Attributes$parse = function(_v0) {
        var url = _v0.a;
        var appendix = _v0.b;
        return A2($andre_dietrich$parser_combinators$Combine$map, A2($author$project$Lia$Markdown$HTML$Attributes$base, url, appendix), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$HTML$Attributes$tagAttributeValue, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $andre_dietrich$parser_combinators$Combine$regex("[A-Za-z0-9_\\-:]+"))))));
    };
    var $author$project$Lia$Parser$Helper$spaces = $andre_dietrich$parser_combinators$Combine$regex("[	 ]*");
    var $author$project$Lia$Markdown$Inline$Parser$annotations = function() {
        var attr = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Attributes$parse, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
        }));
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Inline$Parser$comments, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Maybe$withDefault(_List_Nil), $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$comment(attr), $author$project$Lia$Parser$Helper$spaces))));
    }();
    var $author$project$Lia$Markdown$Inline$Types$Symbol = F2(function(a, b) {
        return {
            $: "Symbol",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Parser$Symbol$arrows = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Symbol, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟷", $andre_dietrich$parser_combinators$Combine$string("<-->")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟵", $andre_dietrich$parser_combinators$Combine$string("<--")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟶", $andre_dietrich$parser_combinators$Combine$string("-->")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↞", $andre_dietrich$parser_combinators$Combine$string("<<-")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↠", $andre_dietrich$parser_combinators$Combine$string("->>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↔", $andre_dietrich$parser_combinators$Combine$string("<->")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↣", $andre_dietrich$parser_combinators$Combine$string(">->")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↢", $andre_dietrich$parser_combinators$Combine$string("<-<")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "→", $andre_dietrich$parser_combinators$Combine$string("->")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "←", $andre_dietrich$parser_combinators$Combine$string("<-")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↜", $andre_dietrich$parser_combinators$Combine$string("<~")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "↝", $andre_dietrich$parser_combinators$Combine$string("~>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟺", $andre_dietrich$parser_combinators$Combine$string("<==>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟹", $andre_dietrich$parser_combinators$Combine$string("==>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⟸", $andre_dietrich$parser_combinators$Combine$string("<==")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⇔", $andre_dietrich$parser_combinators$Combine$string("<=>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⇒", $andre_dietrich$parser_combinators$Combine$string("=>")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "⇐", $andre_dietrich$parser_combinators$Combine$string("<="))
    ])));
    var $author$project$Lia$Markdown$Inline$Multimedia$fragment = F2(function(url, params) {
        return _Utils_ap(params, A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, $elm$core$Basics$append("#"), A2($elm$core$Maybe$andThen, $elm$core$List$head, $elm$core$List$tail(A2($elm$core$String$split, "#", url))))));
    });
    var $author$project$Lia$Markdown$Inline$Multimedia$preserve = function(url) {
        var params = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$String$split("&"), A2($elm$core$Maybe$andThen, $elm$core$List$head, A2($elm$core$Maybe$map, $elm$core$String$split("#"), A2($elm$core$Maybe$andThen, $elm$core$List$head, $elm$core$List$tail(A2($elm$core$String$split, "?", url)))))));
        return A2($elm$core$Basics$composeR, $elm$core$List$filterMap(function(w) {
            var _v0 = A2($elm$core$List$filter, $elm$core$String$startsWith(w), params);
            if (!_v0.b) return $elm$core$Maybe$Nothing;
            else {
                var p = _v0.a;
                return $elm$core$Maybe$Just(p);
            }
        }), A2($elm$core$Basics$composeR, $elm$core$String$join("&"), A2($elm$core$Basics$composeR, $elm$core$Basics$append("?"), A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Multimedia$fragment(url), function(parameters) {
            if (parameters === "?") return "";
            else return parameters;
        }))));
    };
    var $author$project$Lia$Markdown$Inline$Multimedia$youTubeRules = _List_fromArray([
        "autoplay",
        "cc_lang_pref",
        "color",
        "disablekb",
        "enablejsapi",
        "end",
        "fs",
        "hl",
        "iv_load_policy",
        "list",
        "listType",
        "loop",
        "modestbranding",
        "mute",
        "origin",
        "playlist",
        "playsinline",
        "rel",
        "start",
        "widget_referrer"
    ]);
    var $author$project$Lia$Markdown$Inline$Multimedia$audio = $author$project$Lia$Parser$PatReplace$replace(_List_fromArray([
        {
            by: F2(function(_v0, w) {
                var link = "https://widget.deezer.com/widget/dark/" + w;
                return A2($elm$core$String$startsWith, "artist", w) ? link + "/top_tracks" : link;
            }),
            pattern: "https://(?:www\\.|widget\\.)?deezer\\.com/(?:.*)/(.*/.*)\\??"
        },
        {
            by: F2(function(url, w) {
                return "https://www.youtube.com/embed/" + (w + A2($author$project$Lia$Markdown$Inline$Multimedia$preserve, url, $author$project$Lia$Markdown$Inline$Multimedia$youTubeRules));
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("music\\.(?:youtu\\.be/|youtube\\.com/(?:(?:watch)?\\?(?:.*&)?v(?:i)?=|(?:v|vi|user)/))([^\\?&\"'<> #]+)")
        }
    ]));
    var $andre_dietrich$parser_combinators$Combine$lookAhead = function(p) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
            if (_v0.c.$ === "Ok") {
                var rstate = _v0.a;
                var res = _v0.c.a;
                return _Utils_Tuple3(rstate, stream, $elm$core$Result$Ok(res));
            } else {
                var err = _v0;
                return err;
            }
        }));
    };
    var $author$project$Lia$Parser$Context$checkAbort = $andre_dietrich$parser_combinators$Combine$withState(function(context) {
        var _v0 = context.abort.stack;
        if (!_v0.b) return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
        else {
            var name = _v0.a;
            return context.abort.isTrue ? $andre_dietrich$parser_combinators$Combine$fail("abort") : A2($andre_dietrich$parser_combinators$Combine$andThen, function(found) {
                if (found.$ === "Nothing") return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
                else return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$fail("abort"), $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
                    return _Utils_update(s, {
                        abort: {
                            isTrue: true,
                            stack: s.abort.stack
                        }
                    });
                }));
            }, $andre_dietrich$parser_combinators$Combine$lookAhead($andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$string(name))));
        }
    });
    var $author$project$Lia$Markdown$Inline$Types$Verbatim = F2(function(a, b) {
        return {
            $: "Verbatim",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Inline$Parser$code = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Verbatim, $author$project$Lia$Parser$Helper$inlineCode);
    var $author$project$Lia$Markdown$Inline$Types$combineHelper = F2(function(input, output) {
        combineHelper: while(true){
            var _v0 = _Utils_Tuple2(input, output);
            if (!_v0.a.b) return $elm$core$List$reverse(output);
            else if (_v0.a.a.$ === "Chars" && !_v0.a.a.b.b && _v0.b.b && _v0.b.a.$ === "Chars" && !_v0.b.a.b.b) {
                var _v1 = _v0.a;
                var _v2 = _v1.a;
                var str1 = _v2.a;
                var is = _v1.b;
                var _v3 = _v0.b;
                var _v4 = _v3.a;
                var str2 = _v4.a;
                var os = _v3.b;
                var $temp$input = is, $temp$output = A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Inline$Types$Chars, _Utils_ap(str2, str1), _List_Nil), os);
                input = $temp$input;
                output = $temp$output;
                continue combineHelper;
            } else {
                var _v5 = _v0.a;
                var i = _v5.a;
                var is = _v5.b;
                var $temp$input = is, $temp$output = A2($elm$core$List$cons, i, output);
                input = $temp$input;
                output = $temp$output;
                continue combineHelper;
            }
        }
    });
    var $author$project$Lia$Markdown$Inline$Types$combine = function(list) {
        return A2($author$project$Lia$Markdown$Inline$Types$combineHelper, list, _List_Nil);
    };
    var $author$project$Lia$Markdown$Inline$Parser$dashes = $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Inline$Types$Chars("—")), $andre_dietrich$parser_combinators$Combine$string("---")),
        A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Inline$Types$Chars("–")), $andre_dietrich$parser_combinators$Combine$string("--"))
    ]));
    var $andre_dietrich$parser_combinators$Combine$regexWith = function(_v0) {
        var caseInsensitive = _v0.caseInsensitive;
        var multiline = _v0.multiline;
        return A2($elm$core$Basics$composeR, A2($andre_dietrich$parser_combinators$Combine$regexer, $elm$regex$Regex$fromStringWith({
            caseInsensitive: caseInsensitive,
            multiline: multiline
        }), function($) {
            return $.match;
        }), $andre_dietrich$parser_combinators$Combine$Parser);
    };
    var $author$project$Lia$Markdown$Inline$Parser$scriptBody = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$concat, A2($andre_dietrich$parser_combinators$Combine$manyTill, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$regex("[^@\"'`</]+"),
        $andre_dietrich$parser_combinators$Combine$regex("\\s+"),
        $andre_dietrich$parser_combinators$Combine$string("@'"),
        $andre_dietrich$parser_combinators$Combine$string("@"),
        $andre_dietrich$parser_combinators$Combine$regex('"([^"]*|\\\\"|\\\\)*"'),
        $andre_dietrich$parser_combinators$Combine$regex("'([^']*|\\\\'|\\\\)*'"),
        $andre_dietrich$parser_combinators$Combine$regex("`([^`]*|\n|\\\\`|\\\\)*`"),
        $andre_dietrich$parser_combinators$Combine$regex("<(?!/)"),
        $andre_dietrich$parser_combinators$Combine$regex("//[^\n]*"),
        $andre_dietrich$parser_combinators$Combine$string("/")
    ])), A2($andre_dietrich$parser_combinators$Combine$regexWith, {
        caseInsensitive: true,
        multiline: false
    }, "</script>")));
    var $author$project$Lia$Markdown$Inline$Parser$javascriptWithAttributes = function() {
        var attr = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Attributes$parse, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
        }));
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$scriptBody, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(">"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$many(A2($andre_dietrich$parser_combinators$Combine$keep, attr, $andre_dietrich$parser_combinators$Combine$whitespace)), A2($andre_dietrich$parser_combinators$Combine$regexWith, {
            caseInsensitive: true,
            multiline: false
        }, "<script")))));
    }();
    var $elm$core$Tuple$mapFirst = F2(function(func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(func(x), y);
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Text = function(a) {
        return {
            $: "Text",
            a: a
        };
    };
    var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
    var $author$project$Lia$Markdown$HTML$Attributes$get = F2(function(name, attr) {
        get: while(true){
            if (!attr.b) return $elm$core$Maybe$Nothing;
            else {
                var _v1 = attr.a;
                var key = _v1.a;
                var value = _v1.b;
                var xs = attr.b;
                if (_Utils_eq(key, name)) return $elm$core$Maybe$Just(value);
                else {
                    var $temp$name = name, $temp$attr = xs;
                    name = $temp$name;
                    attr = $temp$attr;
                    continue get;
                }
            }
        }
    });
    var $author$project$Lia$Markdown$HTML$Attributes$isTrue = function(val) {
        return val === "" || val === "1" || val === "true";
    };
    var $author$project$Lia$Markdown$HTML$Attributes$isSetMaybe = function(name) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$get(name), $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$core$String$trim, A2($elm$core$Basics$composeR, $elm$core$String$toLower, $author$project$Lia$Markdown$HTML$Attributes$isTrue))));
    };
    var $author$project$Lia$Markdown$HTML$Attributes$isSet = function(name) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$isSetMaybe(name), $elm$core$Maybe$withDefault(false));
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Button_ = function(a) {
        return {
            $: "Button_",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Checkbox_ = function(a) {
        return {
            $: "Checkbox_",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Color_ = {
        $: "Color_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Date_ = {
        $: "Date_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$DatetimeLocal_ = {
        $: "DatetimeLocal_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Email_ = {
        $: "Email_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$File_ = {
        $: "File_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Hidden_ = {
        $: "Hidden_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Image_ = {
        $: "Image_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Month_ = {
        $: "Month_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Number_ = {
        $: "Number_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Password_ = {
        $: "Password_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Radio_ = function(a) {
        return {
            $: "Radio_",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Range_ = {
        $: "Range_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Search_ = {
        $: "Search_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Select_ = function(a) {
        return {
            $: "Select_",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Tel_ = {
        $: "Tel_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Text_ = {
        $: "Text_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Textarea_ = {
        $: "Textarea_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Time_ = {
        $: "Time_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Url_ = {
        $: "Url_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$Week_ = {
        $: "Week_"
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$options = A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$get("options"), A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$core$String$split("|")), A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(_List_Nil), A2($elm$core$Basics$composeR, $elm$core$List$map($elm$core$String$trim), $elm$core$List$filter(A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not))))));
    var $author$project$Lia$Markdown$Effect$Script$Input$parseType_ = F2(function(params, input_) {
        switch(input_){
            case "button":
                return $author$project$Lia$Markdown$Effect$Script$Input$Button_(false);
            case "submit":
                return $author$project$Lia$Markdown$Effect$Script$Input$Button_(true);
            case "checkbox":
                return $author$project$Lia$Markdown$Effect$Script$Input$Checkbox_($author$project$Lia$Markdown$Effect$Script$Input$options(params));
            case "color":
                return $author$project$Lia$Markdown$Effect$Script$Input$Color_;
            case "date":
                return $author$project$Lia$Markdown$Effect$Script$Input$Date_;
            case "datetime-local":
                return $author$project$Lia$Markdown$Effect$Script$Input$DatetimeLocal_;
            case "email":
                return $author$project$Lia$Markdown$Effect$Script$Input$Email_;
            case "file":
                return $author$project$Lia$Markdown$Effect$Script$Input$File_;
            case "hidden":
                return $author$project$Lia$Markdown$Effect$Script$Input$Hidden_;
            case "image":
                return $author$project$Lia$Markdown$Effect$Script$Input$Image_;
            case "month":
                return $author$project$Lia$Markdown$Effect$Script$Input$Month_;
            case "number":
                return $author$project$Lia$Markdown$Effect$Script$Input$Number_;
            case "password":
                return $author$project$Lia$Markdown$Effect$Script$Input$Password_;
            case "radio":
                return $author$project$Lia$Markdown$Effect$Script$Input$Radio_($author$project$Lia$Markdown$Effect$Script$Input$options(params));
            case "range":
                return $author$project$Lia$Markdown$Effect$Script$Input$Range_;
            case "search":
                return $author$project$Lia$Markdown$Effect$Script$Input$Search_;
            case "select":
                return $author$project$Lia$Markdown$Effect$Script$Input$Select_($author$project$Lia$Markdown$Effect$Script$Input$options(params));
            case "tel":
                return $author$project$Lia$Markdown$Effect$Script$Input$Tel_;
            case "textarea":
                return $author$project$Lia$Markdown$Effect$Script$Input$Textarea_;
            case "time":
                return $author$project$Lia$Markdown$Effect$Script$Input$Time_;
            case "url":
                return $author$project$Lia$Markdown$Effect$Script$Input$Url_;
            case "week":
                return $author$project$Lia$Markdown$Effect$Script$Input$Week_;
            default:
                return $author$project$Lia$Markdown$Effect$Script$Input$Text_;
        }
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$runnable = F2(function(t_, updateOnChange) {
        var _v0 = _Utils_Tuple2(updateOnChange, t_);
        if (_v0.a.$ === "Just") {
            var b = _v0.a.a;
            return b;
        } else if (_v0.b.$ === "Nothing") {
            var _v1 = _v0.a;
            var _v2 = _v0.b;
            return false;
        } else {
            var _v3 = _v0.a;
            var t = _v0.b.a;
            switch(t.$){
                case "Email_":
                    return false;
                case "Password_":
                    return false;
                case "Search_":
                    return false;
                case "Tel_":
                    return false;
                case "Textarea_":
                    return false;
                case "Url_":
                    return false;
                default:
                    return true;
            }
        }
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$from = function(params) {
        var val = A2($elm$core$Maybe$withDefault, "", A2($author$project$Lia$Markdown$HTML$Attributes$get, "value", params));
        var t_ = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Effect$Script$Input$parseType_(params), A2($author$project$Lia$Markdown$HTML$Attributes$get, "input", params));
        var alwaysActive = A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "input-always-active", params);
        return {
            active: alwaysActive ? true : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "input-active", params),
            alwaysActive: alwaysActive,
            _default: val,
            type_: t_,
            updateOnChange: A2($author$project$Lia$Markdown$Effect$Script$Input$runnable, t_, A2($author$project$Lia$Markdown$HTML$Attributes$isSetMaybe, "update-on-change", params)),
            value: val
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Intl$datetime = _List_fromArray([
        "calendar",
        "datestyle",
        "day",
        "dayperiod",
        "era",
        "formatmatcher",
        "fractionalseconddigits",
        "hour",
        "hour12",
        "hourcycle",
        "localematcher",
        "minute",
        "month",
        "numberingsystem",
        "second",
        "timestyle",
        "timezone",
        "timezonename",
        "weekday",
        "year"
    ]);
    var $author$project$Lia$Markdown$Effect$Script$Intl$list = _List_fromArray([
        "localematcher",
        "type",
        "localestyle"
    ]);
    var $author$project$Lia$Markdown$Effect$Script$Intl$locale = function(lang) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$get("locale"), A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(lang), $elm$core$Tuple$pair("locale")));
    };
    var $author$project$Lia$Markdown$Effect$Script$Intl$number = _List_fromArray([
        "compactdisplay",
        "currency",
        "currencydisplay",
        "currencysign",
        "localematcher",
        "maximumfractiondigits",
        "maximumsignificantdigits",
        "minimumfractiondigits",
        "minimumintegerdigits",
        "minimumsignificantdigits",
        "notation",
        "numberingsystem",
        "signdisplay",
        "localestyle",
        "unit",
        "unitdisplay",
        "usegrouping"
    ]);
    var $author$project$Lia$Markdown$Effect$Script$Intl$pluralrules = _List_fromArray([
        "localematcher",
        "type",
        "minimumintegerdigits",
        "minimumfractiondigits",
        "maximumfractiondigits",
        "minimumsignificantdigits",
        "maximumsignificantdigits"
    ]);
    var $author$project$Lia$Markdown$Effect$Script$Intl$relativetime = _List_fromArray([
        "unit",
        "localematcher",
        "numeric",
        "localestyle"
    ]);
    var $author$project$Lia$Markdown$HTML$Attributes$isMemberOf = F2(function(names, _v0) {
        var name = _v0.a;
        return A2($elm$core$List$member, name, names);
    });
    var $author$project$Lia$Markdown$HTML$Attributes$filterNames = function(names) {
        return $elm$core$List$filter($author$project$Lia$Markdown$HTML$Attributes$isMemberOf(names));
    };
    var $author$project$Lia$Markdown$Effect$Script$Intl$to = F2(function(format, names) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$filterNames(names), A2($elm$core$Basics$composeR, $elm$core$List$cons(_Utils_Tuple2("format", format)), $elm$core$Maybe$Just));
    });
    var $author$project$Lia$Markdown$Effect$Script$Intl$from = F2(function(lang, params) {
        return A2($elm$core$Maybe$map, $elm$core$List$cons(A2($author$project$Lia$Markdown$Effect$Script$Intl$locale, lang, params)), function() {
            var _v0 = A2($elm$core$Maybe$map, $elm$core$String$toLower, A2($author$project$Lia$Markdown$HTML$Attributes$get, "format", params));
            _v0$5: while(true){
                if (_v0.$ === "Just") switch(_v0.a){
                    case "number":
                        return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, "number", $author$project$Lia$Markdown$Effect$Script$Intl$number, params);
                    case "datetime":
                        return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, "datetime", $author$project$Lia$Markdown$Effect$Script$Intl$datetime, params);
                    case "relativetime":
                        return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, "relativetime", $author$project$Lia$Markdown$Effect$Script$Intl$relativetime, params);
                    case "list":
                        return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, "list", $author$project$Lia$Markdown$Effect$Script$Intl$list, params);
                    case "pluralrules":
                        return A3($author$project$Lia$Markdown$Effect$Script$Intl$to, "pluralrules", $author$project$Lia$Markdown$Effect$Script$Intl$pluralrules, params);
                    default:
                        break _v0$5;
                }
                else break _v0$5;
            }
            return $elm$core$Maybe$Nothing;
        }());
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$input = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("@input\\(`([^`]+)`\\)"));
    var $author$project$Lia$Markdown$Effect$Script$Types$No = {
        $: "No"
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$Partially = function(a) {
        return {
            $: "Partially",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$Yes = {
        $: "Yes"
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$modifications = function(params) {
        var pattern = A2($author$project$Lia$Markdown$HTML$Attributes$get, "modify", params);
        var _v0 = A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toLower), pattern);
        if (_v0.$ === "Nothing") return $author$project$Lia$Markdown$Effect$Script$Types$Yes;
        else switch(_v0.a){
            case "true":
                return $author$project$Lia$Markdown$Effect$Script$Types$Yes;
            case "1":
                return $author$project$Lia$Markdown$Effect$Script$Types$Yes;
            case "":
                return $author$project$Lia$Markdown$Effect$Script$Types$Yes;
            case "false":
                return $author$project$Lia$Markdown$Effect$Script$Types$No;
            case "0":
                return $author$project$Lia$Markdown$Effect$Script$Types$No;
            default:
                return A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Effect$Script$Types$No, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "\\n", "\n"), A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "\\t", "	"), $author$project$Lia$Markdown$Effect$Script$Types$Partially)), pattern));
        }
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$push = F5(function(lang, id, params, script, javascript) {
        return A2($elm$core$Array$push, {
            block: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "block", params),
            counter: 0,
            edit: false,
            effect_id: id,
            highlighting: A2($elm$core$Maybe$withDefault, "javascript", A2($elm$core$Maybe$map, A2($elm$core$String$replace, "text/", ""), A2($author$project$Lia$Markdown$HTML$Attributes$get, "type", params))),
            input: $author$project$Lia$Markdown$Effect$Script$Input$from(params),
            inputs: A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$concatMap, function($) {
                return $.submatches;
            }, A2($elm$regex$Regex$find, $author$project$Lia$Markdown$Effect$Script$Types$input, script))),
            intl: A2($author$project$Lia$Markdown$Effect$Script$Intl$from, lang, params),
            modify: $author$project$Lia$Markdown$Effect$Script$Types$modifications(params),
            output: A2($author$project$Lia$Markdown$HTML$Attributes$get, "output", params),
            result: A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Effect$Script$Types$Text, A2($author$project$Lia$Markdown$HTML$Attributes$get, "default", params)),
            runOnce: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "run-once", params),
            running: false,
            script: script,
            update: false,
            updated: false,
            worker: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "worker", params)
        }, javascript);
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$count = A2($elm$core$Basics$composeR, $elm$core$Array$length, $elm$core$Basics$add(-1));
    var $author$project$Lia$Markdown$Inline$Parser$scriptID = $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.effect_model;
    }, A2($elm$core$Basics$composeR, function($) {
        return $.javascript;
    }, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$count, $andre_dietrich$parser_combinators$Combine$succeed))));
    var $author$project$Lia$Markdown$Inline$Parser$eScript = function(_default) {
        var state = function(_v0) {
            var attr = _v0.a;
            var script = _v0.b;
            return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(attr), $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
                var effect_model = s.effect_model;
                return _Utils_update(s, {
                    effect_model: _Utils_update(effect_model, {
                        javascript: A5($author$project$Lia$Markdown$Effect$Script$Types$push, s.defines.language, A2($elm$core$Maybe$withDefault, 0, $elm$core$List$head(s.effect_number)), attr, $elm$core$String$trim(script), effect_model.javascript)
                    })
                });
            }));
        };
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$scriptID, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$andThen, state, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$mapFirst(function(attr) {
            return A2($elm$core$List$append, attr, _default);
        }), $author$project$Lia$Markdown$Inline$Parser$javascriptWithAttributes))));
    };
    var $author$project$Lia$Markdown$Inline$Parser$ellipsis = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Inline$Types$Chars("…")), $andre_dietrich$parser_combinators$Combine$string("..."));
    var $author$project$Lia$Markdown$Inline$Parser$email = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$append("mailto:"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[a-zA-Z0-9_.\\-]+@[a-zA-Z0-9_.\\-]+"), $andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$string("mailto:"))));
    var $author$project$Lia$Markdown$Inline$Types$Formula = F3(function(a, b, c) {
        return {
            $: "Formula",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Inline$Parser$Formula$formula_block = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Formula("true"), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string("$$")), $andre_dietrich$parser_combinators$Combine$string("$$")));
    var $author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Formula("false"), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("$"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[^\n$]+"), $andre_dietrich$parser_combinators$Combine$string("$"))));
    var $author$project$Lia$Markdown$Inline$Parser$Formula$formula = A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$Formula$formula_block, $author$project$Lia$Markdown$Inline$Parser$Formula$formula_inline);
    var $author$project$Lia$Parser$Input$getPermission = $andre_dietrich$parser_combinators$Combine$withState(function(state) {
        return $andre_dietrich$parser_combinators$Combine$succeed(state.input.isEnabled || state.input.grouping);
    });
    var $author$project$Lia$Markdown$Effect$Parser$begin_ = function(e) {
        return A2($andre_dietrich$parser_combinators$Combine$map, function(i) {
            return _Utils_update(e, {
                begin: i
            });
        }, $author$project$Lia$Markdown$Effect$Parser$effect_number);
    };
    var $author$project$Lia$Markdown$Effect$Parser$end_ = function(e) {
        return A2($andre_dietrich$parser_combinators$Combine$map, function(i) {
            return _Utils_update(e, {
                end: $elm$core$Maybe$Just(i)
            });
        }, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$Num$int, $andre_dietrich$parser_combinators$Combine$regex("-[	 ]*")));
    };
    var $author$project$Lia$Markdown$Effect$Parser$playback_ = function(e) {
        return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_update(e, {
            playback: true
        })), A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$string("!>"), $andre_dietrich$parser_combinators$Combine$string("|>")));
    };
    var $author$project$Lia$Markdown$Effect$Parser$voice_ = function(e) {
        return A2($andre_dietrich$parser_combinators$Combine$map, function(str) {
            return _Utils_update(e, {
                voice: $elm$core$String$trim(str)
            });
        }, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("([A-Za-z][A-Za-z0-9]+[ 	]*)+"), $author$project$Lia$Markdown$Macro$Parser$macro));
    };
    var $author$project$Lia$Markdown$Effect$Parser$effect = function(e) {
        return A2($andre_dietrich$parser_combinators$Combine$optional, e, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            $author$project$Lia$Markdown$Effect$Parser$end_(e),
            $author$project$Lia$Markdown$Effect$Parser$begin_(e),
            $author$project$Lia$Markdown$Effect$Parser$playback_(e),
            $author$project$Lia$Markdown$Effect$Parser$voice_(e)
        ])), $andre_dietrich$parser_combinators$Combine$whitespace));
    };
    var $author$project$Lia$Markdown$Effect$Types$empty = function(e) {
        return !e.playback && e.begin < 0;
    };
    var $author$project$Lia$Markdown$Effect$Types$init = function(voice) {
        return {
            begin: -1,
            content: _List_Nil,
            end: $elm$core$Maybe$Nothing,
            id: -1,
            playback: false,
            voice: voice
        };
    };
    var $author$project$Lia$Markdown$Effect$Parser$definition = A2($andre_dietrich$parser_combinators$Combine$andThen, function(e) {
        return $author$project$Lia$Markdown$Effect$Types$empty(e) ? $andre_dietrich$parser_combinators$Combine$fail("no effect definition") : $andre_dietrich$parser_combinators$Combine$succeed(e);
    }, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$effect, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$effect, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$effect, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$effect, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Effect$Types$init, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.defines;
    }, A2($elm$core$Basics$composeR, function($) {
        return $.narrator;
    }, $andre_dietrich$parser_combinators$Combine$succeed)))))))));
    var $author$project$Lia$Markdown$Effect$Parser$effect_id = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
        return _Utils_update(s, {
            effect_id: s.effect_id + 1
        });
    }), $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.effect_id;
    }, $andre_dietrich$parser_combinators$Combine$succeed)));
    var $author$project$Lia$Markdown$Effect$Parser$inline = function(inlines) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Effect$Parser$effect_id, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Effect$Parser$reset_effect_number, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$manyTill, inlines, $andre_dietrich$parser_combinators$Combine$string("}")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("}{"), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(e, b, c) {
            return _Utils_update(e, {
                content: b,
                id: c
            });
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$definition, $andre_dietrich$parser_combinators$Combine$string("{")))))));
    };
    var $author$project$Lia$Markdown$Inline$Types$FootnoteMark = F2(function(a, b) {
        return {
            $: "FootnoteMark",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Paragraph = F2(function(a, b) {
        return {
            $: "Paragraph",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Footnote$Model$insert = F3(function(key, val, model) {
        return A3($elm$core$Dict$insert, key, val, model);
    });
    var $author$project$Lia$Markdown$Footnote$Parser$add_footnote = function(_v0) {
        var key = _v0.a;
        var val = _v0.b;
        return $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
            return _Utils_update(s, {
                footnotes: A3($author$project$Lia$Markdown$Footnote$Model$insert, key, val, s.footnotes)
            });
        });
    };
    var $author$project$Lia$Markdown$Footnote$Parser$store = function(_v0) {
        var key = _v0.a;
        var val = _v0.b;
        if (val.$ === "Just") {
            var v = val.a;
            return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Inline$Types$FootnoteMark(key)), $author$project$Lia$Markdown$Footnote$Parser$add_footnote(_Utils_Tuple2(key, _List_fromArray([
                A2($author$project$Lia$Markdown$Types$Paragraph, _List_Nil, v)
            ]))));
        } else return $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Inline$Types$FootnoteMark(key));
    };
    var $author$project$Lia$Markdown$Footnote$Parser$inline = function(parser) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Footnote$Parser$store, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState($andre_dietrich$parser_combinators$Combine$succeed), A2($andre_dietrich$parser_combinators$Combine$map, F2(function(str, state) {
            return A2(parser, state, str);
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string(")")), $andre_dietrich$parser_combinators$Combine$string("("))))), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string("]")), $andre_dietrich$parser_combinators$Combine$string("[^")))));
    };
    var $author$project$Lia$Markdown$Inline$Parser$baseURL = function(u) {
        return A2($andre_dietrich$parser_combinators$Combine$map, function(_v0) {
            var base = _v0.a;
            var appendix = _v0.b;
            return A3($author$project$Lia$Markdown$HTML$Attributes$toURL, base, appendix, u);
        }, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
        }));
    };
    var $author$project$Lia$Markdown$Inline$Parser$url = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Inline$Parser$baseURL, $andre_dietrich$parser_combinators$Combine$regex('[a-zA-Z]+://(/)?[a-zA-Z0-9\\.\\-\\_]+\\.([a-z\\.]{2,6})[^ \\]\\)	\n"]*'));
    var $author$project$Lia$Markdown$Inline$Parser$inline_url = A2($andre_dietrich$parser_combinators$Combine$map, function(u) {
        return $author$project$Lia$Markdown$Inline$Types$Ref(A3($author$project$Lia$Markdown$Inline$Types$Link, _List_fromArray([
            A2($author$project$Lia$Markdown$Inline$Types$Chars, u, _List_Nil)
        ]), u, $elm$core$Maybe$Nothing));
    }, $author$project$Lia$Markdown$Inline$Parser$url);
    var $andre_dietrich$parser_combinators$Combine$lazy = function(t) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, t, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0));
    };
    var $author$project$Lia$Markdown$HTML$Types$InnerHtml = function(a) {
        return {
            $: "InnerHtml",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Inline$Parser$lineBreak = A2($andre_dietrich$parser_combinators$Combine$onsuccess, $elm$core$Basics$always(A2($author$project$Lia$Markdown$Inline$Types$IHTML, $author$project$Lia$Markdown$HTML$Types$InnerHtml("<br>"), _List_Nil)), $andre_dietrich$parser_combinators$Combine$string("\\\n"));
    var $andre_dietrich$parser_combinators$Combine$many1Till = function(p) {
        return A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$manyTill(p), $andre_dietrich$parser_combinators$Combine$andThen(function(result) {
            if (!result.b) return $andre_dietrich$parser_combinators$Combine$fail("not enough results");
            else return $andre_dietrich$parser_combinators$Combine$succeed(result);
        }));
    };
    var $author$project$Lia$Markdown$Inline$Multimedia$tuFreibergRules = _List_fromArray([
        "key",
        "width",
        "height",
        "autoplay",
        "autolightsoff",
        "loop",
        "chapters",
        "related",
        "responsive",
        "t"
    ]);
    var $author$project$Lia$Markdown$Inline$Multimedia$vimeoRules = _List_fromArray([
        "autopause",
        "autoplay",
        "background",
        "byline",
        "color",
        "controls",
        "dnt",
        "keyboard",
        "loop",
        "muted",
        "pip",
        "playsinline",
        "portrait",
        "quality",
        "speed",
        "texttrack",
        "title",
        "transparent"
    ]);
    var $author$project$Lia$Markdown$Inline$Multimedia$website = {
        youtube: "https://www.youtube-nocookie.com/embed/"
    };
    var $author$project$Lia$Markdown$Inline$Multimedia$movie = $author$project$Lia$Parser$PatReplace$replace(_List_fromArray([
        {
            by: F2(function(url, w) {
                return _Utils_ap($author$project$Lia$Markdown$Inline$Multimedia$website.youtube, _Utils_ap(w, A2($author$project$Lia$Markdown$Inline$Multimedia$preserve, url, $author$project$Lia$Markdown$Inline$Multimedia$youTubeRules)));
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:youtu\\.be/|youtube\\.com/(?:(?:watch)?\\?(?:.*&)?v(?:i)?=|(?:v|vi|user)/))([^\\?&\"'<> #]+)")
        },
        {
            by: F2(function(url, w) {
                return "https://player.vimeo.com/video/" + (w + A2($author$project$Lia$Markdown$Inline$Multimedia$preserve, url, $author$project$Lia$Markdown$Inline$Multimedia$vimeoRules));
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:player.)?(?:vimeo\\.com).*?(\\d+)")
        },
        {
            by: F2(function(_v0, w) {
                return "https://www.dailymotion.com/embed/video/" + w;
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:dailymotion\\.com(?:/embed)?/video/)(.+)")
        },
        {
            by: F2(function(_v1, w) {
                return "https://peertube.tv/videos/embed/" + w;
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:peertube\\.tv/videos/watch/)(.+)")
        },
        {
            by: F2(function(_v2, w) {
                return "https://www.teachertube.com/embed/video/" + w;
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:teachertube\\.com).*?(\\d+.*)")
        },
        {
            by: F2(function(url, w) {
                return "https://video.tu-freiberg.de/media/embed?key=" + (w + A2($author$project$Lia$Markdown$Inline$Multimedia$preserve, url, $author$project$Lia$Markdown$Inline$Multimedia$tuFreibergRules));
            }),
            pattern: $author$project$Lia$Parser$UrlPattern$Generic$root("(?:video\\.tu\\-freiberg\\.de/video/[^/]+/)(.+)")
        }
    ]));
    var $author$project$Lia$Markdown$Inline$Parser$nicer_ref = F4(function(ref_type, info_string, url_string, title_string) {
        return A3(ref_type, info_string, url_string, title_string);
    });
    var $author$project$Lia$Markdown$HTML$Parser$attrParser = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Attributes$parse, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
        return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
    }));
    var $author$project$Lia$Markdown$HTML$Types$Node = F3(function(a, b, c) {
        return {
            $: "Node",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$HTML$Types$OuterHtml = F3(function(a, b, c) {
        return {
            $: "OuterHtml",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$HTML$Types$SvgNode = F3(function(a, b, c) {
        return {
            $: "SvgNode",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$HTML$Parser$closingTag = function(name) {
        var chompName = A2($andre_dietrich$parser_combinators$Combine$andThen, function(closingName) {
            return _Utils_eq($elm$core$String$toLower(closingName), name) ? $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : $andre_dietrich$parser_combinators$Combine$fail("closing tag does not match opening tag: " + name);
        }, $andre_dietrich$parser_combinators$Combine$regex("\\w+(\\-\\w+)*"));
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\\s*>"), A2($andre_dietrich$parser_combinators$Combine$keep, chompName, $andre_dietrich$parser_combinators$Combine$regex("\n*</[ 	]*")));
    };
    var $author$project$Lia$Markdown$HTML$Parser$getAllForeignObjects = F2(function(context, svgCode) {
        var parseAttributes = function(attrStr) {
            var _v1 = A3($andre_dietrich$parser_combinators$Combine$runParser, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$HTML$Parser$attrParser), context, attrStr);
            if (_v1.$ === "Ok") {
                var _v2 = _v1.a;
                var attr = _v2.c;
                return attr;
            } else return _List_Nil;
        };
        var findForeignObjects = F4(function(remaining, offset, results, svgParts) {
            findForeignObjects: while(true){
                var _v0 = A2($elm$core$String$indexes, "<foreignObject", remaining);
                if (!_v0.b) return _Utils_Tuple2(A2($elm$core$String$join, "", $elm$core$List$reverse(A2($elm$core$List$cons, remaining, svgParts))), $elm$core$List$reverse(results));
                else {
                    var startIndex = _v0.a;
                    var contentStart = startIndex + $elm$core$String$length("<foreignObject");
                    var beforeForeignObject = A2($elm$core$String$left, startIndex, remaining);
                    var newSvgParts = A2($elm$core$List$cons, beforeForeignObject, svgParts);
                    var afterStart = A2($elm$core$String$dropLeft, contentStart, remaining);
                    var tagEndIndex = A2($elm$core$Maybe$withDefault, $elm$core$String$length(afterStart), $elm$core$List$head(A2($elm$core$String$indexes, ">", afterStart)));
                    var attributesString = $elm$core$String$trim(A3($elm$core$String$slice, 0, tagEndIndex, afterStart));
                    var attributes = parseAttributes(attributesString);
                    var contentStartIndex = contentStart + tagEndIndex + 1;
                    var content = A2($elm$core$String$dropLeft, contentStartIndex, remaining);
                    var endTagIndex = A2($elm$core$Maybe$withDefault, $elm$core$String$length(content), $elm$core$List$head(A2($elm$core$String$indexes, "</foreignObject>", content)));
                    var foreignObjectContent = A2($elm$core$String$left, endTagIndex, content);
                    var newRemaining = A2($elm$core$String$dropLeft, endTagIndex + $elm$core$String$length("</foreignObject>"), content);
                    var $temp$remaining = newRemaining, $temp$offset = offset + contentStartIndex + endTagIndex + $elm$core$String$length("</foreignObject>"), $temp$results = A2($elm$core$List$cons, _Utils_Tuple2(attributes, foreignObjectContent), results), $temp$svgParts = newSvgParts;
                    remaining = $temp$remaining;
                    offset = $temp$offset;
                    results = $temp$results;
                    svgParts = $temp$svgParts;
                    continue findForeignObjects;
                }
            }
        });
        return A4(findForeignObjects, svgCode, 0, _List_Nil, _List_Nil);
    });
    var $author$project$Lia$Parser$Helper$newlines = $andre_dietrich$parser_combinators$Combine$regex("\n*");
    var $author$project$Lia$Parser$Context$popAbort = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0), $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
        return _Utils_update(s, {
            abort: {
                isTrue: false,
                stack: A2($elm$core$List$drop, 1, s.abort.stack)
            }
        });
    }));
    var $author$project$Lia$Markdown$HTML$Parser$subParse = F3(function(defines, parser, code) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$many(parser), $andre_dietrich$parser_combinators$Combine$regex("( |	|\n)*")), defines, code + "\n");
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var state = _v1.a;
            var stream = _v1.b;
            var s = _v1.c;
            return _Utils_Tuple2(state, s);
        } else return _Utils_Tuple2(defines, _List_Nil);
    });
    var $author$project$Lia$Markdown$HTML$Attributes$toString = A2($elm$core$Basics$composeR, $elm$core$List$map(function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        return _Utils_ap(key, $elm$core$String$isEmpty(value) ? "" : '="' + (value + '"'));
    }), $elm$core$String$join(" "));
    var $author$project$Lia$Markdown$HTML$Parser$toStringNode = F3(function(name, attributes, tagBody) {
        return "<" + (name + (" " + ($author$project$Lia$Markdown$HTML$Attributes$toString(attributes) + (">" + (tagBody + ("</" + (name + ">")))))));
    });
    var $author$project$Lia$Markdown$HTML$Parser$tag = F2(function(parser, _v0) {
        var tagType = _v0.a;
        var attributes = _v0.b;
        switch(tagType.$){
            case "HtmlNode":
                var name = tagType.a;
                return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Context$popAbort, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$keep, parser, $author$project$Lia$Parser$Helper$newlines), $author$project$Lia$Markdown$HTML$Parser$closingTag(name)), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Context$addAbort("</" + (name + ">")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*>[ 	]*\n*"), $andre_dietrich$parser_combinators$Combine$succeed(A2($author$project$Lia$Markdown$HTML$Types$Node, name, attributes))))));
            case "HtmlVoidNode":
                var name = tagType.a;
                return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(">"), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$string("/")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$succeed(A3($author$project$Lia$Markdown$HTML$Types$Node, name, attributes, _List_Nil))))));
            case "WebComponent":
                var name = tagType.a;
                return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Parser$Helper$stringTill($author$project$Lia$Markdown$HTML$Parser$closingTag(name)), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*>"), $andre_dietrich$parser_combinators$Combine$succeed(A2($author$project$Lia$Markdown$HTML$Types$OuterHtml, name, attributes))));
            case "LiaKeep":
                return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$HTML$Types$InnerHtml, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($author$project$Lia$Markdown$HTML$Parser$closingTag("lia-keep")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(">"), $andre_dietrich$parser_combinators$Combine$whitespace)));
            default:
                return A2($andre_dietrich$parser_combinators$Combine$andThen, function(_v9) {
                    var state = _v9.a;
                    var node = _v9.b;
                    return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(node), $andre_dietrich$parser_combinators$Combine$putState(state));
                }, A2($andre_dietrich$parser_combinators$Combine$map, function(_v2) {
                    var code = _v2.a;
                    var state = _v2.b;
                    var _v3 = A2($author$project$Lia$Markdown$HTML$Parser$getAllForeignObjects, state, code);
                    var svgCode = _v3.a;
                    var foreignObjects = _v3.b;
                    var _v4 = A3($elm$core$List$foldl, F2(function(_v5, _v6) {
                        var attr = _v5.a;
                        var content = _v5.b;
                        var beforeState = _v6.a;
                        var accList = _v6.b;
                        var _v7 = A3($author$project$Lia$Markdown$HTML$Parser$subParse, beforeState, parser, content);
                        var afterState = _v7.a;
                        var parsedContent = _v7.b;
                        return _Utils_Tuple2(afterState, A2($elm$core$List$cons, _Utils_Tuple2(attr, parsedContent), accList));
                    }), _Utils_Tuple2(state, _List_Nil), foreignObjects);
                    var newState = _v4.a;
                    var parsedForeignObjects = _v4.b;
                    if (!foreignObjects.b) return _Utils_Tuple2(state, $author$project$Lia$Markdown$HTML$Types$InnerHtml(A3($author$project$Lia$Markdown$HTML$Parser$toStringNode, "svg", attributes, svgCode)));
                    else return _Utils_Tuple2(newState, A3($author$project$Lia$Markdown$HTML$Types$SvgNode, attributes, svgCode, parsedForeignObjects));
                }, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(function(state) {
                    return $andre_dietrich$parser_combinators$Combine$succeed(state);
                }), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($author$project$Lia$Markdown$HTML$Parser$closingTag("svg")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(">"), $andre_dietrich$parser_combinators$Combine$whitespace))))));
        }
    });
    var $author$project$Lia$Markdown$HTML$Types$HtmlNode = function(a) {
        return {
            $: "HtmlNode",
            a: a
        };
    };
    var $author$project$Lia$Markdown$HTML$Types$HtmlVoidNode = function(a) {
        return {
            $: "HtmlVoidNode",
            a: a
        };
    };
    var $author$project$Lia$Markdown$HTML$Types$LiaKeep = {
        $: "LiaKeep"
    };
    var $author$project$Lia$Markdown$HTML$Types$SVG = {
        $: "SVG"
    };
    var $author$project$Lia$Markdown$HTML$Types$WebComponent = function(a) {
        return {
            $: "WebComponent",
            a: a
        };
    };
    var $author$project$Lia$Markdown$HTML$Parser$voidElements = _List_fromArray([
        "area",
        "base",
        "br",
        "col",
        "embed",
        "hr",
        "img",
        "input",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
    ]);
    var $author$project$Lia$Markdown$HTML$Parser$isVoidElement = function(name) {
        return A2($elm$core$List$member, name, $author$project$Lia$Markdown$HTML$Parser$voidElements);
    };
    var $author$project$Lia$Markdown$HTML$Parser$toTag = function(name) {
        switch(name){
            case "script":
                return $andre_dietrich$parser_combinators$Combine$fail("");
            case "lia-keep":
                return $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$HTML$Types$LiaKeep);
            case "svg":
                return $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$HTML$Types$SVG);
            default:
                return $andre_dietrich$parser_combinators$Combine$succeed(A2($elm$core$String$contains, "-", name) ? $author$project$Lia$Markdown$HTML$Types$WebComponent(name) : $author$project$Lia$Markdown$HTML$Parser$isVoidElement(name) ? $author$project$Lia$Markdown$HTML$Types$HtmlVoidNode(name) : $author$project$Lia$Markdown$HTML$Types$HtmlNode(name));
        }
    };
    var $author$project$Lia$Markdown$HTML$Parser$tagName = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Parser$toTag, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$toLower, $andre_dietrich$parser_combinators$Combine$regex("\\w+(\\-\\w+)*")));
    var $author$project$Lia$Markdown$HTML$Parser$parse = function(parser) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Parser$tag(parser), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$HTML$Parser$attrParser), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$HTML$Parser$tagName, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*<[ 	]*"))))));
    };
    var $author$project$Lia$Markdown$Quiz$Block$Types$Quiz = F2(function(options, solution) {
        return {
            options: options,
            solution: solution
        };
    });
    var $author$project$Lia$Markdown$Quiz$Block$Types$Text = function(a) {
        return {
            $: "Text",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Parser$unescapeString = function(input) {
        return A3($elm$core$String$replace, "\\@", "@", A3($elm$core$String$replace, "\\]", "]", A3($elm$core$String$replace, "\\[", "[", A3($elm$core$String$replace, "\\)", ")", A3($elm$core$String$replace, "\\(", "(", A3($elm$core$String$replace, "\\|", "|", input))))));
    };
    var $author$project$Lia$Markdown$Quiz$Block$Parser$check = F4(function(parse_inlines, state, id, str) {
        var option = $elm$core$String$trim(str);
        var inlines = parse_inlines(state);
        return A2($elm$core$String$startsWith, "(", option) && A2($elm$core$String$endsWith, ")", option) ? _Utils_Tuple2(id, inlines($author$project$Lia$Markdown$Quiz$Block$Parser$unescapeString($elm$core$String$trim(A3($elm$core$String$slice, 1, -1, option))))) : _Utils_Tuple2(-1, inlines($author$project$Lia$Markdown$Quiz$Block$Parser$unescapeString(option)));
    });
    var $elm$regex$Regex$split = _Regex_splitAtMost(_Regex_infinity);
    var $author$project$Lia$Markdown$Quiz$Block$Parser$splitAtUnescapedPipe = function(input) {
        var regex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(?<!\\\\)\\|"));
        return A2($elm$core$List$map, A2($elm$core$String$replace, "\\|", "|"), A2($elm$regex$Regex$split, regex, input));
    };
    var $author$project$Lia$Markdown$Quiz$Block$Types$Select = F2(function(a, b) {
        return {
            $: "Select",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Quiz$Block$Parser$toSelect = function(list) {
        return $andre_dietrich$parser_combinators$Combine$succeed(A2($author$project$Lia$Markdown$Quiz$Block$Types$Quiz, A2($elm$core$List$map, $elm$core$Tuple$second, list), A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, false, A2($elm$core$List$map, $elm$core$Tuple$first, A2($elm$core$List$filter, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Basics$le(0)), list)))));
    };
    var $author$project$Lia$Markdown$Quiz$Block$Parser$split = F3(function(parse_inlines, str, state) {
        var _v0 = $author$project$Lia$Markdown$Quiz$Block$Parser$splitAtUnescapedPipe(str);
        if (_v0.b && !_v0.b.b) {
            var solution = _v0.a;
            var str_ = $elm$core$String$trim(A3($elm$core$String$replace, "_", " ", solution));
            return str_ === "?" || str_ === "!" || str_ === "" ? $andre_dietrich$parser_combinators$Combine$fail("") : $andre_dietrich$parser_combinators$Combine$succeed(A2($author$project$Lia$Markdown$Quiz$Block$Types$Quiz, _List_Nil, $author$project$Lia$Markdown$Quiz$Block$Types$Text($author$project$Lia$Markdown$Quiz$Block$Parser$unescapeString($elm$core$String$trim(solution)))));
        } else {
            var options = _v0;
            return $author$project$Lia$Markdown$Quiz$Block$Parser$toSelect(A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Quiz$Block$Parser$check, parse_inlines, state), options));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Block$Types$Drop = F3(function(a, b, c) {
        return {
            $: "Drop",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Quiz$Block$Parser$toDrop = function(list) {
        return $andre_dietrich$parser_combinators$Combine$succeed(A2($author$project$Lia$Markdown$Quiz$Block$Types$Quiz, A2($elm$core$List$map, $elm$core$Tuple$second, list), A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, A2($elm$core$List$map, $elm$core$Tuple$first, A2($elm$core$List$filter, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Basics$le(0)), list)))));
    };
    var $author$project$Lia$Markdown$Quiz$Block$Parser$splitDrop = F3(function(parse_inlines, str, state) {
        var _v0 = $author$project$Lia$Markdown$Quiz$Block$Parser$splitAtUnescapedPipe(str);
        if (_v0.b && !_v0.b.b) {
            var solution = _v0.a;
            var option = $elm$core$String$trim(solution);
            return $author$project$Lia$Markdown$Quiz$Block$Parser$toDrop(A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Quiz$Block$Parser$check, parse_inlines, state), _List_fromArray([
                A2($elm$core$String$startsWith, "(", option) && A2($elm$core$String$endsWith, ")", option) ? option : "(" + (option + ")")
            ])));
        } else {
            var options = _v0;
            return $author$project$Lia$Markdown$Quiz$Block$Parser$toDrop(A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Quiz$Block$Parser$check, parse_inlines, state), options));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Block$Parser$string1Till = A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$many1Till(A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_chr("]")), $andre_dietrich$parser_combinators$Combine$string("\\]")), $andre_dietrich$parser_combinators$Combine$Char$anyChar)), $andre_dietrich$parser_combinators$Combine$map($elm$core$String$fromList));
    var $author$project$Lia$Markdown$Quiz$Block$Parser$pattern = function(parse_inlines) {
        return A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$andThen, $andre_dietrich$parser_combinators$Combine$withState, A2($andre_dietrich$parser_combinators$Combine$map, F2(function(s, context) {
            return A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair($elm$core$String$length(s)), A3($author$project$Lia$Markdown$Quiz$Block$Parser$split, parse_inlines, s, context));
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Block$Parser$string1Till($andre_dietrich$parser_combinators$Combine$string("]]")), $andre_dietrich$parser_combinators$Combine$string("[[")))), A2($andre_dietrich$parser_combinators$Combine$andThen, $andre_dietrich$parser_combinators$Combine$withState, A2($andre_dietrich$parser_combinators$Combine$map, F2(function(s, context) {
            return A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair($elm$core$String$length(s)), A3($author$project$Lia$Markdown$Quiz$Block$Parser$splitDrop, parse_inlines, s, context));
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Block$Parser$string1Till($andre_dietrich$parser_combinators$Combine$string("]]")), $andre_dietrich$parser_combinators$Combine$string("[->[")))));
    };
    var $author$project$Lia$Markdown$Inline$Parser$refToEmbed = function(ref) {
        if (ref.$ === "Audio") {
            var info = ref.a;
            var _v1 = ref.b;
            var extern = _v1.a;
            var link = _v1.b;
            var title = ref.c;
            return !extern && (A2($elm$core$String$contains, "soundcloud.com", link) || A2($elm$core$String$contains, "spotify.com", link)) ? A3($author$project$Lia$Markdown$Inline$Types$Embed, info, link, title) : ref;
        } else return ref;
    };
    var $author$project$Lia$Parser$Context$searchIndex = $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.search_index;
    }, $andre_dietrich$parser_combinators$Combine$succeed));
    var $author$project$Lia$Markdown$Inline$Parser$ref_url_1 = $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $author$project$Lia$Markdown$Inline$Parser$url,
        A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex("#[^ 	\\)]+"), $author$project$Lia$Parser$Context$searchIndex),
        A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Inline$Parser$baseURL, $andre_dietrich$parser_combinators$Combine$regex('[^\\)\n "]*'))
    ]));
    var $author$project$Lia$Markdown$Inline$Parser$ref_url_2 = A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$url, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex('[^\\)\n "]*'), A2($andre_dietrich$parser_combinators$Combine$map, F2(function(_v0, url_) {
        var base = _v0.a;
        var appendix = _v0.b;
        return A3($author$project$Lia$Markdown$HTML$Attributes$toURL, base, appendix, url_);
    }), $andre_dietrich$parser_combinators$Combine$withState(function(s) {
        return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(s.defines.base, s.defines.appendix));
    }))));
    var $author$project$Lia$Markdown$Inline$Parser$Symbol$smileys = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Symbol, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE42", $andre_dietrich$parser_combinators$Combine$string(":-)")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE09", $andre_dietrich$parser_combinators$Combine$string(";-)")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE00", $andre_dietrich$parser_combinators$Combine$string(":-D")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE2E", $andre_dietrich$parser_combinators$Combine$string(":-O")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE41", $andre_dietrich$parser_combinators$Combine$string(":-(")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE10", $andre_dietrich$parser_combinators$Combine$string(":-|")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE15", $andre_dietrich$parser_combinators$Combine$string(":-/")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE15", $andre_dietrich$parser_combinators$Combine$string(":-\\")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE1B", $andre_dietrich$parser_combinators$Combine$string(":-P")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE1B", $andre_dietrich$parser_combinators$Combine$string(":-p")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE1C", $andre_dietrich$parser_combinators$Combine$string(";-P")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE1C", $andre_dietrich$parser_combinators$Combine$string(";-p")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE17", $andre_dietrich$parser_combinators$Combine$string(":-*")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE18", $andre_dietrich$parser_combinators$Combine$string(";-*")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE02", $andre_dietrich$parser_combinators$Combine$string(":')")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE22", $andre_dietrich$parser_combinators$Combine$string(":'(")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE2D", $andre_dietrich$parser_combinators$Combine$string(":'[")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE20", $andre_dietrich$parser_combinators$Combine$string(":-[")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE37", $andre_dietrich$parser_combinators$Combine$string(":-#")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE37", $andre_dietrich$parser_combinators$Combine$string(":-X")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, "\uD83D\uDE16", $andre_dietrich$parser_combinators$Combine$string(":-\xa7"))
    ])));
    var $author$project$Lia$Markdown$Inline$Parser$stringBase = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Chars, $andre_dietrich$parser_combinators$Combine$regex("[^\\[\\]\\(\\)@*+_~:;`\\^{}\\\\\\n<>=$ \"\\-|']+"));
    var $author$project$Lia$Markdown$Inline$Parser$stringBase2 = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Chars, $andre_dietrich$parser_combinators$Combine$regex("[^\n*+\\-]+"));
    var $author$project$Lia$Markdown$Inline$Parser$stringCharacters = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Chars, $andre_dietrich$parser_combinators$Combine$regex("[\\[\\]\\(\\)~:_;=${}\\-+\"*<>|']"));
    var $author$project$Lia$Markdown$Inline$Parser$stringEscape = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Chars, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[@\\^*_+~`\\\\${}\\[\\]|#\\-<>'\".]"), $andre_dietrich$parser_combinators$Combine$string("\\")));
    var $author$project$Lia$Markdown$Inline$Parser$stringSpaces = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Chars, $andre_dietrich$parser_combinators$Combine$regex("[ 	]+"));
    var $author$project$Lia$Markdown$Inline$Parser$toContainer = function(inline_list) {
        var _v0 = $author$project$Lia$Markdown$Inline$Types$combine(inline_list);
        if (_v0.b && !_v0.b.b) {
            var one = _v0.a;
            return one;
        } else {
            var moreThanOne = _v0;
            return A2($author$project$Lia$Markdown$Inline$Types$Container, moreThanOne, _List_Nil);
        }
    };
    var $author$project$Lia$Markdown$Inline$Parser$toInlines = function(element) {
        if (element.$ === "Container" && !element.b.b) {
            var elements = element.a;
            return elements;
        } else return _List_fromArray([
            element
        ]);
    };
    var $author$project$Lia$Markdown$Inline$Parser$between_ = function(str) {
        return A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Types$combine, $author$project$Lia$Markdown$Inline$Parser$toContainer), A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$many1Till, $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(), $andre_dietrich$parser_combinators$Combine$string(str)), $andre_dietrich$parser_combinators$Combine$string(str)));
    };
    var $author$project$Lia$Markdown$Inline$Parser$between_2 = F2(function(begin, end) {
        return A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Types$combine, $author$project$Lia$Markdown$Inline$Parser$toContainer), A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$many1Till, $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(), $andre_dietrich$parser_combinators$Combine$string(end)), $andre_dietrich$parser_combinators$Combine$string(begin)));
    });
    var $author$project$Lia$Markdown$Inline$Parser$parse_inlines = F2(function(state, str) {
        var _v1 = A3($andre_dietrich$parser_combinators$Combine$runParser, $author$project$Lia$Markdown$Inline$Parser$cyclic$line(), state, A3($elm$core$String$replace, "\n", " ", str));
        if (_v1.$ === "Ok") {
            var _v2 = _v1.a;
            var rslt = _v2.c;
            return rslt;
        } else return _List_Nil;
    });
    var $author$project$Lia$Markdown$Inline$Parser$ref_pattern = F3(function(ref_type, info_type, url_type) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(), A2($andre_dietrich$parser_combinators$Combine$andMap, url_type, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("("), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Parser$nicer_ref(ref_type), info_type)))));
    });
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringWithStyle() {
        return $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Bold, $author$project$Lia$Markdown$Inline$Parser$between_("**")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Bold, $author$project$Lia$Markdown$Inline$Parser$between_("__")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Italic, $author$project$Lia$Markdown$Inline$Parser$between_("*")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Italic, $author$project$Lia$Markdown$Inline$Parser$between_("_")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Underline, $author$project$Lia$Markdown$Inline$Parser$between_("~~")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Strike, $author$project$Lia$Markdown$Inline$Parser$between_("~")),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Superscript, $author$project$Lia$Markdown$Inline$Parser$between_("^")),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$stringQuote()
        ]));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$stringQuote() {
        return A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.defines;
        }, A2($elm$core$Basics$composeR, function($) {
            return $.typographic_quotation;
        }, A2($elm$core$Basics$composeR, function($) {
            return $._double;
        }, $andre_dietrich$parser_combinators$Combine$succeed)))), A2($andre_dietrich$parser_combinators$Combine$map, F2(function(text, _v5) {
            var start = _v5.a;
            var end = _v5.b;
            return $author$project$Lia$Markdown$Inline$Types$Container(_List_fromArray([
                A2($author$project$Lia$Markdown$Inline$Types$Chars, start, _List_Nil),
                text,
                A2($author$project$Lia$Markdown$Inline$Types$Chars, end, _List_Nil)
            ]));
        }), $author$project$Lia$Markdown$Inline$Parser$between_('"'))), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.defines;
        }, A2($elm$core$Basics$composeR, function($) {
            return $.typographic_quotation;
        }, A2($elm$core$Basics$composeR, function($) {
            return $.single;
        }, $andre_dietrich$parser_combinators$Combine$succeed)))), A2($andre_dietrich$parser_combinators$Combine$map, F2(function(text, _v6) {
            var start = _v6.a;
            var end = _v6.b;
            return $author$project$Lia$Markdown$Inline$Types$Container(_List_fromArray([
                A2($author$project$Lia$Markdown$Inline$Types$Chars, " " + start, _List_Nil),
                text,
                A2($author$project$Lia$Markdown$Inline$Types$Chars, end, _List_Nil)
            ]));
        }), A2($author$project$Lia$Markdown$Inline$Parser$between_2, " '", "'"))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$reference() {
        return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Ref, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr(),
            $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink()
        ])));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie() {
        return A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video(), $andre_dietrich$parser_combinators$Combine$string("!?"));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video() {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Multimedia$movie, $author$project$Lia$Markdown$Inline$Parser$ref_url_2), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("("), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Movie, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info())))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio() {
        return A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio(), $andre_dietrich$parser_combinators$Combine$string("?"));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio() {
        return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Parser$refToEmbed, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Multimedia$audio, $author$project$Lia$Markdown$Inline$Parser$ref_url_2), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("("), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Audio, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info()))))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr() {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$ref_url_1, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("("), A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Inline$Types$QR_Link, A2($andre_dietrich$parser_combinators$Combine$regexWith, {
            caseInsensitive: true,
            multiline: false
        }, "\\[\\w*qr-code\\w*]"))))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview() {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title(), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$ref_url_1, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("("), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\\w*]"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Inline$Types$Preview_Lia, A2($andre_dietrich$parser_combinators$Combine$regexWith, {
                caseInsensitive: true,
                multiline: false
            }, "lia")),
            A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Inline$Types$Preview_Link, A2($andre_dietrich$parser_combinators$Combine$regexWith, {
                caseInsensitive: true,
                multiline: false
            }, "link"))
        ])), A2($andre_dietrich$parser_combinators$Combine$regexWith, {
            caseInsensitive: true,
            multiline: false
        }, "\\[\\w*preview-")))))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title() {
        return $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Parser$toInlines, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$between_('"'), $author$project$Lia$Markdown$Inline$Parser$between_("'")), $author$project$Lia$Parser$Helper$spaces))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail() {
        return A3($author$project$Lia$Markdown$Inline$Parser$ref_pattern, $author$project$Lia$Markdown$Inline$Types$Mail, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(), $author$project$Lia$Markdown$Inline$Parser$email);
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink() {
        return A3($author$project$Lia$Markdown$Inline$Parser$ref_pattern, $author$project$Lia$Markdown$Inline$Types$Link, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(), $author$project$Lia$Markdown$Inline$Parser$ref_url_1);
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage() {
        return A2($andre_dietrich$parser_combinators$Combine$keep, A3($author$project$Lia$Markdown$Inline$Parser$ref_pattern, $author$project$Lia$Markdown$Inline$Types$Image, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(), $author$project$Lia$Markdown$Inline$Parser$ref_url_2), $andre_dietrich$parser_combinators$Combine$string("!"));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed() {
        return A2($andre_dietrich$parser_combinators$Combine$keep, A3($author$project$Lia$Markdown$Inline$Parser$ref_pattern, $author$project$Lia$Markdown$Inline$Types$Embed, $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info(), $author$project$Lia$Markdown$Inline$Parser$ref_url_1), $andre_dietrich$parser_combinators$Combine$string("??"));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info() {
        return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$combine, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Context$popAbort, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines(), $andre_dietrich$parser_combinators$Combine$string("]")), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Context$addAbort("]"), $andre_dietrich$parser_combinators$Combine$string("[")))));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$line() {
        return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$combine, $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Inline$Parser$cyclic$inlines()));
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines() {
        return $andre_dietrich$parser_combinators$Combine$lazy(function(_v3) {
            return A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$map, function(_v4) {
                var attr = _v4.a;
                var id = _v4.b;
                return A2($author$project$Lia$Markdown$Inline$Types$Script, id, attr);
            }, $author$project$Lia$Markdown$Inline$Parser$eScript(_List_Nil)), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$annotations, $author$project$Lia$Markdown$Macro$Parser$macro), $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
                $author$project$Lia$Markdown$Inline$Parser$code,
                $author$project$Lia$Markdown$Footnote$Parser$inline($author$project$Lia$Markdown$Inline$Parser$parse_inlines),
                $author$project$Lia$Markdown$Inline$Parser$cyclic$reference(),
                $author$project$Lia$Markdown$Inline$Parser$Formula$formula,
                A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$EInline, $author$project$Lia$Markdown$Effect$Parser$inline($author$project$Lia$Markdown$Inline$Parser$cyclic$inlines())),
                $author$project$Lia$Markdown$Inline$Parser$cyclic$input(),
                $author$project$Lia$Markdown$Inline$Parser$cyclic$strings()
            ])))), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Context$checkAbort));
        });
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$input() {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, function(isAllowed) {
            return isAllowed ? A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Quiz, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$add, $author$project$Lia$Markdown$Quiz$Block$Parser$pattern($author$project$Lia$Markdown$Inline$Parser$parse_inlines))) : $andre_dietrich$parser_combinators$Combine$fail("no inputs allowed");
        }, $author$project$Lia$Parser$Input$getPermission);
    }
    function $author$project$Lia$Markdown$Inline$Parser$cyclic$strings() {
        return $andre_dietrich$parser_combinators$Combine$lazy(function(_v0) {
            return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
                $author$project$Lia$Markdown$Inline$Parser$inline_url,
                $author$project$Lia$Markdown$Inline$Parser$ellipsis,
                $author$project$Lia$Markdown$Inline$Parser$stringBase,
                $author$project$Lia$Markdown$Inline$Parser$Symbol$arrows,
                $author$project$Lia$Markdown$Inline$Parser$dashes,
                $author$project$Lia$Markdown$Inline$Parser$Symbol$smileys,
                $author$project$Lia$Markdown$Inline$Parser$stringEscape,
                $author$project$Lia$Markdown$Inline$Parser$cyclic$stringWithStyle(),
                $author$project$Lia$Markdown$Inline$Parser$stringSpaces,
                A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$IHTML, $author$project$Lia$Markdown$HTML$Parser$parse($author$project$Lia$Markdown$Inline$Parser$cyclic$inlines())),
                $author$project$Lia$Markdown$Inline$Parser$stringCharacters,
                $author$project$Lia$Markdown$Inline$Parser$lineBreak,
                $author$project$Lia$Markdown$Inline$Parser$stringBase2
            ])), $author$project$Lia$Parser$Context$checkAbort);
        });
    }
    try {
        var $author$project$Lia$Markdown$Inline$Parser$stringWithStyle = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringWithStyle();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$stringWithStyle = function() {
            return $author$project$Lia$Markdown$Inline$Parser$stringWithStyle;
        };
        var $author$project$Lia$Markdown$Inline$Parser$stringQuote = $author$project$Lia$Markdown$Inline$Parser$cyclic$stringQuote();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$stringQuote = function() {
            return $author$project$Lia$Markdown$Inline$Parser$stringQuote;
        };
        var $author$project$Lia$Markdown$Inline$Parser$reference = $author$project$Lia$Markdown$Inline$Parser$cyclic$reference();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$reference = function() {
            return $author$project$Lia$Markdown$Inline$Parser$reference;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refMovie = $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refMovie = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refMovie;
        };
        var $author$project$Lia$Markdown$Inline$Parser$ref_video = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_video = function() {
            return $author$project$Lia$Markdown$Inline$Parser$ref_video;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refAudio = $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refAudio = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refAudio;
        };
        var $author$project$Lia$Markdown$Inline$Parser$ref_audio = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_audio = function() {
            return $author$project$Lia$Markdown$Inline$Parser$ref_audio;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refQr = $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refQr = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refQr;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refPreview = $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refPreview = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refPreview;
        };
        var $author$project$Lia$Markdown$Inline$Parser$ref_title = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_title = function() {
            return $author$project$Lia$Markdown$Inline$Parser$ref_title;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refMail = $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refMail = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refMail;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refLink = $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refLink = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refLink;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refImage = $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refImage = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refImage;
        };
        var $author$project$Lia$Markdown$Inline$Parser$refEmbed = $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$refEmbed = function() {
            return $author$project$Lia$Markdown$Inline$Parser$refEmbed;
        };
        var $author$project$Lia$Markdown$Inline$Parser$ref_info = $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$ref_info = function() {
            return $author$project$Lia$Markdown$Inline$Parser$ref_info;
        };
        var $author$project$Lia$Markdown$Inline$Parser$line = $author$project$Lia$Markdown$Inline$Parser$cyclic$line();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$line = function() {
            return $author$project$Lia$Markdown$Inline$Parser$line;
        };
        var $author$project$Lia$Markdown$Inline$Parser$inlines = $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$inlines = function() {
            return $author$project$Lia$Markdown$Inline$Parser$inlines;
        };
        var $author$project$Lia$Markdown$Inline$Parser$input = $author$project$Lia$Markdown$Inline$Parser$cyclic$input();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$input = function() {
            return $author$project$Lia$Markdown$Inline$Parser$input;
        };
        var $author$project$Lia$Markdown$Inline$Parser$strings = $author$project$Lia$Markdown$Inline$Parser$cyclic$strings();
        $author$project$Lia$Markdown$Inline$Parser$cyclic$strings = function() {
            return $author$project$Lia$Markdown$Inline$Parser$strings;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Inline.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    stringWithStyle\n  │     ↓\n  │    stringQuote\n  │     ↓\n  │    reference\n  │     ↓\n  │    refMovie\n  │     ↓\n  │    ref_video\n  │     ↓\n  │    refAudio\n  │     ↓\n  │    ref_audio\n  │     ↓\n  │    refQr\n  │     ↓\n  │    refPreview\n  │     ↓\n  │    ref_title\n  │     ↓\n  │    between_\n  │     ↓\n  │    between_2\n  │     ↓\n  │    refMail\n  │     ↓\n  │    refLink\n  │     ↓\n  │    refImage\n  │     ↓\n  │    refEmbed\n  │     ↓\n  │    ref_info\n  │     ↓\n  │    line\n  │     ↓\n  │    inlines\n  │     ↓\n  │    input\n  │     ↓\n  │    parse_inlines\n  │     ↓\n  │    ref_pattern\n  │     ↓\n  │    strings\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Definition$Parser$inline_parser = F2(function(defines, str) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, $author$project$Lia$Markdown$Inline$Parser$line, A3($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, defines), A3($elm$core$String$replace, "\n", " ", str));
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var rslt = _v1.c;
            return rslt;
        } else return _List_Nil;
    });
    var $author$project$I18n$Quotation$single1 = _List_fromArray([
        "zh",
        "en",
        "es",
        "ru",
        "hi",
        "id",
        "ta",
        "tr",
        "ur",
        "no",
        "ko",
        "af",
        "sq",
        "fil",
        "eo",
        "ga",
        "mt",
        "ia",
        "io",
        "ua",
        "cy",
        "gd"
    ]);
    var $author$project$I18n$Quotation$single2 = _List_fromArray([
        "fr",
        "am",
        "ti",
        "ug",
        "rm"
    ]);
    var $author$project$I18n$Quotation$single3 = _List_fromArray([
        "sv",
        "fi",
        "bg",
        "hr",
        "bs"
    ]);
    var $author$project$I18n$Quotation$single4 = _List_fromArray([
        "de",
        "cs",
        "sr",
        "sk",
        "lt",
        "is",
        "sl",
        "sb",
        "uz"
    ]);
    var $author$project$I18n$Quotation$single5 = _List_fromArray([
        "nl",
        "he"
    ]);
    var $author$project$I18n$Quotation$single6 = _List_fromArray([
        "bo",
        "khb",
        "tdd"
    ]);
    var $author$project$I18n$Quotation$one = function(languageCode) {
        return A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single1) ? _Utils_Tuple2("‘", "’") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single4) ? _Utils_Tuple2("‚", "‘") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single2) ? _Utils_Tuple2("‹", "›") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single5) ? _Utils_Tuple2("‚", "’") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single3) ? _Utils_Tuple2("’", "’") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$single6) ? _Utils_Tuple2("〈", "〉") : _Utils_Tuple2("'", "'");
    };
    var $author$project$I18n$Quotation$double1 = _List_fromArray([
        "en",
        "hi",
        "id",
        "pt",
        "ur",
        "vi",
        "tr",
        "ta",
        "th",
        "ko",
        "fil",
        "az",
        "af",
        "lo",
        "lv",
        "mt",
        "ia",
        "eo",
        "ga",
        "cy",
        "gd"
    ]);
    var $author$project$I18n$Quotation$double2 = _List_fromArray([
        "de",
        "sr",
        "bg",
        "cs",
        "sk",
        "lt",
        "mk",
        "sq",
        "sl",
        "ka",
        "et",
        "is",
        "sb"
    ]);
    var $author$project$I18n$Quotation$double3 = _List_fromArray([
        "sv",
        "fi",
        "bs"
    ]);
    var $author$project$I18n$Quotation$double4 = _List_fromArray([
        "es",
        "fr",
        "ar",
        "ru",
        "fa",
        "uz",
        "kk",
        "am",
        "uk",
        "ps",
        "hy",
        "km",
        "oc",
        "ca",
        "gl",
        "el",
        "it",
        "ug",
        "eu",
        "rm",
        "ti",
        "kaa",
        "no",
        "io"
    ]);
    var $author$project$I18n$Quotation$double5 = _List_fromArray([
        "pl",
        "nl",
        "hu",
        "ro",
        "hr"
    ]);
    var $author$project$I18n$Quotation$double6 = _List_fromArray([
        "da"
    ]);
    var $author$project$I18n$Quotation$double7 = _List_fromArray([
        "bo",
        "khb",
        "tdd"
    ]);
    var $author$project$I18n$Quotation$double8 = _List_fromArray([
        "zh",
        "ja"
    ]);
    var $author$project$I18n$Quotation$two = function(languageCode) {
        return A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double8) ? _Utils_Tuple2("「", "」") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double4) ? _Utils_Tuple2("\xab", "\xbb") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double1) ? _Utils_Tuple2("“", "”") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double2) ? _Utils_Tuple2("„", "“") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double5) ? _Utils_Tuple2("„", "”") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double3) ? _Utils_Tuple2("”", "”") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double7) ? _Utils_Tuple2("《", "》") : A2($elm$core$List$member, languageCode, $author$project$I18n$Quotation$double6) ? _Utils_Tuple2("\xbb", "\xab") : _Utils_Tuple2('"', '"');
    };
    var $author$project$I18n$Quotation$quotation = function(languageCode) {
        return {
            _double: $author$project$I18n$Quotation$two(languageCode),
            single: $author$project$I18n$Quotation$one(languageCode)
        };
    };
    var $author$project$Lia$Definition$Parser$set = function(fct) {
        return $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
            return _Utils_update(s, {
                defines: fct(s.defines)
            });
        });
    };
    var $author$project$Lia$Definition$Parser$store = function(_v0) {
        var key_ = _v0.a;
        var value_ = _v0.b;
        switch(key_){
            case "attribute":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        attributes: A2($elm$core$List$append, c.attributes, _List_fromArray([
                            A2($author$project$Lia$Definition$Parser$inline_parser, c, value_)
                        ]))
                    });
                });
            case "author":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        author: value_
                    });
                });
            case "base":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        base: value_
                    });
                });
            case "comment":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    var singleLineComment = $author$project$Lia$Definition$Parser$reduce(value_);
                    return A2($author$project$Lia$Markdown$Macro$Parser$add, _Utils_Tuple2("comment", singleLineComment), _Utils_update(c, {
                        comment: A2($author$project$Lia$Definition$Parser$inline_parser, c, singleLineComment)
                    }));
                });
            case "dark":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        lightMode: function() {
                            var _v2 = $elm$core$String$toLower(value_);
                            switch(_v2){
                                case "true":
                                    return $elm$core$Maybe$Just(false);
                                case "false":
                                    return $elm$core$Maybe$Just(true);
                                default:
                                    return $elm$core$Maybe$Nothing;
                            }
                        }()
                    });
                });
            case "date":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        date: value_
                    });
                });
            case "email":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        email: value_
                    });
                });
            case "import":
                return $author$project$Lia$Definition$Parser$set($author$project$Lia$Definition$Types$add_imports(value_));
            case "language":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        language: value_,
                        typographic_quotation: $author$project$I18n$Quotation$quotation(value_)
                    });
                });
            case "link":
                return $author$project$Lia$Definition$Parser$set(A2($author$project$Lia$Definition$Types$addToResources, $author$project$Lia$Definition$Types$Link, value_));
            case "logo":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        logo: A3($author$project$Lia$Markdown$HTML$Attributes$toURL, c.base, c.appendix, value_)
                    });
                });
            case "narrator":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        narrator: value_
                    });
                });
            case "script":
                return $author$project$Lia$Definition$Parser$set(A2($author$project$Lia$Definition$Types$addToResources, $author$project$Lia$Definition$Types$Script, value_));
            case "SCRIPT":
                return $author$project$Lia$Definition$Parser$set(A2($author$project$Lia$Definition$Types$addToResources, $author$project$Lia$Definition$Types$Module, value_));
            case "translation":
                return $author$project$Lia$Definition$Parser$set($author$project$Lia$Definition$Types$add_translation(value_));
            case "formula":
                return $author$project$Lia$Definition$Parser$set($author$project$Lia$Definition$Types$add_formula(value_));
            case "version":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        version: value_
                    });
                });
            case "mode":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        mode: function() {
                            var _v3 = $elm$core$String$toLower(value_);
                            switch(_v3){
                                case "textbook":
                                    return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Textbook);
                                case "presentation":
                                    return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Presentation);
                                case "slides":
                                    return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$Slides);
                                default:
                                    return $elm$core$Maybe$Nothing;
                            }
                        }()
                    });
                });
            case "debug":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        debug: value_ === "true"
                    });
                });
            case "onload":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        onload: value_
                    });
                });
            case "icon":
                return $author$project$Lia$Definition$Parser$set(function(c) {
                    return _Utils_update(c, {
                        macro: A3($elm$core$Dict$insert, "icon", A3($author$project$Lia$Markdown$HTML$Attributes$toURL, c.base, c.appendix, value_), c.macro)
                    });
                });
            default:
                return $author$project$Lia$Definition$Parser$set($author$project$Lia$Markdown$Macro$Parser$add(_Utils_Tuple2(key_, value_)));
        }
    };
    var $author$project$Lia$Definition$Parser$defs = $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$skip(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Definition$Parser$multiline, $andre_dietrich$parser_combinators$Combine$regex("@@@.*\n"))),
        $andre_dietrich$parser_combinators$Combine$skip(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Definition$Parser$lines, $andre_dietrich$parser_combinators$Combine$regex("@@.*\n"))),
        A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Definition$Parser$store, $author$project$Lia$Definition$Parser$key_value)
    ]));
    var $author$project$Lia$Definition$Parser$definition = $andre_dietrich$parser_combinators$Combine$lazy(function(_v0) {
        return $andre_dietrich$parser_combinators$Combine$skip($author$project$Lia$Markdown$Inline$Parser$comment(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Definition$Parser$defs, $andre_dietrich$parser_combinators$Combine$whitespace)))));
    });
    var $author$project$Lia$Definition$Parser$parse = $andre_dietrich$parser_combinators$Combine$skip(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
        return _Utils_update(s, {
            defines_updated: true
        });
    }), $author$project$Lia$Definition$Parser$definition))));
    var $author$project$Error$Message$parseDefinition = F3(function(first, _v0, message) {
        var code = _v0.a;
        var errorLine = _v0.b;
        var end = _Utils_cmp(errorLine + 10, $elm$core$String$length(code)) > 0 ? $elm$core$String$length(code) : errorLine + 10;
        var begin = errorLine < 10 ? 0 : errorLine - 10;
        return (first ? "\n> I was trying to parse the **first** part of the course, which is either an\n> HTML-comment or something else, until I reach the header (which is marked by\n> an `#`). But, everything I got was the following:" : "> I have a problem with the following part of the code:") + ('\n\n<!-- data-showGutter data-firstLineNumber="' + ($elm$core$String$fromInt(begin) + ('" -->\n````` markdown\n...\n' + (A2($elm$core$String$join, "\n", A2($elm$core$List$take, end - begin, A2($elm$core$List$drop, begin, $elm$core$String$lines(code)))) + ("\n...\n`````\n" + ((first ? "\n> I might be wrong, but in most cases this refers to a falsely loaded HTML page!\n>\n> Please make sure, that the course you try to load is a Markdown file, which\n> is served as a plain text file...\n" : "> If you see this in the editor, try to fix it otherwise contact the creator.\n") + ("\n---\n\n**Error Message:**\n\n```\n" + (message + "\n```\n\n---\n\nIf it should work, and you think you have detected a bug, please contact us. For\nmore information see the [last Section](#get-help?).\n"))))))));
    });
    var $author$project$Lia$Parser$Parser$parse_definition = F3(function(base, appendix, code) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$string("#"), $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$regex("\n#"))), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Definition$Parser$parse, $andre_dietrich$parser_combinators$Combine$regex("\\s*"))), A3($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, A2($author$project$Lia$Definition$Types$default, base, appendix)), code + "\n");
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var state = _v1.a;
            var data = _v1.b;
            return $elm$core$Result$Ok(_Utils_Tuple2(state.defines, "#" + data.input));
        } else {
            var _v2 = _v0.a;
            var stream = _v2.b;
            var ms = _v2.c;
            return $elm$core$Result$Err($elm$core$String$trim(code) === "" ? $author$project$Error$Message$emptyFile : A3($author$project$Error$Message$parseDefinition, true, _Utils_Tuple2(code, $andre_dietrich$parser_combinators$Combine$currentLocation(stream).line), A2($author$project$Lia$Parser$Parser$formatError, ms, stream)));
        }
    });
    var $author$project$Service$Resource$style = function(body) {
        return A2($author$project$Service$Resource$event, "style", body);
    };
    var $author$project$Lia$Script$init_script = F2(function(model, script) {
        var _v0 = A3($author$project$Lia$Parser$Parser$parse_definition, model.origin, A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlQuery(model.readme)), script);
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var definition = _v1.a;
            var code = _v1.b;
            var settings = model.settings;
            return {
                code: $elm$core$Maybe$Just(code),
                event: A2($elm$core$Maybe$map, $author$project$Service$Resource$style, A2($elm$core$Dict$get, "style", definition.macro)),
                model: A2($author$project$Lia$Script$add_todos, definition, _Utils_update(model, {
                    definition: _Utils_update(definition, {
                        attributes: _List_Nil
                    }),
                    langCode: definition.language,
                    langCodeOriginal: definition.language,
                    persistent: $author$project$Lia$Utils$checkPersistency(definition.macro),
                    settings: _Utils_update(settings, {
                        customTheme: A2($elm$core$Dict$get, "custom", definition.macro),
                        edit: function() {
                            var _v2 = A2($elm$core$Dict$get, "edit", definition.macro);
                            if (_v2.$ === "Just") switch(_v2.a){
                                case "true":
                                    return $author$project$Lia$Script$openInLiveEditor(model.readme);
                                case "on":
                                    return $author$project$Lia$Script$openInLiveEditor(model.readme);
                                case "false":
                                    return $elm$core$Maybe$Nothing;
                                case "off":
                                    return $elm$core$Maybe$Nothing;
                                default:
                                    var url = _v2.a;
                                    return $elm$core$Maybe$Just(url);
                            }
                            else return $elm$core$Maybe$Nothing;
                        }(),
                        hasShareApi: function() {
                            var _v3 = A2($elm$core$Maybe$map, $author$project$Lia$Utils$checkFalse, A2($elm$core$Dict$get, "sharing", definition.macro));
                            if (_v3.$ === "Just" && !_v3.a) return $elm$core$Maybe$Nothing;
                            else return settings.hasShareApi;
                        }(),
                        light: A2($elm$core$Maybe$withDefault, settings.light, definition.lightMode),
                        mode: A2($elm$core$Maybe$withDefault, settings.mode, definition.mode),
                        sync: function() {
                            var _v4 = A2($elm$core$Maybe$map, $author$project$Lia$Utils$checkFalse, A2($elm$core$Dict$get, "classroom", definition.macro));
                            if (_v4.$ === "Just" && !_v4.a) return $elm$core$Maybe$Nothing;
                            else return settings.sync;
                        }(),
                        translateWithGoogle: function() {
                            var _v5 = A2($elm$core$Maybe$map, $author$project$Lia$Utils$checkFalse, A2($elm$core$Dict$get, "translateWithGoogle", definition.macro));
                            if (_v5.$ === "Just" && !_v5.a) return $elm$core$Maybe$Nothing;
                            else return settings.translateWithGoogle;
                        }()
                    }),
                    translation: A2($elm$core$Maybe$withDefault, $author$project$I18n$Translations$En, $author$project$I18n$Translations$getLnFromCode(definition.language))
                })),
                templates: definition.imports
            };
        } else {
            var msg = _v0.a;
            return {
                code: $elm$core$Maybe$Nothing,
                event: $elm$core$Maybe$Nothing,
                model: _Utils_update(model, {
                    error: $elm$core$Maybe$Just(msg)
                }),
                templates: _List_Nil
            };
        }
    });
    var $author$project$Update$LiaParse = {
        $: "LiaParse"
    };
    var $author$project$Model$Parsing = F2(function(a, b) {
        return {
            $: "Parsing",
            a: a,
            b: b
        };
    });
    var $author$project$Model$Error = function(a) {
        return {
            $: "Error",
            a: a
        };
    };
    var $author$project$Error$Report$add = F2(function(state, message) {
        if (state.$ === "Error") {
            var messages = state.a;
            return $author$project$Model$Error(A2($elm$core$List$append, messages, _List_fromArray([
                message
            ])));
        } else return $author$project$Model$Error(_List_fromArray([
            message
        ]));
    });
    var $andre_dietrich$elm_conditional$Conditional$apply2When = F3(function(_function, a, b) {
        if (a.$ === "Just") {
            var a_ = a.a;
            return A2(_function, a_, b);
        } else return b;
    });
    var $andre_dietrich$elm_conditional$Conditional$List$addWhen = $andre_dietrich$elm_conditional$Conditional$apply2When($elm$core$List$cons);
    var $author$project$Update$Load_ReadMe_Result = F2(function(a, b) {
        return {
            $: "Load_ReadMe_Result",
            a: a,
            b: b
        };
    });
    var $author$project$Update$Load_Template_Result = F2(function(a, b) {
        return {
            $: "Load_Template_Result",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$BadStatus_ = F2(function(a, b) {
        return {
            $: "BadStatus_",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$BadUrl_ = function(a) {
        return {
            $: "BadUrl_",
            a: a
        };
    };
    var $elm$http$Http$GoodStatus_ = F2(function(a, b) {
        return {
            $: "GoodStatus_",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$NetworkError_ = {
        $: "NetworkError_"
    };
    var $elm$http$Http$Receiving = function(a) {
        return {
            $: "Receiving",
            a: a
        };
    };
    var $elm$http$Http$Sending = function(a) {
        return {
            $: "Sending",
            a: a
        };
    };
    var $elm$http$Http$Timeout_ = {
        $: "Timeout_"
    };
    var $elm$core$Maybe$isJust = function(maybe) {
        if (maybe.$ === "Just") return true;
        else return false;
    };
    var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
    var $elm$http$Http$expectStringResponse = F2(function(toMsg, toResult) {
        return A3(_Http_expect, "", $elm$core$Basics$identity, A2($elm$core$Basics$composeR, toResult, toMsg));
    });
    var $elm$http$Http$BadBody = function(a) {
        return {
            $: "BadBody",
            a: a
        };
    };
    var $elm$http$Http$BadStatus = function(a) {
        return {
            $: "BadStatus",
            a: a
        };
    };
    var $elm$http$Http$BadUrl = function(a) {
        return {
            $: "BadUrl",
            a: a
        };
    };
    var $elm$http$Http$NetworkError = {
        $: "NetworkError"
    };
    var $elm$http$Http$Timeout = {
        $: "Timeout"
    };
    var $elm$http$Http$resolve = F2(function(toResult, response) {
        switch(response.$){
            case "BadUrl_":
                var url = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadUrl(url));
            case "Timeout_":
                return $elm$core$Result$Err($elm$http$Http$Timeout);
            case "NetworkError_":
                return $elm$core$Result$Err($elm$http$Http$NetworkError);
            case "BadStatus_":
                var metadata = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata.statusCode));
            default:
                var body = response.b;
                return A2($elm$core$Result$mapError, $elm$http$Http$BadBody, toResult(body));
        }
    });
    var $elm$http$Http$expectString = function(toMsg) {
        return A2($elm$http$Http$expectStringResponse, toMsg, $elm$http$Http$resolve($elm$core$Result$Ok));
    };
    var $elm$http$Http$emptyBody = _Http_emptyBody;
    var $elm$http$Http$Request = function(a) {
        return {
            $: "Request",
            a: a
        };
    };
    var $elm$http$Http$State = F2(function(reqs, subs) {
        return {
            reqs: reqs,
            subs: subs
        };
    });
    var $elm$http$Http$init = $elm$core$Task$succeed(A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
    var $elm$core$Process$kill = _Scheduler_kill;
    var $elm$core$Process$spawn = _Scheduler_spawn;
    var $elm$http$Http$updateReqs = F3(function(router, cmds, reqs) {
        updateReqs: while(true){
            if (!cmds.b) return $elm$core$Task$succeed(reqs);
            else {
                var cmd = cmds.a;
                var otherCmds = cmds.b;
                if (cmd.$ === "Cancel") {
                    var tracker = cmd.a;
                    var _v2 = A2($elm$core$Dict$get, tracker, reqs);
                    if (_v2.$ === "Nothing") {
                        var $temp$router = router, $temp$cmds = otherCmds, $temp$reqs = reqs;
                        router = $temp$router;
                        cmds = $temp$cmds;
                        reqs = $temp$reqs;
                        continue updateReqs;
                    } else {
                        var pid = _v2.a;
                        return A2($elm$core$Task$andThen, function(_v3) {
                            return A3($elm$http$Http$updateReqs, router, otherCmds, A2($elm$core$Dict$remove, tracker, reqs));
                        }, $elm$core$Process$kill(pid));
                    }
                } else {
                    var req = cmd.a;
                    return A2($elm$core$Task$andThen, function(pid) {
                        var _v4 = req.tracker;
                        if (_v4.$ === "Nothing") return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
                        else {
                            var tracker = _v4.a;
                            return A3($elm$http$Http$updateReqs, router, otherCmds, A3($elm$core$Dict$insert, tracker, pid, reqs));
                        }
                    }, $elm$core$Process$spawn(A3(_Http_toTask, router, $elm$core$Platform$sendToApp(router), req)));
                }
            }
        }
    });
    var $elm$http$Http$onEffects = F4(function(router, cmds, subs, state) {
        return A2($elm$core$Task$andThen, function(reqs) {
            return $elm$core$Task$succeed(A2($elm$http$Http$State, reqs, subs));
        }, A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
    });
    var $elm$http$Http$maybeSend = F4(function(router, desiredTracker, progress, _v0) {
        var actualTracker = _v0.a;
        var toMsg = _v0.b;
        return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(A2($elm$core$Platform$sendToApp, router, toMsg(progress))) : $elm$core$Maybe$Nothing;
    });
    var $elm$http$Http$onSelfMsg = F3(function(router, _v0, state) {
        var tracker = _v0.a;
        var progress = _v0.b;
        return A2($elm$core$Task$andThen, function(_v1) {
            return $elm$core$Task$succeed(state);
        }, $elm$core$Task$sequence(A2($elm$core$List$filterMap, A3($elm$http$Http$maybeSend, router, tracker, progress), state.subs)));
    });
    var $elm$http$Http$Cancel = function(a) {
        return {
            $: "Cancel",
            a: a
        };
    };
    var $elm$http$Http$cmdMap = F2(function(func, cmd) {
        if (cmd.$ === "Cancel") {
            var tracker = cmd.a;
            return $elm$http$Http$Cancel(tracker);
        } else {
            var r = cmd.a;
            return $elm$http$Http$Request({
                allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
                body: r.body,
                expect: A2(_Http_mapExpect, func, r.expect),
                headers: r.headers,
                method: r.method,
                timeout: r.timeout,
                tracker: r.tracker,
                url: r.url
            });
        }
    });
    var $elm$http$Http$MySub = F2(function(a, b) {
        return {
            $: "MySub",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$subMap = F2(function(func, _v0) {
        var tracker = _v0.a;
        var toMsg = _v0.b;
        return A2($elm$http$Http$MySub, tracker, A2($elm$core$Basics$composeR, toMsg, func));
    });
    _Platform_effectManagers["Http"] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
    var $elm$http$Http$command = _Platform_leaf("Http");
    var $elm$http$Http$subscription = _Platform_leaf("Http");
    var $elm$http$Http$request = function(r) {
        return $elm$http$Http$command($elm$http$Http$Request({
            allowCookiesFromOtherDomains: false,
            body: r.body,
            expect: r.expect,
            headers: r.headers,
            method: r.method,
            timeout: r.timeout,
            tracker: r.tracker,
            url: r.url
        }));
    };
    var $elm$http$Http$get = function(r) {
        return $elm$http$Http$request({
            body: $elm$http$Http$emptyBody,
            expect: r.expect,
            headers: _List_Nil,
            method: "GET",
            timeout: $elm$core$Maybe$Nothing,
            tracker: $elm$core$Maybe$Nothing,
            url: r.url
        });
    };
    var $author$project$Service$Zip$decompress = function(_v0) {
        var template = _v0.template;
        var id = _v0.id;
        var data = _v0.data;
        return A2($author$project$Service$Event$init, "zip", {
            cmd: "unzip",
            param: $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("template", $elm$json$Json$Encode$bool(template)),
                _Utils_Tuple2("id", $elm$json$Json$Encode$string(id)),
                _Utils_Tuple2("data", $elm$json$Json$Encode$string(data))
            ]))
        });
    };
    var $elm$url$Url$percentDecode = _Url_percentDecode;
    var $author$project$Update$toCmd = F2(function(msg, result) {
        return A2($elm$core$Task$perform, $elm$core$Basics$always(msg(result)), $elm$core$Task$succeed(_Utils_Tuple0));
    });
    var $author$project$Update$loadFromData = F2(function(template, url) {
        var msg = template ? $author$project$Update$Load_Template_Result(url) : $author$project$Update$Load_ReadMe_Result(url);
        var _v0 = A2($elm$core$String$split, ",", url);
        if (_v0.b && _v0.b.b && !_v0.b.b.b) {
            var protocol = _v0.a;
            var _v1 = _v0.b;
            var data = _v1.a;
            return A2($elm$core$String$endsWith, "gzip;base64", protocol) ? $author$project$Update$event2js($author$project$Service$Zip$decompress({
                data: data,
                id: url,
                template: template
            })) : A2($author$project$Update$toCmd, msg, function() {
                if (A2($elm$core$String$endsWith, "base64", protocol)) {
                    var _v2 = $truqu$elm_base64$Base64$decode(data);
                    if (_v2.$ === "Err") {
                        var info = _v2.a;
                        return $elm$core$Result$Err($elm$http$Http$BadBody(info));
                    } else {
                        var string = _v2.a;
                        return $elm$core$Result$Ok(string);
                    }
                } else {
                    var _v3 = $elm$url$Url$percentDecode(data);
                    if (_v3.$ === "Just") {
                        var string = _v3.a;
                        return $elm$core$Result$Ok(string);
                    } else return $elm$core$Result$Err($elm$http$Http$BadBody("could not apply percent decode"));
                }
            }());
        } else return A2($author$project$Update$toCmd, msg, $elm$core$Result$Err($elm$http$Http$BadBody("wrong data protocol")));
    });
    var $author$project$Service$P2P$load = function(_v0) {
        var template = _v0.template;
        var uri = _v0.uri;
        return {
            cmd: "load",
            param: $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("template", $elm$json$Json$Encode$bool(template)),
                _Utils_Tuple2("uri", $elm$json$Json$Encode$string(uri))
            ]))
        };
    };
    var $author$project$Service$P2P$nostr = A2($elm$core$Basics$composeR, $author$project$Service$P2P$load, $author$project$Service$Event$init("nostr"));
    var $author$project$Service$P2P$torrent = A2($elm$core$Basics$composeR, $author$project$Service$P2P$load, $author$project$Service$Event$init("torrent"));
    var $author$project$Update$download = F2(function(template, url) {
        return A2($elm$core$String$startsWith, "data:text", url) ? A2($author$project$Update$loadFromData, template, url) : A2($elm$core$String$startsWith, "magnet:", url) ? $author$project$Update$event2js($author$project$Service$P2P$torrent({
            template: template,
            uri: url
        })) : A2($elm$core$String$startsWith, "nostr:", url) ? $author$project$Update$event2js($author$project$Service$P2P$nostr({
            template: template,
            uri: url
        })) : $elm$http$Http$get({
            expect: $elm$http$Http$expectString(template ? $author$project$Update$Load_Template_Result(url) : $author$project$Update$Load_ReadMe_Result(url)),
            url: url
        });
    });
    var $elm$core$Process$sleep = _Process_sleep;
    var $author$project$Update$message = function(msg) {
        return A2($elm$core$Task$perform, $elm$core$Basics$identity, A2($elm$core$Task$map, $elm$core$Basics$always(msg), $elm$core$Process$sleep(0)));
    };
    var $author$project$Update$LiaScript = function(a) {
        return {
            $: "LiaScript",
            a: a
        };
    };
    var $author$project$Update$batch = F2(function(map, ret) {
        return $elm$core$Platform$Cmd$batch(A2($elm$core$List$cons, A2($elm$core$Platform$Cmd$map, map, ret.command), A2($elm$core$List$map, $author$project$Update$event2js, ret.events)));
    });
    var $author$project$Error$Message$multiple = "> There seem to be a couple of errors, I hope nothing really bad that cannot be fixed.\n> However, I tried to list these errors within the following sub-subsections.\n>\n> If you have found a bug, contact us. See section [Get Help?](#get-help?)\n\n";
    var $author$project$Error$Message$unknown = "It seems that an error has occurred, but I do not know for\nsure what actually happened. There seems to be not enough information.";
    var $author$project$Error$Report$slide = F3(function(title, indentation, body) {
        return {
            code: (body === "" ? $author$project$Error$Message$unknown : body) + "\n",
            indentation: indentation,
            title: _List_fromArray([
                A2($author$project$Lia$Markdown$Inline$Types$Chars, title, _List_Nil)
            ])
        };
    });
    var $author$project$Error$Message$getHelp = "Feel free to contact us, if you need help, found a bug, or if you have some ideas for improvements.\nYou can reach us via:\n\n* mail: [LiaScript\\@web.de](mailto:LiaScript@web.de)\n* chat: https://gitter.im/LiaScript/community\n* twitter: https://twitter.com/liascript\n\nHave nice day and happy coding!\n";
    var $author$project$Lia$Section$init = F3(function(seed, id, base) {
        return {
            body: _List_Nil,
            code: base.code,
            code_model: $author$project$Lia$Markdown$Code$Types$init,
            definition: $elm$core$Maybe$Nothing,
            effect_model: $author$project$Lia$Markdown$Effect$Model$init,
            error: $elm$core$Maybe$Nothing,
            footnote2show: $elm$core$Maybe$Nothing,
            footnotes: $author$project$Lia$Markdown$Footnote$Model$init,
            gallery_vector: $elm$core$Array$empty,
            id: id,
            indentation: base.indentation,
            parsed: false,
            persistent: $elm$core$Maybe$Nothing,
            quiz_vector: $elm$core$Array$empty,
            seed: seed + 10 * id,
            survey_vector: $elm$core$Array$empty,
            table_vector: $elm$core$Array$empty,
            task_vector: $elm$core$Array$empty,
            title: base.title,
            visible: true
        };
    });
    var $author$project$Error$Message$whatIsLiaScript = "LiaScript is a domain specific language for educational content that is based on Markdown.\nFor more information visit some of the following sources:\n\n* Project-website: " + ($author$project$Const$urlLiascript + "\n* Blog: https://liascript.github.io/blog\n* Documentation: https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md\n* YouTube: https://www.youtube.com/channel/UCyiTe2GkW_u05HSdvUblGYg\n\n!?[LiaScript Intro](https://www.youtube.com/watch?v=YYhvGnE1PAA)\n");
    var $author$project$Error$Report$toReport = function(errors) {
        return $elm$core$Array$fromList(A2($elm$core$List$indexedMap, $author$project$Lia$Section$init(0), A2($elm$core$List$append, errors, _List_fromArray([
            A3($author$project$Error$Report$slide, "What is LiaScript?", 2, $author$project$Error$Message$whatIsLiaScript),
            A3($author$project$Error$Report$slide, "Get Help?", 2, $author$project$Error$Message$getHelp)
        ]))));
    };
    var $author$project$Error$Report$ups = "\uD83D\uDE48 Ups, something went wrong";
    var $author$project$Error$Report$generate = function(messages) {
        return $author$project$Error$Report$toReport(function() {
            if (messages.$ === "Error") {
                if (!messages.a.b) return _List_fromArray([
                    A3($author$project$Error$Report$slide, $author$project$Error$Report$ups, 1, $author$project$Error$Message$unknown)
                ]);
                else if (!messages.a.b.b) {
                    var _v1 = messages.a;
                    var report = _v1.a;
                    return _List_fromArray([
                        A3($author$project$Error$Report$slide, $author$project$Error$Report$ups, 1, report)
                    ]);
                } else {
                    var reports = messages.a;
                    return A2($elm$core$List$cons, A3($author$project$Error$Report$slide, $author$project$Error$Report$ups, 1, $author$project$Error$Message$multiple), A2($elm$core$List$indexedMap, F2(function(i, report) {
                        return A3($author$project$Error$Report$slide, "Error " + $elm$core$String$fromInt(i + 1), 3, report);
                    }), reports));
                }
            } else return _List_fromArray([
                A3($author$project$Error$Report$slide, $author$project$Error$Report$ups, 1, $author$project$Error$Message$unknown)
            ]);
        }());
    };
    var $author$project$Lia$Settings$Json$fromMode = function(_v0) {
        return $elm$json$Json$Encode$string("Textbook");
    };
    var $elm$json$Json$Encode$float = _Json_wrap;
    var $elm$core$String$toFloat = _String_toFloat;
    var $author$project$Lia$Settings$Json$maybeFloat = A2($elm$core$Basics$composeR, $elm$core$String$toFloat, A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(1.0), $elm$json$Json$Encode$float));
    var $author$project$Lia$Settings$Json$fromModel = function(model) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("table_of_contents", $elm$json$Json$Encode$bool(model.table_of_contents)),
            _Utils_Tuple2("mode", $author$project$Lia$Settings$Json$fromMode(model.mode)),
            _Utils_Tuple2("theme", $elm$json$Json$Encode$string(model.theme)),
            _Utils_Tuple2("light", $elm$json$Json$Encode$bool(model.light)),
            _Utils_Tuple2("editor", $elm$json$Json$Encode$string(model.editor)),
            _Utils_Tuple2("font_size", $elm$json$Json$Encode$int(model.font_size)),
            _Utils_Tuple2("sound", $elm$json$Json$Encode$bool(model.sound)),
            _Utils_Tuple2("lang", $elm$json$Json$Encode$string(model.lang)),
            _Utils_Tuple2("tooltips", $elm$json$Json$Encode$bool(model.tooltips)),
            _Utils_Tuple2("preferBrowserTTS", $elm$json$Json$Encode$bool(model.tts.preferBrowser)),
            _Utils_Tuple2("hideVideoComments", $elm$json$Json$Encode$bool(model.hideVideoComments)),
            _Utils_Tuple2("audio", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("pitch", $author$project$Lia$Settings$Json$maybeFloat(model.audio.pitch)),
                _Utils_Tuple2("rate", $author$project$Lia$Settings$Json$maybeFloat(model.audio.rate))
            ])))
        ]));
    };
    var $author$project$Service$Database$settings = F2(function(customStyle, config) {
        return A2($author$project$Service$Database$event, "settings", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("custom", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, customStyle))),
            _Utils_Tuple2("config", config)
        ])));
    });
    var $author$project$Lia$Settings$Update$customizeEvent = function(settings) {
        return A2($author$project$Service$Database$settings, settings.theme === "custom" ? settings.customTheme : $elm$core$Maybe$Nothing, $author$project$Lia$Settings$Json$fromModel(settings));
    };
    var $author$project$Lia$Script$generateIndex = F2(function(id, title) {
        return _Utils_Tuple2("#" + A2($elm$core$String$join, "-", A2($elm$core$List$filter, A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not), A2($elm$core$String$split, " ", A3($elm$core$String$replace, "-", " ", $elm$core$String$toLower(title))))), "#" + $elm$core$String$fromInt(id + 1));
    });
    var $author$project$Lia$Script$getSectionNumberFrom = F2(function(index, fragment) {
        var slide = function() {
            var _v0 = $elm$core$String$toInt(fragment);
            if (_v0.$ === "Just") {
                var number = _v0.a;
                return number - 1;
            } else return A2($elm$core$Maybe$withDefault, -1, A2($elm$core$Maybe$map, $elm$core$Basics$add(-1), $elm$core$String$toInt(A2($elm$core$String$dropLeft, 1, index("#" + fragment)))));
        }();
        return slide < 0 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(slide);
    });
    var $author$project$Lia$Utils$get = F2(function(i, list) {
        get: while(true){
            if (!list.b) return $elm$core$Maybe$Nothing;
            else {
                var r = list.a;
                var rs = list.b;
                if (i <= 0) return $elm$core$Maybe$Just(r);
                else {
                    var $temp$i = i - 1, $temp$list = rs;
                    i = $temp$i;
                    list = $temp$list;
                    continue get;
                }
            }
        }
    });
    var $author$project$Lia$Markdown$Effect$Types$isIn_ = F2(function(effect, id) {
        var _v0 = effect.end;
        if (_v0.$ === "Nothing") return _Utils_cmp(effect.begin, id) < 1;
        else {
            var end = _v0.a;
            return _Utils_cmp(effect.begin, id) < 1 && _Utils_cmp(end, id) > 0;
        }
    });
    var $author$project$Lia$Markdown$Effect$Types$isIn = F2(function(id, effect) {
        return A2($elm$core$Maybe$withDefault, true, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Effect$Types$isIn_(effect), id));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$text = function(stdout) {
        if (stdout.$ === "Text") {
            var str = stdout.a;
            return $elm$core$Maybe$Just(str);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Inline$Stringify$inline2string = F2(function(config, inline) {
        inline2string: while(true){
            _v1$14: while(true)switch(inline.$){
                case "Chars":
                    var str = inline.a;
                    return str;
                case "Bold":
                    var x = inline.a;
                    var $temp$config = config, $temp$inline = x;
                    config = $temp$config;
                    inline = $temp$inline;
                    continue inline2string;
                case "Italic":
                    var x = inline.a;
                    var $temp$config = config, $temp$inline = x;
                    config = $temp$config;
                    inline = $temp$inline;
                    continue inline2string;
                case "Strike":
                    var x = inline.a;
                    var $temp$config = config, $temp$inline = x;
                    config = $temp$config;
                    inline = $temp$inline;
                    continue inline2string;
                case "Underline":
                    var x = inline.a;
                    var $temp$config = config, $temp$inline = x;
                    config = $temp$config;
                    inline = $temp$inline;
                    continue inline2string;
                case "Superscript":
                    var x = inline.a;
                    var $temp$config = config, $temp$inline = x;
                    config = $temp$config;
                    inline = $temp$inline;
                    continue inline2string;
                case "Verbatim":
                    var str = inline.a;
                    return str;
                case "Formula":
                    var str = inline.b;
                    return str;
                case "Ref":
                    var ref = inline.a;
                    return A2($author$project$Lia$Markdown$Inline$Stringify$ref2string, config, ref);
                case "IHTML":
                    if (inline.a.$ === "Node") {
                        var _v2 = inline.a;
                        var x = _v2.c;
                        return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, x);
                    } else break _v1$14;
                case "Container":
                    var x = inline.a;
                    return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, x);
                case "EInline":
                    var e = inline.a;
                    return A2($author$project$Lia$Markdown$Effect$Types$isIn, config.visible, e) ? A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, e.content) : "";
                case "Script":
                    var i = inline.a;
                    return A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$andThen, $author$project$Lia$Markdown$Effect$Script$Types$text, A2($elm$core$Maybe$andThen, function($) {
                        return $.result;
                    }, A2($elm$core$Array$get, i, config.scripts))));
                case "Quiz":
                    var _v3 = inline.a;
                    var id = _v3.b;
                    var _v4 = A2($elm$core$Array$get, id, config.input.state);
                    _v4$2: while(true){
                        if (_v4.$ === "Just") switch(_v4.a.$){
                            case "Text":
                                var str = _v4.a.a;
                                return str;
                            case "Select":
                                if (_v4.a.b.b && !_v4.a.b.b.b) {
                                    var _v5 = _v4.a;
                                    var _v6 = _v5.b;
                                    var id2 = _v6.a;
                                    return _Utils_eq(id2, -1) ? "" : A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$Stringify$stringify_(config), A2($elm$core$Maybe$andThen, $author$project$Lia$Utils$get(id2), A2($elm$core$Array$get, id, config.input.options))));
                                } else break _v4$2;
                            default:
                                break _v4$2;
                        }
                        else break _v4$2;
                    }
                    return "";
                default:
                    break _v1$14;
            }
            return "";
        }
    });
    var $author$project$Lia$Markdown$Inline$Stringify$ref2string = F2(function(config, ref) {
        switch(ref.$){
            case "Movie":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Image":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Audio":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Link":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Mail":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Embed":
                var alt = ref.a;
                return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, alt);
            case "Preview_Lia":
                return "preview-lia";
            case "Preview_Link":
                return "preview-link";
            default:
                return "qr-code";
        }
    });
    var $author$project$Lia$Markdown$Inline$Stringify$stringify_ = function(config) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Markdown$Inline$Stringify$inline2string(config)), $elm$core$String$concat);
    };
    var $author$project$Lia$Markdown$Inline$Stringify$stringify = $author$project$Lia$Markdown$Inline$Stringify$stringify_({
        input: {
            options: $elm$core$Array$empty,
            state: $elm$core$Array$empty
        },
        scripts: $elm$core$Array$empty,
        visible: $elm$core$Maybe$Nothing
    });
    var $author$project$Lia$Script$get_title = A2($elm$core$Basics$composeR, $elm$core$Array$get(0), A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, function($) {
        return $.title;
    }, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Stringify$stringify, $elm$core$String$trim))), $elm$core$Maybe$withDefault("Lia")));
    var $author$project$Lia$Markdown$HTML$Json$encParameters = function(annotation) {
        return _Utils_Tuple2("a", function() {
            if (!annotation.b) return $elm$json$Json$Encode$null;
            else return A2($elm$json$Json$Encode$list, function(_v1) {
                var key = _v1.a;
                var value = _v1.b;
                return A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, _List_fromArray([
                    key,
                    value
                ]));
            }, annotation);
        }());
    };
    var $elm$json$Json$Encode$dict = F3(function(toKey, toValue, dictionary) {
        return _Json_wrap(A3($elm$core$Dict$foldl, F3(function(key, value, obj) {
            return A3(_Json_addField, toKey(key), toValue(value), obj);
        }), _Json_emptyObject(_Utils_Tuple0), dictionary));
    });
    var $author$project$Lia$Markdown$HTML$Types$encode = F2(function(contentEncoder, obj) {
        return $elm$json$Json$Encode$object(function() {
            switch(obj.$){
                case "Node":
                    var node = obj.a;
                    var attr = obj.b;
                    var children = obj.c;
                    return _List_fromArray([
                        _Utils_Tuple2("node", $elm$json$Json$Encode$string(node)),
                        _Utils_Tuple2("attr", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, $elm$core$Dict$fromList(attr))),
                        _Utils_Tuple2("children", A2($elm$json$Json$Encode$list, contentEncoder, children))
                    ]);
                case "InnerHtml":
                    var content = obj.a;
                    return _List_fromArray([
                        _Utils_Tuple2("node_inline", $elm$json$Json$Encode$string(content))
                    ]);
                case "OuterHtml":
                    var name = obj.a;
                    var attr = obj.b;
                    var body = obj.c;
                    return _List_fromArray([
                        _Utils_Tuple2("node_outline", $elm$json$Json$Encode$string(name)),
                        _Utils_Tuple2("attr", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, $elm$core$Dict$fromList(attr))),
                        _Utils_Tuple2("body", $elm$json$Json$Encode$string(body))
                    ]);
                default:
                    var attr = obj.a;
                    var code = obj.b;
                    var foreignObjects = obj.c;
                    return _List_fromArray([
                        _Utils_Tuple2("node_svg", $elm$json$Json$Encode$string(code)),
                        _Utils_Tuple2("attr", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, $elm$core$Dict$fromList(attr))),
                        _Utils_Tuple2("foreignObjects", A2($elm$json$Json$Encode$list, function(_v1) {
                            var foreignAttr = _v1.a;
                            var children = _v1.b;
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("attr", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, $elm$core$Dict$fromList(foreignAttr))),
                                _Utils_Tuple2("objects", A2($elm$json$Json$Encode$list, contentEncoder, children))
                            ]));
                        }, foreignObjects))
                    ]);
            }
        }());
    });
    var $author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder = F3(function(name, content, attr) {
        return _List_fromArray([
            _Utils_Tuple2(name, $author$project$Lia$Markdown$Inline$Json$Encode$encInline(content)),
            $author$project$Lia$Markdown$HTML$Json$encParameters(attr)
        ]);
    });
    var $author$project$Lia$Markdown$Inline$Json$Encode$encInline = function(element) {
        return $elm$json$Json$Encode$object(function() {
            switch(element.$){
                case "Chars":
                    var str = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Chars", $elm$json$Json$Encode$string(str)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "Symbol":
                    var str = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Symbol", $elm$json$Json$Encode$string(str)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "Bold":
                    var x = element.a;
                    var a = element.b;
                    return A3($author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder, "Bold", x, a);
                case "Italic":
                    var x = element.a;
                    var a = element.b;
                    return A3($author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder, "Italic", x, a);
                case "Strike":
                    var x = element.a;
                    var a = element.b;
                    return A3($author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder, "Strike", x, a);
                case "Underline":
                    var x = element.a;
                    var a = element.b;
                    return A3($author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder, "Underline", x, a);
                case "Superscript":
                    var x = element.a;
                    var a = element.b;
                    return A3($author$project$Lia$Markdown$Inline$Json$Encode$baseEncoder, "Superscript", x, a);
                case "Verbatim":
                    var str = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Verbatim", $elm$json$Json$Encode$string(str)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "Formula":
                    var head = element.a;
                    var body = element.b;
                    var a = element.c;
                    return _List_fromArray([
                        _Utils_Tuple2("Formula", $elm$json$Json$Encode$string(head)),
                        _Utils_Tuple2("body", $elm$json$Json$Encode$string(body)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "Ref":
                    var ref = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Ref", $author$project$Lia$Markdown$Inline$Json$Encode$encReference(ref)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "FootnoteMark":
                    var str = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("FootnoteMark", $elm$json$Json$Encode$string(str)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "EInline":
                    var e = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("EInline", $author$project$Lia$Markdown$Inline$Json$Encode$encode(e.content)),
                        _Utils_Tuple2("begin", $elm$json$Json$Encode$int(e.begin)),
                        _Utils_Tuple2("end", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, e.end))),
                        _Utils_Tuple2("playback", $elm$json$Json$Encode$bool(e.playback)),
                        _Utils_Tuple2("voice", $elm$json$Json$Encode$string(e.voice)),
                        _Utils_Tuple2("id", $elm$json$Json$Encode$int(e.id)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "Container":
                    var list = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Container", $author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                case "IHTML":
                    var node = element.a;
                    var a = element.b;
                    return A2($author$project$Lia$Markdown$Inline$Json$Encode$htmlEncoder, node, a);
                case "Script":
                    var id = element.a;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Script", $elm$json$Json$Encode$int(id)),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
                default:
                    var _v3 = element.a;
                    var length = _v3.a;
                    var id = _v3.b;
                    var a = element.b;
                    return _List_fromArray([
                        _Utils_Tuple2("TODO", $elm$json$Json$Encode$null),
                        $author$project$Lia$Markdown$HTML$Json$encParameters(a)
                    ]);
            }
        }());
    };
    var $author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia = F4(function(_class, list, _v1, title) {
        var stream = _v1.a;
        var url = _v1.b;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2(_class, $author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
            _Utils_Tuple2("stream", $elm$json$Json$Encode$bool(stream)),
            _Utils_Tuple2("url", $elm$json$Json$Encode$string(url)),
            $author$project$Lia$Markdown$Inline$Json$Encode$encTitle(title)
        ]));
    });
    var $author$project$Lia$Markdown$Inline$Json$Encode$encRef = F4(function(_class, list, url, title) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2(_class, $author$project$Lia$Markdown$Inline$Json$Encode$encode(list)),
            _Utils_Tuple2("url", $elm$json$Json$Encode$string(url)),
            $author$project$Lia$Markdown$Inline$Json$Encode$encTitle(title)
        ]));
    });
    var $author$project$Lia$Markdown$Inline$Json$Encode$encReference = function(ref) {
        switch(ref.$){
            case "Link":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Link", list, url, title);
            case "Mail":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Mail", list, url, title);
            case "Embed":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Embed", list, url, title);
            case "Image":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Image", list, url, title);
            case "Audio":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, "Audio", list, url, title);
            case "Movie":
                var list = ref.a;
                var url = ref.b;
                var title = ref.c;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encMultimedia, "Movie", list, url, title);
            case "Preview_Lia":
                var url = ref.a;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Preview_Lia", _List_Nil, url, $elm$core$Maybe$Nothing);
            case "Preview_Link":
                var url = ref.a;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "Preview_Link", _List_Nil, url, $elm$core$Maybe$Nothing);
            default:
                var url = ref.a;
                var title = ref.b;
                return A4($author$project$Lia$Markdown$Inline$Json$Encode$encRef, "QR_Link", _List_Nil, url, title);
        }
    };
    var $author$project$Lia$Markdown$Inline$Json$Encode$encTitle = function(title) {
        return _Utils_Tuple2("title", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$Json$Encode$encode, title)));
    };
    var $author$project$Lia$Markdown$Inline$Json$Encode$encode = function(list) {
        return A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encInline, list);
    };
    var $author$project$Lia$Markdown$Inline$Json$Encode$htmlEncoder = F2(function(node, attr) {
        return _List_fromArray([
            _Utils_Tuple2("IHTML", A2($author$project$Lia$Markdown$HTML$Types$encode, $author$project$Lia$Markdown$Inline$Json$Encode$encInline, node)),
            $author$project$Lia$Markdown$HTML$Json$encParameters(attr)
        ]);
    });
    var $author$project$Lia$Json$Encode$encSection = function(sec) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("title", $author$project$Lia$Markdown$Inline$Json$Encode$encode(sec.title)),
            _Utils_Tuple2("code", $elm$json$Json$Encode$string(sec.code)),
            _Utils_Tuple2("indentation", $elm$json$Json$Encode$int(sec.indentation))
        ]));
    };
    var $elm$json$Json$Encode$array = F2(function(func, entries) {
        return _Json_wrap(A3($elm$core$Array$foldl, _Json_addEntry(func), _Json_emptyArray(_Utils_Tuple0), entries));
    });
    var $andre_dietrich$elm_conditional$Conditional$apply2If = F4(function(_function, conditionMet, a, b) {
        return conditionMet ? A2(_function, a, b) : b;
    });
    var $andre_dietrich$elm_conditional$Conditional$List$addIf = $andre_dietrich$elm_conditional$Conditional$apply2If($elm$core$List$cons);
    var $author$project$Lia$Definition$Json$Encode$encResource = function(r) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            function() {
                switch(r.$){
                    case "Link":
                        var url = r.a;
                        return _Utils_Tuple2("Link", $elm$json$Json$Encode$string(url));
                    case "Script":
                        var url = r.a;
                        return _Utils_Tuple2("Script", $elm$json$Json$Encode$string(url));
                    default:
                        var url = r.a;
                        return _Utils_Tuple2("Module", $elm$json$Json$Encode$string(url));
                }
            }()
        ]));
    };
    var $author$project$Lia$Definition$Json$Encode$encode = function(def) {
        return $elm$json$Json$Encode$object(A3($andre_dietrich$elm_conditional$Conditional$List$addIf, !$elm$core$Dict$isEmpty(def.formulas), _Utils_Tuple2("formulas", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, def.formulas)), _List_fromArray([
            _Utils_Tuple2("author", $elm$json$Json$Encode$string(def.author)),
            _Utils_Tuple2("date", $elm$json$Json$Encode$string(def.date)),
            _Utils_Tuple2("email", $elm$json$Json$Encode$string(def.email)),
            _Utils_Tuple2("language", $elm$json$Json$Encode$string(def.language)),
            _Utils_Tuple2("logo", $elm$json$Json$Encode$string(def.logo)),
            _Utils_Tuple2("version", $elm$json$Json$Encode$string(def.version)),
            _Utils_Tuple2("base", $elm$json$Json$Encode$string(def.base)),
            _Utils_Tuple2("narrator", $elm$json$Json$Encode$string(def.narrator)),
            _Utils_Tuple2("onload", $elm$json$Json$Encode$string(def.onload)),
            _Utils_Tuple2("comment", $author$project$Lia$Markdown$Inline$Json$Encode$encode(def.comment)),
            _Utils_Tuple2("attributes", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, def.attributes)),
            _Utils_Tuple2("resources", A2($elm$json$Json$Encode$list, $author$project$Lia$Definition$Json$Encode$encResource, def.resources)),
            _Utils_Tuple2("translation", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, def.translation)),
            _Utils_Tuple2("macro", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, def.macro))
        ])));
    };
    var $author$project$I18n$Translations$getCodeFromLn = function(lang) {
        switch(lang.$){
            case "Am":
                return "am";
            case "Ar":
                return "ar";
            case "Bg":
                return "bg";
            case "Bn":
                return "bn";
            case "De":
                return "de";
            case "Es":
                return "es";
            case "Fa":
                return "fa";
            case "Fr":
                return "fr";
            case "Hi":
                return "hi";
            case "Hy":
                return "hy";
            case "It":
                return "it";
            case "Ja":
                return "ja";
            case "Ka":
                return "ka";
            case "Ko":
                return "ko";
            case "Nl":
                return "nl";
            case "Pa":
                return "pa";
            case "Pt":
                return "pt";
            case "Ru":
                return "ru";
            case "Sw":
                return "sw";
            case "Tw":
                return "tw";
            case "Uk":
                return "uk";
            case "Ur":
                return "ur";
            case "Zh":
                return "zh";
            default:
                return "en";
        }
    };
    var $author$project$Lia$Json$Encode$get_title = function(sections) {
        return $elm$core$String$trim(A2($elm$core$Maybe$withDefault, "Lia", A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$Stringify$stringify, A2($elm$core$Maybe$map, function($) {
            return $.title;
        }, A2($elm$core$Array$get, 0, sections)))));
    };
    var $author$project$Lia$Json$Encode$encodeWith = F2(function(sectionEncoder, model) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("title", $author$project$Lia$Markdown$Inline$Json$Encode$encode(A2($elm$core$Maybe$withDefault, _List_fromArray([
                A2($author$project$Lia$Markdown$Inline$Types$Chars, model.title, _List_Nil)
            ]), A2($elm$core$Maybe$map, function($) {
                return $.title;
            }, A2($elm$core$Array$get, 0, model.sections))))),
            _Utils_Tuple2("str_title", $elm$json$Json$Encode$string($author$project$Lia$Json$Encode$get_title(model.sections))),
            _Utils_Tuple2("definition", $author$project$Lia$Definition$Json$Encode$encode(model.definition)),
            _Utils_Tuple2("comment", $elm$json$Json$Encode$string($author$project$Lia$Markdown$Inline$Stringify$stringify(model.definition.comment))),
            _Utils_Tuple2("readme", $elm$json$Json$Encode$string(model.readme)),
            _Utils_Tuple2("url", $elm$json$Json$Encode$string(model.url)),
            _Utils_Tuple2("origin", $elm$json$Json$Encode$string(model.origin)),
            _Utils_Tuple2("sections", A2($elm$json$Json$Encode$array, sectionEncoder, model.sections)),
            _Utils_Tuple2("section_active", $elm$json$Json$Encode$int(model.section_active)),
            _Utils_Tuple2("version", $elm$json$Json$Encode$int(A2($elm$core$Maybe$withDefault, 0, $elm$core$String$toInt(A2($elm$core$Maybe$withDefault, "0", $elm$core$List$head(A2($elm$core$String$split, ".", model.definition.version))))))),
            _Utils_Tuple2("translation", $elm$json$Json$Encode$string($author$project$I18n$Translations$getCodeFromLn(model.translation)))
        ]));
    });
    var $author$project$Lia$Json$Encode$encode = $author$project$Lia$Json$Encode$encodeWith($author$project$Lia$Json$Encode$encSection);
    var $author$project$Service$Database$index_store = A2($elm$core$Basics$composeR, $author$project$Lia$Json$Encode$encode, $author$project$Service$Database$index_("store"));
    var $author$project$Lia$Update$Load = F2(function(a, b) {
        return {
            $: "Load",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Update$InitSection = {
        $: "InitSection"
    };
    var $author$project$Lia$Update$NextSection = {
        $: "NextSection"
    };
    var $author$project$Lia$Update$PrevSection = {
        $: "PrevSection"
    };
    var $author$project$Lia$Update$UpdateChat = function(a) {
        return {
            $: "UpdateChat",
            a: a
        };
    };
    var $author$project$Lia$Update$UpdateIndex = function(a) {
        return {
            $: "UpdateIndex",
            a: a
        };
    };
    var $author$project$Lia$Update$UpdateMarkdown = function(a) {
        return {
            $: "UpdateMarkdown",
            a: a
        };
    };
    var $author$project$Lia$Update$UpdateOverlay = function(a) {
        return {
            $: "UpdateOverlay",
            a: a
        };
    };
    var $author$project$Lia$Update$UpdateSettings = function(a) {
        return {
            $: "UpdateSettings",
            a: a
        };
    };
    var $author$project$Lia$Update$UpdateSync = function(a) {
        return {
            $: "UpdateSync",
            a: a
        };
    };
    var $author$project$Service$Event$notNone = function(event) {
        var _v0 = event.service;
        if (_v0 === "") return false;
        else return true;
    };
    var $author$project$Return$batchEvent = F2(function(e, r) {
        return _Utils_update(r, {
            events: $author$project$Service$Event$notNone(e) ? A2($elm$core$List$cons, e, r.events) : r.events
        });
    });
    var $author$project$Return$batchEvents = F2(function(e, r) {
        return _Utils_update(r, {
            events: A2($elm$core$List$append, r.events, A2($elm$core$List$filter, $author$project$Service$Event$notNone, e))
        });
    });
    var $author$project$Lia$Settings$Update$closeSync = function(model) {
        return _Utils_update(model, {
            sync: function() {
                var _v0 = model.sync;
                if (_v0.$ === "Just") return $elm$core$Maybe$Just(false);
                else return $elm$core$Maybe$Nothing;
            }()
        });
    };
    var $author$project$Return$cmd = F2(function(c, r) {
        return _Utils_update(r, {
            command: c
        });
    });
    var $author$project$Service$Script$event = F2(function(cmd, param) {
        return A2($author$project$Service$Event$init, "script", {
            cmd: cmd,
            param: param
        });
    });
    var $author$project$Service$Script$exec = F3(function(delay, worker, code) {
        return A2($author$project$Service$Script$event, "exec", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("delay", $elm$json$Json$Encode$int(delay)),
            _Utils_Tuple2("code", $elm$json$Json$Encode$string(code)),
            _Utils_Tuple2("worker", $elm$json$Json$Encode$bool(worker))
        ])));
    });
    var $elm$core$Array$isEmpty = function(_v0) {
        var len = _v0.a;
        return !len;
    };
    var $author$project$Service$Database$record = F3(function(table, id, data) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("table", $elm$json$Json$Encode$string(table)),
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(id)),
            _Utils_Tuple2("data", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, data))
        ]));
    });
    var $author$project$Service$Database$load = F2(function(table, id) {
        return A2($author$project$Service$Database$event, "load", A3($author$project$Service$Database$record, table, id, $elm$core$Maybe$Nothing));
    });
    var $author$project$Service$Event$pushWithId = F3(function(po, i, to) {
        return _Utils_update(to, {
            track: A2($elm$core$List$cons, _Utils_Tuple2(po, i), to.track)
        });
    });
    var $author$project$Lia$Update$add_load = F4(function(vector, sectionID, name, logs) {
        return $elm$core$Array$isEmpty(vector) ? logs : A2($elm$core$List$cons, A3($author$project$Service$Event$pushWithId, name, sectionID, A2($author$project$Service$Database$load, name, sectionID)), logs);
    });
    var $author$project$Lia$Update$get_active_section = function(model) {
        return A2($elm$core$Array$get, model.section_active, model.sections);
    };
    var $author$project$Lia$Parser$Parser$return = F3(function(sec, state, es) {
        return $elm$core$Result$Ok(_Utils_update(sec, {
            body: es,
            code_model: state.code_model,
            definition: state.defines_updated ? $elm$core$Maybe$Just(state.defines) : $elm$core$Maybe$Nothing,
            effect_model: state.effect_model,
            error: $elm$core$Maybe$Nothing,
            footnotes: state.footnotes,
            gallery_vector: state.gallery_vector,
            parsed: true,
            quiz_vector: state.quiz_vector,
            survey_vector: state.survey_vector,
            table_vector: state.table_vector,
            task_vector: state.task_vector
        }));
    });
    var $author$project$Lia$Markdown$Types$ASCII = F2(function(a, b) {
        return {
            $: "ASCII",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$BulletList = F2(function(a, b) {
        return {
            $: "BulletList",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Chart = F2(function(a, b) {
        return {
            $: "Chart",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Code = function(a) {
        return {
            $: "Code",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Types$Effect = F2(function(a, b) {
        return {
            $: "Effect",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Gallery = F2(function(a, b) {
        return {
            $: "Gallery",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$HTML = F2(function(a, b) {
        return {
            $: "HTML",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Header = F2(function(a, b) {
        return {
            $: "Header",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$OrderedList = F2(function(a, b) {
        return {
            $: "OrderedList",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Quiz = F3(function(a, b, c) {
        return {
            $: "Quiz",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Types$Quote = F2(function(a, b) {
        return {
            $: "Quote",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Survey = F2(function(a, b) {
        return {
            $: "Survey",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Table = F2(function(a, b) {
        return {
            $: "Table",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Types$Task = F2(function(a, b) {
        return {
            $: "Task",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Parser$Indentation$push = function(str) {
        return $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
            return _Utils_update(state, {
                indentation: A2($elm$core$List$append, state.indentation, _List_fromArray([
                    str
                ])),
                indentation_skip: true
            });
        });
    };
    var $author$project$Lia$Markdown$Footnote$Parser$block = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Footnote$Parser$add_footnote, A2($andre_dietrich$parser_combinators$Combine$andMap, p, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$push("[ ]{2,}"), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Parser$Helper$stringTill($andre_dietrich$parser_combinators$Combine$string("]:")), $andre_dietrich$parser_combinators$Combine$string("[^"))))));
    };
    var $author$project$Lia$Markdown$Types$Citation = F2(function(a, b) {
        return {
            $: "Citation",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Parser$checkForCitation = F2(function(attr, p) {
        if (p.b && p.a.$ === "Chars") {
            var _v1 = p.a;
            var chars = _v1.a;
            var cAttr = _v1.b;
            var rest = p.b;
            return A2($elm$core$String$startsWith, "–", chars) ? A2($author$project$Lia$Markdown$Types$Citation, attr, A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Inline$Types$Chars, A2($elm$core$String$dropLeft, 1, chars), cAttr), rest)) : A2($author$project$Lia$Markdown$Types$Paragraph, attr, p);
        } else return A2($author$project$Lia$Markdown$Types$Paragraph, attr, p);
    });
    var $author$project$Lia$Markdown$Table$Types$Map = {
        $: "Map"
    };
    var $author$project$Lia$Markdown$Table$Types$BarChart = {
        $: "BarChart"
    };
    var $author$project$Lia$Markdown$Table$Types$Graph = {
        $: "Graph"
    };
    var $author$project$Lia$Markdown$Table$Types$HeatMap = {
        $: "HeatMap"
    };
    var $author$project$Lia$Markdown$Table$Types$LinePlot = {
        $: "LinePlot"
    };
    var $author$project$Lia$Markdown$Table$Types$None = {
        $: "None"
    };
    var $author$project$Lia$Markdown$Table$Types$Parallel = {
        $: "Parallel"
    };
    var $author$project$Lia$Markdown$Table$Types$PieChart = {
        $: "PieChart"
    };
    var $author$project$Lia$Markdown$Table$Types$Radar = {
        $: "Radar"
    };
    var $author$project$Lia$Markdown$Table$Types$ScatterPlot = {
        $: "ScatterPlot"
    };
    var $elm$core$Basics$abs = function(n) {
        return n < 0 ? -n : n;
    };
    var $elm$core$List$all = F2(function(isOkay, list) {
        return !A2($elm$core$List$any, A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay), list);
    });
    var $author$project$Lia$Markdown$Table$Matrix$any = function(fn) {
        return $elm$core$List$any($elm$core$List$any(fn));
    };
    var $elm$core$List$repeatHelp = F3(function(result, n, value) {
        repeatHelp: while(true){
            if (n <= 0) return result;
            else {
                var $temp$result = A2($elm$core$List$cons, value, result), $temp$n = n - 1, $temp$value = value;
                result = $temp$result;
                n = $temp$n;
                value = $temp$value;
                continue repeatHelp;
            }
        }
    });
    var $elm$core$List$repeat = F2(function(n, value) {
        return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
    });
    var $author$project$Lia$Markdown$Table$Matrix$transpose = function(matrix) {
        return A3($elm$core$List$foldl, F2(function(input, output) {
            return A3($elm$core$List$map2, F2(function(i, o) {
                return A2($elm$core$List$append, o, _List_fromArray([
                    i
                ]));
            }), input, output);
        }), A2($elm$core$List$repeat, $elm$core$List$length(A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$head(matrix))), _List_Nil), matrix);
    };
    var $author$project$Lia$Markdown$Table$Matrix$column = function(i) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Table$Matrix$transpose, $author$project$Lia$Utils$get(i));
    };
    var $elm$core$Set$insert = F2(function(key, _v0) {
        var dict = _v0.a;
        return $elm$core$Set$Set_elm_builtin(A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
    });
    var $elm$core$Set$fromList = function(list) {
        return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
    };
    var $author$project$Lia$Markdown$Table$Types$isNumber = A2($elm$core$Basics$composeR, function($) {
        return $._float;
    }, $elm$core$Basics$neq($elm$core$Maybe$Nothing));
    var $author$project$Lia$Markdown$Table$Matrix$map = function(fn) {
        return $elm$core$List$map($elm$core$List$map(fn));
    };
    var $elm$core$List$maximum = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm$core$List$minimum = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm$core$Set$size = function(_v0) {
        var dict = _v0.a;
        return $elm$core$Dict$size(dict);
    };
    var $author$project$Lia$Markdown$Table$Matrix$some = F2(function(percent, fn) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Table$Matrix$map(fn), A2($elm$core$Basics$composeR, $elm$core$List$concat, A2($elm$core$Basics$composeR, A2($elm$core$List$foldl, F2(function(cell, _v0) {
            var _true = _v0.a;
            var _false = _v0.b;
            return cell ? _Utils_Tuple2(_true + 1, _false) : _Utils_Tuple2(_true, _false + 1);
        }), _Utils_Tuple2(0, 0)), function(_v1) {
            var _true = _v1.a;
            var _false = _v1.b;
            return _Utils_cmp(_true / (_true + _false), percent) > -1;
        })));
    });
    var $author$project$Lia$Markdown$Table$Matrix$split = function(matrix) {
        if (!matrix.b) return _Utils_Tuple2(_List_Nil, _List_Nil);
        else {
            var r = matrix.a;
            var rs = matrix.b;
            return _Utils_Tuple2(r, rs);
        }
    };
    var $author$project$Lia$Markdown$Table$Parser$checkDiagram = F2(function(headLine, rows) {
        if (A2($author$project$Lia$Markdown$Table$Matrix$any, $author$project$Lia$Markdown$Table$Types$isNumber, A2($elm$core$List$filterMap, $elm$core$List$tail, rows))) {
            var firstColumn = A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$head, $elm$core$Maybe$andThen(function($) {
                return $._float;
            })), rows);
            if (A2($elm$core$List$all, $elm$core$Basics$neq($elm$core$Maybe$Nothing), firstColumn)) {
                if (!_Utils_eq(headLine, $elm$core$Maybe$Nothing) && $elm$core$List$length(firstColumn) === 1) return $author$project$Lia$Markdown$Table$Types$PieChart;
                else if (_Utils_eq($elm$core$List$length(firstColumn), $elm$core$Set$size($elm$core$Set$fromList(A2($elm$core$List$filterMap, $elm$core$Basics$identity, firstColumn))))) {
                    var headNumbers = A2($elm$core$Maybe$withDefault, _List_fromArray([
                        $elm$core$Maybe$Nothing
                    ]), A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                        return $._float;
                    }), A2($elm$core$Maybe$andThen, $elm$core$List$tail, headLine)));
                    return $elm$core$List$length(headNumbers) > 1 && A2($elm$core$List$all, $elm$core$Basics$neq($elm$core$Maybe$Nothing), headNumbers) ? $author$project$Lia$Markdown$Table$Types$HeatMap : A3($author$project$Lia$Markdown$Table$Matrix$some, 0.3, $author$project$Lia$Markdown$Table$Types$isNumber, $author$project$Lia$Markdown$Table$Matrix$split($author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b) ? $author$project$Lia$Markdown$Table$Types$LinePlot : $author$project$Lia$Markdown$Table$Types$None;
                } else {
                    if (A3($author$project$Lia$Markdown$Table$Matrix$some, 0.3, $author$project$Lia$Markdown$Table$Types$isNumber, $author$project$Lia$Markdown$Table$Matrix$split($author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b)) return $author$project$Lia$Markdown$Table$Types$ScatterPlot;
                    else return $author$project$Lia$Markdown$Table$Types$None;
                }
            } else {
                if (!_Utils_eq(headLine, $elm$core$Maybe$Nothing)) {
                    if ($elm$core$List$length(firstColumn) === 1) return $author$project$Lia$Markdown$Table$Types$PieChart;
                    else {
                        if (_Utils_eq(A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                            return $.string;
                        }), A2($elm$core$Maybe$andThen, $elm$core$List$tail, headLine)), A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                            return $.string;
                        }), A2($author$project$Lia$Markdown$Table$Matrix$column, 0, rows)))) return $author$project$Lia$Markdown$Table$Types$Graph;
                        else {
                            if ($elm$core$List$length(rows) * A2($elm$core$Maybe$withDefault, 1, A2($elm$core$Maybe$map, $elm$core$List$length, headLine)) >= 50) return $author$project$Lia$Markdown$Table$Types$Parallel;
                            else {
                                var maxima = A2($elm$core$List$filterMap, A2($elm$core$Basics$composeR, $elm$core$List$filterMap($elm$core$Basics$identity), $elm$core$List$maximum), A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                                    return $._float;
                                }, $author$project$Lia$Markdown$Table$Matrix$split($author$project$Lia$Markdown$Table$Matrix$transpose(rows)).b));
                                return _Utils_cmp($elm$core$Basics$abs(A2($elm$core$Maybe$withDefault, 0, $elm$core$List$maximum(maxima))), 10 * $elm$core$Basics$abs(A2($elm$core$Maybe$withDefault, 0, $elm$core$List$minimum(maxima)))) > 0 ? $author$project$Lia$Markdown$Table$Types$Radar : $author$project$Lia$Markdown$Table$Types$BarChart;
                            }
                        }
                    }
                } else return $author$project$Lia$Markdown$Table$Types$None;
            }
        } else return $author$project$Lia$Markdown$Table$Types$None;
    });
    var $author$project$Lia$Markdown$Table$Types$BoxPlot = {
        $: "BoxPlot"
    };
    var $author$project$Lia$Markdown$Table$Types$Funnel = {
        $: "Funnel"
    };
    var $author$project$Lia$Markdown$Table$Types$Sankey = {
        $: "Sankey"
    };
    var $author$project$Lia$Markdown$Table$Parser$diagramType = A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$get("data-type"), A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(""), A2($elm$core$Basics$composeR, $elm$core$String$toLower, A2($elm$core$Basics$composeR, $elm$core$String$trim, function(param) {
        switch(param){
            case "lineplot":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$LinePlot);
            case "line":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$LinePlot);
            case "scatterplot":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$ScatterPlot);
            case "scatter":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$ScatterPlot);
            case "barchart":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BarChart);
            case "bar":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BarChart);
            case "piechart":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$PieChart);
            case "pie":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$PieChart);
            case "heatmap":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$HeatMap);
            case "map":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Map);
            case "radar":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Radar);
            case "graph":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Graph);
            case "parallel":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Parallel);
            case "sankey":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Sankey);
            case "boxplot":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$BoxPlot);
            case "funnel":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$Funnel);
            case "none":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Table$Types$None);
            default:
                return $elm$core$Maybe$Nothing;
        }
    }))));
    var $author$project$Lia$Markdown$Table$Parser$initConfig = function(_v0) {
        var scripts = _v0.a;
        var input = _v0.b;
        return {
            input: {
                options: A2($elm$core$Maybe$withDefault, $elm$core$Array$empty, A2($elm$core$Maybe$map, function($) {
                    return $.options;
                }, input)),
                state: A2($elm$core$Maybe$withDefault, $elm$core$Array$empty, A2($elm$core$Maybe$map, function($) {
                    return $.solution;
                }, input))
            },
            scripts: scripts,
            visible: $elm$core$Maybe$Nothing
        };
    };
    var $author$project$Lia$Markdown$Table$Types$Cell = F5(function(id, attr, inlines, string, _float) {
        return {
            attr: attr,
            _float: _float,
            id: id,
            inlines: inlines,
            string: string
        };
    });
    var $author$project$Lia$Markdown$Table$Types$cellID = F2(function(x, y) {
        return $elm$core$String$fromInt(x) + ("," + $elm$core$String$fromInt(y));
    });
    var $author$project$Lia$Markdown$Table$Types$float = A2($elm$core$Basics$composeR, $elm$core$String$split(" "), A2($elm$core$Basics$composeR, $elm$core$List$head, $elm$core$Maybe$andThen($elm$core$String$toFloat)));
    var $author$project$Lia$Markdown$Table$Types$toCell = F4(function(config, x, y, _v0) {
        var attr = _v0.a;
        var data = _v0.b;
        var str = $elm$core$String$trim(A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config, data));
        return A5($author$project$Lia$Markdown$Table$Types$Cell, A2($author$project$Lia$Markdown$Table$Types$cellID, x, y), attr, data, str, $author$project$Lia$Markdown$Table$Types$float(str));
    });
    var $author$project$Lia$Markdown$Table$Matrix$indexedMap = function(fn) {
        return $elm$core$List$indexedMap(F2(function(i, row) {
            return A2($elm$core$List$indexedMap, F2(function(j, e) {
                return A3(fn, i, j, e);
            }), row);
        }));
    };
    var $author$project$Lia$Markdown$Table$Types$toMatrix = function(config) {
        return $author$project$Lia$Markdown$Table$Matrix$indexedMap($author$project$Lia$Markdown$Table$Types$toCell(config));
    };
    var $author$project$Lia$Markdown$Table$Parser$classify = F3(function(attr, table, config) {
        return _Utils_update(table, {
            _class: function() {
                var _v0 = $author$project$Lia$Markdown$Table$Parser$diagramType(attr);
                if (_v0.$ === "Just") {
                    var _class = _v0.a;
                    return _class;
                } else {
                    if (!_Utils_eq(A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-src", attr), $elm$core$Maybe$Nothing)) return $author$project$Lia$Markdown$Table$Types$Map;
                    else {
                        var matrix = A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-transpose", attr) ? _Utils_update(table, {
                            body: $author$project$Lia$Markdown$Table$Matrix$split($author$project$Lia$Markdown$Table$Matrix$transpose(A2($elm$core$List$cons, table.head, table.body))).b,
                            head: function() {
                                var _v1 = $elm$core$List$head(table.head);
                                if (_v1.$ === "Nothing") return _List_Nil;
                                else {
                                    var cell = _v1.a;
                                    return A2($elm$core$List$cons, cell, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, table.body)));
                                }
                            }()
                        }) : table;
                        return A2($author$project$Lia$Markdown$Table$Parser$checkDiagram, _Utils_eq(matrix.head, _List_Nil) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Table$Types$toCell, $author$project$Lia$Markdown$Table$Parser$initConfig(config), -1), matrix.head)), A2($author$project$Lia$Markdown$Table$Types$toMatrix, $author$project$Lia$Markdown$Table$Parser$initConfig(config), matrix.body));
                    }
                }
            }(),
            sortable: A2($elm$core$Maybe$withDefault, true, A2($author$project$Lia$Markdown$HTML$Attributes$isSetMaybe, "data-sortable", attr))
        });
    });
    var $author$project$Lia$Markdown$Effect$Parser$comment = function(paragraph) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Effect$Parser$reset_effect_number, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Effect$Parser$add_comment(true), A2($andre_dietrich$parser_combinators$Combine$andMap, paragraph, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $author$project$Lia$Parser$Helper$newlines)), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("}}--[	 ]*"), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[A-Za-z0-9 ]+"), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces1))), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(a, b, c) {
            return _Utils_Tuple3(a, b, c);
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$effect_number, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*--{{")))))))));
    };
    var $author$project$Lia$Markdown$Quiz$Types$Multi_Type = function(a) {
        return {
            $: "Multi_Type",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Quiz = F3(function(quiz, id, hints) {
        return {
            hints: hints,
            id: id,
            quiz: quiz
        };
    });
    var $author$project$Lia$Markdown$Quiz$Parser$get_counter = $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.quiz_vector;
    }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)));
    var $author$project$Lia$Parser$Helper$newline = $andre_dietrich$parser_combinators$Combine$string("\n");
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy = F3(function(begin, end, parser) {
        return $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$line, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, A2($andre_dietrich$parser_combinators$Combine$ignore, end, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, parser, A2($andre_dietrich$parser_combinators$Combine$ignore, begin, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))))))))));
    });
    var $elm$core$List$unzip = function(pairs) {
        var step = F2(function(_v0, _v1) {
            var x = _v0.a;
            var y = _v0.b;
            var xs = _v1.a;
            var ys = _v1.b;
            return _Utils_Tuple2(A2($elm$core$List$cons, x, xs), A2($elm$core$List$cons, y, ys));
        });
        return A3($elm$core$List$foldr, step, _Utils_Tuple2(_List_Nil, _List_Nil), pairs);
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$group = A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy, $andre_dietrich$parser_combinators$Combine$regex("(?:(\\-|\\+|\\*)[ 	]?)?\\["), $andre_dietrich$parser_combinators$Combine$string("]")), $andre_dietrich$parser_combinators$Combine$map($elm$core$List$unzip));
    var $author$project$Lia$Markdown$Quiz$Parser$hints = A2($andre_dietrich$parser_combinators$Combine$optional, _List_Nil, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$second, $author$project$Lia$Markdown$Quiz$Vector$Parser$group($andre_dietrich$parser_combinators$Combine$string("[?]"))));
    var $author$project$Lia$Markdown$Quiz$Parser$adds = function(type_) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Quiz$Parser$hints, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Quiz(type_), $author$project$Lia$Markdown$Quiz$Parser$get_counter));
    };
    var $author$project$Lia$Markdown$Quiz$Solution$Open = {
        $: "Open"
    };
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$a0 = 16807;
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$m0 = 214748364;
    var $elm$core$Basics$modBy = _Basics_modBy;
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$f0 = function(maybeInt) {
        if (maybeInt.$ === "Nothing") return 1;
        else {
            var k = maybeInt.a;
            return A2($elm$core$Basics$modBy, $jxxcarlson$elm_pseudorandom$PseudoRandom$m0, $jxxcarlson$elm_pseudorandom$PseudoRandom$a0 * k);
        }
    };
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$orbitAux = F3(function(f, n, ns) {
        orbitAux: while(true){
            var _v0 = !n;
            if (_v0) return ns;
            else {
                var $temp$f = f, $temp$n = n - 1, $temp$ns = A2($elm$core$List$cons, f($elm$core$List$head(ns)), ns);
                f = $temp$f;
                n = $temp$n;
                ns = $temp$ns;
                continue orbitAux;
            }
        }
    });
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$orbit = F3(function(f, n, startingValue) {
        return A2($elm$core$List$take, n, A3($jxxcarlson$elm_pseudorandom$PseudoRandom$orbitAux, f, n + 5, _List_fromArray([
            startingValue
        ])));
    });
    var $jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence = F2(function(n, seed) {
        return A2($elm$core$List$take, n, A3($jxxcarlson$elm_pseudorandom$PseudoRandom$orbit, $jxxcarlson$elm_pseudorandom$PseudoRandom$f0, n, seed));
    });
    var $elm$core$Elm$JsArray$map = _JsArray_map;
    var $elm$core$Array$map = F2(function(func, _v0) {
        var len = _v0.a;
        var startShift = _v0.b;
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = function(node) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return $elm$core$Array$SubTree(A2($elm$core$Elm$JsArray$map, helper, subTree));
            } else {
                var values = node.a;
                return $elm$core$Array$Leaf(A2($elm$core$Elm$JsArray$map, func, values));
            }
        };
        return A4($elm$core$Array$Array_elm_builtin, len, startShift, A2($elm$core$Elm$JsArray$map, helper, tree), A2($elm$core$Elm$JsArray$map, func, tail));
    });
    var $author$project$Lia$Markdown$Quiz$Parser$randomize = F2(function(typeOf, seed) {
        switch(typeOf.$){
            case "Vector_Type":
                var vec = typeOf.a;
                return $elm$core$Maybe$Just(A2($jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence, $elm$core$List$length(vec.options), seed));
            case "Matrix_Type":
                var vec = typeOf.a;
                return $elm$core$Maybe$Just(A2($jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence, $elm$core$List$length(vec.options), seed));
            case "Block_Type":
                var vec = typeOf.a;
                return $elm$core$Maybe$Just(A2($jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence, $elm$core$List$length(vec.options), seed));
            case "Multi_Type":
                var vec = typeOf.a;
                return $elm$core$Maybe$Just(A2($jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence, A3($elm$core$Array$foldl, $elm$core$Basics$add, 0, A2($elm$core$Array$map, $elm$core$List$length, vec.options)), seed));
            default:
                return $elm$core$Maybe$Nothing;
        }
    });
    var $author$project$Lia$Markdown$Quiz$Parser$revealAt = function(value) {
        var _v0 = $elm$core$String$toInt(value);
        if (_v0.$ === "Just") {
            var trial = _v0.a;
            return $elm$core$Basics$abs(trial);
        } else return $author$project$Lia$Utils$checkFalse(value) ? 0 : 100000;
    };
    var $author$project$Lia$Markdown$Quiz$Parser$getOptions = F3(function(quiz, seed, attr) {
        return {
            maxTrials: A2($elm$core$Maybe$andThen, $elm$core$String$toInt, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-max-trials", attr)),
            randomize: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-randomize", attr) ? A2($author$project$Lia$Markdown$Quiz$Parser$randomize, quiz, seed) : $elm$core$Maybe$Nothing,
            score: A2($elm$core$Maybe$andThen, $elm$core$String$toFloat, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-score", attr)),
            showHintsAt: A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Parser$revealAt, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-hint-button", attr))),
            showPartialSolution: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-show-partial-solution", attr) || A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-show-partials", attr),
            showResolveAt: A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Parser$revealAt, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-solution-button", attr)))
        };
    });
    var $author$project$Lia$Parser$Context$getSeed = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.seed;
    }, $andre_dietrich$parser_combinators$Combine$succeed)), $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
        return _Utils_update(state, {
            seed: A2($elm$core$Maybe$withDefault, 0, $elm$core$List$head(A2($jxxcarlson$elm_pseudorandom$PseudoRandom$integerSequence, 1, state.seed)))
        });
    }));
    var $author$project$Lia$Markdown$Quiz$Types$Block_State = function(a) {
        return {
            $: "Block_State",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Generic_State = {
        $: "Generic_State"
    };
    var $author$project$Lia$Markdown$Quiz$Types$Matrix_State = function(a) {
        return {
            $: "Matrix_State",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Multi_State = function(a) {
        return {
            $: "Multi_State",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Vector_State = function(a) {
        return {
            $: "Vector_State",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Types$initState = function(state) {
        switch(state.$){
            case "Text":
                return $author$project$Lia$Markdown$Quiz$Block$Types$Text("");
            case "Select":
                return A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, false, _List_fromArray([
                    -1
                ]));
            default:
                return A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, _List_Nil);
        }
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice = function(a) {
        return {
            $: "MultipleChoice",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice = function(a) {
        return {
            $: "SingleChoice",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Types$initState = function(state) {
        if (state.$ === "SingleChoice") {
            var list = state.a;
            return $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(A2($elm$core$List$map, function(_v1) {
                return false;
            }, list));
        } else {
            var list = state.a;
            return $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(A2($elm$core$List$map, function(_v2) {
                return false;
            }, list));
        }
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Types$initState = $elm$core$Array$map($author$project$Lia$Markdown$Quiz$Vector$Types$initState);
    var $author$project$Lia$Markdown$Quiz$Multi$Types$initState = $elm$core$Array$map($author$project$Lia$Markdown$Quiz$Block$Types$initState);
    var $author$project$Lia$Markdown$Quiz$Types$initState = function(quiz) {
        switch(quiz.$){
            case "Generic_Type":
                return $author$project$Lia$Markdown$Quiz$Types$Generic_State;
            case "Block_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Block_State($author$project$Lia$Markdown$Quiz$Block$Types$initState(q.solution));
            case "Multi_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Multi_State($author$project$Lia$Markdown$Quiz$Multi$Types$initState(q.solution));
            case "Vector_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Vector_State($author$project$Lia$Markdown$Quiz$Vector$Types$initState(q.solution));
            default:
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Matrix_State($author$project$Lia$Markdown$Quiz$Matrix$Types$initState(q.solution));
        }
    };
    var $author$project$Lia$Markdown$Quiz$Parser$maybeJS = A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$second, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$eScript(_List_fromArray([
        _Utils_Tuple2("input", "hidden"),
        _Utils_Tuple2("block", "true"),
        _Utils_Tuple2("default", "undefined")
    ])), $author$project$Lia$Parser$Helper$spaces)))), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check), $author$project$Lia$Markdown$Macro$Parser$macro));
    var $elm$core$Array$setHelp = F4(function(shift, index, value, tree) {
        var pos = $elm$core$Array$bitMask & index >>> shift;
        var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
        if (_v0.$ === "SubTree") {
            var subTree = _v0.a;
            var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
            return A3($elm$core$Elm$JsArray$unsafeSet, pos, $elm$core$Array$SubTree(newSub), tree);
        } else {
            var values = _v0.a;
            var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
            return A3($elm$core$Elm$JsArray$unsafeSet, pos, $elm$core$Array$Leaf(newLeaf), tree);
        }
    });
    var $elm$core$Array$set = F3(function(index, value, array) {
        var len = array.a;
        var startShift = array.b;
        var tree = array.c;
        var tail = array.d;
        return index < 0 || _Utils_cmp(index, len) > -1 ? array : _Utils_cmp(index, $elm$core$Array$tailIndex(len)) > -1 ? A4($elm$core$Array$Array_elm_builtin, len, startShift, tree, A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4($elm$core$Array$Array_elm_builtin, len, startShift, A4($elm$core$Array$setHelp, startShift, index, value, tree), tail);
    });
    var $author$project$Lia$Markdown$Quiz$Parser$setScriptToHidden = F2(function(effect_model, scriptID) {
        var _v0 = A2($elm$core$Array$get, scriptID, effect_model.javascript);
        if (_v0.$ === "Just") {
            var js = _v0.a;
            var input = js.input;
            return _Utils_update(effect_model, {
                javascript: A3($elm$core$Array$set, scriptID, _Utils_update(js, {
                    block: true,
                    input: _Utils_update(input, {
                        type_: $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Hidden_)
                    })
                }), effect_model.javascript)
            });
        } else return effect_model;
    });
    var $author$project$Lia$Markdown$Quiz$Parser$modify_State = F3(function(scriptID, attr, q) {
        var add_state = F3(function(id, seed, s) {
            return _Utils_update(s, {
                effect_model: A2($elm$core$Maybe$withDefault, s.effect_model, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Parser$setScriptToHidden(s.effect_model), scriptID)),
                quiz_vector: A2($elm$core$Array$push, {
                    error_msg: "",
                    hint: 0,
                    isActive: true,
                    opt: A3($author$project$Lia$Markdown$Quiz$Parser$getOptions, q.quiz, seed, attr),
                    partiallySolved: $elm$core$Array$empty,
                    scriptID: !_Utils_eq(scriptID, $elm$core$Maybe$Nothing) ? scriptID : id,
                    solved: $author$project$Lia$Markdown$Quiz$Solution$Open,
                    state: $author$project$Lia$Markdown$Quiz$Types$initState(q.quiz),
                    trial: 0
                }, s.quiz_vector)
            });
        });
        return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(q), A2($andre_dietrich$parser_combinators$Combine$andThen, $andre_dietrich$parser_combinators$Combine$modifyState, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Parser$Context$getSeed, A2($andre_dietrich$parser_combinators$Combine$map, add_state, $author$project$Lia$Markdown$Quiz$Parser$maybeJS))));
    });
    var $author$project$Lia$Parser$Input$pop = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
        var input = state.input;
        return _Utils_update(state, {
            input: _Utils_update(input, {
                blocks: $author$project$Lia$Markdown$Quiz$Multi$Types$init
            })
        });
    }), $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.input;
    }, A2($elm$core$Basics$composeR, function($) {
        return $.blocks;
    }, $andre_dietrich$parser_combinators$Combine$succeed))));
    var $author$project$Lia$Markdown$Quiz$Parser$gapText = F3(function(scriptID, attr, block) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, A2($author$project$Lia$Markdown$Quiz$Parser$modify_State, scriptID, attr), A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Quiz$Parser$adds, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Multi_Type, A2($andre_dietrich$parser_combinators$Combine$map, function(q) {
            return _Utils_update(q, {
                elements: _List_fromArray([
                    block
                ])
            });
        }, $author$project$Lia$Parser$Input$pop))));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Point = F2(function(x, y) {
        return {
            x: x,
            y: y
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric = {
        $: "AlphaNumeric"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Box = {
        $: "Box"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Corner = function(a) {
        return {
            $: "Corner",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$East = {
        $: "East"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Ext = F2(function(a, b) {
        return {
            $: "Ext",
            a: a,
            b: b
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Ext_ = F3(function(a, b, c) {
        return {
            $: "Ext_",
            a: a,
            b: b,
            c: c
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$ForeignObject = F2(function(a, b) {
        return {
            $: "ForeignObject",
            a: a,
            b: b
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal = {
        $: "Horizontal"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Line = F2(function(a, b) {
        return {
            $: "Line",
            a: a,
            b: b
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$North = {
        $: "North"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence = function(a) {
        return {
            $: "Sequence",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft = {
        $: "SlantLeft"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight = {
        $: "SlantRight"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$South = {
        $: "South"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Text = function(a) {
        return {
            $: "Text",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$TextEmoji = function(a) {
        return {
            $: "TextEmoji",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle = function(a) {
        return {
            $: "Triangle",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical = {
        $: "Vertical"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$West = {
        $: "West"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Circle = function(a) {
        return {
            $: "Circle",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$BigBox = {
        $: "BigBox"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Center = {
        $: "Center"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection = {
        $: "Intersection"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Square = {
        $: "Square"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$apply = F2(function(matrix, list) {
        return A2($elm$core$List$filterMap, function(_v0) {
            var if_ = _v0.a;
            var then_ = _v0.b;
            return if_(matrix) ? $elm$core$Maybe$Just(then_) : $elm$core$Maybe$Nothing;
        }, list);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault = F2(function(_char, list) {
        if (!list.b) return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
        else return $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(list);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$intersection = F2(function(_char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(function(_v0) {
                var north = _v0.north;
                return _Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical) || _Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection) || _Utils_eq(north, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Vertical) || _Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Intersection) || _Utils_eq(m.south, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$South)),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.north_west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.north_east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.south_west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.south_east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Square)), $andre_dietrich$elm_svgbob$SvgBob$Types$BigBox),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Square)), $andre_dietrich$elm_svgbob$SvgBob$Types$BigBox),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.south;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Square)), $andre_dietrich$elm_svgbob$SvgBob$Types$BigBox),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.north;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Square)), $andre_dietrich$elm_svgbob$SvgBob$Types$BigBox)
        ])));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$circle = F3(function(filled, _char, m) {
        if (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east)) return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
        else {
            var _v0 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
            if (_v0.$ === "Sequence") {
                var list = _v0.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(A2($elm$core$List$append, list, _List_fromArray([
                    $andre_dietrich$elm_svgbob$SvgBob$Types$Circle(filled)
                ])));
            } else return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
        }
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Curve = F3(function(a, b, c) {
        return {
            $: "Curve",
            a: a,
            b: b,
            c: c
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve = F2(function(_char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north_west) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, $andre_dietrich$elm_svgbob$SvgBob$Types$South, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North)))
        ])));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve = {
        $: "CloseCurve"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$East_ = function(a) {
        return {
            $: "East_",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal = {
        $: "LowHorizontal"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$North_ = function(a) {
        return {
            $: "North_",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve = {
        $: "OpenCurve"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$South_ = function(a) {
        return {
            $: "South_",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$West_ = function(a) {
        return {
            $: "West_",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$corner = F3(function(dir, _char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$West, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(2))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$West, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.north)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return (_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection, m.south)) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, $andre_dietrich$elm_svgbob$SvgBob$Types$East, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5))
            ]))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 3, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 3, $andre_dietrich$elm_svgbob$SvgBob$Types$West, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 3, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 3, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(20)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 3, $andre_dietrich$elm_svgbob$SvgBob$Types$East, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 8, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(0.5)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 8, $andre_dietrich$elm_svgbob$SvgBob$Types$North, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(0.5)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 8, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(0.5)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 8, $andre_dietrich$elm_svgbob$SvgBob$Types$South, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(0.5)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$South)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$West, $andre_dietrich$elm_svgbob$SvgBob$Types$North)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$North)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$East, $andre_dietrich$elm_svgbob$SvgBob$Types$South)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$South_(2))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$North_(2))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal, m.west) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, $andre_dietrich$elm_svgbob$SvgBob$Types$East, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(3)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.north_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(3)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.north_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, $andre_dietrich$elm_svgbob$SvgBob$Types$West, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(3)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East))
            ]))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, $andre_dietrich$elm_svgbob$SvgBob$Types$North),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))
            ]))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west);
            }, $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(_List_fromArray([
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
                A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$Center, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West))
            ]))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal) && _Utils_eq(m.north_east, $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$West, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal) && _Utils_eq(m.north_west, $andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$East, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$West)),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.south_east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$South) && _Utils_eq(m.south_west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.north_east, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$East))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq(dir, $andre_dietrich$elm_svgbob$SvgBob$Types$North) && _Utils_eq(m.north_west, $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West)))
        ])));
    });
    var $elm$core$Maybe$map2 = F3(function(func, ma, mb) {
        if (ma.$ === "Nothing") return $elm$core$Maybe$Nothing;
        else {
            var a = ma.a;
            if (mb.$ === "Nothing") return $elm$core$Maybe$Nothing;
            else {
                var b = mb.a;
                return $elm$core$Maybe$Just(A2(func, a, b));
            }
        }
    });
    var $andre_dietrich$elm_svgbob$WChar$Control = {
        $: "Control"
    };
    var $andre_dietrich$elm_svgbob$WChar$Narrow = {
        $: "Narrow"
    };
    var $andre_dietrich$elm_svgbob$WChar$Wide = {
        $: "Wide"
    };
    var $andre_dietrich$elm_svgbob$WChar$Zero = {
        $: "Zero"
    };
    var $andre_dietrich$elm_svgbob$WChar$bisearchHelper = F4(function(ucs, table, min, max) {
        bisearchHelper: while(true){
            var mid = (min + max) / 2 | 0;
            var _v0 = A2($elm$core$Array$get, mid, table);
            if (_v0.$ === "Just") {
                var _v1 = _v0.a;
                var beginning = _v1.a;
                var ending = _v1.b;
                if (_Utils_cmp(max, min) < 0) return false;
                else if (_Utils_cmp(ucs, ending) > 0) {
                    var $temp$ucs = ucs, $temp$table = table, $temp$min = mid + 1, $temp$max = max;
                    ucs = $temp$ucs;
                    table = $temp$table;
                    min = $temp$min;
                    max = $temp$max;
                    continue bisearchHelper;
                } else {
                    if (_Utils_cmp(ucs, beginning) < 0) {
                        var $temp$ucs = ucs, $temp$table = table, $temp$min = min, $temp$max = mid - 1;
                        ucs = $temp$ucs;
                        table = $temp$table;
                        min = $temp$min;
                        max = $temp$max;
                        continue bisearchHelper;
                    } else return true;
                }
            } else return false;
        }
    });
    var $andre_dietrich$elm_svgbob$WChar$binarySearch = F2(function(ucs, table) {
        var min = 0;
        var max = $elm$core$Array$length(table);
        return A4($andre_dietrich$elm_svgbob$WChar$bisearchHelper, ucs, table, min, max);
    });
    var $andre_dietrich$elm_svgbob$WChar$wideEastern = $elm$core$Array$fromList(_List_fromArray([
        _Utils_Tuple2(4352, 4447),
        _Utils_Tuple2(8986, 8987),
        _Utils_Tuple2(9001, 9002),
        _Utils_Tuple2(9193, 9196),
        _Utils_Tuple2(9200, 9200),
        _Utils_Tuple2(9203, 9203),
        _Utils_Tuple2(9725, 9726),
        _Utils_Tuple2(9748, 9749),
        _Utils_Tuple2(9800, 9811),
        _Utils_Tuple2(9855, 9855),
        _Utils_Tuple2(9875, 9875),
        _Utils_Tuple2(9889, 9889),
        _Utils_Tuple2(9898, 9899),
        _Utils_Tuple2(9917, 9918),
        _Utils_Tuple2(9924, 9925),
        _Utils_Tuple2(9934, 9934),
        _Utils_Tuple2(9940, 9940),
        _Utils_Tuple2(9962, 9962),
        _Utils_Tuple2(9970, 9971),
        _Utils_Tuple2(9973, 9973),
        _Utils_Tuple2(9978, 9978),
        _Utils_Tuple2(9981, 9981),
        _Utils_Tuple2(9989, 9989),
        _Utils_Tuple2(9994, 9995),
        _Utils_Tuple2(10024, 10024),
        _Utils_Tuple2(10060, 10060),
        _Utils_Tuple2(10062, 10062),
        _Utils_Tuple2(10067, 10069),
        _Utils_Tuple2(10071, 10071),
        _Utils_Tuple2(10133, 10135),
        _Utils_Tuple2(10160, 10160),
        _Utils_Tuple2(10175, 10175),
        _Utils_Tuple2(11035, 11036),
        _Utils_Tuple2(11088, 11088),
        _Utils_Tuple2(11093, 11093),
        _Utils_Tuple2(11904, 11929),
        _Utils_Tuple2(11931, 12019),
        _Utils_Tuple2(12032, 12245),
        _Utils_Tuple2(12272, 12283),
        _Utils_Tuple2(12288, 12350),
        _Utils_Tuple2(12353, 12438),
        _Utils_Tuple2(12441, 12543),
        _Utils_Tuple2(12549, 12591),
        _Utils_Tuple2(12593, 12686),
        _Utils_Tuple2(12688, 12771),
        _Utils_Tuple2(12784, 12830),
        _Utils_Tuple2(12832, 12871),
        _Utils_Tuple2(12880, 19903),
        _Utils_Tuple2(19968, 42124),
        _Utils_Tuple2(42128, 42182),
        _Utils_Tuple2(43360, 43388),
        _Utils_Tuple2(44032, 55203),
        _Utils_Tuple2(63744, 64255),
        _Utils_Tuple2(65040, 65049),
        _Utils_Tuple2(65072, 65106),
        _Utils_Tuple2(65108, 65126),
        _Utils_Tuple2(65128, 65131),
        _Utils_Tuple2(65281, 65376),
        _Utils_Tuple2(65504, 65510),
        _Utils_Tuple2(94176, 94180),
        _Utils_Tuple2(94192, 94193),
        _Utils_Tuple2(94208, 100343),
        _Utils_Tuple2(100352, 101589),
        _Utils_Tuple2(101632, 101640),
        _Utils_Tuple2(110592, 110878),
        _Utils_Tuple2(110928, 110930),
        _Utils_Tuple2(110948, 110951),
        _Utils_Tuple2(110960, 111355),
        _Utils_Tuple2(126980, 126980),
        _Utils_Tuple2(127183, 127183),
        _Utils_Tuple2(127374, 127374),
        _Utils_Tuple2(127377, 127386),
        _Utils_Tuple2(127488, 127490),
        _Utils_Tuple2(127504, 127547),
        _Utils_Tuple2(127552, 127560),
        _Utils_Tuple2(127568, 127569),
        _Utils_Tuple2(127584, 127589),
        _Utils_Tuple2(127744, 127776),
        _Utils_Tuple2(127789, 127797),
        _Utils_Tuple2(127799, 127868),
        _Utils_Tuple2(127870, 127891),
        _Utils_Tuple2(127904, 127946),
        _Utils_Tuple2(127951, 127955),
        _Utils_Tuple2(127968, 127984),
        _Utils_Tuple2(127988, 127988),
        _Utils_Tuple2(127992, 128062),
        _Utils_Tuple2(128064, 128064),
        _Utils_Tuple2(128066, 128252),
        _Utils_Tuple2(128255, 128317),
        _Utils_Tuple2(128331, 128334),
        _Utils_Tuple2(128336, 128359),
        _Utils_Tuple2(128378, 128378),
        _Utils_Tuple2(128405, 128406),
        _Utils_Tuple2(128420, 128420),
        _Utils_Tuple2(128507, 128591),
        _Utils_Tuple2(128640, 128709),
        _Utils_Tuple2(128716, 128716),
        _Utils_Tuple2(128720, 128722),
        _Utils_Tuple2(128725, 128727),
        _Utils_Tuple2(128747, 128748),
        _Utils_Tuple2(128756, 128764),
        _Utils_Tuple2(128992, 129003),
        _Utils_Tuple2(129292, 129338),
        _Utils_Tuple2(129340, 129349),
        _Utils_Tuple2(129351, 129400),
        _Utils_Tuple2(129402, 129483),
        _Utils_Tuple2(129485, 129535),
        _Utils_Tuple2(129648, 129652),
        _Utils_Tuple2(129656, 129658),
        _Utils_Tuple2(129664, 129670),
        _Utils_Tuple2(129680, 129704),
        _Utils_Tuple2(129712, 129718),
        _Utils_Tuple2(129728, 129730),
        _Utils_Tuple2(129744, 129750),
        _Utils_Tuple2(131072, 196605),
        _Utils_Tuple2(196608, 262141)
    ]));
    var $andre_dietrich$elm_svgbob$WChar$zeroWidth = $elm$core$Array$fromList(_List_fromArray([
        _Utils_Tuple2(768, 879),
        _Utils_Tuple2(1155, 1161),
        _Utils_Tuple2(1425, 1469),
        _Utils_Tuple2(1471, 1471),
        _Utils_Tuple2(1473, 1474),
        _Utils_Tuple2(1476, 1477),
        _Utils_Tuple2(1479, 1479),
        _Utils_Tuple2(1552, 1562),
        _Utils_Tuple2(1611, 1631),
        _Utils_Tuple2(1648, 1648),
        _Utils_Tuple2(1750, 1756),
        _Utils_Tuple2(1759, 1764),
        _Utils_Tuple2(1767, 1768),
        _Utils_Tuple2(1770, 1773),
        _Utils_Tuple2(1809, 1809),
        _Utils_Tuple2(1840, 1866),
        _Utils_Tuple2(1958, 1968),
        _Utils_Tuple2(2027, 2035),
        _Utils_Tuple2(2045, 2045),
        _Utils_Tuple2(2070, 2073),
        _Utils_Tuple2(2075, 2083),
        _Utils_Tuple2(2085, 2087),
        _Utils_Tuple2(2089, 2093),
        _Utils_Tuple2(2137, 2139),
        _Utils_Tuple2(2259, 2273),
        _Utils_Tuple2(2275, 2306),
        _Utils_Tuple2(2362, 2362),
        _Utils_Tuple2(2364, 2364),
        _Utils_Tuple2(2369, 2376),
        _Utils_Tuple2(2381, 2381),
        _Utils_Tuple2(2385, 2391),
        _Utils_Tuple2(2402, 2403),
        _Utils_Tuple2(2433, 2433),
        _Utils_Tuple2(2492, 2492),
        _Utils_Tuple2(2497, 2500),
        _Utils_Tuple2(2509, 2509),
        _Utils_Tuple2(2530, 2531),
        _Utils_Tuple2(2558, 2558),
        _Utils_Tuple2(2561, 2562),
        _Utils_Tuple2(2620, 2620),
        _Utils_Tuple2(2625, 2626),
        _Utils_Tuple2(2631, 2632),
        _Utils_Tuple2(2635, 2637),
        _Utils_Tuple2(2641, 2641),
        _Utils_Tuple2(2672, 2673),
        _Utils_Tuple2(2677, 2677),
        _Utils_Tuple2(2689, 2690),
        _Utils_Tuple2(2748, 2748),
        _Utils_Tuple2(2753, 2757),
        _Utils_Tuple2(2759, 2760),
        _Utils_Tuple2(2765, 2765),
        _Utils_Tuple2(2786, 2787),
        _Utils_Tuple2(2810, 2815),
        _Utils_Tuple2(2817, 2817),
        _Utils_Tuple2(2876, 2876),
        _Utils_Tuple2(2879, 2879),
        _Utils_Tuple2(2881, 2884),
        _Utils_Tuple2(2893, 2893),
        _Utils_Tuple2(2901, 2902),
        _Utils_Tuple2(2914, 2915),
        _Utils_Tuple2(2946, 2946),
        _Utils_Tuple2(3008, 3008),
        _Utils_Tuple2(3021, 3021),
        _Utils_Tuple2(3072, 3072),
        _Utils_Tuple2(3076, 3076),
        _Utils_Tuple2(3134, 3136),
        _Utils_Tuple2(3142, 3144),
        _Utils_Tuple2(3146, 3149),
        _Utils_Tuple2(3157, 3158),
        _Utils_Tuple2(3170, 3171),
        _Utils_Tuple2(3201, 3201),
        _Utils_Tuple2(3260, 3260),
        _Utils_Tuple2(3263, 3263),
        _Utils_Tuple2(3270, 3270),
        _Utils_Tuple2(3276, 3277),
        _Utils_Tuple2(3298, 3299),
        _Utils_Tuple2(3328, 3329),
        _Utils_Tuple2(3387, 3388),
        _Utils_Tuple2(3393, 3396),
        _Utils_Tuple2(3405, 3405),
        _Utils_Tuple2(3426, 3427),
        _Utils_Tuple2(3457, 3457),
        _Utils_Tuple2(3530, 3530),
        _Utils_Tuple2(3538, 3540),
        _Utils_Tuple2(3542, 3542),
        _Utils_Tuple2(3633, 3633),
        _Utils_Tuple2(3636, 3642),
        _Utils_Tuple2(3655, 3662),
        _Utils_Tuple2(3761, 3761),
        _Utils_Tuple2(3764, 3772),
        _Utils_Tuple2(3784, 3789),
        _Utils_Tuple2(3864, 3865),
        _Utils_Tuple2(3893, 3893),
        _Utils_Tuple2(3895, 3895),
        _Utils_Tuple2(3897, 3897),
        _Utils_Tuple2(3953, 3966),
        _Utils_Tuple2(3968, 3972),
        _Utils_Tuple2(3974, 3975),
        _Utils_Tuple2(3981, 3991),
        _Utils_Tuple2(3993, 4028),
        _Utils_Tuple2(4038, 4038),
        _Utils_Tuple2(4141, 4144),
        _Utils_Tuple2(4146, 4151),
        _Utils_Tuple2(4153, 4154),
        _Utils_Tuple2(4157, 4158),
        _Utils_Tuple2(4184, 4185),
        _Utils_Tuple2(4190, 4192),
        _Utils_Tuple2(4209, 4212),
        _Utils_Tuple2(4226, 4226),
        _Utils_Tuple2(4229, 4230),
        _Utils_Tuple2(4237, 4237),
        _Utils_Tuple2(4253, 4253),
        _Utils_Tuple2(4957, 4959),
        _Utils_Tuple2(5906, 5908),
        _Utils_Tuple2(5938, 5940),
        _Utils_Tuple2(5970, 5971),
        _Utils_Tuple2(6002, 6003),
        _Utils_Tuple2(6068, 6069),
        _Utils_Tuple2(6071, 6077),
        _Utils_Tuple2(6086, 6086),
        _Utils_Tuple2(6089, 6099),
        _Utils_Tuple2(6109, 6109),
        _Utils_Tuple2(6155, 6157),
        _Utils_Tuple2(6277, 6278),
        _Utils_Tuple2(6313, 6313),
        _Utils_Tuple2(6432, 6434),
        _Utils_Tuple2(6439, 6440),
        _Utils_Tuple2(6450, 6450),
        _Utils_Tuple2(6457, 6459),
        _Utils_Tuple2(6679, 6680),
        _Utils_Tuple2(6683, 6683),
        _Utils_Tuple2(6742, 6742),
        _Utils_Tuple2(6744, 6750),
        _Utils_Tuple2(6752, 6752),
        _Utils_Tuple2(6754, 6754),
        _Utils_Tuple2(6757, 6764),
        _Utils_Tuple2(6771, 6780),
        _Utils_Tuple2(6783, 6783),
        _Utils_Tuple2(6832, 6848),
        _Utils_Tuple2(6912, 6915),
        _Utils_Tuple2(6964, 6964),
        _Utils_Tuple2(6966, 6970),
        _Utils_Tuple2(6972, 6972),
        _Utils_Tuple2(6978, 6978),
        _Utils_Tuple2(7019, 7027),
        _Utils_Tuple2(7040, 7041),
        _Utils_Tuple2(7074, 7077),
        _Utils_Tuple2(7080, 7081),
        _Utils_Tuple2(7083, 7085),
        _Utils_Tuple2(7142, 7142),
        _Utils_Tuple2(7144, 7145),
        _Utils_Tuple2(7149, 7149),
        _Utils_Tuple2(7151, 7153),
        _Utils_Tuple2(7212, 7219),
        _Utils_Tuple2(7222, 7223),
        _Utils_Tuple2(7376, 7378),
        _Utils_Tuple2(7380, 7392),
        _Utils_Tuple2(7394, 7400),
        _Utils_Tuple2(7405, 7405),
        _Utils_Tuple2(7412, 7412),
        _Utils_Tuple2(7416, 7417),
        _Utils_Tuple2(7616, 7673),
        _Utils_Tuple2(7675, 7679),
        _Utils_Tuple2(8400, 8432),
        _Utils_Tuple2(11503, 11505),
        _Utils_Tuple2(11647, 11647),
        _Utils_Tuple2(11744, 11775),
        _Utils_Tuple2(12330, 12333),
        _Utils_Tuple2(12441, 12442),
        _Utils_Tuple2(42607, 42610),
        _Utils_Tuple2(42612, 42621),
        _Utils_Tuple2(42654, 42655),
        _Utils_Tuple2(42736, 42737),
        _Utils_Tuple2(43010, 43010),
        _Utils_Tuple2(43014, 43014),
        _Utils_Tuple2(43019, 43019),
        _Utils_Tuple2(43045, 43046),
        _Utils_Tuple2(43052, 43052),
        _Utils_Tuple2(43204, 43205),
        _Utils_Tuple2(43232, 43249),
        _Utils_Tuple2(43263, 43263),
        _Utils_Tuple2(43302, 43309),
        _Utils_Tuple2(43335, 43345),
        _Utils_Tuple2(43392, 43394),
        _Utils_Tuple2(43443, 43443),
        _Utils_Tuple2(43446, 43449),
        _Utils_Tuple2(43452, 43453),
        _Utils_Tuple2(43493, 43493),
        _Utils_Tuple2(43561, 43566),
        _Utils_Tuple2(43569, 43570),
        _Utils_Tuple2(43573, 43574),
        _Utils_Tuple2(43587, 43587),
        _Utils_Tuple2(43596, 43596),
        _Utils_Tuple2(43644, 43644),
        _Utils_Tuple2(43696, 43696),
        _Utils_Tuple2(43698, 43700),
        _Utils_Tuple2(43703, 43704),
        _Utils_Tuple2(43710, 43711),
        _Utils_Tuple2(43713, 43713),
        _Utils_Tuple2(43756, 43757),
        _Utils_Tuple2(43766, 43766),
        _Utils_Tuple2(44005, 44005),
        _Utils_Tuple2(44008, 44008),
        _Utils_Tuple2(44013, 44013),
        _Utils_Tuple2(64286, 64286),
        _Utils_Tuple2(65024, 65039),
        _Utils_Tuple2(65056, 65071),
        _Utils_Tuple2(66045, 66045),
        _Utils_Tuple2(66272, 66272),
        _Utils_Tuple2(66422, 66426),
        _Utils_Tuple2(68097, 68099),
        _Utils_Tuple2(68101, 68102),
        _Utils_Tuple2(68108, 68111),
        _Utils_Tuple2(68152, 68154),
        _Utils_Tuple2(68159, 68159),
        _Utils_Tuple2(68325, 68326),
        _Utils_Tuple2(68900, 68903),
        _Utils_Tuple2(69291, 69292),
        _Utils_Tuple2(69446, 69456),
        _Utils_Tuple2(69633, 69633),
        _Utils_Tuple2(69688, 69702),
        _Utils_Tuple2(69759, 69761),
        _Utils_Tuple2(69811, 69814),
        _Utils_Tuple2(69817, 69818),
        _Utils_Tuple2(69888, 69890),
        _Utils_Tuple2(69927, 69931),
        _Utils_Tuple2(69933, 69940),
        _Utils_Tuple2(70003, 70003),
        _Utils_Tuple2(70016, 70017),
        _Utils_Tuple2(70070, 70078),
        _Utils_Tuple2(70089, 70092),
        _Utils_Tuple2(70095, 70095),
        _Utils_Tuple2(70191, 70193),
        _Utils_Tuple2(70196, 70196),
        _Utils_Tuple2(70198, 70199),
        _Utils_Tuple2(70206, 70206),
        _Utils_Tuple2(70367, 70367),
        _Utils_Tuple2(70371, 70378),
        _Utils_Tuple2(70400, 70401),
        _Utils_Tuple2(70459, 70460),
        _Utils_Tuple2(70464, 70464),
        _Utils_Tuple2(70502, 70508),
        _Utils_Tuple2(70512, 70516),
        _Utils_Tuple2(70712, 70719),
        _Utils_Tuple2(70722, 70724),
        _Utils_Tuple2(70726, 70726),
        _Utils_Tuple2(70750, 70750),
        _Utils_Tuple2(70835, 70840),
        _Utils_Tuple2(70842, 70842),
        _Utils_Tuple2(70847, 70848),
        _Utils_Tuple2(70850, 70851),
        _Utils_Tuple2(71090, 71093),
        _Utils_Tuple2(71100, 71101),
        _Utils_Tuple2(71103, 71104),
        _Utils_Tuple2(71132, 71133),
        _Utils_Tuple2(71219, 71226),
        _Utils_Tuple2(71229, 71229),
        _Utils_Tuple2(71231, 71232),
        _Utils_Tuple2(71339, 71339),
        _Utils_Tuple2(71341, 71341),
        _Utils_Tuple2(71344, 71349),
        _Utils_Tuple2(71351, 71351),
        _Utils_Tuple2(71453, 71455),
        _Utils_Tuple2(71458, 71461),
        _Utils_Tuple2(71463, 71467),
        _Utils_Tuple2(71727, 71735),
        _Utils_Tuple2(71737, 71738),
        _Utils_Tuple2(71995, 71996),
        _Utils_Tuple2(71998, 71998),
        _Utils_Tuple2(72003, 72003),
        _Utils_Tuple2(72148, 72151),
        _Utils_Tuple2(72154, 72155),
        _Utils_Tuple2(72160, 72160),
        _Utils_Tuple2(72193, 72202),
        _Utils_Tuple2(72243, 72248),
        _Utils_Tuple2(72251, 72254),
        _Utils_Tuple2(72263, 72263),
        _Utils_Tuple2(72273, 72278),
        _Utils_Tuple2(72281, 72283),
        _Utils_Tuple2(72330, 72342),
        _Utils_Tuple2(72344, 72345),
        _Utils_Tuple2(72752, 72758),
        _Utils_Tuple2(72760, 72765),
        _Utils_Tuple2(72767, 72767),
        _Utils_Tuple2(72850, 72871),
        _Utils_Tuple2(72874, 72880),
        _Utils_Tuple2(72882, 72883),
        _Utils_Tuple2(72885, 72886),
        _Utils_Tuple2(73009, 73014),
        _Utils_Tuple2(73018, 73018),
        _Utils_Tuple2(73020, 73021),
        _Utils_Tuple2(73023, 73029),
        _Utils_Tuple2(73031, 73031),
        _Utils_Tuple2(73104, 73105),
        _Utils_Tuple2(73109, 73109),
        _Utils_Tuple2(73111, 73111),
        _Utils_Tuple2(73459, 73460),
        _Utils_Tuple2(92912, 92916),
        _Utils_Tuple2(92976, 92982),
        _Utils_Tuple2(94031, 94031),
        _Utils_Tuple2(94095, 94098),
        _Utils_Tuple2(94180, 94180),
        _Utils_Tuple2(113821, 113822),
        _Utils_Tuple2(119143, 119145),
        _Utils_Tuple2(119163, 119170),
        _Utils_Tuple2(119173, 119179),
        _Utils_Tuple2(119210, 119213),
        _Utils_Tuple2(119362, 119364),
        _Utils_Tuple2(121344, 121398),
        _Utils_Tuple2(121403, 121452),
        _Utils_Tuple2(121461, 121461),
        _Utils_Tuple2(121476, 121476),
        _Utils_Tuple2(121499, 121503),
        _Utils_Tuple2(121505, 121519),
        _Utils_Tuple2(122880, 122886),
        _Utils_Tuple2(122888, 122904),
        _Utils_Tuple2(122907, 122913),
        _Utils_Tuple2(122915, 122916),
        _Utils_Tuple2(122918, 122922),
        _Utils_Tuple2(123184, 123190),
        _Utils_Tuple2(123628, 123631),
        _Utils_Tuple2(125136, 125142),
        _Utils_Tuple2(125252, 125258),
        _Utils_Tuple2(917760, 917999)
    ]));
    var $andre_dietrich$elm_svgbob$WChar$width = function(ucs) {
        var code = $elm$core$Char$toCode(ucs);
        return !code ? $andre_dietrich$elm_svgbob$WChar$Zero : code < 32 || code >= 127 && code < 160 ? $andre_dietrich$elm_svgbob$WChar$Control : A2($andre_dietrich$elm_svgbob$WChar$binarySearch, code, $andre_dietrich$elm_svgbob$WChar$zeroWidth) ? $andre_dietrich$elm_svgbob$WChar$Zero : A2($andre_dietrich$elm_svgbob$WChar$binarySearch, code, $andre_dietrich$elm_svgbob$WChar$wideEastern) ? $andre_dietrich$elm_svgbob$WChar$Wide : $andre_dietrich$elm_svgbob$WChar$Narrow;
    };
    var $andre_dietrich$elm_svgbob$WChar$stringWidth = function(str) {
        var toInt = function(w) {
            switch(w.$){
                case "Narrow":
                    return $elm$core$Maybe$Just(1);
                case "Wide":
                    return $elm$core$Maybe$Just(2);
                case "Zero":
                    return $elm$core$Maybe$Just(0);
                default:
                    return $elm$core$Maybe$Nothing;
            }
        };
        return A3($elm$core$List$foldl, $elm$core$Maybe$map2($elm$core$Basics$add), $elm$core$Maybe$Just(0), A2($elm$core$List$map, toInt, A2($elm$core$List$map, $andre_dietrich$elm_svgbob$WChar$width, $elm$core$String$toList(str))));
    };
    var $elm$core$List$sum = function(numbers) {
        return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$CR = {
        $: "CR"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Empty = {
        $: "Empty"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty = $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Empty;
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Empty = {
        $: "Empty"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Error = function(a) {
        return {
            $: "Error",
            a: a
        };
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$One = {
        $: "One"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Two = function(a) {
        return {
            $: "Two",
            a: a
        };
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Branch = F5(function(a, b, c, d, e) {
        return {
            $: "Branch",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$height = function(rangeDict) {
        if (rangeDict.$ === "Empty") return 0;
        else {
            var height_ = rangeDict.a;
            return height_;
        }
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch = F4(function(range, value, lt, gt) {
        return A5($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Branch, A2($elm$core$Basics$max, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$height(lt), $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$height(gt)) + 1, range, value, lt, gt);
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff = function(rangeDict) {
        if (rangeDict.$ === "Empty") return 0;
        else {
            var lt = rangeDict.d;
            var gt = rangeDict.e;
            return $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$height(gt) - $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$height(lt);
        }
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateLeft = function(rangeDict) {
        if (rangeDict.$ === "Branch" && rangeDict.e.$ === "Branch") {
            var head = rangeDict.b;
            var value = rangeDict.c;
            var lessThans = rangeDict.d;
            var _v1 = rangeDict.e;
            var subHead = _v1.b;
            var subValue = _v1.c;
            var betweens = _v1.d;
            var greaterThans = _v1.e;
            return A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, subHead, subValue, A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, head, value, lessThans, betweens), greaterThans);
        } else return rangeDict;
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateRight = function(rangeDict) {
        if (rangeDict.$ === "Branch" && rangeDict.d.$ === "Branch") {
            var head = rangeDict.b;
            var value = rangeDict.c;
            var _v1 = rangeDict.d;
            var subHead = _v1.b;
            var subValue = _v1.c;
            var lessThans = _v1.d;
            var betweens = _v1.e;
            var greaterThans = rangeDict.e;
            return A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, subHead, subValue, lessThans, A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, head, value, betweens, greaterThans));
        } else return rangeDict;
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$balance = function(rangeDict) {
        if (rangeDict.$ === "Empty") return rangeDict;
        else {
            var here = rangeDict.b;
            var value = rangeDict.c;
            var lt = rangeDict.d;
            var gt = rangeDict.e;
            return _Utils_eq($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(rangeDict), -2) && $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(lt) === 1 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateRight(A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, here, value, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateLeft(lt), gt)) : _Utils_cmp($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(rangeDict), -1) < 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateRight(rangeDict) : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(rangeDict) === 2 && _Utils_eq($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(gt), -1) ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateLeft(A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, here, value, lt, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateRight(gt))) : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$heightDiff(rangeDict) > 1 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$rotateLeft(rangeDict) : rangeDict;
        }
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Range = F2(function(a, b) {
        return {
            $: "Range",
            a: a,
            b: b
        };
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Point = function(a) {
        return {
            $: "Point",
            a: a
        };
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$range = F2(function(a, b) {
        return _Utils_eq(a, b) ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Point(a) : A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Range, A2($elm$core$Basics$min, a, b), A2($elm$core$Basics$max, a, b));
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$combine = F2(function(a, b) {
        var _v0 = _Utils_Tuple2(a, b);
        if (_v0.a.$ === "Point") {
            if (_v0.b.$ === "Point") {
                var x = _v0.a.a;
                var y = _v0.b.a;
                return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$range, x, y);
            } else {
                var x = _v0.a.a;
                var _v1 = _v0.b;
                var low = _v1.a;
                var high = _v1.b;
                return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Range, A2($elm$core$Basics$min, x, low), A2($elm$core$Basics$max, x, high));
            }
        } else if (_v0.b.$ === "Point") {
            var _v2 = _v0.a;
            var low = _v2.a;
            var high = _v2.b;
            var x = _v0.b.a;
            return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Range, A2($elm$core$Basics$min, x, low), A2($elm$core$Basics$max, x, high));
        } else {
            var _v3 = _v0.a;
            var low1 = _v3.a;
            var high1 = _v3.b;
            var _v4 = _v0.b;
            var low2 = _v4.a;
            var high2 = _v4.b;
            return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Range, A2($elm$core$Basics$min, low1, low2), A2($elm$core$Basics$max, high1, high2));
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$EQ = {
        $: "EQ"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$GT = {
        $: "GT"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$LT = {
        $: "LT"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Overlapping = {
        $: "Overlapping"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$compare = F2(function(a, b) {
        var _v0 = _Utils_Tuple2(a, b);
        if (_v0.a.$ === "Point") {
            if (_v0.b.$ === "Point") {
                var x = _v0.a.a;
                var y = _v0.b.a;
                return _Utils_cmp(x, y) > 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$GT : _Utils_cmp(x, y) < 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$LT : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$EQ;
            } else {
                var x = _v0.a.a;
                var _v1 = _v0.b;
                var low = _v1.a;
                var high = _v1.b;
                return _Utils_cmp(x, low) < 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$LT : _Utils_cmp(x, high) > 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$GT : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Overlapping;
            }
        } else if (_v0.b.$ === "Point") {
            var _v2 = _v0.a;
            var low = _v2.a;
            var high = _v2.b;
            var x = _v0.b.a;
            return _Utils_cmp(x, low) < 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$GT : _Utils_cmp(x, high) > 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$LT : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Overlapping;
        } else {
            var _v3 = _v0.a;
            var low1 = _v3.a;
            var high1 = _v3.b;
            var _v4 = _v0.b;
            var low2 = _v4.a;
            var high2 = _v4.b;
            return _Utils_cmp(high1, low2) < 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$LT : _Utils_cmp(low1, high2) > 0 ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$GT : _Utils_eq(low1, low2) && _Utils_eq(high1, high2) ? $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$EQ : $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Overlapping;
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert = F3(function(range, value, set) {
        if (set.$ === "Empty") return A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, range, value, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Empty, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Empty);
        else {
            var height_ = set.a;
            var here = set.b;
            var hereValue = set.c;
            var lt = set.d;
            var gt = set.e;
            var _v1 = A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$compare, here, range);
            switch(_v1.$){
                case "LT":
                    return $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$balance(A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, here, hereValue, A3($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert, range, value, lt), gt));
                case "GT":
                    return $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$balance(A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, here, hereValue, lt, A3($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert, range, value, gt)));
                case "EQ":
                    return set;
                default:
                    var combined = A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$combine, range, here);
                    return A4($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$branch, combined, value, lt, gt);
            }
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$point = $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$Point;
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$handleChar = F3(function(value, _char, _v0) {
        var parserState = _v0.a;
        var rangeDict = _v0.b;
        var _v1 = _Utils_Tuple2(parserState, _char);
        switch(_v1.a.$){
            case "Error":
                return _Utils_Tuple2(parserState, rangeDict);
            case "Empty":
                switch(_v1.b.valueOf()){
                    case "1":
                        var _v2 = _v1.a;
                        return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$One, rangeDict);
                    case "2":
                        var _v3 = _v1.a;
                        return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Two($elm$core$Maybe$Nothing), rangeDict);
                    default:
                        var _v4 = _v1.a;
                        return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Error("expected to see a parsing directive like '1' or '2'"), rangeDict);
                }
            case "One":
                var _v5 = _v1.a;
                return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Empty, A3($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$point(_char), value, rangeDict));
            default:
                if (_v1.a.a.$ === "Nothing") {
                    var _v6 = _v1.a.a;
                    return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Two($elm$core$Maybe$Just(_char)), rangeDict);
                } else {
                    var low = _v1.a.a.a;
                    return _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Empty, A3($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert, A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$range, low, _char), value, rangeDict));
                }
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser = F2(function(value, source) {
        var _v0 = A3($elm$core$String$foldl, $BrianHicks$elm_string_graphemes$String$Graphemes$Data$handleChar(value), _Utils_Tuple2($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Empty, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), source);
        switch(_v0.a.$){
            case "Empty":
                var _v1 = _v0.a;
                var out = _v0.b;
                return $elm$core$Result$Ok(out);
            case "Error":
                var err = _v0.a.a;
                return $elm$core$Result$Err(err);
            case "One":
                var _v2 = _v0.a;
                return $elm$core$Result$Err("ended with an empty One");
            default:
                return $elm$core$Result$Err("ended with an empty Two");
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$CR$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$CR))("1\r");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Control = {
        $: "Control"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Control$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Control))("2\0	2\v\f2\x0e\x1f2\x7f\x9f1\xad1؜1᠎1​2‎‏1\u20281\u20292‪‮2⁠⁤1⁥2⁦⁯1\uFEFF2￰￸2￹￻2\uD80D\uDC30\uD80D\uDC3F2\uD82F\uDCA0\uD82F\uDCA32\uD834\uDD73\uD834\uDD7A1\uDB40\uDC001\uDB40\uDC012\uDB40\uDC02\uDB40\uDC1F2\uDB40\uDC80\uDB40\uDCFF2\uDB40\uDDF0\uDB43\uDFFF");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extend = {
        $: "Extend"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extend$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extend))("2̀ͯ2҃҇2҈҉2ֽ֑1ֿ2ׁׂ2ׅׄ1ׇ2ؚؐ2ًٟ1ٰ2ۖۜ2۟ۤ2ۧۨ2۪ۭ1ܑ2ܰ݊2ަް2߫߳1߽2ࠖ࠙2ࠛࠣ2ࠥࠧ2ࠩ࠭2࡙࡛2࢘࢟2࣊࣡2ࣣं1ऺ1़2ुै1्2॑ॗ2ॢॣ1ঁ1়1া2ুৄ1্1ৗ2ৢৣ1৾2ਁਂ1਼2ੁੂ2ੇੈ2ੋ੍1ੑ2ੰੱ1ੵ2ઁં1઼2ુૅ2ેૈ1્2ૢૣ2ૺ૿1ଁ1଼1ା1ି2ୁୄ1୍2୕ୖ1ୗ2ୢୣ1ஂ1ா1ீ1்1ௗ1ఀ1ఄ1఼2ాీ2ెై2ొ్2ౕౖ2ౢౣ1ಁ1಼1ಿ1ೂ1ೆ2ೌ್2ೕೖ2ೢೣ2ഀഁ2഻഼1ാ2ുൄ1്1ൗ2ൢൣ1ඁ1්1ා2ිු1ූ1ෟ1ั2ิฺ2็๎1ັ2ິຼ2່໎2༘༙1༵1༷1༹2ཱཾ2྄ྀ2྆྇2ྍྗ2ྙྼ1࿆2ိူ2ဲ့2္်2ွှ2ၘၙ2ၞၠ2ၱၴ1ႂ2ႅႆ1ႍ1ႝ2፝፟2ᜒ᜔2ᜲᜳ2ᝒᝓ2ᝲᝳ2឴឵2ិួ1ំ2៉៓1៝2᠋᠍1᠏2ᢅᢆ1ᢩ2ᤠᤢ2ᤧᤨ1ᤲ2᤻᤹2ᨘᨗ1ᨛ1ᩖ2ᩘᩞ1᩠1ᩢ2ᩥᩬ2ᩳ᩼1᩿2᪽᪰1᪾2ᪿᫎ2ᬀᬃ1᬴1ᬵ2ᬶᬺ1ᬼ1ᭂ2᭫᭳2ᮀᮁ2ᮢᮥ2ᮨᮩ2᮫ᮭ1᯦2ᯨᯩ1ᯭ2ᯯᯱ2ᰬᰳ2ᰶ᰷2᳐᳒2᳔᳠2᳢᳨1᳭1᳴2᳸᳹2᷿᷀1‌2⃐⃜2⃝⃠1⃡2⃢⃤2⃥⃰2⳯⳱1⵿2ⷠⷿ2〪〭2〮〯2゙゚1꙯2꙰꙲2ꙴ꙽2ꚞꚟ2꛰꛱1ꠂ1꠆1ꠋ2ꠥꠦ1꠬2꣄ꣅ2꣠꣱1ꣿ2ꤦ꤭2ꥇꥑ2ꦀꦂ1꦳2ꦶꦹ2ꦼꦽ1ꧥ2ꨩꨮ2ꨱꨲ2ꨵꨶ1ꩃ1ꩌ1ꩼ1ꪰ2ꪴꪲ2ꪷꪸ2ꪾ꪿1꫁2ꫬꫭ1꫶1ꯥ1ꯨ1꯭1ﬞ2︀️2︠︯2ﾞﾟ1\uD800\uDDFD1\uD800\uDEE02\uD800\uDF76\uD800\uDF7A2\uD802\uDE01\uD802\uDE032\uD802\uDE05\uD802\uDE062\uD802\uDE0C\uD802\uDE0F2\uD802\uDE38\uD802\uDE3A1\uD802\uDE3F2\uD802\uDEE5\uD802\uDEE62\uD803\uDD24\uD803\uDD272\uD803\uDEAB\uD803\uDEAC2\uD803\uDEFD\uD803\uDEFF2\uD803\uDF46\uD803\uDF502\uD803\uDF82\uD803\uDF851\uD804\uDC012\uD804\uDC38\uD804\uDC461\uD804\uDC702\uD804\uDC73\uD804\uDC742\uD804\uDC7F\uD804\uDC812\uD804\uDCB3\uD804\uDCB62\uD804\uDCB9\uD804\uDCBA1\uD804\uDCC22\uD804\uDD00\uD804\uDD022\uD804\uDD27\uD804\uDD2B2\uD804\uDD2D\uD804\uDD341\uD804\uDD732\uD804\uDD80\uD804\uDD812\uD804\uDDB6\uD804\uDDBE2\uD804\uDDC9\uD804\uDDCC1\uD804\uDDCF2\uD804\uDE2F\uD804\uDE311\uD804\uDE342\uD804\uDE36\uD804\uDE371\uD804\uDE3E1\uD804\uDE411\uD804\uDEDF2\uD804\uDEE3\uD804\uDEEA2\uD804\uDF00\uD804\uDF012\uD804\uDF3B\uD804\uDF3C1\uD804\uDF3E1\uD804\uDF401\uD804\uDF572\uD804\uDF66\uD804\uDF6C2\uD804\uDF70\uD804\uDF742\uD805\uDC38\uD805\uDC3F2\uD805\uDC42\uD805\uDC441\uD805\uDC461\uD805\uDC5E1\uD805\uDCB02\uD805\uDCB3\uD805\uDCB81\uD805\uDCBA1\uD805\uDCBD2\uD805\uDCBF\uD805\uDCC02\uD805\uDCC2\uD805\uDCC31\uD805\uDDAF2\uD805\uDDB2\uD805\uDDB52\uD805\uDDBC\uD805\uDDBD2\uD805\uDDBF\uD805\uDDC02\uD805\uDDDC\uD805\uDDDD2\uD805\uDE33\uD805\uDE3A1\uD805\uDE3D2\uD805\uDE3F\uD805\uDE401\uD805\uDEAB1\uD805\uDEAD2\uD805\uDEB0\uD805\uDEB51\uD805\uDEB72\uD805\uDF1D\uD805\uDF1F2\uD805\uDF22\uD805\uDF252\uD805\uDF27\uD805\uDF2B2\uD806\uDC2F\uD806\uDC372\uD806\uDC39\uD806\uDC3A1\uD806\uDD302\uD806\uDD3B\uD806\uDD3C1\uD806\uDD3E1\uD806\uDD432\uD806\uDDD4\uD806\uDDD72\uD806\uDDDA\uD806\uDDDB1\uD806\uDDE02\uD806\uDE01\uD806\uDE0A2\uD806\uDE33\uD806\uDE382\uD806\uDE3B\uD806\uDE3E1\uD806\uDE472\uD806\uDE51\uD806\uDE562\uD806\uDE59\uD806\uDE5B2\uD806\uDE8A\uD806\uDE962\uD806\uDE98\uD806\uDE992\uD807\uDC30\uD807\uDC362\uD807\uDC38\uD807\uDC3D1\uD807\uDC3F2\uD807\uDC92\uD807\uDCA72\uD807\uDCAA\uD807\uDCB02\uD807\uDCB2\uD807\uDCB32\uD807\uDCB5\uD807\uDCB62\uD807\uDD31\uD807\uDD361\uD807\uDD3A2\uD807\uDD3C\uD807\uDD3D2\uD807\uDD3F\uD807\uDD451\uD807\uDD472\uD807\uDD90\uD807\uDD911\uD807\uDD951\uD807\uDD972\uD807\uDEF3\uD807\uDEF42\uD807\uDF00\uD807\uDF012\uD807\uDF36\uD807\uDF3A1\uD807\uDF401\uD807\uDF421\uD80D\uDC402\uD80D\uDC47\uD80D\uDC552\uD81A\uDEF0\uD81A\uDEF42\uD81A\uDF30\uD81A\uDF361\uD81B\uDF4F2\uD81B\uDF8F\uD81B\uDF921\uD81B\uDFE42\uD82F\uDC9D\uD82F\uDC9E2\uD833\uDF00\uD833\uDF2D2\uD833\uDF30\uD833\uDF461\uD834\uDD652\uD834\uDD67\uD834\uDD692\uD834\uDD6E\uD834\uDD722\uD834\uDD7B\uD834\uDD822\uD834\uDD85\uD834\uDD8B2\uD834\uDDAA\uD834\uDDAD2\uD834\uDE42\uD834\uDE442\uD836\uDE00\uD836\uDE362\uD836\uDE3B\uD836\uDE6C1\uD836\uDE751\uD836\uDE842\uD836\uDE9B\uD836\uDE9F2\uD836\uDEA1\uD836\uDEAF2\uD838\uDC00\uD838\uDC062\uD838\uDC08\uD838\uDC182\uD838\uDC1B\uD838\uDC212\uD838\uDC23\uD838\uDC242\uD838\uDC26\uD838\uDC2A1\uD838\uDC8F2\uD838\uDD30\uD838\uDD361\uD838\uDEAE2\uD838\uDEEC\uD838\uDEEF2\uD839\uDCEC\uD839\uDCEF2\uD83A\uDCD0\uD83A\uDCD62\uD83A\uDD44\uD83A\uDD4A2\uD83C\uDFFB\uD83C\uDFFF2\uDB40\uDC20\uDB40\uDC7F2\uDB40\uDD00\uDB40\uDDEF");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$ExtendedPictographic = {
        $: "ExtendedPictographic"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extended_Pictographic$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$ExtendedPictographic))("1\xa91\xae1‼1⁉1™1ℹ2↔↙2↩↪2⌚⌛1⌨1⎈1⏏2⏩⏬2⏭⏮1⏯1⏰2⏱⏲1⏳2⏸⏺1Ⓜ2▪▫1▶1◀2◻◾2☀☁2☂☃1☄1★2☇☍1☎2☏☐1☑1☒2☔☕2☖☗1☘2☙☜1☝2☞☟1☠1☡2☢☣2☤☥1☦2☧☩1☪2☫☭1☮1☯2☰☷2☸☹1☺2☻☿1♀1♁1♂2♃♇2♈♓2♔♞1♟1♠2♡♢1♣1♤2♥♦1♧1♨2♩♺1♻2♼♽1♾1♿2⚀⚅2⚐⚑1⚒1⚓1⚔1⚕2⚖⚗1⚘1⚙1⚚2⚛⚜2⚝⚟2⚠⚡2⚢⚦1⚧2⚨⚩2⚪⚫2⚬⚯2⚰⚱2⚲⚼2⚽⚾2⚿⛃2⛄⛅2⛆⛇1⛈2⛉⛍1⛎1⛏1⛐1⛑1⛒1⛓1⛔2⛕⛨1⛩1⛪2⛫⛯2⛰⛱2⛲⛳1⛴1⛵1⛶2⛷⛹1⛺2⛻⛼1⛽2⛾✁1✂2✃✄1✅2✈✌1✍1✎1✏2✐✑1✒1✔1✖1✝1✡1✨2✳✴1❄1❇1❌1❎2❓❕1❗1❣1❤2❥❧2➕➗1➡1➰1➿2⤴⤵2⬅⬇2⬛⬜1⭐1⭕1〰1〽1㊗1㊙2\uD83C\uDC00\uD83C\uDC031\uD83C\uDC042\uD83C\uDC05\uD83C\uDCCE1\uD83C\uDCCF2\uD83C\uDCD0\uD83C\uDCFF2\uD83C\uDD0D\uD83C\uDD0F1\uD83C\uDD2F2\uD83C\uDD6C\uD83C\uDD6F2\uD83C\uDD70\uD83C\uDD712\uD83C\uDD7E\uD83C\uDD7F1\uD83C\uDD8E2\uD83C\uDD91\uD83C\uDD9A2\uD83C\uDDAD\uD83C\uDDE52\uD83C\uDE01\uD83C\uDE022\uD83C\uDE03\uD83C\uDE0F1\uD83C\uDE1A1\uD83C\uDE2F2\uD83C\uDE32\uD83C\uDE3A2\uD83C\uDE3C\uD83C\uDE3F2\uD83C\uDE49\uD83C\uDE4F2\uD83C\uDE50\uD83C\uDE512\uD83C\uDE52\uD83C\uDEFF2\uD83C\uDF00\uD83C\uDF0C2\uD83C\uDF0D\uD83C\uDF0E1\uD83C\uDF0F1\uD83C\uDF101\uD83C\uDF111\uD83C\uDF122\uD83C\uDF13\uD83C\uDF152\uD83C\uDF16\uD83C\uDF181\uD83C\uDF191\uD83C\uDF1A1\uD83C\uDF1B1\uD83C\uDF1C2\uD83C\uDF1D\uD83C\uDF1E2\uD83C\uDF1F\uD83C\uDF201\uD83C\uDF212\uD83C\uDF22\uD83C\uDF232\uD83C\uDF24\uD83C\uDF2C2\uD83C\uDF2D\uD83C\uDF2F2\uD83C\uDF30\uD83C\uDF312\uD83C\uDF32\uD83C\uDF332\uD83C\uDF34\uD83C\uDF351\uD83C\uDF362\uD83C\uDF37\uD83C\uDF4A1\uD83C\uDF4B2\uD83C\uDF4C\uD83C\uDF4F1\uD83C\uDF502\uD83C\uDF51\uD83C\uDF7B1\uD83C\uDF7C1\uD83C\uDF7D2\uD83C\uDF7E\uD83C\uDF7F2\uD83C\uDF80\uD83C\uDF932\uD83C\uDF94\uD83C\uDF952\uD83C\uDF96\uD83C\uDF971\uD83C\uDF982\uD83C\uDF99\uD83C\uDF9B2\uD83C\uDF9C\uD83C\uDF9D2\uD83C\uDF9E\uD83C\uDF9F2\uD83C\uDFA0\uD83C\uDFC41\uD83C\uDFC51\uD83C\uDFC61\uD83C\uDFC71\uD83C\uDFC81\uD83C\uDFC91\uD83C\uDFCA2\uD83C\uDFCB\uD83C\uDFCE2\uD83C\uDFCF\uD83C\uDFD32\uD83C\uDFD4\uD83C\uDFDF2\uD83C\uDFE0\uD83C\uDFE31\uD83C\uDFE42\uD83C\uDFE5\uD83C\uDFF02\uD83C\uDFF1\uD83C\uDFF21\uD83C\uDFF31\uD83C\uDFF41\uD83C\uDFF51\uD83C\uDFF61\uD83C\uDFF72\uD83C\uDFF8\uD83C\uDFFA2\uD83D\uDC00\uD83D\uDC071\uD83D\uDC082\uD83D\uDC09\uD83D\uDC0B2\uD83D\uDC0C\uD83D\uDC0E2\uD83D\uDC0F\uD83D\uDC102\uD83D\uDC11\uD83D\uDC121\uD83D\uDC131\uD83D\uDC141\uD83D\uDC151\uD83D\uDC162\uD83D\uDC17\uD83D\uDC291\uD83D\uDC2A2\uD83D\uDC2B\uD83D\uDC3E1\uD83D\uDC3F1\uD83D\uDC401\uD83D\uDC412\uD83D\uDC42\uD83D\uDC641\uD83D\uDC652\uD83D\uDC66\uD83D\uDC6B2\uD83D\uDC6C\uD83D\uDC6D2\uD83D\uDC6E\uD83D\uDCAC1\uD83D\uDCAD2\uD83D\uDCAE\uD83D\uDCB52\uD83D\uDCB6\uD83D\uDCB72\uD83D\uDCB8\uD83D\uDCEB2\uD83D\uDCEC\uD83D\uDCED1\uD83D\uDCEE1\uD83D\uDCEF2\uD83D\uDCF0\uD83D\uDCF41\uD83D\uDCF52\uD83D\uDCF6\uD83D\uDCF71\uD83D\uDCF82\uD83D\uDCF9\uD83D\uDCFC1\uD83D\uDCFD1\uD83D\uDCFE2\uD83D\uDCFF\uD83D\uDD021\uD83D\uDD032\uD83D\uDD04\uD83D\uDD071\uD83D\uDD081\uD83D\uDD092\uD83D\uDD0A\uD83D\uDD141\uD83D\uDD152\uD83D\uDD16\uD83D\uDD2B2\uD83D\uDD2C\uD83D\uDD2D2\uD83D\uDD2E\uD83D\uDD3D2\uD83D\uDD46\uD83D\uDD482\uD83D\uDD49\uD83D\uDD4A2\uD83D\uDD4B\uD83D\uDD4E1\uD83D\uDD4F2\uD83D\uDD50\uD83D\uDD5B2\uD83D\uDD5C\uD83D\uDD672\uD83D\uDD68\uD83D\uDD6E2\uD83D\uDD6F\uD83D\uDD702\uD83D\uDD71\uD83D\uDD722\uD83D\uDD73\uD83D\uDD791\uD83D\uDD7A2\uD83D\uDD7B\uD83D\uDD861\uD83D\uDD872\uD83D\uDD88\uD83D\uDD892\uD83D\uDD8A\uD83D\uDD8D2\uD83D\uDD8E\uD83D\uDD8F1\uD83D\uDD902\uD83D\uDD91\uD83D\uDD942\uD83D\uDD95\uD83D\uDD962\uD83D\uDD97\uD83D\uDDA31\uD83D\uDDA41\uD83D\uDDA52\uD83D\uDDA6\uD83D\uDDA71\uD83D\uDDA82\uD83D\uDDA9\uD83D\uDDB02\uD83D\uDDB1\uD83D\uDDB22\uD83D\uDDB3\uD83D\uDDBB1\uD83D\uDDBC2\uD83D\uDDBD\uD83D\uDDC12\uD83D\uDDC2\uD83D\uDDC42\uD83D\uDDC5\uD83D\uDDD02\uD83D\uDDD1\uD83D\uDDD32\uD83D\uDDD4\uD83D\uDDDB2\uD83D\uDDDC\uD83D\uDDDE2\uD83D\uDDDF\uD83D\uDDE01\uD83D\uDDE11\uD83D\uDDE21\uD83D\uDDE32\uD83D\uDDE4\uD83D\uDDE71\uD83D\uDDE82\uD83D\uDDE9\uD83D\uDDEE1\uD83D\uDDEF2\uD83D\uDDF0\uD83D\uDDF21\uD83D\uDDF32\uD83D\uDDF4\uD83D\uDDF91\uD83D\uDDFA2\uD83D\uDDFB\uD83D\uDDFF1\uD83D\uDE002\uD83D\uDE01\uD83D\uDE062\uD83D\uDE07\uD83D\uDE082\uD83D\uDE09\uD83D\uDE0D1\uD83D\uDE0E1\uD83D\uDE0F1\uD83D\uDE101\uD83D\uDE112\uD83D\uDE12\uD83D\uDE141\uD83D\uDE151\uD83D\uDE161\uD83D\uDE171\uD83D\uDE181\uD83D\uDE191\uD83D\uDE1A1\uD83D\uDE1B2\uD83D\uDE1C\uD83D\uDE1E1\uD83D\uDE1F2\uD83D\uDE20\uD83D\uDE252\uD83D\uDE26\uD83D\uDE272\uD83D\uDE28\uD83D\uDE2B1\uD83D\uDE2C1\uD83D\uDE2D2\uD83D\uDE2E\uD83D\uDE2F2\uD83D\uDE30\uD83D\uDE331\uD83D\uDE341\uD83D\uDE351\uD83D\uDE362\uD83D\uDE37\uD83D\uDE402\uD83D\uDE41\uD83D\uDE442\uD83D\uDE45\uD83D\uDE4F1\uD83D\uDE802\uD83D\uDE81\uD83D\uDE822\uD83D\uDE83\uD83D\uDE851\uD83D\uDE861\uD83D\uDE871\uD83D\uDE881\uD83D\uDE892\uD83D\uDE8A\uD83D\uDE8B1\uD83D\uDE8C1\uD83D\uDE8D1\uD83D\uDE8E1\uD83D\uDE8F1\uD83D\uDE902\uD83D\uDE91\uD83D\uDE931\uD83D\uDE941\uD83D\uDE951\uD83D\uDE961\uD83D\uDE971\uD83D\uDE982\uD83D\uDE99\uD83D\uDE9A2\uD83D\uDE9B\uD83D\uDEA11\uD83D\uDEA21\uD83D\uDEA32\uD83D\uDEA4\uD83D\uDEA51\uD83D\uDEA62\uD83D\uDEA7\uD83D\uDEAD2\uD83D\uDEAE\uD83D\uDEB11\uD83D\uDEB22\uD83D\uDEB3\uD83D\uDEB51\uD83D\uDEB62\uD83D\uDEB7\uD83D\uDEB82\uD83D\uDEB9\uD83D\uDEBE1\uD83D\uDEBF1\uD83D\uDEC02\uD83D\uDEC1\uD83D\uDEC52\uD83D\uDEC6\uD83D\uDECA1\uD83D\uDECB1\uD83D\uDECC2\uD83D\uDECD\uD83D\uDECF1\uD83D\uDED02\uD83D\uDED1\uD83D\uDED22\uD83D\uDED3\uD83D\uDED41\uD83D\uDED52\uD83D\uDED6\uD83D\uDED72\uD83D\uDED8\uD83D\uDEDB1\uD83D\uDEDC2\uD83D\uDEDD\uD83D\uDEDF2\uD83D\uDEE0\uD83D\uDEE52\uD83D\uDEE6\uD83D\uDEE81\uD83D\uDEE91\uD83D\uDEEA2\uD83D\uDEEB\uD83D\uDEEC2\uD83D\uDEED\uD83D\uDEEF1\uD83D\uDEF02\uD83D\uDEF1\uD83D\uDEF21\uD83D\uDEF32\uD83D\uDEF4\uD83D\uDEF62\uD83D\uDEF7\uD83D\uDEF81\uD83D\uDEF91\uD83D\uDEFA2\uD83D\uDEFB\uD83D\uDEFC2\uD83D\uDEFD\uD83D\uDEFF2\uD83D\uDF74\uD83D\uDF7F2\uD83D\uDFD5\uD83D\uDFDF2\uD83D\uDFE0\uD83D\uDFEB2\uD83D\uDFEC\uD83D\uDFEF1\uD83D\uDFF02\uD83D\uDFF1\uD83D\uDFFF2\uD83E\uDC0C\uD83E\uDC0F2\uD83E\uDC48\uD83E\uDC4F2\uD83E\uDC5A\uD83E\uDC5F2\uD83E\uDC88\uD83E\uDC8F2\uD83E\uDCAE\uD83E\uDCFF1\uD83E\uDD0C2\uD83E\uDD0D\uD83E\uDD0F2\uD83E\uDD10\uD83E\uDD182\uD83E\uDD19\uD83E\uDD1E1\uD83E\uDD1F2\uD83E\uDD20\uD83E\uDD272\uD83E\uDD28\uD83E\uDD2F1\uD83E\uDD302\uD83E\uDD31\uD83E\uDD322\uD83E\uDD33\uD83E\uDD3A2\uD83E\uDD3C\uD83E\uDD3E1\uD83E\uDD3F2\uD83E\uDD40\uD83E\uDD452\uD83E\uDD47\uD83E\uDD4B1\uD83E\uDD4C2\uD83E\uDD4D\uD83E\uDD4F2\uD83E\uDD50\uD83E\uDD5E2\uD83E\uDD5F\uD83E\uDD6B2\uD83E\uDD6C\uD83E\uDD701\uD83E\uDD711\uD83E\uDD722\uD83E\uDD73\uD83E\uDD762\uD83E\uDD77\uD83E\uDD781\uD83E\uDD791\uD83E\uDD7A1\uD83E\uDD7B2\uD83E\uDD7C\uD83E\uDD7F2\uD83E\uDD80\uD83E\uDD842\uD83E\uDD85\uD83E\uDD912\uD83E\uDD92\uD83E\uDD972\uD83E\uDD98\uD83E\uDDA22\uD83E\uDDA3\uD83E\uDDA42\uD83E\uDDA5\uD83E\uDDAA2\uD83E\uDDAB\uD83E\uDDAD2\uD83E\uDDAE\uD83E\uDDAF2\uD83E\uDDB0\uD83E\uDDB92\uD83E\uDDBA\uD83E\uDDBF1\uD83E\uDDC02\uD83E\uDDC1\uD83E\uDDC22\uD83E\uDDC3\uD83E\uDDCA1\uD83E\uDDCB1\uD83E\uDDCC2\uD83E\uDDCD\uD83E\uDDCF2\uD83E\uDDD0\uD83E\uDDE62\uD83E\uDDE7\uD83E\uDDFF2\uD83E\uDE00\uD83E\uDE6F2\uD83E\uDE70\uD83E\uDE731\uD83E\uDE742\uD83E\uDE75\uD83E\uDE772\uD83E\uDE78\uD83E\uDE7A2\uD83E\uDE7B\uD83E\uDE7C2\uD83E\uDE7D\uD83E\uDE7F2\uD83E\uDE80\uD83E\uDE822\uD83E\uDE83\uD83E\uDE862\uD83E\uDE87\uD83E\uDE882\uD83E\uDE89\uD83E\uDE8F2\uD83E\uDE90\uD83E\uDE952\uD83E\uDE96\uD83E\uDEA82\uD83E\uDEA9\uD83E\uDEAC2\uD83E\uDEAD\uD83E\uDEAF2\uD83E\uDEB0\uD83E\uDEB62\uD83E\uDEB7\uD83E\uDEBA2\uD83E\uDEBB\uD83E\uDEBD1\uD83E\uDEBE1\uD83E\uDEBF2\uD83E\uDEC0\uD83E\uDEC22\uD83E\uDEC3\uD83E\uDEC52\uD83E\uDEC6\uD83E\uDECD2\uD83E\uDECE\uD83E\uDECF2\uD83E\uDED0\uD83E\uDED62\uD83E\uDED7\uD83E\uDED92\uD83E\uDEDA\uD83E\uDEDB2\uD83E\uDEDC\uD83E\uDEDF2\uD83E\uDEE0\uD83E\uDEE71\uD83E\uDEE82\uD83E\uDEE9\uD83E\uDEEF2\uD83E\uDEF0\uD83E\uDEF62\uD83E\uDEF7\uD83E\uDEF82\uD83E\uDEF9\uD83E\uDEFF2\uD83F\uDC00\uD83F\uDFFD");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$L = {
        $: "L"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$L$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$L))("2ᄀᅟ2ꥠꥼ");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LF = {
        $: "LF"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LF$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$LF))("1\n");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LV = {
        $: "LV"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LV$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$LV))("1가1개1갸1걔1거1게1겨1계1고1과1괘1괴1교1구1궈1궤1귀1규1그1긔1기1까1깨1꺄1꺠1꺼1께1껴1꼐1꼬1꽈1꽤1꾀1꾜1꾸1꿔1꿰1뀌1뀨1끄1끠1끼1나1내1냐1냬1너1네1녀1녜1노1놔1놰1뇌1뇨1누1눠1눼1뉘1뉴1느1늬1니1다1대1댜1댸1더1데1뎌1뎨1도1돠1돼1되1됴1두1둬1뒈1뒤1듀1드1듸1디1따1때1땨1떄1떠1떼1뗘1뗴1또1똬1뙈1뙤1뚀1뚜1뚸1뛔1뛰1뜌1뜨1띄1띠1라1래1랴1럐1러1레1려1례1로1롸1뢔1뢰1료1루1뤄1뤠1뤼1류1르1릐1리1마1매1먀1먜1머1메1며1몌1모1뫄1뫠1뫼1묘1무1뭐1뭬1뮈1뮤1므1믜1미1바1배1뱌1뱨1버1베1벼1볘1보1봐1봬1뵈1뵤1부1붜1붸1뷔1뷰1브1븨1비1빠1빼1뺘1뺴1뻐1뻬1뼈1뼤1뽀1뽜1뽸1뾔1뾰1뿌1뿨1쀄1쀠1쀼1쁘1쁴1삐1사1새1샤1섀1서1세1셔1셰1소1솨1쇄1쇠1쇼1수1숴1쉐1쉬1슈1스1싀1시1싸1쌔1쌰1썌1써1쎄1쎠1쎼1쏘1쏴1쐐1쐬1쑈1쑤1쒀1쒜1쒸1쓔1쓰1씌1씨1아1애1야1얘1어1에1여1예1오1와1왜1외1요1우1워1웨1위1유1으1의1이1자1재1쟈1쟤1저1제1져1졔1조1좌1좨1죄1죠1주1줘1줴1쥐1쥬1즈1즤1지1짜1째1쨔1쨰1쩌1쩨1쪄1쪠1쪼1쫘1쫴1쬐1쬬1쭈1쭤1쮀1쮜1쮸1쯔1쯰1찌1차1채1챠1챼1처1체1쳐1쳬1초1촤1쵀1최1쵸1추1춰1췌1취1츄1츠1츼1치1카1캐1캬1컈1커1케1켜1켸1코1콰1쾌1쾨1쿄1쿠1쿼1퀘1퀴1큐1크1킈1키1타1태1탸1턔1터1테1텨1톄1토1톼1퇘1퇴1툐1투1퉈1퉤1튀1튜1트1틔1티1파1패1퍄1퍠1퍼1페1펴1폐1포1퐈1퐤1푀1표1푸1풔1풰1퓌1퓨1프1픠1피1하1해1햐1햬1허1헤1혀1혜1호1화1홰1회1효1후1훠1훼1휘1휴1흐1희1히");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LVT = {
        $: "LVT"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LVT$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$LVT))("2각갛2객갷2갹걓2걕걯2걱겋2겍겧2격곃2곅곟2곡곻2곽괗2괙괳2괵굏2굑굫2국궇2궉궣2궥궿2귁귛2귝귷2극긓2긕긯2긱깋2깍깧2깩꺃2꺅꺟2꺡꺻2꺽껗2껙껳2껵꼏2꼑꼫2꼭꽇2꽉꽣2꽥꽿2꾁꾛2꾝꾷2꾹꿓2꿕꿯2꿱뀋2뀍뀧2뀩끃2끅끟2끡끻2끽낗2낙낳2낵냏2냑냫2냭넇2넉넣2넥넿2녁녛2녝녷2녹놓2놕놯2놱뇋2뇍뇧2뇩눃2눅눟2눡눻2눽뉗2뉙뉳2뉵늏2늑늫2늭닇2닉닣2닥닿2댁댛2댝댷2댹덓2덕덯2덱뎋2뎍뎧2뎩돃2독돟2돡돻2돽됗2됙됳2됵둏2둑둫2둭뒇2뒉뒣2뒥뒿2듁듛2득듷2듹딓2딕딯2딱땋2땍땧2땩떃2떅떟2떡떻2떽뗗2뗙뗳2뗵똏2똑똫2똭뙇2뙉뙣2뙥뙿2뚁뚛2뚝뚷2뚹뛓2뛕뛯2뛱뜋2뜍뜧2뜩띃2띅띟2띡띻2락랗2랙랳2략럏2럑럫2럭렇2렉렣2력렿2롁롛2록롷2롹뢓2뢕뢯2뢱룋2룍룧2룩뤃2뤅뤟2뤡뤻2뤽륗2륙륳2륵릏2릑릫2릭맇2막맣2맥맿2먁먛2먝먷2먹멓2멕멯2멱몋2몍몧2목뫃2뫅뫟2뫡뫻2뫽묗2묙묳2묵뭏2뭑뭫2뭭뮇2뮉뮣2뮥뮿2믁믛2믝믷2믹밓2박밯2백뱋2뱍뱧2뱩벃2벅벟2벡벻2벽볗2볙볳2복봏2봑봫2봭뵇2뵉뵣2뵥뵿2북붛2붝붷2붹뷓2뷕뷯2뷱븋2븍븧2븩빃2빅빟2빡빻2빽뺗2뺙뺳2뺵뻏2뻑뻫2뻭뼇2뼉뼣2뼥뼿2뽁뽛2뽝뽷2뽹뾓2뾕뾯2뾱뿋2뿍뿧2뿩쀃2쀅쀟2쀡쀻2쀽쁗2쁙쁳2쁵삏2삑삫2삭샇2색샣2샥샿2섁섛2석섷2섹셓2셕셯2셱솋2속솧2솩쇃2쇅쇟2쇡쇻2쇽숗2숙숳2숵쉏2쉑쉫2쉭슇2슉슣2슥슿2싁싛2식싷2싹쌓2쌕쌯2쌱썋2썍썧2썩쎃2쎅쎟2쎡쎻2쎽쏗2쏙쏳2쏵쐏2쐑쐫2쐭쑇2쑉쑣2쑥쑿2쒁쒛2쒝쒷2쒹쓓2쓕쓯2쓱씋2씍씧2씩앃2악앟2액앻2약얗2얙얳2억엏2엑엫2역옇2옉옣2옥옿2왁왛2왝왷2왹욓2욕욯2욱웋2웍웧2웩윃2윅윟2육윻2윽읗2읙읳2익잏2작잫2잭쟇2쟉쟣2쟥쟿2적젛2젝젷2젹졓2졕졯2족좋2좍좧2좩죃2죅죟2죡죻2죽줗2줙줳2줵쥏2쥑쥫2쥭즇2즉즣2즥즿2직짛2짝짷2짹쨓2쨕쨯2쨱쩋2쩍쩧2쩩쪃2쪅쪟2쪡쪻2쪽쫗2쫙쫳2쫵쬏2쬑쬫2쬭쭇2쭉쭣2쭥쭿2쮁쮛2쮝쮷2쮹쯓2쯕쯯2쯱찋2찍찧2착챃2책챟2챡챻2챽첗2척첳2첵쳏2쳑쳫2쳭촇2촉촣2촥촿2쵁쵛2쵝쵷2쵹춓2축춯2춱췋2췍췧2췩츃2츅츟2측츻2츽칗2칙칳2칵캏2캑캫2캭컇2컉컣2컥컿2켁켛2켝켷2켹콓2콕콯2콱쾋2쾍쾧2쾩쿃2쿅쿟2쿡쿻2쿽퀗2퀙퀳2퀵큏2큑큫2큭킇2킉킣2킥킿2탁탛2택탷2탹턓2턕턯2턱텋2텍텧2텩톃2톅톟2톡톻2톽퇗2퇙퇳2퇵툏2툑툫2툭퉇2퉉퉣2퉥퉿2튁튛2튝튷2특틓2틕틯2틱팋2팍팧2팩퍃2퍅퍟2퍡퍻2퍽펗2펙펳2펵폏2폑폫2폭퐇2퐉퐣2퐥퐿2푁푛2푝푷2푹풓2풕풯2풱퓋2퓍퓧2퓩픃2픅픟2픡픻2픽핗2학핳2핵햏2햑햫2햭헇2헉헣2헥헿2혁혛2혝혷2혹홓2확홯2홱횋2획횧2횩훃2훅훟2훡훻2훽휗2휙휳2휵흏2흑흫2흭힇2힉힣");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Prepend = {
        $: "Prepend"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Prepend$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$Prepend))("2؀؅1۝1܏2࢐࢑1࣢1ൎ1\uD804\uDCBD1\uD804\uDCCD2\uD804\uDDC2\uD804\uDDC31\uD806\uDD3F1\uD806\uDD411\uD806\uDE3A2\uD806\uDE84\uD806\uDE891\uD807\uDD461\uD807\uDF02");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$RegionalIndicator = {
        $: "RegionalIndicator"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Regional_Indicator$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$RegionalIndicator))("2\uD83C\uDDE6\uD83C\uDDFF");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$SpacingMark = {
        $: "SpacingMark"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$SpacingMark$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$SpacingMark))("1ः1ऻ2ाी2ॉौ2ॎॏ2ংঃ2িী2েৈ2োৌ1ਃ2ਾੀ1ઃ2ાી1ૉ2ોૌ2ଂଃ1ୀ2େୈ2ୋୌ1ி2ுூ2ெை2ொௌ2ఁః2ుౄ2ಂಃ1ಾ2ೀು2ೃೄ2ೇೈ2ೊೋ1ೳ2ംഃ2ിീ2െൈ2ൊൌ2ංඃ2ැෑ2ෘෞ2ෲෳ1ำ1ຳ2༾༿1ཿ1ေ2ျြ2ၖၗ1ႄ1᜕1᜴1ា2ើៅ2ះៈ2ᤣᤦ2ᤩᤫ2ᤰᤱ2ᤳᤸ2ᨙᨚ1ᩕ1ᩗ2ᩭᩲ1ᬄ1ᬻ2ᬽᭁ2ᭃ᭄1ᮂ1ᮡ2ᮦᮧ1᮪1ᯧ2ᯪᯬ1ᯮ2᯲᯳2ᰤᰫ2ᰴᰵ1᳡1᳷2ꠣꠤ1ꠧ2ꢀꢁ2ꢴꣃ2ꥒ꥓1ꦃ2ꦴꦵ2ꦺꦻ2ꦾ꧀2ꨯꨰ2ꨳꨴ1ꩍ1ꫫ2ꫮꫯ1ꫵ2ꯣꯤ2ꯦꯧ2ꯩꯪ1꯬1\uD804\uDC001\uD804\uDC021\uD804\uDC822\uD804\uDCB0\uD804\uDCB22\uD804\uDCB7\uD804\uDCB81\uD804\uDD2C2\uD804\uDD45\uD804\uDD461\uD804\uDD822\uD804\uDDB3\uD804\uDDB52\uD804\uDDBF\uD804\uDDC01\uD804\uDDCE2\uD804\uDE2C\uD804\uDE2E2\uD804\uDE32\uD804\uDE331\uD804\uDE352\uD804\uDEE0\uD804\uDEE22\uD804\uDF02\uD804\uDF031\uD804\uDF3F2\uD804\uDF41\uD804\uDF442\uD804\uDF47\uD804\uDF482\uD804\uDF4B\uD804\uDF4D2\uD804\uDF62\uD804\uDF632\uD805\uDC35\uD805\uDC372\uD805\uDC40\uD805\uDC411\uD805\uDC452\uD805\uDCB1\uD805\uDCB21\uD805\uDCB92\uD805\uDCBB\uD805\uDCBC1\uD805\uDCBE1\uD805\uDCC12\uD805\uDDB0\uD805\uDDB12\uD805\uDDB8\uD805\uDDBB1\uD805\uDDBE2\uD805\uDE30\uD805\uDE322\uD805\uDE3B\uD805\uDE3C1\uD805\uDE3E1\uD805\uDEAC2\uD805\uDEAE\uD805\uDEAF1\uD805\uDEB61\uD805\uDF262\uD806\uDC2C\uD806\uDC2E1\uD806\uDC382\uD806\uDD31\uD806\uDD352\uD806\uDD37\uD806\uDD381\uD806\uDD3D1\uD806\uDD401\uD806\uDD422\uD806\uDDD1\uD806\uDDD32\uD806\uDDDC\uD806\uDDDF1\uD806\uDDE41\uD806\uDE392\uD806\uDE57\uD806\uDE581\uD806\uDE971\uD807\uDC2F1\uD807\uDC3E1\uD807\uDCA91\uD807\uDCB11\uD807\uDCB42\uD807\uDD8A\uD807\uDD8E2\uD807\uDD93\uD807\uDD941\uD807\uDD962\uD807\uDEF5\uD807\uDEF61\uD807\uDF032\uD807\uDF34\uD807\uDF352\uD807\uDF3E\uD807\uDF3F1\uD807\uDF412\uD81B\uDF51\uD81B\uDF872\uD81B\uDFF0\uD81B\uDFF11\uD834\uDD661\uD834\uDD6D");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$T = {
        $: "T"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$T$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$T))("2ᆨᇿ2ퟋퟻ");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$V = {
        $: "V"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$V$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$V))("2ᅠᆧ2ힰퟆ");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$ZWJ = {
        $: "ZWJ"
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Data$ZWJ$chars = A2($elm$core$Basics$composeL, $elm$core$Result$withDefault($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty), $BrianHicks$elm_string_graphemes$String$Graphemes$Data$parser($BrianHicks$elm_string_graphemes$String$Graphemes$Data$ZWJ))("1‍");
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$toList = function(rangeDict) {
        if (rangeDict.$ === "Empty") return _List_Nil;
        else {
            var here = rangeDict.b;
            var value = rangeDict.c;
            var lt = rangeDict.d;
            var gt = rangeDict.e;
            return _Utils_ap($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$toList(lt), A2($elm$core$List$cons, _Utils_Tuple2(here, value), $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$toList(gt)));
        }
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$union = F2(function(a, b) {
        return A3($elm$core$List$foldl, function(_v0) {
            var range_ = _v0.a;
            var value = _v0.b;
            return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$insert, range_, value);
        }, b, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$toList(a));
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$classes = A3($elm$core$List$foldl, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$union, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$empty, _List_fromArray([
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$CR$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LF$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Control$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extend$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Regional_Indicator$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Prepend$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$SpacingMark$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$L$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$V$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$T$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LV$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$LVT$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$Extended_Pictographic$chars,
        $BrianHicks$elm_string_graphemes$String$Graphemes$Data$ZWJ$chars
    ]));
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$getHelp = F2(function(range, rangeDict) {
        getHelp: while(true){
            if (rangeDict.$ === "Empty") return $elm$core$Maybe$Nothing;
            else {
                var height_ = rangeDict.a;
                var here = rangeDict.b;
                var value = rangeDict.c;
                var lt = rangeDict.d;
                var gt = rangeDict.e;
                var _v1 = A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$compare, range, here);
                switch(_v1.$){
                    case "LT":
                        var $temp$range = range, $temp$rangeDict = gt;
                        range = $temp$range;
                        rangeDict = $temp$rangeDict;
                        continue getHelp;
                    case "GT":
                        var $temp$range = range, $temp$rangeDict = lt;
                        range = $temp$range;
                        rangeDict = $temp$rangeDict;
                        continue getHelp;
                    case "EQ":
                        return $elm$core$Maybe$Just(value);
                    default:
                        return $elm$core$Maybe$Just(value);
                }
            }
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$get = F2(function(what, rangeDict) {
        return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$getHelp, $BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$Range$point(what), rangeDict);
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$shouldBreakForRule11 = function(classes_) {
        shouldBreakForRule11: while(true){
            _v0$2: while(true){
                if (classes_.b && classes_.a.$ === "Just") switch(classes_.a.a.$){
                    case "Extend":
                        var _v1 = classes_.a.a;
                        var rest = classes_.b;
                        var $temp$classes_ = rest;
                        classes_ = $temp$classes_;
                        continue shouldBreakForRule11;
                    case "ExtendedPictographic":
                        if (!classes_.b.b) {
                            var _v2 = classes_.a.a;
                            return false;
                        } else break _v0$2;
                    default:
                        break _v0$2;
                }
                else break _v0$2;
            }
            return true;
        }
    };
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$shouldBreakBefore = F3(function(lastChar, restChars, nextChar) {
        var _v0 = _Utils_Tuple2(A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$get, lastChar, $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$classes), A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$get, nextChar, $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$classes));
        _v0$1: while(true){
            _v0$8: while(true){
                _v0$20: while(true){
                    _v0$21: while(true){
                        _v0$22: while(true){
                            _v0$23: while(true)if (_v0.a.$ === "Just") switch(_v0.a.a.$){
                                case "CR":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "LF":
                                            var _v1 = _v0.a.a;
                                            var _v2 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$1;
                                        case "SpacingMark":
                                            break _v0$1;
                                        case "Extend":
                                            break _v0$1;
                                        default:
                                            break _v0$1;
                                    }
                                    else break _v0$1;
                                case "LF":
                                    var _v4 = _v0.a.a;
                                    return true;
                                case "Control":
                                    var _v5 = _v0.a.a;
                                    return true;
                                case "RegionalIndicator":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "RegionalIndicator":
                                            var _v6 = _v0.a.a;
                                            var _v7 = _v0.b.a;
                                            return !$elm$core$List$isEmpty(restChars);
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "Prepend":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "CR":
                                            var _v8 = _v0.a.a;
                                            var _v9 = _v0.b.a;
                                            return true;
                                        case "LF":
                                            var _v10 = _v0.a.a;
                                            var _v11 = _v0.b.a;
                                            return true;
                                        case "Control":
                                            var _v12 = _v0.a.a;
                                            var _v13 = _v0.b.a;
                                            return true;
                                        case "ZWJ":
                                            break _v0$8;
                                        case "SpacingMark":
                                            break _v0$8;
                                        case "Extend":
                                            break _v0$8;
                                        default:
                                            break _v0$8;
                                    }
                                    else break _v0$8;
                                case "L":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "L":
                                            var _v15 = _v0.a.a;
                                            var _v16 = _v0.b.a;
                                            return false;
                                        case "V":
                                            var _v17 = _v0.a.a;
                                            var _v18 = _v0.b.a;
                                            return false;
                                        case "LV":
                                            var _v19 = _v0.a.a;
                                            var _v20 = _v0.b.a;
                                            return false;
                                        case "LVT":
                                            var _v21 = _v0.a.a;
                                            var _v22 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "V":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "V":
                                            var _v23 = _v0.a.a;
                                            var _v24 = _v0.b.a;
                                            return false;
                                        case "T":
                                            var _v25 = _v0.a.a;
                                            var _v26 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "T":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "T":
                                            var _v27 = _v0.a.a;
                                            var _v28 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "LV":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "V":
                                            var _v29 = _v0.a.a;
                                            var _v30 = _v0.b.a;
                                            return false;
                                        case "T":
                                            var _v31 = _v0.a.a;
                                            var _v32 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "LVT":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "T":
                                            var _v33 = _v0.a.a;
                                            var _v34 = _v0.b.a;
                                            return false;
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                case "ZWJ":
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "ExtendedPictographic":
                                            var _v35 = _v0.a.a;
                                            var _v36 = _v0.b.a;
                                            return $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$shouldBreakForRule11(A2($elm$core$List$map, function(c) {
                                                return A2($BrianHicks$elm_string_graphemes$String$Graphemes$RangeDict$get, c, $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$classes);
                                            }, restChars));
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                                default:
                                    if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                        case "ZWJ":
                                            break _v0$20;
                                        case "SpacingMark":
                                            break _v0$21;
                                        case "Extend":
                                            break _v0$22;
                                        default:
                                            break _v0$23;
                                    }
                                    else break _v0$23;
                            }
                            else {
                                if (_v0.b.$ === "Just") switch(_v0.b.a.$){
                                    case "ZWJ":
                                        break _v0$20;
                                    case "SpacingMark":
                                        break _v0$21;
                                    case "Extend":
                                        break _v0$22;
                                    default:
                                        break _v0$23;
                                }
                                else break _v0$23;
                            }
                            return true;
                        }
                        var _v39 = _v0.b.a;
                        return false;
                    }
                    var _v38 = _v0.b.a;
                    return false;
                }
                var _v37 = _v0.b.a;
                return false;
            }
            var _v14 = _v0.a.a;
            return false;
        }
        var _v3 = _v0.a.a;
        return true;
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$unconsHelp = F2(function(str, chars) {
        unconsHelp: while(true){
            var _v0 = _Utils_Tuple2($elm$core$String$uncons(str), chars);
            if (_v0.a.$ === "Nothing") {
                if (!_v0.b.b) {
                    var _v1 = _v0.a;
                    if (A2($elm$core$String$left, 1, str) === "\0") {
                        var $temp$str = A2($elm$core$String$dropLeft, 1, str), $temp$chars = _List_fromArray([
                            _Utils_chr("\0")
                        ]);
                        str = $temp$str;
                        chars = $temp$chars;
                        continue unconsHelp;
                    } else return _Utils_Tuple2(chars, "");
                } else {
                    var _v2 = _v0.a;
                    var _v3 = _v0.b;
                    var last = _v3.a;
                    var rest = _v3.b;
                    if (A2($elm$core$String$left, 1, str) === "\0") {
                        if (A3($BrianHicks$elm_string_graphemes$String$Graphemes$Parser$shouldBreakBefore, last, rest, _Utils_chr("\0"))) return _Utils_Tuple2(chars, str);
                        else {
                            var $temp$str = A2($elm$core$String$dropLeft, 1, str), $temp$chars = A2($elm$core$List$cons, _Utils_chr("\0"), chars);
                            str = $temp$str;
                            chars = $temp$chars;
                            continue unconsHelp;
                        }
                    } else return _Utils_Tuple2(chars, "");
                }
            } else if (!_v0.b.b) {
                var _v4 = _v0.a.a;
                var _char = _v4.a;
                var strTail = _v4.b;
                var $temp$str = strTail, $temp$chars = _List_fromArray([
                    _char
                ]);
                str = $temp$str;
                chars = $temp$chars;
                continue unconsHelp;
            } else {
                var _v5 = _v0.a.a;
                var _char = _v5.a;
                var strTail = _v5.b;
                var _v6 = _v0.b;
                var last = _v6.a;
                var rest = _v6.b;
                if (A3($BrianHicks$elm_string_graphemes$String$Graphemes$Parser$shouldBreakBefore, last, rest, _char)) return _Utils_Tuple2(chars, str);
                else {
                    var $temp$str = strTail, $temp$chars = A2($elm$core$List$cons, _char, chars);
                    str = $temp$str;
                    chars = $temp$chars;
                    continue unconsHelp;
                }
            }
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$foldl = F3(function(fn, initial, string) {
        foldl: while(true){
            if (string === "") return initial;
            else {
                var _v1 = A2($BrianHicks$elm_string_graphemes$String$Graphemes$Parser$unconsHelp, string, _List_Nil);
                var chars = _v1.a;
                var remaining = _v1.b;
                var $temp$fn = fn, $temp$initial = A2(fn, $elm$core$String$fromList($elm$core$List$reverse(chars)), initial), $temp$string = remaining;
                fn = $temp$fn;
                initial = $temp$initial;
                string = $temp$string;
                continue foldl;
            }
        }
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$foldl = $BrianHicks$elm_string_graphemes$String$Graphemes$Parser$foldl;
    var $BrianHicks$elm_string_graphemes$String$Graphemes$foldr = F3(function(fn, state, string) {
        return A3($elm$core$List$foldl, fn, state, A3($BrianHicks$elm_string_graphemes$String$Graphemes$foldl, $elm$core$List$cons, _List_Nil, string));
    });
    var $BrianHicks$elm_string_graphemes$String$Graphemes$toList = A2($BrianHicks$elm_string_graphemes$String$Graphemes$foldr, $elm$core$List$cons, _List_Nil);
    var $andre_dietrich$elm_svgbob$SvgBob$Model$realLength = function(str) {
        return $elm$core$List$sum(A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$String$toList, A2($elm$core$Basics$composeR, $elm$core$List$head, A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$core$String$fromChar, A2($elm$core$Basics$composeR, $andre_dietrich$elm_svgbob$WChar$stringWidth, $elm$core$Maybe$withDefault(0)))), $elm$core$Maybe$withDefault(0)))), $BrianHicks$elm_string_graphemes$String$Graphemes$toList(str)));
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Model$dim = function(lines) {
        return _Utils_Tuple2($elm$core$List$length(lines), A2($elm$core$Maybe$withDefault, 0, $elm$core$List$maximum(A2($elm$core$List$map, $andre_dietrich$elm_svgbob$SvgBob$Model$realLength, lines))));
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal = F2(function(_char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(function(m) {
                return !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west) || !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$East, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)))
        ])));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal = F2(function(_char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$West_(4))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$West_(3))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.south_west;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2)), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
            _Utils_Tuple2(A2($elm$core$Basics$composeR, function($) {
                return $.south_east;
            }, $elm$core$Basics$eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical)), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(3))),
            _Utils_Tuple2(function(m) {
                return !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west) && !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east);
            }, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), $andre_dietrich$elm_svgbob$SvgBob$Types$West_(2))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.south_west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 0.15, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(4)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve, m.west);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.75), $andre_dietrich$elm_svgbob$SvgBob$Types$West_(1.6)), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 0.2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(4)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(1.15), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(1.7)), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 0.15, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West_(4)))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve, m.east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 1, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(1)), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 0.2, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(2), $andre_dietrich$elm_svgbob$SvgBob$Types$East_(4))))
        ])));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve = F2(function(_char, matrix) {
        return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$sequenceWithDefault, _char, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$apply, matrix, _List_fromArray([
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South), m.north_east) || _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North), m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, $andre_dietrich$elm_svgbob$SvgBob$Types$North, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$South))),
            _Utils_Tuple2(function(m) {
                return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) && _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east);
            }, A3($andre_dietrich$elm_svgbob$SvgBob$Types$Curve, 4, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$South)))
        ])));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$getElement = F2(function(m, _v0) {
        var _char = _v0.a;
        var elem = _v0.b;
        _v1$17: while(true)switch(elem.$){
            case "Vertical":
                return !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.west) || !_Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric, m.east) ? A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, $andre_dietrich$elm_svgbob$SvgBob$Types$South, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$North)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
            case "Horizontal":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$horizontal, _char, m);
            case "LowHorizontal":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$lowHorizontal, _char, m);
            case "Intersection":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
            case "Arrow":
                switch(elem.a.$){
                    case "South":
                        var _v2 = elem.a;
                        return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.north) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$North) : _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.north_east) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East)) : _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.north_west) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
                    case "North":
                        var _v3 = elem.a;
                        return _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical, m.south) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$South) : _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight, m.south_west) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West)) : _Utils_eq($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft, m.south_east) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle(A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East)) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
                    case "East":
                        var _v4 = elem.a;
                        return A2($elm$core$List$member, m.west, _List_fromArray([
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal,
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South),
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North)
                        ])) || A2($elm$core$List$member, m.east, _List_fromArray([
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal,
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South),
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North)
                        ])) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$East) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
                    case "West":
                        var _v5 = elem.a;
                        return A2($elm$core$List$member, m.west, _List_fromArray([
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal,
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South),
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North)
                        ])) || A2($elm$core$List$member, m.east, _List_fromArray([
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal,
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South),
                            $andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North)
                        ])) ? $andre_dietrich$elm_svgbob$SvgBob$Types$Triangle($andre_dietrich$elm_svgbob$SvgBob$Types$West) : $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
                    default:
                        break _v1$17;
                }
            case "Corner":
                var dir = elem.a;
                return A3($andre_dietrich$elm_svgbob$SvgBob$Grid$corner, dir, _char, m);
            case "SlantRight":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$West));
            case "SlantLeft":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Types$Line, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South, $andre_dietrich$elm_svgbob$SvgBob$Types$East), A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, 2, $andre_dietrich$elm_svgbob$SvgBob$Types$North, $andre_dietrich$elm_svgbob$SvgBob$Types$West));
            case "OpenCurve":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$openCurve, _char, m);
            case "CloseCurve":
                return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$closeCurve, _char, m);
            case "Square":
                var _v6 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$intersection, _char, m);
                if (_v6.$ === "Sequence") {
                    var list = _v6.a;
                    return $andre_dietrich$elm_svgbob$SvgBob$Types$Sequence(A2($elm$core$List$cons, $andre_dietrich$elm_svgbob$SvgBob$Types$Box, list));
                } else return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
            case "O":
                var filled = elem.a;
                return A3($andre_dietrich$elm_svgbob$SvgBob$Grid$circle, filled, _char, m);
            case "Verbatim":
                var str = elem.a;
                return A2($andre_dietrich$elm_svgbob$SvgBob$Types$ForeignObject, str, $andre_dietrich$elm_svgbob$SvgBob$Model$dim($elm$core$String$lines(str)));
            case "Emoji":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$TextEmoji(_char);
            default:
                break _v1$17;
        }
        return $andre_dietrich$elm_svgbob$SvgBob$Types$Text(_char);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$None = {
        $: "None"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$get = F2(function(pos, dict) {
        return A2($elm$core$Maybe$withDefault, $andre_dietrich$elm_svgbob$SvgBob$Types$None, A2($elm$core$Maybe$map, $elm$core$Tuple$second, A2($elm$core$Dict$get, pos, dict)));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$getMatrix = F3(function(x, y, dict) {
        var getNeighbor = function(pos) {
            return A2($andre_dietrich$elm_svgbob$SvgBob$Grid$get, pos, dict);
        };
        return {
            east: getNeighbor(_Utils_Tuple2(x + 1, y)),
            north: getNeighbor(_Utils_Tuple2(x, y - 1)),
            north_east: getNeighbor(_Utils_Tuple2(x + 1, y - 1)),
            north_west: getNeighbor(_Utils_Tuple2(x - 1, y - 1)),
            south: getNeighbor(_Utils_Tuple2(x, y + 1)),
            south_east: getNeighbor(_Utils_Tuple2(x + 1, y + 1)),
            south_west: getNeighbor(_Utils_Tuple2(x - 1, y + 1)),
            west: getNeighbor(_Utils_Tuple2(x - 1, y))
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim = function(a) {
        return {
            $: "Verbatim",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$mergeVerbatim = F2(function(scan, scan2) {
        var _v0 = _Utils_Tuple2(scan, scan2);
        if (_v0.a.$ === "Verbatim" && _v0.b.$ === "Verbatim") {
            var str = _v0.a.a;
            var str2 = _v0.b.a;
            return $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim(str + ("\n" + str2));
        } else return scan;
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$merge = F2(function(combined, verbs) {
        merge: while(true){
            var _v0 = _Utils_Tuple2($elm$core$List$head(verbs), $elm$core$List$tail(verbs));
            if (_v0.a.$ === "Nothing") {
                var _v1 = _v0.a;
                return combined;
            } else if (_v0.b.$ === "Nothing") {
                var _v2 = _v0.b;
                return combined;
            } else {
                var head = _v0.a.a;
                var tail = _v0.b.a;
                var _v3 = A3($elm$core$List$foldl, F2(function(_v4, _v5) {
                    var pos = _v4.a;
                    var x = pos.a;
                    var y = pos.b;
                    var scan = _v4.b;
                    var c = scan.a;
                    var s = scan.b;
                    var currentY = _v5.a;
                    var v = _v5.b;
                    var _v6 = v.a;
                    var v_x = _v6.a;
                    var v_y = _v6.b;
                    var _v7 = v.b;
                    var v_s = _v7.b;
                    var rest = _v5.c;
                    return _Utils_eq(x, v_x) && _Utils_eq(currentY + 1, y) ? _Utils_Tuple3(currentY + 1, _Utils_Tuple2(_Utils_Tuple2(v_x, v_y), _Utils_Tuple2(c, A2($andre_dietrich$elm_svgbob$SvgBob$Types$mergeVerbatim, v_s, s))), rest) : _Utils_Tuple3(currentY, v, A2($elm$core$List$cons, _Utils_Tuple2(pos, scan), rest));
                }), _Utils_Tuple3(head.a.b, head, _List_Nil), tail);
                var verb = _v3.b;
                var newTail = _v3.c;
                var $temp$combined = A2($elm$core$List$cons, verb, combined), $temp$verbs = $elm$core$List$reverse(newTail);
                combined = $temp$combined;
                verbs = $temp$verbs;
                continue merge;
            }
        }
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Emoji = {
        $: "Emoji"
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim = function(str) {
        return A2($elm$core$Basics$composeR, $elm$core$String$append(str), A2($elm$core$Basics$composeR, $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim, $elm$core$Tuple$pair(" ")));
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$Arrow = function(a) {
        return {
            $: "Arrow",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Types$O = function(a) {
        return {
            $: "O",
            a: a
        };
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$isWideCharacter = function(_char) {
        var _v0 = $andre_dietrich$elm_svgbob$WChar$width(_char);
        if (_v0.$ === "Wide") return true;
        else return false;
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$isEmoji = function(_char) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $andre_dietrich$elm_svgbob$SvgBob$Scanner$isWideCharacter), $elm$core$String$uncons(_char)));
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$getScan = function(_char) {
        switch(_char){
            case " ":
                return $elm$core$Maybe$Nothing;
            case "-":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Horizontal);
            case "_":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$LowHorizontal);
            case "+":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Intersection);
            case ".":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            case "'":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            case ",":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            case "`":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            case "\xb4":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Corner($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            case ">":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$West));
            case "<":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$East));
            case "V":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            case "v":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$South));
            case "^":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            case "A":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Arrow($andre_dietrich$elm_svgbob$SvgBob$Types$North));
            case "/":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$SlantRight);
            case "\\":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$SlantLeft);
            case "(":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$OpenCurve);
            case ")":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$CloseCurve);
            case "|":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Vertical);
            case "#":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Square);
            case "O":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$O(false));
            case "o":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$O(false));
            case "*":
                return $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$O(true));
            default:
                return $elm$core$String$length(_char) === 1 && !$andre_dietrich$elm_svgbob$SvgBob$Scanner$isEmoji(_char) ? $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric) : $elm$core$Maybe$Just($andre_dietrich$elm_svgbob$SvgBob$Types$Emoji);
        }
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$scanElement = F5(function(verbatim, withVerbatim, y, _char, scan) {
        return function(s) {
            return _Utils_update(s, {
                lastChars: A2($elm$core$List$cons, _Utils_eq(_char, verbatim), s.lastChars),
                x: s.x + 1
            });
        }(function() {
            if (_Utils_eq(_char, verbatim)) {
                var _v0 = _Utils_Tuple2(scan.verbatimCounter, scan.lastChars);
                _v0$4: while(true)switch(_v0.a){
                    case 0:
                        return _Utils_update(scan, {
                            verbatimCounter: 1
                        });
                    case 1:
                        if (_v0.b.b) {
                            if (!_v0.b.a) {
                                var _v1 = _v0.b;
                                return _Utils_update(scan, {
                                    verbatimCounter: 0
                                });
                            } else {
                                var _v2 = _v0.b;
                                return _Utils_update(scan, {
                                    verbatimCounter: 2
                                });
                            }
                        } else break _v0$4;
                    case 2:
                        if (_v0.b.b && _v0.b.a) {
                            var _v3 = _v0.b;
                            return _Utils_update(scan, {
                                result: function() {
                                    var _v4 = _Utils_Tuple2(withVerbatim, scan.result);
                                    if (_v4.a && _v4.b.b && _v4.b.a.b.b.$ === "Verbatim") {
                                        var _v5 = _v4.b;
                                        var _v6 = _v5.a;
                                        var pos = _v6.a;
                                        var _v7 = _v6.b;
                                        var str = _v7.b.a;
                                        var xs = _v5.b;
                                        return A2($elm$core$List$cons, _Utils_Tuple2(pos, _Utils_Tuple2(" ", $andre_dietrich$elm_svgbob$SvgBob$Types$Verbatim(A2($elm$core$String$dropRight, 1, str) + "  "))), xs);
                                    } else {
                                        var result = _v4.b;
                                        return A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(result));
                                    }
                                }(),
                                verbatimCounter: 0
                            });
                        } else break _v0$4;
                    default:
                        break _v0$4;
                }
                return _Utils_update(scan, {
                    result: function() {
                        var _v8 = _Utils_Tuple2(withVerbatim, scan.result);
                        if (!_v8.a) return A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), _Utils_Tuple2(_char, $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric)), scan.result);
                        else {
                            if (_v8.b.b && _v8.b.a.b.b.$ === "Verbatim") {
                                var _v9 = _v8.b;
                                var _v10 = _v9.a;
                                var pos = _v10.a;
                                var _v11 = _v10.b;
                                var str = _v11.b.a;
                                var xs = _v9.b;
                                return A2($elm$core$List$cons, _Utils_Tuple2(pos, A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim, str, _char)), xs);
                            } else return A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim, "", _char)), scan.result);
                        }
                    }()
                });
            } else {
                if (scan.verbatimCounter > 0) return _Utils_update(scan, {
                    result: function() {
                        var _v12 = _Utils_Tuple2(withVerbatim, scan.result);
                        if (!_v12.a) return A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), _Utils_Tuple2(_char, $andre_dietrich$elm_svgbob$SvgBob$Types$AlphaNumeric)), scan.result);
                        else {
                            if (_v12.b.b && _v12.b.a.b.b.$ === "Verbatim") {
                                var _v13 = _v12.b;
                                var _v14 = _v13.a;
                                var _v15 = _v14.a;
                                var x = _v15.a;
                                var _v16 = _v14.b;
                                var str = _v16.b.a;
                                var xs = _v13.b;
                                return _Utils_eq(x + $elm$core$String$length(str), scan.x) ? A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(x, y), A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim, str, _char)), xs) : A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim, "", _char)), scan.result);
                            } else return A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x + 1 - scan.verbatimCounter, y), A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$appendToVerbatim, "", _char)), scan.result);
                        }
                    }()
                });
                else {
                    var _v17 = $andre_dietrich$elm_svgbob$SvgBob$Scanner$getScan(_char);
                    if (_v17.$ === "Nothing") return scan;
                    else if (_v17.a.$ === "Emoji") {
                        var _v18 = _v17.a;
                        return _Utils_update(scan, {
                            result: A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), _Utils_Tuple2(_char, $andre_dietrich$elm_svgbob$SvgBob$Types$Emoji)), scan.result),
                            x: scan.x + 1
                        });
                    } else {
                        var elem = _v17.a;
                        return _Utils_update(scan, {
                            result: A2($elm$core$List$cons, _Utils_Tuple2(_Utils_Tuple2(scan.x, y), _Utils_Tuple2(_char, elem)), scan.result)
                        });
                    }
                }
            }
        }());
    });
    var $elm$core$String$trimRight = _String_trimRight;
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$scanLine = F3(function(verbatim, withVerbatim, y) {
        return A2($elm$core$Basics$composeR, $elm$core$String$trimRight, A2($elm$core$Basics$composeR, $BrianHicks$elm_string_graphemes$String$Graphemes$toList, A2($elm$core$Basics$composeR, A2($elm$core$List$foldl, A3($andre_dietrich$elm_svgbob$SvgBob$Scanner$scanElement, verbatim, withVerbatim, y), {
            lastChars: _List_Nil,
            result: _List_Nil,
            verbatimCounter: 0,
            x: 0
        }), function($) {
            return $.result;
        })));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Scanner$getScans = F2(function(verbatim, lines) {
        var scanFn = A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$scanLine, verbatim.string, verbatim.string !== "");
        var elements = $elm$core$List$concat(A2($elm$core$List$indexedMap, scanFn, lines));
        if (verbatim.multiline) {
            var _v0 = A3($elm$core$List$foldl, F2(function(_v1, _v3) {
                var pos = _v1.a;
                var _v2 = _v1.b;
                var _char = _v2.a;
                var scan = _v2.b;
                var v = _v3.a;
                var s = _v3.b;
                if (scan.$ === "Verbatim") return _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(pos, _Utils_Tuple2(_char, scan)), v), s);
                else return _Utils_Tuple2(v, A2($elm$core$List$cons, _Utils_Tuple2(pos, _Utils_Tuple2(_char, scan)), s));
            }), _Utils_Tuple2(_List_Nil, _List_Nil), elements);
            var verbs = _v0.a;
            var scans = _v0.b;
            return A2($elm$core$List$append, scans, $elm$core$List$reverse(A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$merge, _List_Nil, A2($elm$core$List$sortBy, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Tuple$second), verbs))));
        } else return elements;
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Model$init = F2(function(settings, str) {
        var lines = $elm$core$String$lines(str);
        var _v0 = $andre_dietrich$elm_svgbob$SvgBob$Model$dim(lines);
        var rows = _v0.a;
        var columns = _v0.b;
        return {
            columns: columns,
            lines: lines,
            rows: rows,
            settings: settings
        };
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth = 8.0;
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$measureX = function(x) {
        return x * $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth;
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight = 16.0;
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$measureY = function(y) {
        return y * $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight;
    };
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$getElements = F2(function(settings, code) {
        var model = A2($andre_dietrich$elm_svgbob$SvgBob$Model$init, settings, code);
        var intermediate = A2($andre_dietrich$elm_svgbob$SvgBob$Scanner$getScans, model.settings.verbatim, model.lines);
        var dict = $elm$core$Dict$fromList(intermediate);
        return A3($elm$core$List$foldl, F2(function(_v0, container) {
            var _v1 = _v0.a;
            var x = _v1.a;
            var y = _v1.b;
            var _v2 = _v0.b;
            var _char = _v2.a;
            var element = _v2.b;
            var point = A2($andre_dietrich$elm_svgbob$SvgBob$Types$Point, $andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(x) + $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2, $andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(y) + $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2);
            var _v3 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$getElement, A3($andre_dietrich$elm_svgbob$SvgBob$Grid$getMatrix, x, y, dict), _Utils_Tuple2(_char, element));
            if (_v3.$ === "ForeignObject") {
                var str = _v3.a;
                var dim = _v3.b;
                return _Utils_update(container, {
                    foreign: A2($elm$core$List$cons, _Utils_Tuple2(str, _Utils_Tuple2(point, dim)), container.foreign)
                });
            } else {
                var e = _v3;
                return _Utils_update(container, {
                    svg: A2($elm$core$List$cons, _Utils_Tuple2(point, e), container.svg)
                });
            }
        }), {
            columns: model.columns,
            foreign: _List_Nil,
            rows: model.rows,
            settings: settings,
            svg: _List_Nil
        }, intermediate);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$getElements = $andre_dietrich$elm_svgbob$SvgBob$Grid$getElements;
    var $author$project$Lia$Markdown$Types$HLine = function(a) {
        return {
            $: "HLine",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Parser$md_annotations = function() {
        var attr = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$HTML$Attributes$parse, $andre_dietrich$parser_combinators$Combine$withState(function(c) {
            return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(c.defines.base, c.defines.appendix));
        }));
        return A2($andre_dietrich$parser_combinators$Combine$optional, _List_Nil, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n"))), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$comment(attr), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $author$project$Lia$Parser$Helper$spaces))));
    }();
    var $author$project$Lia$Markdown$Parser$horizontal_line = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$HLine, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("-{3,}[ 	]*\n"), $author$project$Lia$Markdown$Parser$md_annotations));
    var $author$project$Lia$Markdown$Types$HtmlComment = {
        $: "HtmlComment"
    };
    var $author$project$Lia$Parser$Indentation$skip = $andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Parser$Indentation$skip_(true));
    var $author$project$Lia$Markdown$Parser$htmlComment = A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Types$HtmlComment, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Inline$Parser$comment($andre_dietrich$parser_combinators$Combine$Char$anyChar), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $author$project$Lia$Parser$Indentation$skip)));
    var $author$project$Lia$Markdown$Quiz$Multi$Types$isEmpty = function(quiz) {
        return $elm$core$Array$isEmpty(quiz.options);
    };
    var $author$project$Lia$Parser$Input$isInput = function(input) {
        return input.isEnabled ? !$author$project$Lia$Markdown$Quiz$Multi$Types$isEmpty(input.blocks) : false;
    };
    var $author$project$Lia$Parser$Input$isIdentified = $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.input;
    }, A2($elm$core$Basics$composeR, $author$project$Lia$Parser$Input$isInput, $andre_dietrich$parser_combinators$Combine$succeed)));
    var $author$project$Lia$Markdown$Effect$Parser$multi = function(blocks) {
        return A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newlines, blocks), $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\\*{3,}")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\\*{3,}\n+"), $author$project$Lia$Parser$Indentation$check));
    };
    var $author$project$Lia$Markdown$Effect$Parser$single = $andre_dietrich$parser_combinators$Combine$map($elm$core$List$singleton);
    var $author$project$Lia$Markdown$Effect$Parser$markdown = function(blocks) {
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Effect$Parser$effect_id, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Effect$Parser$reset_effect_number, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Effect$Parser$multi(blocks), $author$project$Lia$Markdown$Effect$Parser$single(blocks)), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$string("\n")), $author$project$Lia$Parser$Indentation$skip), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("}}[	 ]*"), A2($andre_dietrich$parser_combinators$Combine$map, F3(function(e, b, c) {
            return _Utils_update(e, {
                content: b,
                id: c
            });
        }), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$definition, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*{{"))))))));
    };
    var $author$project$Lia$Parser$Indentation$maybePar_ = function(s) {
        if (_Utils_eq(s.indentation, _List_Nil)) return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
        else {
            if (s.indentation_skip) return $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0));
            else {
                var pattern = $elm$core$String$concat(s.indentation);
                if ($elm$core$String$trim(pattern) === "") return $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$regex(pattern)));
                else {
                    var subPattern = $elm$core$String$trimRight(pattern);
                    return $andre_dietrich$parser_combinators$Combine$skip(A3($elm$core$Basics$apR, $andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$string(A2($elm$core$String$repeat, $elm$core$String$length(pattern) - $elm$core$String$length(subPattern), " "))), $andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex(subPattern)));
                }
            }
        }
    };
    var $author$project$Lia$Parser$Indentation$maybeCheck = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Parser$Indentation$skip_(false)), $andre_dietrich$parser_combinators$Combine$withState($author$project$Lia$Parser$Indentation$maybePar_));
    var $author$project$Lia$Markdown$Parser$newlineWithIndentation = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, $author$project$Lia$Parser$Indentation$maybeCheck);
    var $author$project$Lia$Markdown$Parser$allowedLine = $andre_dietrich$parser_combinators$Combine$lookAhead(A2($andre_dietrich$parser_combinators$Combine$andThen, function(e) {
        if (e.$ === "Nothing") return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
        else return $andre_dietrich$parser_combinators$Combine$fail("");
    }, $andre_dietrich$parser_combinators$Combine$maybe($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$regex("\\*\\*\\*+\n"),
        $andre_dietrich$parser_combinators$Combine$string("[[?]]")
    ])))));
    var $author$project$Lia$Markdown$Parser$checkParagraph = $andre_dietrich$parser_combinators$Combine$lookAhead(A2($andre_dietrich$parser_combinators$Combine$andThen, function(e) {
        return _Utils_eq(e, $elm$core$Maybe$Nothing) ? $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0) : $andre_dietrich$parser_combinators$Combine$fail("");
    }, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*--{{\\d+}}--"), $andre_dietrich$parser_combinators$Combine$regex("[ 	]*{{\\d+}}")))));
    var $author$project$Lia$Markdown$Parser$paragraph = A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$List$intersperse(_List_fromArray([
        A2($author$project$Lia$Markdown$Inline$Types$Chars, " ", _List_Nil)
    ])), A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Lia$Markdown$Inline$Types$combine)), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$line, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Parser$allowedLine, $author$project$Lia$Parser$Indentation$check)))), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$skip, $author$project$Lia$Markdown$Parser$checkParagraph)));
    var $author$project$Lia$Markdown$Chart$Types$Dots = F2(function(a, b) {
        return {
            $: "Dots",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Chart$Types$Lines = F2(function(a, b) {
        return {
            $: "Lines",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Chart$Types$Point = F2(function(x, y) {
        return {
            x: x,
            y: y
        };
    });
    var $author$project$Lia$Markdown$Chart$Parser$magicMerge = F2(function(left, right) {
        return A6($elm$core$Dict$merge, $elm$core$Dict$insert, F4(function(key, l, r, dict) {
            return A3($elm$core$Dict$insert, key, _Utils_ap(l, r), dict);
        }), $elm$core$Dict$insert, left, right, $elm$core$Dict$empty);
    });
    var $andre_dietrich$parser_combinators$Combine$Num$float = A2($andre_dietrich$parser_combinators$Combine$onerror, "expected a float", A2($andre_dietrich$parser_combinators$Combine$andThen, A2($elm$core$Basics$composeR, $elm$core$String$toFloat, $andre_dietrich$parser_combinators$Combine$Num$unwrap), $andre_dietrich$parser_combinators$Combine$regex("-?(?:0|[1-9]\\d*)\\.\\d+")));
    var $author$project$Lia$Markdown$Chart$Parser$number = A2($andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$Num$float, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$toFloat, A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$optional, ".", $andre_dietrich$parser_combinators$Combine$string(".")), $andre_dietrich$parser_combinators$Combine$Num$int)));
    var $elm$core$Set$remove = F2(function(key, _v0) {
        var dict = _v0.a;
        return $elm$core$Set$Set_elm_builtin(A2($elm$core$Dict$remove, key, dict));
    });
    var $author$project$Lia$Markdown$Chart$Parser$row = function() {
        var indexes = F3(function(y_label, str, label) {
            return _Utils_Tuple2(_Utils_Tuple2(function(w) {
                return w === "" ? " " : w;
            }($elm$core$String$trim(y_label)), label), $elm$core$Dict$fromList(A2($elm$core$List$map, function(c) {
                return _Utils_Tuple2(c, A2($elm$core$String$indexes, $elm$core$String$fromChar(c), str));
            }, $elm$core$Set$toList(A2($elm$core$Set$remove, _Utils_chr(" "), $elm$core$Set$fromList($elm$core$String$toList(str)))))));
        });
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n"), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string(")"), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex("[^)]+"), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("[A-Za-z\\+\\*#]?"), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, $andre_dietrich$parser_combinators$Combine$string("("))))))), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex("[ \\*a-zA-Z\\+#]*"), A2($andre_dietrich$parser_combinators$Combine$map, indexes, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("|"), $andre_dietrich$parser_combinators$Combine$regex("[^\n|]*"))))));
    }();
    var $author$project$Lia$Markdown$Chart$Parser$segmentation = F3(function(elements, i0, i1) {
        return _Utils_Tuple2(i0, (i1 - i0) / elements);
    });
    var $author$project$Lia$Markdown$Chart$Parser$unique = F2(function(start, list) {
        unique: while(true){
            var _v0 = _Utils_Tuple2(list, start);
            if (_v0.a.b) {
                if (_v0.b.$ === "Nothing") {
                    var _v1 = _v0.a;
                    var x = _v1.a;
                    var xs = _v1.b;
                    var _v2 = _v0.b;
                    var $temp$start = $elm$core$Maybe$Just(x), $temp$list = xs;
                    start = $temp$start;
                    list = $temp$list;
                    continue unique;
                } else {
                    var _v3 = _v0.a;
                    var x = _v3.a;
                    var xs = _v3.b;
                    var s = _v0.b.a;
                    if (_Utils_eq(x, s)) return false;
                    else {
                        var $temp$start = $elm$core$Maybe$Just(x), $temp$list = xs;
                        start = $temp$start;
                        list = $temp$list;
                        continue unique;
                    }
                }
            } else return true;
        }
    });
    var $author$project$Lia$Markdown$Chart$Parser$x_axis = A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, 1.0, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n"), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Chart$Parser$number, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*")))), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, "", $andre_dietrich$parser_combinators$Combine$regex("[a-zA-Z_ .\\\\()\\-]+")), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, 0.0, $author$project$Lia$Markdown$Chart$Parser$number), A2($andre_dietrich$parser_combinators$Combine$map, F4(function(e, x0, x_label, x1) {
        return _Utils_Tuple2($elm$core$String$trim(x_label), A3($author$project$Lia$Markdown$Chart$Parser$segmentation, $elm$core$String$length(e), x0, x1));
    }), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n[	 ]*"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("\\-+"), $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\\+")))))));
    var $author$project$Lia$Markdown$Chart$Parser$parse = function() {
        var chart = F5(function(title, y_max, rows, y_min, _v6) {
            var x_label = _v6.a;
            var _v7 = _v6.b;
            var x0 = _v7.a;
            var x_segment = _v7.b;
            var _v0 = A3($author$project$Lia$Markdown$Chart$Parser$segmentation, $elm$core$List$length(rows), y_min, y_max);
            var y0 = _v0.a;
            var y_segment = _v0.b;
            var _v1 = $elm$core$List$unzip(rows);
            var label = _v1.a;
            var data = _v1.b;
            var _v2 = $elm$core$List$unzip(label);
            var y_label = _v2.a;
            var data_labels = _v2.b;
            var labels = $elm$core$Dict$fromList(A2($elm$core$List$filterMap, $elm$core$Basics$identity, data_labels));
            return {
                diagrams: A2($elm$core$Dict$map, F2(function(k, v) {
                    return A2($author$project$Lia$Markdown$Chart$Parser$unique, $elm$core$Maybe$Nothing, A2($elm$core$List$map, function($) {
                        return $.x;
                    }, v)) ? A2($author$project$Lia$Markdown$Chart$Types$Lines, v, A2($elm$core$Dict$get, $elm$core$String$fromChar(k), labels)) : A2($author$project$Lia$Markdown$Chart$Types$Dots, v, A2($elm$core$Dict$get, $elm$core$String$fromChar(k), labels));
                }), A2($elm$core$Dict$map, F2(function(_v5, v) {
                    return A2($elm$core$List$sortBy, function($) {
                        return $.x;
                    }, v);
                }), A3($elm$core$List$foldr, $author$project$Lia$Markdown$Chart$Parser$magicMerge, $elm$core$Dict$empty, A2($elm$core$List$map, function(_v3) {
                    var y = _v3.a;
                    var l = _v3.b;
                    return A2($elm$core$Dict$map, F2(function(_v4, xs) {
                        return A2($elm$core$List$map, function(x) {
                            return A2($author$project$Lia$Markdown$Chart$Types$Point, x * x_segment + x0, y * y_segment + y0);
                        }, xs);
                    }), l);
                }, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, $elm$core$List$reverse(data)))))),
                legend: $elm$core$Dict$values(labels),
                orientation: $elm$core$Maybe$Nothing,
                title: title,
                xLabel: x_label,
                xLimits: {
                    max: $elm$core$Maybe$Nothing,
                    min: $elm$core$Maybe$Nothing
                },
                yLabel: $elm$core$String$trim($elm$core$String$concat(y_label)),
                yLimits: {
                    max: $elm$core$Maybe$Nothing,
                    min: $elm$core$Maybe$Nothing
                }
            };
        });
        return A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Chart$Parser$x_axis, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, 0.0, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Chart$Parser$number, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*"))), A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Chart$Parser$row), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, 1.0, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Chart$Parser$number, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*"))), A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$String$trim, chart), A2($andre_dietrich$parser_combinators$Combine$optional, "", $andre_dietrich$parser_combinators$Combine$regex("[	 ]*[^\n\\|`]*\n")))))));
    }();
    var $author$project$Lia$Markdown$Inline$Parser$javascript = A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$scriptBody, A2($andre_dietrich$parser_combinators$Combine$regexWith, {
        caseInsensitive: true,
        multiline: false
    }, "<script>"));
    var $author$project$Lia$Markdown$Code$Types$Snippet = F4(function(attr, lang, name, code) {
        return {
            attr: attr,
            code: code,
            lang: lang,
            name: name
        };
    });
    var $author$project$Lia$Markdown$Code$Parser$code_body = F2(function(_char, len) {
        var control_frame = _char + ("{" + ($elm$core$String$fromInt(len) + "}"));
        return A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$String$concat, $elm$core$String$dropRight(1)), A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("(?:.(?!" + (control_frame + "))*\n")), $author$project$Lia$Parser$Indentation$maybeCheck), A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$regex(control_frame))), $author$project$Lia$Parser$Indentation$check)));
    });
    var $author$project$Lia$Markdown$Code$Parser$header = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$toLower, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("\\w*"), $author$project$Lia$Parser$Helper$spaces));
    var $author$project$Lia$Markdown$Code$Parser$title = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$regex(".*"), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$optional, true, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, true, $andre_dietrich$parser_combinators$Combine$string("+")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, false, $andre_dietrich$parser_combinators$Combine$string("-"))
    ])), $author$project$Lia$Parser$Helper$spaces)))));
    var $author$project$Lia$Markdown$Code$Parser$listing = function(attr) {
        var body = function(len) {
            return A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$or, A2($author$project$Lia$Markdown$Code$Parser$code_body, "`", len), A2($author$project$Lia$Markdown$Code$Parser$code_body, "~", len)), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Code$Parser$title, A2($andre_dietrich$parser_combinators$Combine$map, F3(function(h, _v0, c) {
                var v = _v0.a;
                var t = _v0.b;
                return _Utils_Tuple2(A4($author$project$Lia$Markdown$Code$Types$Snippet, attr, h, $elm$core$String$trim(t), c), v);
            }), $author$project$Lia$Markdown$Code$Parser$header)));
        };
        return A2($andre_dietrich$parser_combinators$Combine$andThen, body, $author$project$Lia$Parser$Helper$c_frame);
    };
    var $author$project$Service$Script$Eval = F3(function(ok, result, details) {
        return {
            details: details,
            ok: ok,
            result: result
        };
    });
    var $author$project$Lia$Markdown$Code$Types$Evaluate = function(a) {
        return {
            $: "Evaluate",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Log$Error = {
        $: "Error"
    };
    var $author$project$Lia$Markdown$Code$Log$Info = {
        $: "Info"
    };
    var $author$project$Lia$Markdown$Code$Log$Message = F2(function(level, text) {
        return {
            level: level,
            text: text
        };
    });
    var $author$project$Lia$Markdown$Code$Log$Stream = {
        $: "Stream"
    };
    var $author$project$Lia$Utils$array_getLast = function(array) {
        return A2($elm$core$Array$get, $elm$core$Array$length(array) - 1, array);
    };
    var $author$project$Lia$Utils$array_setLast = F2(function(a, array) {
        return A3($elm$core$Array$set, $elm$core$Array$length(array) - 1, a, array);
    });
    var $author$project$Lia$Markdown$Code$Log$crop = function(messages) {
        return $elm$core$Array$length(messages) < 250 ? messages : A3($elm$core$Array$slice, 1, 250, messages);
    };
    var $author$project$Lia$Markdown$Code$Log$add = F3(function(level, str, log) {
        return _Utils_update(log, {
            messages: $author$project$Lia$Markdown$Code$Log$crop(function() {
                if (level.$ === "Stream") {
                    var _v1 = $author$project$Lia$Utils$array_getLast(log.messages);
                    if (_v1.$ === "Just") {
                        var message = _v1.a;
                        return _Utils_eq(message.level, $author$project$Lia$Markdown$Code$Log$Stream) ? A2($author$project$Lia$Utils$array_setLast, A2($author$project$Lia$Markdown$Code$Log$Message, level, _Utils_ap(message.text, str)), log.messages) : A2($elm$core$Array$push, A2($author$project$Lia$Markdown$Code$Log$Message, level, str), log.messages);
                    } else return A2($elm$core$Array$push, A2($author$project$Lia$Markdown$Code$Log$Message, level, str), log.messages);
                } else return A2($elm$core$Array$push, A2($author$project$Lia$Markdown$Code$Log$Message, level, str), log.messages);
            }())
        });
    });
    var $author$project$Lia$Markdown$Code$Log$add_Eval = F2(function(_eval, log) {
        return (_eval.ok ? A2($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, _eval.result) : A2($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Error, _eval.result))(_Utils_update(log, {
            details: _eval.details,
            ok: _eval.ok
        }));
    });
    var $author$project$Lia$Markdown$Code$Log$Debug = {
        $: "Debug"
    };
    var $author$project$Lia$Markdown$Code$Log$Log = F4(function(ok, level, messages, details) {
        return {
            details: details,
            level: level,
            messages: messages,
            ok: ok
        };
    });
    var $author$project$Lia$Markdown$Code$Log$empty = A4($author$project$Lia$Markdown$Code$Log$Log, true, $author$project$Lia$Markdown$Code$Log$Debug, $elm$core$Array$empty, _List_Nil);
    var $elm$core$Array$repeat = F2(function(n, e) {
        return A2($elm$core$Array$initialize, n, function(_v0) {
            return e;
        });
    });
    var $truqu$elm_md5$MD5$emptyWords = A2($elm$core$Array$repeat, 16, 0);
    var $truqu$elm_md5$MD5$addUnsigned = F2(function(x, y) {
        return 4294967295 & x + y;
    });
    var $truqu$elm_md5$MD5$rotateLeft = F2(function(bits, input) {
        return input << bits | input >>> 32 - bits;
    });
    var $truqu$elm_md5$MD5$cmn = F8(function(fun, a, b, c, d, x, s, ac) {
        return A2($truqu$elm_md5$MD5$addUnsigned, b, A2($truqu$elm_md5$MD5$rotateLeft, s, A2($truqu$elm_md5$MD5$addUnsigned, a, A2($truqu$elm_md5$MD5$addUnsigned, ac, A2($truqu$elm_md5$MD5$addUnsigned, A3(fun, b, c, d), x)))));
    });
    var $elm$core$Bitwise$xor = _Bitwise_xor;
    var $truqu$elm_md5$MD5$f = F3(function(x, y, z) {
        return z ^ x & (y ^ z);
    });
    var $truqu$elm_md5$MD5$ff = F7(function(a, b, c, d, x, s, ac) {
        return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$f, a, b, c, d, x, s, ac);
    });
    var $truqu$elm_md5$MD5$g = F3(function(x, y, z) {
        return y ^ z & (x ^ y);
    });
    var $truqu$elm_md5$MD5$gg = F7(function(a, b, c, d, x, s, ac) {
        return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$g, a, b, c, d, x, s, ac);
    });
    var $truqu$elm_md5$MD5$h = F3(function(x, y, z) {
        return z ^ (x ^ y);
    });
    var $truqu$elm_md5$MD5$hh = F7(function(a, b, c, d, x, s, ac) {
        return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$h, a, b, c, d, x, s, ac);
    });
    var $elm$core$Bitwise$complement = _Bitwise_complement;
    var $truqu$elm_md5$MD5$i = F3(function(x, y, z) {
        return y ^ (x | ~z);
    });
    var $truqu$elm_md5$MD5$ii = F7(function(a, b, c, d, x, s, ac) {
        return A8($truqu$elm_md5$MD5$cmn, $truqu$elm_md5$MD5$i, a, b, c, d, x, s, ac);
    });
    var $truqu$elm_md5$MD5$hex_ = F2(function(xs, acc) {
        var a = acc.a;
        var b = acc.b;
        var c = acc.c;
        var d = acc.d;
        if (xs.b && xs.b.b && xs.b.b.b && xs.b.b.b.b && xs.b.b.b.b.b && xs.b.b.b.b.b.b && xs.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b && xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b && !xs.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) {
            var x0 = xs.a;
            var _v1 = xs.b;
            var x1 = _v1.a;
            var _v2 = _v1.b;
            var x2 = _v2.a;
            var _v3 = _v2.b;
            var x3 = _v3.a;
            var _v4 = _v3.b;
            var x4 = _v4.a;
            var _v5 = _v4.b;
            var x5 = _v5.a;
            var _v6 = _v5.b;
            var x6 = _v6.a;
            var _v7 = _v6.b;
            var x7 = _v7.a;
            var _v8 = _v7.b;
            var x8 = _v8.a;
            var _v9 = _v8.b;
            var x9 = _v9.a;
            var _v10 = _v9.b;
            var x10 = _v10.a;
            var _v11 = _v10.b;
            var x11 = _v11.a;
            var _v12 = _v11.b;
            var x12 = _v12.a;
            var _v13 = _v12.b;
            var x13 = _v13.a;
            var _v14 = _v13.b;
            var x14 = _v14.a;
            var _v15 = _v14.b;
            var x15 = _v15.a;
            var s44 = 21;
            var s43 = 15;
            var s42 = 10;
            var s41 = 6;
            var s34 = 23;
            var s33 = 16;
            var s32 = 11;
            var s31 = 4;
            var s24 = 20;
            var s23 = 14;
            var s22 = 9;
            var s21 = 5;
            var s14 = 22;
            var s13 = 17;
            var s12 = 12;
            var s11 = 7;
            var d00 = d;
            var c00 = c;
            var b00 = b;
            var a00 = a;
            var a01 = A7($truqu$elm_md5$MD5$ff, a00, b00, c00, d00, x0, s11, 3614090360);
            var d01 = A7($truqu$elm_md5$MD5$ff, d00, a01, b00, c00, x1, s12, 3905402710);
            var c01 = A7($truqu$elm_md5$MD5$ff, c00, d01, a01, b00, x2, s13, 606105819);
            var b01 = A7($truqu$elm_md5$MD5$ff, b00, c01, d01, a01, x3, s14, 3250441966);
            var a02 = A7($truqu$elm_md5$MD5$ff, a01, b01, c01, d01, x4, s11, 4118548399);
            var d02 = A7($truqu$elm_md5$MD5$ff, d01, a02, b01, c01, x5, s12, 1200080426);
            var c02 = A7($truqu$elm_md5$MD5$ff, c01, d02, a02, b01, x6, s13, 2821735955);
            var b02 = A7($truqu$elm_md5$MD5$ff, b01, c02, d02, a02, x7, s14, 4249261313);
            var a03 = A7($truqu$elm_md5$MD5$ff, a02, b02, c02, d02, x8, s11, 1770035416);
            var d03 = A7($truqu$elm_md5$MD5$ff, d02, a03, b02, c02, x9, s12, 2336552879);
            var c03 = A7($truqu$elm_md5$MD5$ff, c02, d03, a03, b02, x10, s13, 4294925233);
            var b03 = A7($truqu$elm_md5$MD5$ff, b02, c03, d03, a03, x11, s14, 2304563134);
            var a04 = A7($truqu$elm_md5$MD5$ff, a03, b03, c03, d03, x12, s11, 1804603682);
            var d04 = A7($truqu$elm_md5$MD5$ff, d03, a04, b03, c03, x13, s12, 4254626195);
            var c04 = A7($truqu$elm_md5$MD5$ff, c03, d04, a04, b03, x14, s13, 2792965006);
            var b04 = A7($truqu$elm_md5$MD5$ff, b03, c04, d04, a04, x15, s14, 1236535329);
            var a05 = A7($truqu$elm_md5$MD5$gg, a04, b04, c04, d04, x1, s21, 4129170786);
            var d05 = A7($truqu$elm_md5$MD5$gg, d04, a05, b04, c04, x6, s22, 3225465664);
            var c05 = A7($truqu$elm_md5$MD5$gg, c04, d05, a05, b04, x11, s23, 643717713);
            var b05 = A7($truqu$elm_md5$MD5$gg, b04, c05, d05, a05, x0, s24, 3921069994);
            var a06 = A7($truqu$elm_md5$MD5$gg, a05, b05, c05, d05, x5, s21, 3593408605);
            var d06 = A7($truqu$elm_md5$MD5$gg, d05, a06, b05, c05, x10, s22, 38016083);
            var c06 = A7($truqu$elm_md5$MD5$gg, c05, d06, a06, b05, x15, s23, 3634488961);
            var b06 = A7($truqu$elm_md5$MD5$gg, b05, c06, d06, a06, x4, s24, 3889429448);
            var a07 = A7($truqu$elm_md5$MD5$gg, a06, b06, c06, d06, x9, s21, 568446438);
            var d07 = A7($truqu$elm_md5$MD5$gg, d06, a07, b06, c06, x14, s22, 3275163606);
            var c07 = A7($truqu$elm_md5$MD5$gg, c06, d07, a07, b06, x3, s23, 4107603335);
            var b07 = A7($truqu$elm_md5$MD5$gg, b06, c07, d07, a07, x8, s24, 1163531501);
            var a08 = A7($truqu$elm_md5$MD5$gg, a07, b07, c07, d07, x13, s21, 2850285829);
            var d08 = A7($truqu$elm_md5$MD5$gg, d07, a08, b07, c07, x2, s22, 4243563512);
            var c08 = A7($truqu$elm_md5$MD5$gg, c07, d08, a08, b07, x7, s23, 1735328473);
            var b08 = A7($truqu$elm_md5$MD5$gg, b07, c08, d08, a08, x12, s24, 2368359562);
            var a09 = A7($truqu$elm_md5$MD5$hh, a08, b08, c08, d08, x5, s31, 4294588738);
            var d09 = A7($truqu$elm_md5$MD5$hh, d08, a09, b08, c08, x8, s32, 2272392833);
            var c09 = A7($truqu$elm_md5$MD5$hh, c08, d09, a09, b08, x11, s33, 1839030562);
            var b09 = A7($truqu$elm_md5$MD5$hh, b08, c09, d09, a09, x14, s34, 4259657740);
            var a10 = A7($truqu$elm_md5$MD5$hh, a09, b09, c09, d09, x1, s31, 2763975236);
            var d10 = A7($truqu$elm_md5$MD5$hh, d09, a10, b09, c09, x4, s32, 1272893353);
            var c10 = A7($truqu$elm_md5$MD5$hh, c09, d10, a10, b09, x7, s33, 4139469664);
            var b10 = A7($truqu$elm_md5$MD5$hh, b09, c10, d10, a10, x10, s34, 3200236656);
            var a11 = A7($truqu$elm_md5$MD5$hh, a10, b10, c10, d10, x13, s31, 681279174);
            var d11 = A7($truqu$elm_md5$MD5$hh, d10, a11, b10, c10, x0, s32, 3936430074);
            var c11 = A7($truqu$elm_md5$MD5$hh, c10, d11, a11, b10, x3, s33, 3572445317);
            var b11 = A7($truqu$elm_md5$MD5$hh, b10, c11, d11, a11, x6, s34, 76029189);
            var a12 = A7($truqu$elm_md5$MD5$hh, a11, b11, c11, d11, x9, s31, 3654602809);
            var d12 = A7($truqu$elm_md5$MD5$hh, d11, a12, b11, c11, x12, s32, 3873151461);
            var c12 = A7($truqu$elm_md5$MD5$hh, c11, d12, a12, b11, x15, s33, 530742520);
            var b12 = A7($truqu$elm_md5$MD5$hh, b11, c12, d12, a12, x2, s34, 3299628645);
            var a13 = A7($truqu$elm_md5$MD5$ii, a12, b12, c12, d12, x0, s41, 4096336452);
            var d13 = A7($truqu$elm_md5$MD5$ii, d12, a13, b12, c12, x7, s42, 1126891415);
            var c13 = A7($truqu$elm_md5$MD5$ii, c12, d13, a13, b12, x14, s43, 2878612391);
            var b13 = A7($truqu$elm_md5$MD5$ii, b12, c13, d13, a13, x5, s44, 4237533241);
            var a14 = A7($truqu$elm_md5$MD5$ii, a13, b13, c13, d13, x12, s41, 1700485571);
            var d14 = A7($truqu$elm_md5$MD5$ii, d13, a14, b13, c13, x3, s42, 2399980690);
            var c14 = A7($truqu$elm_md5$MD5$ii, c13, d14, a14, b13, x10, s43, 4293915773);
            var b14 = A7($truqu$elm_md5$MD5$ii, b13, c14, d14, a14, x1, s44, 2240044497);
            var a15 = A7($truqu$elm_md5$MD5$ii, a14, b14, c14, d14, x8, s41, 1873313359);
            var d15 = A7($truqu$elm_md5$MD5$ii, d14, a15, b14, c14, x15, s42, 4264355552);
            var c15 = A7($truqu$elm_md5$MD5$ii, c14, d15, a15, b14, x6, s43, 2734768916);
            var b15 = A7($truqu$elm_md5$MD5$ii, b14, c15, d15, a15, x13, s44, 1309151649);
            var a16 = A7($truqu$elm_md5$MD5$ii, a15, b15, c15, d15, x4, s41, 4149444226);
            var d16 = A7($truqu$elm_md5$MD5$ii, d15, a16, b15, c15, x11, s42, 3174756917);
            var c16 = A7($truqu$elm_md5$MD5$ii, c15, d16, a16, b15, x2, s43, 718787259);
            var b16 = A7($truqu$elm_md5$MD5$ii, b15, c16, d16, a16, x9, s44, 3951481745);
            var b17 = A2($truqu$elm_md5$MD5$addUnsigned, b00, b16);
            var c17 = A2($truqu$elm_md5$MD5$addUnsigned, c00, c16);
            var d17 = A2($truqu$elm_md5$MD5$addUnsigned, d00, d16);
            var a17 = A2($truqu$elm_md5$MD5$addUnsigned, a00, a16);
            return {
                a: a17,
                b: b17,
                c: c17,
                d: d17
            };
        } else return acc;
    });
    var $truqu$elm_md5$MD5$iget = F2(function(index, array) {
        return A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Array$get, index, array));
    });
    var $truqu$elm_md5$MD5$consume = F2(function(_char, _v0) {
        var hashState = _v0.a;
        var _v1 = _v0.b;
        var byteCount = _v1.a;
        var words = _v1.b;
        var totalByteCount = _v0.c;
        var wordCount = byteCount / 4 | 0;
        var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
        var bytePosition = 8 * (byteCount % 4);
        var code = _char << bytePosition;
        var newWord = oldWord | code;
        var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
        return byteCount === 63 ? _Utils_Tuple3(A2($truqu$elm_md5$MD5$hex_, $elm$core$Array$toList(newWords), hashState), _Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords), totalByteCount + 1) : _Utils_Tuple3(hashState, _Utils_Tuple2(byteCount + 1, newWords), totalByteCount + 1);
    });
    var $truqu$elm_md5$MD5$finishUp = function(_v0) {
        var hashState = _v0.a;
        var _v1 = _v0.b;
        var byteCount = _v1.a;
        var words = _v1.b;
        var totalByteCount = _v0.c;
        var wordCount = byteCount / 4 | 0;
        var oldWord = A2($truqu$elm_md5$MD5$iget, wordCount, words);
        var bytePosition = 8 * (byteCount % 4);
        var code = 128 << bytePosition;
        var newWord = oldWord | code;
        var newWords = A3($elm$core$Array$set, wordCount, newWord, words);
        return wordCount < 14 ? function(x) {
            return A2($truqu$elm_md5$MD5$hex_, x, hashState);
        }($elm$core$Array$toList(A3($elm$core$Array$set, 15, totalByteCount >>> 29, A3($elm$core$Array$set, 14, totalByteCount << 3, newWords)))) : function(x) {
            return A2($truqu$elm_md5$MD5$hex_, x, A2($truqu$elm_md5$MD5$hex_, $elm$core$Array$toList(newWords), hashState));
        }($elm$core$Array$toList(A3($elm$core$Array$set, 15, totalByteCount >>> 29, A3($elm$core$Array$set, 14, totalByteCount << 3, $truqu$elm_md5$MD5$emptyWords))));
    };
    var $zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8 = F3(function(add, _char, acc) {
        return _char < 128 ? A2(add, _char, acc) : _char < 2048 ? A2(add, 128 | 63 & _char, A2(add, 192 | _char >>> 6, acc)) : _char < 65536 ? A2(add, 128 | 63 & _char, A2(add, 128 | 63 & _char >>> 6, A2(add, 224 | _char >>> 12, acc))) : A2(add, 128 | 63 & _char, A2(add, 128 | 63 & _char >>> 6, A2(add, 128 | 63 & _char >>> 12, A2(add, 240 | _char >>> 18, acc))));
    });
    var $zwilias$elm_utf_tools$String$UTF8$foldl = F3(function(op, initialAcc, input) {
        return A3($elm$core$String$foldl, F2(function(_char, acc) {
            return A3($zwilias$elm_utf_tools$String$UTF8$utf32ToUtf8, op, $elm$core$Char$toCode(_char), acc);
        }), initialAcc, input);
    });
    var $truqu$elm_md5$MD5$State = F4(function(a, b, c, d) {
        return {
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $truqu$elm_md5$MD5$initialHashState = A4($truqu$elm_md5$MD5$State, 1732584193, 4023233417, 2562383102, 271733878);
    var $truqu$elm_md5$MD5$hash = function(input) {
        return $truqu$elm_md5$MD5$finishUp(A3($zwilias$elm_utf_tools$String$UTF8$foldl, $truqu$elm_md5$MD5$consume, _Utils_Tuple3($truqu$elm_md5$MD5$initialHashState, _Utils_Tuple2(0, $truqu$elm_md5$MD5$emptyWords), 0), input));
    };
    var $truqu$elm_md5$MD5$bytes = function(string) {
        var _v0 = $truqu$elm_md5$MD5$hash(string);
        var a = _v0.a;
        var b = _v0.b;
        var c = _v0.c;
        var d = _v0.d;
        return _List_fromArray([
            a & 255,
            a >>> 8 & 255,
            a >>> 16 & 255,
            a >>> 24 & 255,
            b & 255,
            b >>> 8 & 255,
            b >>> 16 & 255,
            b >>> 24 & 255,
            c & 255,
            c >>> 8 & 255,
            c >>> 16 & 255,
            c >>> 24 & 255,
            d & 255,
            d >>> 8 & 255,
            d >>> 16 & 255,
            d >>> 24 & 255
        ]);
    };
    var $truqu$elm_md5$MD5$toHex = function(_byte) {
        switch(_byte){
            case 0:
                return "0";
            case 1:
                return "1";
            case 2:
                return "2";
            case 3:
                return "3";
            case 4:
                return "4";
            case 5:
                return "5";
            case 6:
                return "6";
            case 7:
                return "7";
            case 8:
                return "8";
            case 9:
                return "9";
            case 10:
                return "a";
            case 11:
                return "b";
            case 12:
                return "c";
            case 13:
                return "d";
            case 14:
                return "e";
            case 15:
                return "f";
            default:
                return _Utils_ap($truqu$elm_md5$MD5$toHex(_byte / 16 | 0), $truqu$elm_md5$MD5$toHex(_byte % 16));
        }
    };
    var $truqu$elm_md5$MD5$hex = function(s) {
        return A3($elm$core$List$foldl, F2(function(b, acc) {
            return _Utils_ap(acc, A3($elm$core$String$padLeft, 2, _Utils_chr("0"), $truqu$elm_md5$MD5$toHex(b)));
        }), "", $truqu$elm_md5$MD5$bytes(s));
    };
    var $author$project$Lia$Markdown$Code$Types$hash = function(file) {
        return _Utils_Tuple2($truqu$elm_md5$MD5$hex(file.code), file.code);
    };
    var $author$project$Lia$Markdown$Code$Types$File = F5(function(lang, name, code, visible, fullscreen) {
        return {
            code: code,
            fullscreen: fullscreen,
            lang: lang,
            name: name,
            visible: visible
        };
    });
    var $author$project$Lia$Markdown$Code$Types$toFile = F2(function(fullscreen, _v0) {
        var attr = _v0.a.attr;
        var lang = _v0.a.lang;
        var name = _v0.a.name;
        var code = _v0.a.code;
        var visible = _v0.b;
        return _Utils_Tuple2(attr, A5($author$project$Lia$Markdown$Code$Types$File, lang, name, code, visible, fullscreen));
    });
    var $author$project$Lia$Markdown$Code$Types$initProject = F4(function(fullscreen, array, comment, output) {
        var _v0 = A3($elm$core$Array$foldl, F2(function(s, _v1) {
            var a = _v1.a;
            var f = _v1.b;
            var _v2 = A2($author$project$Lia$Markdown$Code$Types$toFile, fullscreen, s);
            var a_ = _v2.a;
            var f_ = _v2.b;
            return _Utils_Tuple2(A2($elm$core$List$append, a, _List_fromArray([
                a_
            ])), A2($elm$core$Array$push, f_, f));
        }), _Utils_Tuple2(_List_Nil, $elm$core$Array$empty), array);
        var attr = _v0.a;
        var files = _v0.b;
        var repository = $elm$core$Array$toList(A2($elm$core$Array$map, $author$project$Lia$Markdown$Code$Types$hash, files));
        return {
            attr: attr,
            evaluation: comment,
            file: files,
            focus: -1,
            log: output,
            logSize: $elm$core$Maybe$Nothing,
            repository: $elm$core$Dict$fromList(repository),
            running: false,
            syncLog: $author$project$Lia$Markdown$Code$Log$empty,
            syncMode: false,
            terminal: $elm$core$Maybe$Nothing,
            version: $elm$core$Array$fromList(_List_fromArray([
                _Utils_Tuple2(A2($elm$core$List$map, $elm$core$Tuple$first, repository), $author$project$Lia$Markdown$Code$Log$empty)
            ])),
            version_active: 0
        };
    });
    var $author$project$Lia$Markdown$Code$Parser$evaluate = F2(function(lang_title_code, comment) {
        var ar = $elm$core$Array$fromList(lang_title_code);
        var _v0 = function() {
            var _v1 = A2($elm$core$Array$get, $elm$core$Array$length(ar) - 1, ar);
            if (_v1.$ === "Just") {
                var _v2 = _v1.a;
                var snippet = _v2.a;
                var vis = _v2.b;
                return $elm$core$String$toLower(snippet.name) === "@output" ? _Utils_Tuple2(A2($author$project$Lia$Markdown$Code$Log$add_Eval, A3($author$project$Service$Script$Eval, vis, snippet.code, _List_Nil), $author$project$Lia$Markdown$Code$Log$empty), A3($elm$core$Array$slice, 0, -1, ar)) : _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
            } else return _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
        }();
        var output = _v0.a;
        var array = _v0.b;
        var add_state = function(s) {
            var model = s.code_model;
            return _Utils_update(s, {
                code_model: _Utils_update(model, {
                    evaluate: A2($elm$core$Array$push, A4($author$project$Lia$Markdown$Code$Types$initProject, false, array, comment, output), model.evaluate)
                })
            });
        };
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState(add_state), $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.code_model;
        }, A2($elm$core$Basics$composeR, function($) {
            return $.evaluate;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$length, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Code$Types$Evaluate, $andre_dietrich$parser_combinators$Combine$succeed))))));
    });
    var $author$project$Lia$Markdown$Code$Types$Highlight = function(a) {
        return {
            $: "Highlight",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Parser$highlight = function(lang_title_code) {
        var ar = $elm$core$Array$fromList(lang_title_code);
        var _v0 = function() {
            var _v1 = A2($elm$core$Array$get, $elm$core$Array$length(ar) - 1, ar);
            if (_v1.$ === "Just") {
                var _v2 = _v1.a;
                var snippet = _v2.a;
                var vis = _v2.b;
                return $elm$core$String$toLower(snippet.name) === "@output" ? _Utils_Tuple2(A2($author$project$Lia$Markdown$Code$Log$add_Eval, A3($author$project$Service$Script$Eval, vis, snippet.code, _List_Nil), $author$project$Lia$Markdown$Code$Log$empty), A3($elm$core$Array$slice, 0, -1, ar)) : _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
            } else return _Utils_Tuple2($author$project$Lia$Markdown$Code$Log$empty, ar);
        }();
        var output = _v0.a;
        var array = _v0.b;
        var add_state = function(s) {
            var model = s.code_model;
            return _Utils_update(s, {
                code_model: _Utils_update(model, {
                    highlight: A2($elm$core$Array$push, A4($author$project$Lia$Markdown$Code$Types$initProject, true, array, "", output), model.highlight)
                })
            });
        };
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState(add_state), $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.code_model;
        }, A2($elm$core$Basics$composeR, function($) {
            return $.highlight;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$length, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Code$Types$Highlight, $andre_dietrich$parser_combinators$Combine$succeed))))));
    };
    var $author$project$Lia$Markdown$Code$Parser$result = function(_v0) {
        var lst = _v0.a;
        var script = _v0.b;
        if (script.$ === "Just") {
            var str = script.a;
            return A2($author$project$Lia$Markdown$Code$Parser$evaluate, lst, str);
        } else return $author$project$Lia$Markdown$Code$Parser$highlight(lst);
    };
    var $author$project$Lia$Markdown$Code$Parser$parse = function(attr) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Code$Parser$result, A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$javascript, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$sepBy1, $author$project$Lia$Parser$Indentation$check, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Code$Parser$listing, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Markdown$Macro$Parser$macro), A2($andre_dietrich$parser_combinators$Combine$keep, attr, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Markdown$Macro$Parser$macro))))))));
    };
    var $author$project$Lia$Markdown$Gallery$Types$Gallery = F2(function(media, id) {
        return {
            id: id,
            media: media
        };
    });
    var $author$project$Lia$Markdown$Inline$Parser$mediaReference = A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$annotations, $author$project$Lia$Markdown$Macro$Parser$macro), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$Ref, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $author$project$Lia$Markdown$Inline$Parser$refImage,
        $author$project$Lia$Markdown$Inline$Parser$refMovie,
        $author$project$Lia$Markdown$Inline$Parser$refAudio,
        $author$project$Lia$Markdown$Inline$Parser$refQr,
        $author$project$Lia$Markdown$Inline$Parser$refEmbed
    ]))));
    var $author$project$Lia$Markdown$Gallery$Parser$add_state = function(s) {
        return _Utils_update(s, {
            gallery_vector: A2($elm$core$Array$push, -1, s.gallery_vector)
        });
    };
    var $author$project$Lia$Markdown$Gallery$Parser$modify_State = function(media) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$modifyState($author$project$Lia$Markdown$Gallery$Parser$add_state), A2($andre_dietrich$parser_combinators$Combine$map, media, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.gallery_vector;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)))));
    };
    var $andre_dietrich$parser_combinators$Combine$Char$newline = A2($andre_dietrich$parser_combinators$Combine$onerror, "expected a newline", $andre_dietrich$parser_combinators$Combine$Char$satisfy($elm$core$Basics$eq(_Utils_chr("\n"))));
    var $author$project$Lia$Markdown$Gallery$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$andThen, function(list) {
        return $elm$core$List$length(list) > 1 ? $author$project$Lia$Markdown$Gallery$Parser$modify_State($author$project$Lia$Markdown$Gallery$Types$Gallery(list)) : $andre_dietrich$parser_combinators$Combine$fail("not a gallery");
    }, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$concat, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$Char$newline, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$mediaReference, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*")))))));
    var $author$project$Lia$Markdown$Quiz$Types$Block_Type = function(a) {
        return {
            $: "Block_Type",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Generic_Type = {
        $: "Generic_Type"
    };
    var $author$project$Lia$Markdown$Quiz$Types$Matrix_Type = function(a) {
        return {
            $: "Matrix_Type",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Types$Vector_Type = function(a) {
        return {
            $: "Vector_Type",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Parser$generic = $andre_dietrich$parser_combinators$Combine$skip(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("(?:- )?\\[\\[!\\]\\]"), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))));
    var $author$project$Lia$Markdown$Quiz$Block$Parser$parse = function(parse_inlines) {
        return A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$second, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Block$Parser$pattern(parse_inlines), $author$project$Lia$Parser$Helper$spaces)));
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets = A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, $author$project$Lia$Markdown$Inline$Parser$inlines, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\\][ 	]*")), $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\\[[ 	]*"));
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis = A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, $author$project$Lia$Markdown$Inline$Parser$inlines, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\\)[ 	]*")), $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\\([ 	]*"));
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$options = A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Quiz$Matrix$Parser$inParenthesis, $author$project$Lia$Markdown$Quiz$Matrix$Parser$inBrackets);
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$header = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("]"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Quiz$Matrix$Parser$options), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("(?:(\\-|\\+\\*)[	 ]*)?\\["), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))))));
    var $author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz = F3(function(headers, options, solution) {
        return {
            headers: headers,
            options: options,
            solution: solution
        };
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz = F2(function(main, _v0) {
        var vector = _v0.a;
        var inline = _v0.b;
        return A3($author$project$Lia$Markdown$Quiz$Matrix$Types$Quiz, main, inline, $elm$core$Array$fromList(vector));
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$either = F2(function(_true, _false) {
        return A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$onsuccess, false, $andre_dietrich$parser_combinators$Combine$string(_false)), A2($andre_dietrich$parser_combinators$Combine$onsuccess, true, $andre_dietrich$parser_combinators$Combine$regex(_true)));
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton = A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, "\\[[xX]\\]", "[ ]");
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton, $author$project$Lia$Parser$Helper$spaces))));
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton = A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, "\\([xX]\\)", "( )");
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$single = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton, $author$project$Lia$Parser$Helper$spaces))));
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$rows = $author$project$Lia$Markdown$Quiz$Vector$Parser$group(A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Quiz$Matrix$Parser$single, $author$project$Lia$Markdown$Quiz$Matrix$Parser$multiple));
    var $author$project$Lia$Markdown$Quiz$Matrix$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Quiz$Matrix$Parser$rows, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Matrix$Parser$quiz, $author$project$Lia$Markdown$Quiz$Matrix$Parser$header));
    var $author$project$Lia$Markdown$Quiz$Vector$Types$Quiz = F2(function(options, solution) {
        return {
            options: options,
            solution: solution
        };
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz = F2(function(fn, _v0) {
        var booleans = _v0.a;
        var inlines = _v0.b;
        return A2($author$project$Lia$Markdown$Quiz$Vector$Types$Quiz, inlines, fn(booleans));
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz($author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice), $author$project$Lia$Markdown$Quiz$Vector$Parser$group($author$project$Lia$Markdown$Quiz$Vector$Parser$radioButton)), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Vector$Parser$toQuiz($author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice), $author$project$Lia$Markdown$Quiz$Vector$Parser$group($author$project$Lia$Markdown$Quiz$Vector$Parser$checkButton)));
    var $author$project$Lia$Markdown$Quiz$Parser$parse = function(attr) {
        return A2($andre_dietrich$parser_combinators$Combine$andThen, A2($author$project$Lia$Markdown$Quiz$Parser$modify_State, $elm$core$Maybe$Nothing, attr), A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Quiz$Parser$adds, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Matrix_Type, $author$project$Lia$Markdown$Quiz$Matrix$Parser$parse),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Vector_Type, $author$project$Lia$Markdown$Quiz$Vector$Parser$parse),
            A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Quiz$Types$Generic_Type, $author$project$Lia$Markdown$Quiz$Parser$generic),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Quiz$Types$Block_Type, $author$project$Lia$Markdown$Quiz$Block$Parser$parse($author$project$Lia$Markdown$Inline$Parser$parse_inlines))
        ]))));
    };
    var $author$project$Lia$Markdown$Survey$Types$DragAndDrop_State = F3(function(a, b, c) {
        return {
            $: "DragAndDrop_State",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Survey$Types$Matrix_State = F2(function(a, b) {
        return {
            $: "Matrix_State",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$Types$Select_State = F2(function(a, b) {
        return {
            $: "Select_State",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$Types$Text_State = function(a) {
        return {
            $: "Text_State",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Types$Vector_State = F2(function(a, b) {
        return {
            $: "Vector_State",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$Parser$add_state = F3(function(state, id, c) {
        return _Utils_update(c, {
            survey_vector: A2($elm$core$Array$push, {
                errorMsg: $elm$core$Maybe$Nothing,
                scriptID: id,
                state: state,
                submitted: false
            }, c.survey_vector)
        });
    });
    var $author$project$Lia$Markdown$Survey$Parser$modify_State = function(survey_) {
        var state = function() {
            var extractor = F2(function(fn, v) {
                return $elm$core$Dict$fromList(A2($elm$core$List$map, fn, v));
            });
            var _v0 = survey_.survey;
            switch(_v0.$){
                case "Text":
                    return $author$project$Lia$Markdown$Survey$Types$Text_State("");
                case "Select":
                    return A2($author$project$Lia$Markdown$Survey$Types$Select_State, false, -1);
                case "DragAndDrop":
                    return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false, -1);
                case "Vector":
                    var bool = _v0.a;
                    var vars = _v0.b;
                    return A2($author$project$Lia$Markdown$Survey$Types$Vector_State, bool, A2(extractor, function(_v1) {
                        var v = _v1.a;
                        return _Utils_Tuple2(v, false);
                    }, vars));
                default:
                    var bool = _v0.a;
                    var vars = _v0.c;
                    var qs = _v0.d;
                    return A2($author$project$Lia$Markdown$Survey$Types$Matrix_State, bool, A2($elm$core$Array$repeat, $elm$core$List$length(qs), A2(extractor, function(v) {
                        return _Utils_Tuple2(v, false);
                    }, vars)));
            }
        }();
        return A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$andThen, $andre_dietrich$parser_combinators$Combine$modifyState, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Parser$add_state(state), $author$project$Lia$Markdown$Quiz$Parser$maybeJS)), $andre_dietrich$parser_combinators$Combine$succeed(survey_));
    };
    var $author$project$Lia$Markdown$Survey$Types$Survey = F2(function(survey, id) {
        return {
            id: id,
            survey: survey
        };
    });
    var $author$project$Lia$Markdown$Survey$Types$Text = function(a) {
        return {
            $: "Text",
            a: a
        };
    };
    var $andre_dietrich$parser_combinators$Combine$brackets = A2($andre_dietrich$parser_combinators$Combine$between, $andre_dietrich$parser_combinators$Combine$string("["), $andre_dietrich$parser_combinators$Combine$string("]"));
    var $author$project$Lia$Markdown$Survey$Parser$pattern = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\\][	 ]*"), A2($andre_dietrich$parser_combinators$Combine$keep, p, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("(\\-|\\+|\\*)?[	 ]*\\["), $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))));
    };
    var $author$project$Lia$Markdown$Survey$Parser$header = F2(function(begin, end) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, $author$project$Lia$Markdown$Survey$Parser$pattern($andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, $author$project$Lia$Markdown$Inline$Parser$inlines, $andre_dietrich$parser_combinators$Combine$string(end)), $andre_dietrich$parser_combinators$Combine$string(begin)))));
    });
    var $author$project$Lia$Markdown$Survey$Parser$questions = $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$line, A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\\-?[	 ]*\\[[	 ]+\\]"), $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)))));
    var $author$project$Lia$Markdown$Survey$Parser$text_lines = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$length, $author$project$Lia$Markdown$Survey$Parser$pattern(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("]"), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$many1($andre_dietrich$parser_combinators$Combine$regex("_{3,}[	 ]*")), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("["), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check))))))));
    var $author$project$Lia$Markdown$Survey$Types$Matrix = F4(function(a, b, c, d) {
        return {
            $: "Matrix",
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $author$project$Lia$Markdown$Survey$Parser$toMatrix = F2(function(bool, ids) {
        return A3($author$project$Lia$Markdown$Survey$Types$Matrix, bool, ids, A2($elm$core$List$map, $author$project$Lia$Markdown$Inline$Stringify$stringify, ids));
    });
    var $author$project$Lia$Markdown$Survey$Types$DragAndDrop = function(a) {
        return {
            $: "DragAndDrop",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Types$Select = function(a) {
        return {
            $: "Select",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Parser$toSelect = function(quiz) {
        var _v0 = quiz.solution;
        _v0$2: while(true)switch(_v0.$){
            case "Select":
                if (!_v0.b.b) return $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Survey$Types$Select(quiz.options));
                else break _v0$2;
            case "Drop":
                if (!_v0.c.b) return $andre_dietrich$parser_combinators$Combine$succeed($author$project$Lia$Markdown$Survey$Types$DragAndDrop(quiz.options));
                else break _v0$2;
            default:
                break _v0$2;
        }
        return $andre_dietrich$parser_combinators$Combine$fail("");
    };
    var $author$project$Lia$Markdown$Survey$Types$Vector = F3(function(a, b, c) {
        return {
            $: "Vector",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Survey$Types$Categorical = {
        $: "Categorical"
    };
    var $author$project$Lia$Markdown$Survey$Types$Quantitative = {
        $: "Quantitative"
    };
    var $author$project$Lia$Markdown$Survey$Types$isNumber = A2($elm$core$Basics$composeR, $elm$core$String$split(" "), A2($elm$core$Basics$composeR, $elm$core$List$head, A2($elm$core$Basics$composeR, $elm$core$Maybe$andThen($elm$core$String$toInt), $elm$core$Basics$neq($elm$core$Maybe$Nothing))));
    var $author$project$Lia$Markdown$Survey$Types$analysisType = function(ids) {
        return A2($elm$core$List$all, $author$project$Lia$Markdown$Survey$Types$isNumber, ids) ? $author$project$Lia$Markdown$Survey$Types$Quantitative : $author$project$Lia$Markdown$Survey$Types$Categorical;
    };
    var $author$project$Lia$Markdown$Survey$Parser$toVector = F2(function(bool, definition) {
        return A3($author$project$Lia$Markdown$Survey$Types$Vector, bool, definition, $author$project$Lia$Markdown$Survey$Types$analysisType(A2($elm$core$List$map, $elm$core$Tuple$first, definition)));
    });
    var $author$project$Lia$Markdown$Survey$Parser$id_str = A2($andre_dietrich$parser_combinators$Combine$andThen, function(s) {
        return s === "X" || s === "x" ? $andre_dietrich$parser_combinators$Combine$fail("") : $andre_dietrich$parser_combinators$Combine$succeed(s);
    }, $andre_dietrich$parser_combinators$Combine$regex("\\S[^)\\]]*"));
    var $author$project$Lia$Markdown$Survey$Parser$question = function(p) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$line, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, p)));
    };
    var $author$project$Lia$Markdown$Survey$Parser$vector = function(p) {
        return $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Survey$Parser$question($author$project$Lia$Markdown$Survey$Parser$pattern(p($author$project$Lia$Markdown$Survey$Parser$id_str))));
    };
    var $author$project$Lia$Markdown$Survey$Parser$survey = A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.survey_vector;
    }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed))), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Types$Survey, $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Types$Text, $author$project$Lia$Markdown$Survey$Parser$text_lines),
        A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Survey$Parser$toSelect, $author$project$Lia$Markdown$Quiz$Block$Parser$parse($author$project$Lia$Markdown$Inline$Parser$parse_inlines)),
        A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Parser$toVector(false), $author$project$Lia$Markdown$Survey$Parser$vector($andre_dietrich$parser_combinators$Combine$parens)),
        A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Parser$toVector(true), $author$project$Lia$Markdown$Survey$Parser$vector($andre_dietrich$parser_combinators$Combine$brackets)),
        A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Survey$Parser$questions, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Parser$toMatrix(false), A2($author$project$Lia$Markdown$Survey$Parser$header, "(", ")"))),
        A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Survey$Parser$questions, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Survey$Parser$toMatrix(true), A2($author$project$Lia$Markdown$Survey$Parser$header, "[", "]")))
    ]))));
    var $author$project$Lia$Markdown$Survey$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Survey$Parser$modify_State, $author$project$Lia$Markdown$Survey$Parser$survey);
    var $author$project$Lia$Markdown$Table$Types$Table = F6(function(_class, sortable, head, format, body, id) {
        return {
            body: body,
            _class: _class,
            format: format,
            head: head,
            id: id,
            sortable: sortable
        };
    });
    var $author$project$Const$align = {
        center: "text-center",
        _default: "text-left",
        left: "text-left",
        right: "text-right"
    };
    var $andre_dietrich$parser_combinators$Combine$sepEndBy1 = F2(function(sep, p) {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$maybe(sep), A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p));
    });
    var $andre_dietrich$parser_combinators$Combine$sepEndBy = F2(function(sep, p) {
        return A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$sepEndBy1, sep, p), $andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
    });
    var $author$project$Lia$Markdown$Table$Parser$format = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\n"), A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$sepEndBy, $andre_dietrich$parser_combinators$Combine$string("|"), $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Const$align.center, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*:-+:[	 ]*")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Const$align.left, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*:-+[	 ]*")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Const$align.right, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*-+:[	 ]*")),
        A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Const$align._default, $andre_dietrich$parser_combinators$Combine$regex("[	 ]*-+[	 ]*"))
    ]))), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$string("|"), $author$project$Lia$Parser$Indentation$check)));
    var $author$project$Lia$Markdown$Inline$Parser$stringExceptions = A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Inline$Types$Chars(""), $andre_dietrich$parser_combinators$Combine$lookAhead($andre_dietrich$parser_combinators$Combine$string("|")));
    var $author$project$Lia$Markdown$Inline$Parser$inlines2 = $andre_dietrich$parser_combinators$Combine$lazy(function(_v0) {
        return A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$map, function(_v1) {
            var attr = _v1.a;
            var id = _v1.b;
            return A2($author$project$Lia$Markdown$Inline$Types$Script, id, attr);
        }, $author$project$Lia$Markdown$Inline$Parser$eScript(_List_Nil)), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$annotations, $author$project$Lia$Markdown$Macro$Parser$macro), $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            $author$project$Lia$Markdown$Inline$Parser$code,
            $author$project$Lia$Markdown$Footnote$Parser$inline($author$project$Lia$Markdown$Inline$Parser$parse_inlines),
            $author$project$Lia$Markdown$Inline$Parser$input,
            $author$project$Lia$Markdown$Inline$Parser$reference,
            $author$project$Lia$Markdown$Inline$Parser$Formula$formula,
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$EInline, $author$project$Lia$Markdown$Effect$Parser$inline($author$project$Lia$Markdown$Inline$Parser$inlines)),
            $author$project$Lia$Markdown$Inline$Parser$stringExceptions,
            $author$project$Lia$Markdown$Inline$Parser$strings
        ])))), $author$project$Lia$Markdown$Macro$Parser$macro);
    });
    var $author$project$Lia$Markdown$Inline$Parser$line2 = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$combine, $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Inline$Parser$inlines2));
    var $author$project$Lia$Markdown$Table$Parser$row = A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$optional, _List_Nil, $author$project$Lia$Markdown$Inline$Parser$line2), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$annotations, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Macro$Parser$macro, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces, $andre_dietrich$parser_combinators$Combine$string("|")))))), $andre_dietrich$parser_combinators$Combine$regex("\\|[	 ]*\n")), $author$project$Lia$Parser$Indentation$check);
    var $author$project$Lia$Markdown$Table$Parser$formatted = A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Table$Parser$row), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Table$Parser$format, A2($andre_dietrich$parser_combinators$Combine$map, A2($author$project$Lia$Markdown$Table$Types$Table, $author$project$Lia$Markdown$Table$Types$None, true), $author$project$Lia$Markdown$Table$Parser$row)));
    var $author$project$Lia$Markdown$Table$Types$State = F3(function(column, dir, diagram) {
        return {
            column: column,
            diagram: diagram,
            dir: dir
        };
    });
    var $author$project$Lia$Markdown$Table$Parser$modify_State = A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$andMap($andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
        return $.table_vector;
    }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)))), $andre_dietrich$parser_combinators$Combine$ignore($andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
        return _Utils_update(s, {
            table_vector: A2($elm$core$Array$push, A3($author$project$Lia$Markdown$Table$Types$State, -1, false, false), s.table_vector)
        });
    })));
    var $author$project$Lia$Markdown$Table$Parser$simple = A2($andre_dietrich$parser_combinators$Combine$map, A4($author$project$Lia$Markdown$Table$Types$Table, $author$project$Lia$Markdown$Table$Types$None, true, _List_Nil, _List_Nil), $andre_dietrich$parser_combinators$Combine$many1($author$project$Lia$Markdown$Table$Parser$row));
    var $author$project$Lia$Markdown$Table$Parser$parse = $author$project$Lia$Markdown$Table$Parser$modify_State(A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Table$Parser$formatted, $author$project$Lia$Markdown$Table$Parser$simple), $author$project$Lia$Parser$Indentation$skip));
    var $author$project$Lia$Markdown$Task$Types$Task = F2(function(task, id) {
        return {
            id: id,
            task: task
        };
    });
    var $author$project$Lia$Markdown$Task$Types$toString = A2($elm$core$Basics$composeR, function($) {
        return $.state;
    }, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$array($elm$json$Json$Encode$bool), $elm$json$Json$Encode$encode(0)));
    var $author$project$Lia$Markdown$Task$Parser$modify_State = function(_v0) {
        var states = _v0.a;
        var tasks = _v0.b;
        var addTask = F2(function(m, s) {
            return _Utils_update(s, {
                effect_model: function() {
                    if (m.$ === "Nothing") return s.effect_model;
                    else {
                        var scriptID = m.a;
                        var effect_model = s.effect_model;
                        return _Utils_update(effect_model, {
                            javascript: function() {
                                var _v2 = A2($elm$core$Array$get, scriptID, effect_model.javascript);
                                if (_v2.$ === "Just") {
                                    var script = _v2.a;
                                    return A3($elm$core$Array$set, scriptID, _Utils_update(script, {
                                        result: $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Types$Text($author$project$Lia$Markdown$Task$Types$toString({
                                            scriptID: $elm$core$Maybe$Nothing,
                                            state: $elm$core$Array$fromList(states)
                                        })))
                                    }), effect_model.javascript);
                                } else return effect_model.javascript;
                            }()
                        });
                    }
                }(),
                task_vector: A2($elm$core$Array$push, {
                    scriptID: m,
                    state: $elm$core$Array$fromList(states)
                }, s.task_vector)
            });
        });
        return A2($andre_dietrich$parser_combinators$Combine$ignore, A2($andre_dietrich$parser_combinators$Combine$andThen, $andre_dietrich$parser_combinators$Combine$modifyState, A2($andre_dietrich$parser_combinators$Combine$map, addTask, $author$project$Lia$Markdown$Quiz$Parser$maybeJS)), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Task$Types$Task(tasks), $andre_dietrich$parser_combinators$Combine$withState(A2($elm$core$Basics$composeR, function($) {
            return $.task_vector;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $andre_dietrich$parser_combinators$Combine$succeed)))));
    };
    var $author$project$Lia$Markdown$Task$Parser$parse = A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Task$Parser$modify_State, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$unzip, A3($author$project$Lia$Markdown$Quiz$Vector$Parser$groupBy, $andre_dietrich$parser_combinators$Combine$regex("(\\-|\\*|\\+)[ 	]?\\["), $andre_dietrich$parser_combinators$Combine$string("]"), A2($author$project$Lia$Markdown$Quiz$Vector$Parser$either, "[xX]", " "))));
    var $author$project$Lia$Parser$Indentation$pop = $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
        return _Utils_update(state, {
            indentation: $elm$core$List$reverse(A2($elm$core$List$drop, 1, $elm$core$List$reverse(state.indentation))),
            indentation_skip: false
        });
    });
    var $author$project$Lia$Markdown$Types$Problem = function(a) {
        return {
            $: "Problem",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Inline$Parser$lineWithProblems = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Inline$Types$combine, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Inline$Parser$inlines, A2($andre_dietrich$parser_combinators$Combine$map, function(x) {
        return A2($author$project$Lia$Markdown$Inline$Types$Chars, x, _List_Nil);
    }, $andre_dietrich$parser_combinators$Combine$regex(".")))));
    var $author$project$Lia$Markdown$Parser$problem = A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Problem, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Inline$Parser$lineWithProblems, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $author$project$Lia$Parser$Indentation$skip))));
    var $author$project$Lia$Parser$Input$setGroupPermission = F2(function(enable, attr) {
        return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(attr), $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
            var input = state.input;
            return _Utils_update(state, {
                input: _Utils_update(input, {
                    grouping: A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-group", attr) ? true : enable,
                    isEnabled: false
                })
            });
        }));
    });
    var $author$project$Lia$Parser$Input$setPermission = function(enable) {
        return $andre_dietrich$parser_combinators$Combine$modifyState(function(state) {
            var input = state.input;
            return _Utils_update(state, {
                input: _Utils_update(input, {
                    isEnabled: input.grouping ? false : enable
                })
            });
        });
    };
    var $author$project$Lia$Parser$Preprocessor$title_tag = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$spaces1, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$length, $andre_dietrich$parser_combinators$Combine$regex("#+")));
    var $author$project$Lia$Markdown$Parser$subHeaderType1 = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Inline$Parser$line, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Parser$Preprocessor$title_tag));
    var $author$project$Lia$Markdown$Parser$underline = A2($andre_dietrich$parser_combinators$Combine$or, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(1), $andre_dietrich$parser_combinators$Combine$regex("={3,}[ 	]*")), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(2), $andre_dietrich$parser_combinators$Combine$regex("-{3,}[ 	]*")));
    var $author$project$Lia$Markdown$Parser$subHeaderType2 = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$underline, A2($andre_dietrich$parser_combinators$Combine$map, F2(function(i, title) {
        return _Utils_Tuple2(title, i);
    }), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\n"), $author$project$Lia$Markdown$Inline$Parser$line)));
    var $author$project$Lia$Markdown$Parser$subHeader = A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\n?"), A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Parser$subHeaderType1, $author$project$Lia$Markdown$Parser$subHeaderType2));
    var $author$project$Lia$Markdown$Parser$svgbody = function(len) {
        var control_frame = "(`){" + ($elm$core$String$fromInt(len) + (len <= 8 ? "}" : ",}"));
        var ascii = A2($andre_dietrich$parser_combinators$Combine$regexWith, {
            caseInsensitive: true,
            multiline: false
        }, len <= 8 ? "[	 ]*(ascii|art)[	 ]*" : "([	 ]*(ascii|art))?[	 ]*");
        return A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$map, A2($elm$core$Basics$composeR, $elm$core$String$concat, $elm$core$String$dropRight(1)), A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex("(?:.(?!" + (control_frame + "))*\n")), $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Parser$Indentation$check)), A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$regex(control_frame), $author$project$Lia$Parser$Indentation$check))), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$maybe($author$project$Lia$Markdown$Inline$Parser$line), ascii))));
    };
    var $author$project$Lia$Markdown$Types$Comment = function(a) {
        return {
            $: "Comment",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Model$set_annotation = F4(function(id1, id2, m, attr) {
        var _v0 = A2($elm$core$Dict$get, id1, m);
        if (_v0.$ === "Just") {
            var e = _v0.a;
            var _v1 = A2($elm$core$Array$get, id2, e.content);
            if (_v1.$ === "Just") {
                var par = _v1.a;
                return A3($elm$core$Dict$insert, id1, _Utils_update(e, {
                    content: A3($elm$core$Array$set, id2, _Utils_update(par, {
                        attr: attr
                    }), e.content)
                }), m);
            } else return m;
        } else return m;
    });
    var $author$project$Lia$Markdown$Parser$to_comment = function(_v0) {
        var attr = _v0.a;
        var _v1 = _v0.b;
        var id1 = _v1.a;
        var id2 = _v1.b;
        return A2($andre_dietrich$parser_combinators$Combine$onsuccess, $author$project$Lia$Markdown$Types$Comment(_Utils_Tuple2(id1, id2)), function() {
            if (!attr.b) return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
            else return $andre_dietrich$parser_combinators$Combine$modifyState(function(s) {
                var e = s.effect_model;
                return _Utils_update(s, {
                    effect_model: _Utils_update(e, {
                        comments: A4($author$project$Lia$Markdown$Effect$Model$set_annotation, id1, id2, e.comments, attr)
                    })
                });
            });
        }());
    };
    var $author$project$Lia$Markdown$Parser$svgbobSub = function(_v4) {
        var caption = _v4.a;
        var str = _v4.b;
        var svg = A2($andre_dietrich$elm_svgbob$SvgBob$getElements, {
            arcRadius: 4.0,
            color: {
                background: "white",
                stroke: "#222",
                text: "black"
            },
            fontSize: 14.0,
            lineWidth: 1.0,
            textHeight: 16.0,
            textWidth: 8.0,
            verbatim: {
                height: $elm$core$Maybe$Just("100%"),
                multiline: true,
                string: '"',
                width: $elm$core$Maybe$Nothing
            }
        }, str);
        var fn = function(context) {
            var _v5 = A3($elm$core$List$foldl, F2(function(_v6, _v7) {
                var code = _v6.a;
                var pos = _v6.b;
                var c = _v7.a;
                var list = _v7.b;
                var _v8 = A3($andre_dietrich$parser_combinators$Combine$runParser, $author$project$Lia$Markdown$Parser$cyclic$run(), c, code + "\n");
                if (_v8.$ === "Ok") {
                    var _v9 = _v8.a;
                    var state = _v9.a;
                    var md = _v9.c;
                    return _Utils_Tuple2(state, A2($elm$core$List$cons, _Utils_Tuple2(md, pos), list));
                } else return _Utils_Tuple2(c, list);
            }), _Utils_Tuple2(context, _List_Nil), svg.foreign);
            var newContext = _v5.a;
            var foreign = _v5.b;
            return A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(caption, {
                columns: svg.columns,
                foreign: foreign,
                rows: svg.rows,
                settings: svg.settings,
                svg: svg.svg
            })), $andre_dietrich$parser_combinators$Combine$putState(newContext));
        };
        return $andre_dietrich$parser_combinators$Combine$withState(fn);
    };
    var $author$project$Lia$Markdown$Parser$toQuiz = function(_v0) {
        var md = _v0.a;
        var isQuiz = _v0.b;
        if (isQuiz) switch(md.$){
            case "Paragraph":
                var attr = md.a;
                var md_ = md.b;
                var _v2 = $elm$core$List$reverse(md_);
                if (_v2.b && _v2.a.$ === "Script" && !_v2.a.b.b) {
                    var _v3 = _v2.a;
                    var scriptID = _v3.a;
                    var paragraph_ = _v2.b;
                    return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Just(scriptID), attr, A2($author$project$Lia$Markdown$Types$Paragraph, attr, $elm$core$List$reverse(paragraph_)));
                } else return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "Citation":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "Quote":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "Table":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "Gallery":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "ASCII":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "HTML":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "OrderedList":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "BulletList":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            case "Header":
                var attr = md.a;
                return A3($author$project$Lia$Markdown$Parser$toQuiz_, $elm$core$Maybe$Nothing, attr, md);
            default:
                return $andre_dietrich$parser_combinators$Combine$succeed(md);
        }
        else return $andre_dietrich$parser_combinators$Combine$succeed(md);
    };
    var $author$project$Lia$Markdown$Parser$toQuiz_ = F2(function(scriptID, attr) {
        return A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Quiz$Parser$gapText, scriptID, attr), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$map($author$project$Lia$Markdown$Types$Quiz(attr)), $andre_dietrich$parser_combinators$Combine$andMap($author$project$Lia$Markdown$Parser$cyclic$solution())));
    });
    function $author$project$Lia$Markdown$Parser$cyclic$elements() {
        return $andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
            A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Effect$Parser$markdown($author$project$Lia$Markdown$Parser$cyclic$blocks()), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Effect, $author$project$Lia$Markdown$Parser$md_annotations)),
            A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Parser$to_comment, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Effect$Parser$comment($author$project$Lia$Markdown$Parser$paragraph), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $author$project$Lia$Markdown$Parser$md_annotations))),
            A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Chart$Parser$parse, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Chart, $author$project$Lia$Markdown$Parser$md_annotations)),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(function(state) {
                return $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple2(state.effect_model.javascript, $author$project$Lia$Parser$Input$isInput(state.input) ? $elm$core$Maybe$Just(state.input.blocks) : $elm$core$Maybe$Nothing));
            }), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Table$Parser$parse, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$map, F2(function(attr, tab) {
                return A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Table$Parser$classify, attr, tab), $author$project$Lia$Markdown$Types$Table(attr));
            }), $author$project$Lia$Markdown$Parser$md_annotations))))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($author$project$Lia$Parser$Input$setGroupPermission, false, _List_Nil), $author$project$Lia$Markdown$Parser$cyclic$svgbob()(A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$setGroupPermission(true), $author$project$Lia$Markdown$Parser$md_annotations))))),
            A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Code, $author$project$Lia$Markdown$Code$Parser$parse($author$project$Lia$Markdown$Parser$md_annotations)),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$subHeader, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Header, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), $author$project$Lia$Markdown$Parser$md_annotations)))),
            $author$project$Lia$Markdown$Parser$horizontal_line,
            A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Survey$Parser$parse, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Survey, $author$project$Lia$Markdown$Parser$md_annotations)),
            A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$cyclic$solution(), A2($andre_dietrich$parser_combinators$Combine$andThen, function(attr) {
                return A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Quiz(attr), $author$project$Lia$Markdown$Quiz$Parser$parse(attr));
            }, $author$project$Lia$Markdown$Parser$md_annotations)),
            A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Task$Parser$parse, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Task, $author$project$Lia$Markdown$Parser$md_annotations)),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($author$project$Lia$Parser$Input$setGroupPermission, false, _List_Nil), $author$project$Lia$Markdown$Parser$cyclic$quote()(A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$setGroupPermission(true), $author$project$Lia$Markdown$Parser$md_annotations))))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($author$project$Lia$Parser$Input$setGroupPermission, false, _List_Nil), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$cyclic$ordered_list(), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$OrderedList, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$setGroupPermission(false), $author$project$Lia$Markdown$Parser$md_annotations)))))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($author$project$Lia$Parser$Input$setGroupPermission, false, _List_Nil), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$cyclic$unordered_list(), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$BulletList, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$setGroupPermission(false), $author$project$Lia$Markdown$Parser$md_annotations)))))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$ignore, A2($author$project$Lia$Parser$Input$setGroupPermission, false, _List_Nil), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*\n"), A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$HTML$Parser$parse($author$project$Lia$Markdown$Parser$cyclic$blocks()), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$HTML, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Parser$Input$setGroupPermission(false), $author$project$Lia$Markdown$Parser$md_annotations))))))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Gallery$Parser$parse, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Types$Gallery, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), $author$project$Lia$Markdown$Parser$md_annotations)))),
            $author$project$Lia$Markdown$Parser$cyclic$checkQuiz()(A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Markdown$Parser$paragraph, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Input$setPermission(true), A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Markdown$Parser$checkForCitation, $author$project$Lia$Markdown$Parser$md_annotations)))),
            $author$project$Lia$Markdown$Parser$htmlComment
        ]));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$unordered_list() {
        return A2($andre_dietrich$parser_combinators$Combine$sepBy1, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Parser$newlineWithIndentation)), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$pop, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Parser$newlineWithIndentation), $author$project$Lia$Markdown$Parser$cyclic$blocks()), $andre_dietrich$parser_combinators$Combine$regex("[ 	]*[*+-][ 	]+")), $author$project$Lia$Parser$Indentation$push("  "))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$solution() {
        var rslt = F3(function(e1, blocks_, e2) {
            return _Utils_Tuple2(blocks_, e2 - e1);
        });
        return $andre_dietrich$parser_combinators$Combine$maybe(A2($andre_dietrich$parser_combinators$Combine$andMap, $andre_dietrich$parser_combinators$Combine$withState(function(s) {
            return $andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
        }), A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$manyTill, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newlines, $author$project$Lia$Markdown$Parser$cyclic$blocks()), $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\\*{3,}[	 ]*")), A2($andre_dietrich$parser_combinators$Combine$map, rslt, A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$withState(function(s) {
            return $andre_dietrich$parser_combinators$Combine$succeed(s.effect_model.effects);
        }), $andre_dietrich$parser_combinators$Combine$regex("[	 ]*\\*{3,}[	 ]*\n+"))))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$run() {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Markdown$Parser$cyclic$footnotes(), $andre_dietrich$parser_combinators$Combine$many(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newlines, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$or, $author$project$Lia$Markdown$Parser$cyclic$blocks(), $author$project$Lia$Markdown$Parser$problem), $author$project$Lia$Markdown$Parser$cyclic$footnotes()))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$quote() {
        return A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$map($author$project$Lia$Markdown$Types$Quote), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$ignore($andre_dietrich$parser_combinators$Combine$regex("> ?")), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Indentation$push("> ?")), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Indentation$skip), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$andMap(A2($andre_dietrich$parser_combinators$Combine$sepBy, $author$project$Lia$Markdown$Parser$newlineWithIndentation, $author$project$Lia$Markdown$Parser$cyclic$blocks())), $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Indentation$pop))))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$ordered_list() {
        return A2($andre_dietrich$parser_combinators$Combine$sepBy1, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Parser$newlineWithIndentation)), A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$pop, A2($andre_dietrich$parser_combinators$Combine$keep, A2($andre_dietrich$parser_combinators$Combine$andMap, A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$many($author$project$Lia$Markdown$Parser$newlineWithIndentation), $author$project$Lia$Markdown$Parser$cyclic$blocks()), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\\.[ 	]*"), A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Tuple$pair, $andre_dietrich$parser_combinators$Combine$regex("[ 	]*-?\\d+")))), $author$project$Lia$Parser$Indentation$push("   "))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$footnotes() {
        return $andre_dietrich$parser_combinators$Combine$skip($andre_dietrich$parser_combinators$Combine$many(A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newlines, $author$project$Lia$Markdown$Footnote$Parser$block($author$project$Lia$Markdown$Parser$cyclic$ident_blocks()))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$ident_blocks() {
        return A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$pop, $andre_dietrich$parser_combinators$Combine$many1(A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$regex("\n?"), $author$project$Lia$Markdown$Parser$cyclic$blocks())));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$blocks() {
        return $andre_dietrich$parser_combinators$Combine$lazy(function(_v10) {
            return A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$many(A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Effect$Parser$hidden_comment, $andre_dietrich$parser_combinators$Combine$whitespace)), A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Parser$cyclic$elements(), A2($andre_dietrich$parser_combinators$Combine$ignore, $andre_dietrich$parser_combinators$Combine$whitespace, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Macro$Parser$macro, A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Indentation$check, $author$project$Lia$Parser$Context$checkAbort)))));
        });
    }
    function $author$project$Lia$Markdown$Parser$cyclic$checkQuiz() {
        return A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$map($elm$core$Tuple$pair), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$andMap($author$project$Lia$Parser$Input$isIdentified), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Input$setPermission(false)), $andre_dietrich$parser_combinators$Combine$andThen($author$project$Lia$Markdown$Parser$toQuiz))));
    }
    function $author$project$Lia$Markdown$Parser$cyclic$svgbob() {
        return A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$map($author$project$Lia$Markdown$Types$ASCII), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$andMap(A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Parser$svgbobSub, A2($andre_dietrich$parser_combinators$Combine$andThen, $author$project$Lia$Markdown$Parser$svgbody, $author$project$Lia$Parser$Helper$c_frame))), A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Helper$spaces), $andre_dietrich$parser_combinators$Combine$ignore($author$project$Lia$Parser$Helper$newline))));
    }
    try {
        var $author$project$Lia$Markdown$Parser$elements = $author$project$Lia$Markdown$Parser$cyclic$elements();
        $author$project$Lia$Markdown$Parser$cyclic$elements = function() {
            return $author$project$Lia$Markdown$Parser$elements;
        };
        var $author$project$Lia$Markdown$Parser$unordered_list = $author$project$Lia$Markdown$Parser$cyclic$unordered_list();
        $author$project$Lia$Markdown$Parser$cyclic$unordered_list = function() {
            return $author$project$Lia$Markdown$Parser$unordered_list;
        };
        var $author$project$Lia$Markdown$Parser$solution = $author$project$Lia$Markdown$Parser$cyclic$solution();
        $author$project$Lia$Markdown$Parser$cyclic$solution = function() {
            return $author$project$Lia$Markdown$Parser$solution;
        };
        var $author$project$Lia$Markdown$Parser$run = $author$project$Lia$Markdown$Parser$cyclic$run();
        $author$project$Lia$Markdown$Parser$cyclic$run = function() {
            return $author$project$Lia$Markdown$Parser$run;
        };
        var $author$project$Lia$Markdown$Parser$quote = $author$project$Lia$Markdown$Parser$cyclic$quote();
        $author$project$Lia$Markdown$Parser$cyclic$quote = function() {
            return $author$project$Lia$Markdown$Parser$quote;
        };
        var $author$project$Lia$Markdown$Parser$ordered_list = $author$project$Lia$Markdown$Parser$cyclic$ordered_list();
        $author$project$Lia$Markdown$Parser$cyclic$ordered_list = function() {
            return $author$project$Lia$Markdown$Parser$ordered_list;
        };
        var $author$project$Lia$Markdown$Parser$footnotes = $author$project$Lia$Markdown$Parser$cyclic$footnotes();
        $author$project$Lia$Markdown$Parser$cyclic$footnotes = function() {
            return $author$project$Lia$Markdown$Parser$footnotes;
        };
        var $author$project$Lia$Markdown$Parser$ident_blocks = $author$project$Lia$Markdown$Parser$cyclic$ident_blocks();
        $author$project$Lia$Markdown$Parser$cyclic$ident_blocks = function() {
            return $author$project$Lia$Markdown$Parser$ident_blocks;
        };
        var $author$project$Lia$Markdown$Parser$blocks = $author$project$Lia$Markdown$Parser$cyclic$blocks();
        $author$project$Lia$Markdown$Parser$cyclic$blocks = function() {
            return $author$project$Lia$Markdown$Parser$blocks;
        };
        var $author$project$Lia$Markdown$Parser$checkQuiz = $author$project$Lia$Markdown$Parser$cyclic$checkQuiz();
        $author$project$Lia$Markdown$Parser$cyclic$checkQuiz = function() {
            return $author$project$Lia$Markdown$Parser$checkQuiz;
        };
        var $author$project$Lia$Markdown$Parser$svgbob = $author$project$Lia$Markdown$Parser$cyclic$svgbob();
        $author$project$Lia$Markdown$Parser$cyclic$svgbob = function() {
            return $author$project$Lia$Markdown$Parser$svgbob;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    elements\n  │     ↓\n  │    unordered_list\n  │     ↓\n  │    solution\n  │     ↓\n  │    run\n  │     ↓\n  │    quote\n  │     ↓\n  │    ordered_list\n  │     ↓\n  │    footnotes\n  │     ↓\n  │    ident_blocks\n  │     ↓\n  │    blocks\n  │     ↓\n  │    checkQuiz\n  │     ↓\n  │    svgbob\n  │     ↓\n  │    svgbobSub\n  │     ↓\n  │    toQuiz\n  │     ↓\n  │    toQuiz_\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Parser$Parser$parse_section = F3(function(search_index, global, sec) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Parser$run, $author$project$Lia$Definition$Parser$parse), A3($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Just(sec.seed), $elm$core$Maybe$Just(search_index), _Utils_update(global, {
            section: sec.id
        })), sec.code);
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var state = _v1.a;
            var es = _v1.c;
            return A3($author$project$Lia$Parser$Parser$return, sec, state, es);
        } else {
            var _v2 = _v0.a;
            var stream = _v2.b;
            var ms = _v2.c;
            return $elm$core$Result$Err(A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
        }
    });
    var $author$project$Lia$Update$set_active_section = F2(function(model, section) {
        return _Utils_update(model, {
            sections: A3($elm$core$Array$set, model.section_active, section, model.sections)
        });
    });
    var $author$project$Lia$Update$generate = function(model) {
        var _v0 = $author$project$Lia$Update$get_active_section(model);
        if (_v0.$ === "Just") {
            var sec = _v0.a;
            var section = function() {
                if (sec.parsed) {
                    var effects = sec.effect_model;
                    return _Utils_update(sec, {
                        effect_model: _Utils_update(effects, {
                            visible: 0
                        })
                    });
                } else {
                    var _v2 = A3($author$project$Lia$Parser$Parser$parse_section, model.search_index, model.definition, sec);
                    if (_v2.$ === "Ok") {
                        var new_sec = _v2.a;
                        return _Utils_update(new_sec, {
                            persistent: A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
                                return $.macro;
                            }, $author$project$Lia$Utils$checkPersistency), new_sec.definition)
                        });
                    } else {
                        var msg = _v2.a;
                        return _Utils_update(sec, {
                            body: _List_Nil,
                            error: $elm$core$Maybe$Just(msg)
                        });
                    }
                }
            }();
            var _v1 = A2($author$project$Lia$Model$loadResource, model.resource, A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function($) {
                return $.resources;
            }, section.definition)));
            var resource = _v1.a;
            var logs = _v1.b;
            return A2($author$project$Lia$Update$set_active_section, _Utils_update(model, {
                resource: resource,
                to_do: A4($author$project$Lia$Update$add_load, section.task_vector, model.section_active, "task", A4($author$project$Lia$Update$add_load, section.survey_vector, model.section_active, "survey", A4($author$project$Lia$Update$add_load, section.code_model.evaluate, model.section_active, "code", A4($author$project$Lia$Update$add_load, section.quiz_vector, model.section_active, "quiz", A2($elm$core$List$append, logs, model.to_do)))))
            }), section);
        } else return model;
    };
    var $author$project$Lia$Chat$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Chat$Update$handle = $author$project$Lia$Chat$Update$Handle;
    var $author$project$Lia$Markdown$Update$UpdateCode = function(a) {
        return {
            $: "UpdateCode",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$UpdateEffect = F2(function(a, b) {
        return {
            $: "UpdateEffect",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Update$UpdateGallery = function(a) {
        return {
            $: "UpdateGallery",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$UpdateQuiz = function(a) {
        return {
            $: "UpdateQuiz",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$UpdateSurvey = function(a) {
        return {
            $: "UpdateSurvey",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$UpdateTable = function(a) {
        return {
            $: "UpdateTable",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$UpdateTask = function(a) {
        return {
            $: "UpdateTask",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$handle = $author$project$Lia$Markdown$Code$Update$Handle;
    var $author$project$Lia$Markdown$Effect$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Update$handle = $author$project$Lia$Markdown$Effect$Update$Handle;
    var $author$project$Lia$Markdown$Gallery$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Gallery$Update$handle = $author$project$Lia$Markdown$Gallery$Update$Handle;
    var $author$project$Lia$Markdown$Quiz$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Update$handle = $author$project$Lia$Markdown$Quiz$Update$Handle;
    var $author$project$Lia$Markdown$Survey$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Update$handle = $author$project$Lia$Markdown$Survey$Update$Handle;
    var $author$project$Lia$Markdown$Table$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Table$Update$handle = $author$project$Lia$Markdown$Table$Update$Handle;
    var $author$project$Lia$Markdown$Task$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Task$Update$handle = $author$project$Lia$Markdown$Task$Update$Handle;
    var $author$project$Lia$Markdown$Update$NoOp = {
        $: "NoOp"
    };
    var $author$project$Lia$Markdown$Footnote$View$by = $elm$core$Basics$append("footnote-");
    var $author$project$Lia$Markdown$Footnote$View$byKey = A2($elm$core$Basics$composeR, $elm$core$Basics$append("key-"), $author$project$Lia$Markdown$Footnote$View$by);
    var $elm$core$Task$onError = _Scheduler_onError;
    var $elm$core$Task$attempt = F2(function(resultToMessage, task) {
        return $elm$core$Task$command($elm$core$Task$Perform(A2($elm$core$Task$onError, A2($elm$core$Basics$composeL, A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage), $elm$core$Result$Err), A2($elm$core$Task$andThen, A2($elm$core$Basics$composeL, A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage), $elm$core$Result$Ok), task))));
    });
    var $elm$browser$Browser$Dom$focus = _Browser_call("focus");
    var $author$project$Lia$Utils$focus = function(msg) {
        return A2($elm$core$Basics$composeR, $elm$browser$Browser$Dom$focus, $elm$core$Task$attempt($elm$core$Basics$always(msg)));
    };
    var $author$project$Lia$Sync$Types$isConnected = function(state) {
        if (state.$ === "Connected") return true;
        else return false;
    };
    var $author$project$Return$mapCmd = F2(function(fn, _v0) {
        var value = _v0.value;
        var command = _v0.command;
        var sub = _v0.sub;
        var events = _v0.events;
        return {
            command: A2($elm$core$Platform$Cmd$map, fn, command),
            events: events,
            sub: sub,
            value: value
        };
    });
    var $author$project$Return$upgrade = F2(function(topic, id) {
        return $elm$core$List$map(A2($author$project$Service$Event$pushWithId, topic, id));
    });
    var $author$project$Return$mapEvents = F3(function(topic, id, r) {
        return _Utils_update(r, {
            events: A3($author$project$Return$upgrade, topic, id, r.events)
        });
    });
    var $author$project$Return$mapVal = F2(function(fn, _v0) {
        var value = _v0.value;
        var command = _v0.command;
        var events = _v0.events;
        var sub = _v0.sub;
        return {
            command: command,
            events: events,
            sub: sub,
            value: fn(value)
        };
    });
    var $author$project$Return$mapValCmd = F3(function(fnVal, fnMsg, _v0) {
        var value = _v0.value;
        var command = _v0.command;
        var sub = _v0.sub;
        var events = _v0.events;
        return {
            command: A2($elm$core$Platform$Cmd$map, fnMsg, command),
            events: events,
            sub: sub,
            value: fnVal(value)
        };
    });
    var $author$project$Return$script = F2(function(s, r) {
        return _Utils_update(r, {
            sub: $elm$core$Maybe$Just(s)
        });
    });
    var $author$project$Lia$Section$SubSection = function(a) {
        return {
            $: "SubSection",
            a: a
        };
    };
    var $author$project$Lia$Section$SubSubSection = function(a) {
        return {
            $: "SubSubSection",
            a: a
        };
    };
    var $author$project$Service$Event$decMessage = A3($elm$json$Json$Decode$map2, F2(function(c, p) {
        return {
            cmd: c,
            param: p
        };
    }), A2($elm$json$Json$Decode$field, "cmd", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "param", $elm$json$Json$Decode$value));
    var $elm$json$Json$Decode$index = _Json_decodeIndex;
    var $author$project$Service$Event$decPoint = A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $author$project$Service$Event$decode = $elm$json$Json$Decode$decodeValue(A5($elm$json$Json$Decode$map4, $author$project$Service$Event$Event, A2($elm$json$Json$Decode$field, "reply", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "track", $elm$json$Json$Decode$list($author$project$Service$Event$decPoint)), A2($elm$json$Json$Decode$field, "service", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "message", $author$project$Service$Event$decMessage)));
    var $author$project$Service$Event$pop = function(event) {
        var _v0 = event.track;
        if (_v0.b) {
            var _v1 = _v0.a;
            var po = _v1.a;
            var track = _v0.b;
            return _Utils_Tuple2($elm$core$Maybe$Just(po), _Utils_update(event, {
                track: track
            }));
        } else return _Utils_Tuple2($elm$core$Maybe$Nothing, event);
    };
    var $author$project$Lia$Markdown$Code$Update$clr = function(project) {
        var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var code = _v1.a;
            return _Utils_update(project, {
                log: $author$project$Lia$Markdown$Code$Log$empty,
                version: A3($elm$core$Array$set, project.version_active, _Utils_Tuple2(code, $author$project$Lia$Markdown$Code$Log$empty), project.version)
            });
        } else return project;
    };
    var $author$project$Service$Sync$publish = F2(function(cmd, message) {
        return A2($author$project$Service$Event$init, "sync", {
            cmd: cmd,
            param: message
        });
    });
    var $author$project$Service$Sync$code = F3(function(id1, id2, msg) {
        return A3($author$project$Service$Event$pushWithId, "id", id1, A2($author$project$Service$Sync$publish, "code", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("j", $elm$json$Json$Encode$int(id2)),
            _Utils_Tuple2("msg", msg)
        ]))));
    });
    var $author$project$Lia$Markdown$Code$Update$copyToClipboard = _Platform_outgoingPort("copyToClipboard", $elm$json$Json$Encode$string);
    var $author$project$Service$Sync$cursor = F3(function(id1, id2, msg) {
        return A2($author$project$Service$Event$push, "cursor", A2($author$project$Service$Sync$publish, "cursor", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("project", $elm$json$Json$Encode$int(id1)),
            _Utils_Tuple2("file", $elm$json$Json$Encode$int(id2)),
            _Utils_Tuple2("state", msg)
        ]))));
    });
    var $author$project$Service$Script$decoder = A4($elm$json$Json$Decode$map3, $author$project$Service$Script$Eval, A2($elm$json$Json$Decode$field, "ok", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "result", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "details", $elm$json$Json$Decode$list($elm$json$Json$Decode$value)));
    var $author$project$Service$Script$decode = function(json) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Service$Script$decoder, json);
        if (_v0.$ === "Ok") {
            var result = _v0.a;
            return result;
        } else {
            var info = _v0.a;
            return A3($author$project$Service$Script$Eval, false, $elm$json$Json$Decode$errorToString(info), _List_Nil);
        }
    };
    var $author$project$Service$Event$message = function(event) {
        return _Utils_Tuple2(event.message.cmd, event.message.param);
    };
    var $author$project$Service$Event$poi = A2($elm$core$Basics$composeR, function($) {
        return $.track;
    }, $elm$core$List$head);
    var $author$project$Service$Event$destructure = function(event) {
        var _v0 = $author$project$Service$Event$poi(event);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var po = _v1.a;
            var i = _v1.b;
            return _Utils_Tuple3($elm$core$Maybe$Just(po), i, $author$project$Service$Event$message(event));
        } else return _Utils_Tuple3($elm$core$Maybe$Nothing, -1, $author$project$Service$Event$message(event));
    };
    var $author$project$Service$Sync$codes = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$array($elm$json$Json$Encode$array($elm$json$Json$Encode$string)), $author$project$Service$Sync$publish("codes"));
    var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
    var $elm$core$Array$indexedMap = F2(function(func, _v0) {
        var len = _v0.a;
        var tree = _v0.c;
        var tail = _v0.d;
        var initialBuilder = {
            nodeList: _List_Nil,
            nodeListSize: 0,
            tail: A3($elm$core$Elm$JsArray$indexedMap, func, $elm$core$Array$tailIndex(len), tail)
        };
        var helper = F2(function(node, builder) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
            } else {
                var leaf = node.a;
                var offset = builder.nodeListSize * $elm$core$Array$branchFactor;
                var mappedLeaf = $elm$core$Array$Leaf(A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
                return {
                    nodeList: A2($elm$core$List$cons, mappedLeaf, builder.nodeList),
                    nodeListSize: builder.nodeListSize + 1,
                    tail: builder.tail
                };
            }
        });
        return A2($elm$core$Array$builderToArray, true, A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
    });
    var $author$project$Lia$Markdown$Code$Types$loadVersion = F2(function(idx, project) {
        var _v0 = A2($elm$core$Array$get, idx, project.version);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var hashes = _v1.a;
            var log = _v1.b;
            var get = function(h) {
                return A2($elm$core$Dict$get, h, project.repository);
            };
            var code = $elm$core$Array$fromList(A2($elm$core$List$map, get, hashes));
            return _Utils_update(project, {
                file: A2($elm$core$Array$indexedMap, F2(function(i, a) {
                    return _Utils_update(a, {
                        code: function() {
                            var _v2 = A2($elm$core$Array$get, i, code);
                            if (_v2.$ === "Just" && _v2.a.$ === "Just") {
                                var str = _v2.a.a;
                                return str;
                            } else return a.code;
                        }()
                    });
                }), project.file),
                log: log,
                version_active: idx
            });
        } else return project;
    });
    var $author$project$Lia$Markdown$Code$Sync$sync = function(project) {
        return A2($elm$core$Array$map, function($) {
            return $.code;
        }, A2($author$project$Lia$Markdown$Code$Types$loadVersion, 0, project).file);
    };
    var $author$project$Lia$Markdown$Code$Update$doSync = F3(function(sync, sectionID, ret) {
        var _v0 = _Utils_Tuple2(sectionID, $elm$core$Array$length(sync));
        if (_v0.a.$ === "Just" && !_v0.b) return A2($author$project$Return$batchEvent, $author$project$Service$Sync$codes(A2($elm$core$Array$map, $author$project$Lia$Markdown$Code$Sync$sync, ret.value.evaluate)), ret);
        else return ret;
    });
    var $author$project$Service$Script$replace_ = F2(function(pattern, replacement) {
        return A2($elm$core$Basics$composeR, A2($elm$core$String$replace, "@'input" + pattern, $author$project$Lia$Utils$toEscapeString(replacement)), A2($elm$core$String$replace, "@input" + pattern, replacement));
    });
    var $author$project$Service$Script$replace_input = F2(function(replacement, code) {
        return A3($author$project$Service$Script$replace_, "", replacement, code);
    });
    var $author$project$Service$Script$replace_inputID = F2(function(_v0, code) {
        var id = _v0.a;
        var replacement = _v0.b;
        return A3($author$project$Service$Script$replace_, "(" + ($elm$core$String$fromInt(id) + ")"), replacement, code);
    });
    var $author$project$Service$Script$replace_inputKey = F2(function(_v0, code) {
        var key = _v0.a;
        var replacement = _v0.b;
        return A3($author$project$Service$Script$replace_, "(`" + (key + "`)"), replacement, code);
    });
    var $author$project$Service$Script$eval = F3(function(code, scripts, inputs) {
        var _default = A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(inputs));
        var code_ = A3($elm$core$List$foldl, $author$project$Service$Script$replace_inputKey, code, scripts);
        return A2($author$project$Service$Script$event, "eval", $elm$json$Json$Encode$string(A2($author$project$Service$Script$replace_input, _default, A3($elm$core$List$foldl, $author$project$Service$Script$replace_inputID, code_, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, inputs)))));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$outputs = A2($elm$core$Basics$composeR, $elm$core$Array$toList, $elm$core$List$filterMap(function(js) {
        var _v0 = _Utils_Tuple2(js.output, js.result);
        if (_v0.a.$ === "Just" && _v0.b.$ === "Just" && _v0.b.a.$ === "Text") {
            var output = _v0.a.a;
            var result = _v0.b.a.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(output, result));
        } else return $elm$core$Maybe$Nothing;
    }));
    var $author$project$Lia$Markdown$Code$Events$toProject = function(id) {
        return A2($author$project$Service$Event$pushWithId, "project", id);
    };
    var $author$project$Lia$Markdown$Code$Events$eval = F4(function(sync, projectID, scripts, project) {
        var files = project.syncMode ? A2($elm$core$Maybe$withDefault, $elm$core$Array$empty, A2($elm$core$Array$get, projectID, sync)) : A2($elm$core$Array$map, function($) {
            return $.code;
        }, project.file);
        return A2($author$project$Lia$Markdown$Code$Events$toProject, projectID, A3($author$project$Service$Script$eval, project.evaluation, $author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts), $elm$core$Array$toList(files)));
    });
    var $author$project$Return$Return = F4(function(value, command, events, sub) {
        return {
            command: command,
            events: events,
            sub: sub,
            value: value
        };
    });
    var $author$project$Return$val = function(model) {
        return A4($author$project$Return$Return, model, $elm$core$Platform$Cmd$none, _List_Nil, $elm$core$Maybe$Nothing);
    };
    var $author$project$Lia$Markdown$Code$Update$eval = F4(function(sync, id, scripts, project) {
        return A2($author$project$Return$batchEvent, A4($author$project$Lia$Markdown$Code$Events$eval, sync, id, scripts, project), $author$project$Return$val(project.syncMode ? _Utils_update(project, {
            running: true,
            syncLog: $author$project$Lia$Markdown$Code$Log$empty
        }) : _Utils_update(project, {
            log: $author$project$Lia$Markdown$Code$Log$empty,
            running: true
        })));
    });
    var $author$project$Return$replace = F2(function(r, m) {
        return A2($author$project$Return$mapVal, $elm$core$Basics$always(m), r);
    });
    var $author$project$Lia$Markdown$Code$Log$encLevel = function(level) {
        return $elm$json$Json$Encode$int(function() {
            switch(level.$){
                case "Debug":
                    return -1;
                case "Info":
                    return 0;
                case "Warn":
                    return 1;
                case "Error":
                    return 2;
                case "HTML":
                    return 3;
                default:
                    return 4;
            }
        }());
    };
    var $author$project$Lia$Markdown$Code$Log$encMessage = function(_v0) {
        var level = _v0.level;
        var text = _v0.text;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("level", $author$project$Lia$Markdown$Code$Log$encLevel(level)),
            _Utils_Tuple2("text", $elm$json$Json$Encode$string(text))
        ]));
    };
    var $author$project$Lia$Markdown$Code$Log$encode = function(log) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("ok", $elm$json$Json$Encode$bool(log.ok)),
            _Utils_Tuple2("level", $author$project$Lia$Markdown$Code$Log$encLevel(log.level)),
            _Utils_Tuple2("messages", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Log$encMessage, log.messages)),
            _Utils_Tuple2("details", A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, log.details))
        ]));
    };
    var $author$project$Lia$Markdown$Code$Json$fromFile = function(file) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("lang", $elm$json$Json$Encode$string(file.lang)),
            _Utils_Tuple2("name", $elm$json$Json$Encode$string(file.name)),
            _Utils_Tuple2("code", $elm$json$Json$Encode$string(file.code)),
            _Utils_Tuple2("visible", $elm$json$Json$Encode$bool(file.visible)),
            _Utils_Tuple2("fullscreen", $elm$json$Json$Encode$bool(file.fullscreen))
        ]));
    };
    var $author$project$Lia$Markdown$Code$Json$fromVersion = function(_v0) {
        var hashes = _v0.a;
        var log = _v0.b;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("hashes", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, hashes)),
            _Utils_Tuple2("log", $author$project$Lia$Markdown$Code$Log$encode(log))
        ]));
    };
    var $author$project$Service$Database$update = F4(function(table, id, sub, data) {
        return A2($author$project$Service$Database$event, "update", A3($author$project$Service$Database$record, table, id, $elm$core$Maybe$Just($elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("cmd", $elm$json$Json$Encode$string(sub.cmd)),
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(sub.id)),
            _Utils_Tuple2("data", data)
        ])))));
    });
    var $author$project$Lia$Markdown$Code$Events$update_ = F2(function(id, cmd) {
        return A2($elm$core$Basics$composeR, $elm$json$Json$Encode$object, A3($author$project$Service$Database$update, "code", id, cmd));
    });
    var $author$project$Lia$Markdown$Code$Events$updateAppend = F4(function(projectID, project, repo_update, sectionID) {
        return A3($author$project$Lia$Markdown$Code$Events$update_, sectionID, {
            cmd: "append",
            id: projectID
        }, _List_fromArray([
            _Utils_Tuple2("version_active", $elm$json$Json$Encode$int(project.version_active)),
            _Utils_Tuple2("log", $author$project$Lia$Markdown$Code$Log$encode(project.log)),
            _Utils_Tuple2("file", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, project.file)),
            _Utils_Tuple2("version", function() {
                var _v0 = A2($elm$core$Array$get, $elm$core$Array$length(project.version) - 1, project.version);
                if (_v0.$ === "Just") {
                    var version = _v0.a;
                    return $author$project$Lia$Markdown$Code$Json$fromVersion(version);
                } else return $elm$json$Json$Encode$null;
            }()),
            _Utils_Tuple2("repository", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, repo_update))
        ]));
    });
    var $elm$core$Dict$diff = F2(function(t1, t2) {
        return A3($elm$core$Dict$foldl, F3(function(k, v, t) {
            return A2($elm$core$Dict$remove, k, t);
        }), t1, t2);
    });
    var $author$project$Lia$Markdown$Code$Types$updateVersion = function(project) {
        var code = A2($elm$core$Array$map, function($) {
            return $.code;
        }, project.file);
        var hashes = $elm$core$Array$toList(A2($elm$core$Array$map, $truqu$elm_md5$MD5$hex, code));
        if (!project.syncMode && A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$Basics$neq(hashes), A2($elm$core$Maybe$map, $elm$core$Tuple$first, A2($elm$core$Array$get, project.version_active, project.version))))) {
            var repository = A2($elm$core$Dict$union, project.repository, $elm$core$Dict$fromList(A3($elm$core$List$map2, $elm$core$Tuple$pair, hashes, $elm$core$Array$toList(code))));
            return $elm$core$Maybe$Just(_Utils_Tuple2(_Utils_update(project, {
                log: $author$project$Lia$Markdown$Code$Log$empty,
                repository: repository,
                version: A2($elm$core$Array$push, _Utils_Tuple2(hashes, $author$project$Lia$Markdown$Code$Log$empty), project.version),
                version_active: $elm$core$Array$length(project.version)
            }), A2($elm$core$Dict$diff, repository, project.repository)));
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Code$Update$is_version_new = F3(function(sectionID, idx, _return) {
        var _v0 = _Utils_Tuple2(sectionID, $author$project$Lia$Markdown$Code$Types$updateVersion(_return.value));
        _v0$2: while(true)if (_v0.a.$ === "Just") {
            if (_v0.b.$ === "Just") {
                var sectionID_ = _v0.a.a;
                var _v1 = _v0.b.a;
                var new_project = _v1.a;
                var repo_update = _v1.b;
                return A2($author$project$Return$batchEvent, A4($author$project$Lia$Markdown$Code$Events$updateAppend, idx, new_project, repo_update, sectionID_), A2($author$project$Return$replace, _return, new_project));
            } else break _v0$2;
        } else {
            if (_v0.b.$ === "Just") {
                var _v2 = _v0.a;
                var _v3 = _v0.b.a;
                var new_project = _v3.a;
                return A2($author$project$Return$replace, _return, new_project);
            } else break _v0$2;
        }
        return _return;
    });
    var $author$project$Lia$Markdown$Code$Update$maybe_project = F2(function(idx, f) {
        return A2($elm$core$Basics$composeR, function($) {
            return $.evaluate;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$get(idx), $elm$core$Maybe$map(A2($elm$core$Basics$composeR, f, $author$project$Return$val))));
    });
    var $author$project$Lia$Markdown$Code$Update$maybe_update = F2(function(idx, model) {
        return A2($elm$core$Basics$composeR, $elm$core$Maybe$map($author$project$Return$mapVal(function(v) {
            return _Utils_update(model, {
                evaluate: A3($elm$core$Array$set, idx, v, model.evaluate)
            });
        })), $elm$core$Maybe$withDefault($author$project$Return$val(model)));
    });
    var $author$project$Lia$Markdown$Code$Update$execute = F5(function(sync, sectionID, scripts, model, id) {
        return A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
            return $.value;
        }, A2($author$project$Lia$Markdown$Code$Update$is_version_new, sectionID, id)), A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, A3($author$project$Lia$Markdown$Code$Update$eval, sync, id, scripts), model)));
    });
    var $author$project$Lia$Markdown$Code$Events$toggle = F2(function(file, value) {
        return _List_fromArray([
            _Utils_Tuple2("value", $elm$json$Json$Encode$bool(value)),
            _Utils_Tuple2("file_id", $elm$json$Json$Encode$int(file))
        ]);
    });
    var $author$project$Lia$Markdown$Code$Events$flip_view = F4(function(sectionID, projectID, fileID, file) {
        if (sectionID.$ === "Just") {
            var secID = sectionID.a;
            return _List_fromArray([
                A3($author$project$Lia$Markdown$Code$Events$update_, secID, {
                    cmd: "flip_view",
                    id: projectID
                }, A2($author$project$Lia$Markdown$Code$Events$toggle, fileID, file.visible))
            ]);
        } else return _List_Nil;
    });
    var $author$project$Lia$Markdown$Code$Update$update_file = F5(function(id_1, id_2, model, f, f_log) {
        var _v0 = A2($elm$core$Array$get, id_1, model.evaluate);
        if (_v0.$ === "Just") {
            var project = _v0.a;
            var _v1 = A2($elm$core$Maybe$map, f, A2($elm$core$Array$get, id_2, project.file));
            if (_v1.$ === "Just") {
                var file = _v1.a;
                return A2($author$project$Return$batchEvents, f_log(file), $author$project$Return$val(_Utils_update(model, {
                    evaluate: A3($elm$core$Array$set, id_1, _Utils_update(project, {
                        file: A3($elm$core$Array$set, id_2, file, project.file)
                    }), model.evaluate)
                })));
            } else return $author$project$Return$val(model);
        } else return $author$project$Return$val(model);
    });
    var $author$project$Lia$Markdown$Code$Update$flipEval = F4(function(sectionID, model, projectID, fileID) {
        return A5($author$project$Lia$Markdown$Code$Update$update_file, projectID, fileID, model, function(f) {
            return _Utils_update(f, {
                visible: !f.visible
            });
        }, A3($author$project$Lia$Markdown$Code$Events$flip_view, sectionID, projectID, fileID));
    });
    var $andre_dietrich$elm_conditional$Conditional$Array$setWhen = function(i) {
        return $andre_dietrich$elm_conditional$Conditional$apply2When($elm$core$Array$set(i));
    };
    var $author$project$Lia$Markdown$Code$Update$updateArray = F3(function(fn, i, array) {
        return A3($andre_dietrich$elm_conditional$Conditional$Array$setWhen, i, A2($elm$core$Maybe$map, fn, A2($elm$core$Array$get, i, array)), array);
    });
    var $author$project$Lia$Markdown$Code$Update$flipHigh = F3(function(model, id_1, id_2) {
        return $author$project$Return$val(_Utils_update(model, {
            highlight: A3($andre_dietrich$elm_conditional$Conditional$Array$setWhen, id_1, A2($elm$core$Maybe$map, function(pro) {
                return _Utils_update(pro, {
                    file: A3($author$project$Lia$Markdown$Code$Update$updateArray, function(f) {
                        return _Utils_update(f, {
                            visible: !f.visible
                        });
                    }, id_2, pro.file)
                });
            }, A2($elm$core$Array$get, id_1, model.highlight)), model.highlight)
        }));
    });
    var $author$project$Lia$Markdown$Code$Log$HTML = {
        $: "HTML"
    };
    var $author$project$Lia$Markdown$Code$Log$Warn = {
        $: "Warn"
    };
    var $author$project$Lia$Markdown$Code$Log$fromString = function(level) {
        switch(level){
            case "debug":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$Debug);
            case "info":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$Info);
            case "warn":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$Warn);
            case "error":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$Error);
            case "html":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$HTML);
            case "stream":
                return $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Log$Stream);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$Lia$Markdown$Code$Events$fullscreen = F4(function(sectionID, projectID, fileID, file) {
        if (sectionID.$ === "Just") {
            var secID = sectionID.a;
            return _List_fromArray([
                A3($author$project$Lia$Markdown$Code$Events$update_, secID, {
                    cmd: "flip_fullscreen",
                    id: projectID
                }, A2($author$project$Lia$Markdown$Code$Events$toggle, fileID, file.fullscreen))
            ]);
        } else return _List_Nil;
    });
    var $author$project$Lia$Markdown$Code$Terminal$Terminal = F3(function(input, history1, history_value) {
        return {
            history: history1,
            history_value: history_value,
            input: input
        };
    });
    var $author$project$Lia$Markdown$Code$Terminal$init = A3($author$project$Lia$Markdown$Code$Terminal$Terminal, "", $elm$core$Array$empty, 0);
    var $author$project$Service$Script$input = function(string) {
        return A2($author$project$Service$Script$event, "input", $elm$json$Json$Encode$string(string));
    };
    var $author$project$Lia$Markdown$Code$Events$input = F2(function(projectID, value) {
        return A2($author$project$Lia$Markdown$Code$Events$toProject, projectID, $author$project$Service$Script$input(value));
    });
    var $author$project$Lia$Markdown$Code$Update$isSyncModeActive = function(id) {
        return A2($elm$core$Basics$composeR, function($) {
            return $.evaluate;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$get(id), A2($elm$core$Basics$composeR, $elm$core$Maybe$map(function($) {
            return $.syncMode;
        }), $elm$core$Maybe$withDefault(false))));
    };
    var $author$project$Lia$Markdown$Code$Events$updateActive = F3(function(projectID, sectionID, _return) {
        if (sectionID.$ === "Just") {
            var section = sectionID.a;
            return A2($author$project$Return$batchEvent, A3($author$project$Lia$Markdown$Code$Events$update_, section, {
                cmd: "active",
                id: projectID
            }, _List_fromArray([
                _Utils_Tuple2("file", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, _return.value.file)),
                _Utils_Tuple2("version_active", $elm$json$Json$Encode$int(_return.value.version_active)),
                _Utils_Tuple2("log", $author$project$Lia$Markdown$Code$Log$encode(_return.value.log))
            ])), _return);
        } else return _return;
    });
    var $author$project$Lia$Markdown$Code$Update$load = F4(function(sectionID, model, id, version) {
        return A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A2($elm$core$Maybe$map, A2($author$project$Lia$Markdown$Code$Events$updateActive, id, sectionID), A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, $author$project$Lia$Markdown$Code$Types$loadVersion(version), model)));
    });
    var $author$project$Lia$Markdown$Code$Update$logger = F3(function(level, message, project) {
        var _v0 = _Utils_Tuple2(A2($elm$core$Maybe$map, $elm$core$Tuple$first, A2($elm$core$Array$get, project.version_active, project.version)), $author$project$Lia$Markdown$Code$Log$fromString(level));
        if (_v0.a.$ === "Just" && _v0.b.$ === "Just") {
            var code = _v0.a.a;
            var level_ = _v0.b.a;
            return _Utils_update(project, {
                log: A3($author$project$Lia$Markdown$Code$Log$add, level_, message, project.log),
                version: A3($elm$core$Array$set, project.version_active, _Utils_Tuple2(code, A3($author$project$Lia$Markdown$Code$Log$add, level_, message, project.log)), project.version)
            });
        } else return project;
    });
    var $author$project$Service$Event$empty = F2(function(service, command) {
        return A2($author$project$Service$Event$init, service, {
            cmd: command,
            param: $elm$json$Json$Encode$null
        });
    });
    var $author$project$Service$Event$none = A2($author$project$Service$Event$empty, "", "");
    var $author$project$Lia$Markdown$Code$Update$onResize = F3(function(id, height, code) {
        return A3($andre_dietrich$elm_conditional$Conditional$Array$setWhen, id, A2($elm$core$Maybe$map, function(pro) {
            return _Utils_update(pro, {
                logSize: $elm$core$Maybe$Just(height)
            });
        }, A2($elm$core$Array$get, id, code)), code);
    });
    var $author$project$Lia$Markdown$Code$Json$copy = F2(function(old, _new) {
        return _Utils_update(_new, {
            evaluation: old.evaluation
        });
    });
    var $author$project$Lia$Markdown$Code$Json$merge = F2(function(old, _new) {
        return _Utils_update(old, {
            evaluate: $elm$core$Array$fromList(A3($elm$core$List$map2, $author$project$Lia$Markdown$Code$Json$copy, $elm$core$Array$toList(old.evaluate), $elm$core$Array$toList(_new)))
        });
    });
    var $author$project$Lia$Markdown$Code$Json$fromProject = function(p) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("file", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromFile, p.file)),
            _Utils_Tuple2("version", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Json$fromVersion, p.version)),
            _Utils_Tuple2("version_active", $elm$json$Json$Encode$int(p.version_active)),
            _Utils_Tuple2("log", $author$project$Lia$Markdown$Code$Log$encode(p.log)),
            _Utils_Tuple2("repository", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, p.repository))
        ]));
    };
    var $author$project$Lia$Markdown$Code$Json$fromVector = $elm$json$Json$Encode$array($author$project$Lia$Markdown$Code$Json$fromProject);
    var $author$project$Service$Database$store = F3(function(table, id, data) {
        return A2($author$project$Service$Database$event, "store", A3($author$project$Service$Database$record, table, id, $elm$core$Maybe$Just(data)));
    });
    var $author$project$Lia$Markdown$Code$Events$store = F2(function(sectionID, model) {
        if (sectionID.$ === "Just") {
            var id = sectionID.a;
            return _List_fromArray([
                A3($author$project$Service$Database$store, "code", id, $author$project$Lia$Markdown$Code$Json$fromVector(model))
            ]);
        } else return _List_Nil;
    });
    var $elm$json$Json$Decode$array = _Json_decodeArray;
    var $elm$json$Json$Decode$nullable = function(decoder) {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
            A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
        ]));
    };
    var $author$project$Lia$Markdown$Code$Log$decLevel = A2($elm$json$Json$Decode$map, function(_int) {
        switch(_int){
            case 0:
                return $author$project$Lia$Markdown$Code$Log$Info;
            case 1:
                return $author$project$Lia$Markdown$Code$Log$Warn;
            case 2:
                return $author$project$Lia$Markdown$Code$Log$Error;
            case 3:
                return $author$project$Lia$Markdown$Code$Log$HTML;
            case 4:
                return $author$project$Lia$Markdown$Code$Log$Stream;
            default:
                return $author$project$Lia$Markdown$Code$Log$Debug;
        }
    }, $elm$json$Json$Decode$int);
    var $author$project$Lia$Markdown$Code$Log$decMessage = A3($elm$json$Json$Decode$map2, $author$project$Lia$Markdown$Code$Log$Message, A2($elm$json$Json$Decode$field, "level", $author$project$Lia$Markdown$Code$Log$decLevel), A2($elm$json$Json$Decode$field, "text", $elm$json$Json$Decode$string));
    var $author$project$Lia$Markdown$Code$Log$decoder = A5($elm$json$Json$Decode$map4, $author$project$Lia$Markdown$Code$Log$Log, A2($elm$json$Json$Decode$field, "ok", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "level", $author$project$Lia$Markdown$Code$Log$decLevel), A2($elm$json$Json$Decode$field, "messages", $elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Log$decMessage)), A2($elm$json$Json$Decode$field, "details", $elm$json$Json$Decode$list($elm$json$Json$Decode$value)));
    var $author$project$Lia$Markdown$Code$Types$Project = function(file) {
        return function(focus) {
            return function(version) {
                return function(version_active) {
                    return function(repository) {
                        return function(evaluation) {
                            return function(log) {
                                return function(logSize) {
                                    return function(running) {
                                        return function(terminal) {
                                            return function(syncMode) {
                                                return function(syncLog) {
                                                    return function(attr) {
                                                        return {
                                                            attr: attr,
                                                            evaluation: evaluation,
                                                            file: file,
                                                            focus: focus,
                                                            log: log,
                                                            logSize: logSize,
                                                            repository: repository,
                                                            running: running,
                                                            syncLog: syncLog,
                                                            syncMode: syncMode,
                                                            terminal: terminal,
                                                            version: version,
                                                            version_active: version_active
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Lia$Markdown$Code$Json$project = F5(function(files, version, active, log, repository) {
        return $author$project$Lia$Markdown$Code$Types$Project(files)(-1)(version)(active)(repository)("")(log)($elm$core$Maybe$Nothing)(false)($elm$core$Maybe$Nothing)(false)($author$project$Lia$Markdown$Code$Log$empty);
    });
    var $author$project$Lia$Markdown$Code$Json$toFile = A6($elm$json$Json$Decode$map5, $author$project$Lia$Markdown$Code$Types$File, A2($elm$json$Json$Decode$field, "lang", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "code", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "visible", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "fullscreen", $elm$json$Json$Decode$bool));
    var $author$project$Lia$Markdown$Code$Json$toVersion = A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "hashes", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "log", $author$project$Lia$Markdown$Code$Log$decoder));
    var $author$project$Lia$Markdown$Code$Json$toProject = A6($elm$json$Json$Decode$map5, $author$project$Lia$Markdown$Code$Json$project, A2($elm$json$Json$Decode$field, "file", $elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toFile)), A2($elm$json$Json$Decode$field, "version", $elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toVersion)), A2($elm$json$Json$Decode$field, "version_active", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "log", $author$project$Lia$Markdown$Code$Log$decoder), A2($elm$json$Json$Decode$field, "repository", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string)));
    var $author$project$Lia$Markdown$Code$Json$toVector = F2(function(json, attrs) {
        return A2($elm$core$Result$map, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$core$Array$toList, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, F2(function(a, p) {
            return p(a);
        }), attrs), $elm$core$Array$fromList))), A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$nullable($elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Json$toProject)), json));
    });
    var $author$project$Lia$Markdown$Code$Update$restore = F3(function(sectionID, json, model) {
        var _v0 = A2($author$project$Lia$Markdown$Code$Json$toVector, json, $elm$core$Array$toList(A2($elm$core$Array$map, function($) {
            return $.attr;
        }, model.evaluate)));
        if (_v0.$ === "Ok") {
            if (_v0.a.$ === "Just") {
                var vector = _v0.a.a;
                return $author$project$Return$val(A2($author$project$Lia$Markdown$Code$Json$merge, model, vector));
            } else {
                var _v1 = _v0.a;
                return A2($author$project$Return$batchEvents, $elm$core$Array$isEmpty(model.evaluate) ? _List_Nil : A2($author$project$Lia$Markdown$Code$Events$store, sectionID, model.evaluate), $author$project$Return$val(model));
            }
        } else return $author$project$Return$val(model);
    });
    var $author$project$Lia$Markdown$Code$Update$set_result = F2(function(e, project) {
        if (project.syncMode) return _Utils_update(project, {
            running: false,
            terminal: $elm$core$Maybe$Nothing
        });
        else {
            var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
            if (_v0.$ === "Just") {
                var _v1 = _v0.a;
                var code = _v1.a;
                return _Utils_update(project, {
                    log: A2($author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log),
                    running: false,
                    terminal: $elm$core$Maybe$Nothing,
                    version: A3($elm$core$Array$set, project.version_active, _Utils_Tuple2(code, A2($author$project$Lia$Markdown$Code$Log$add_Eval, e, project.log)), project.version)
                });
            } else return project;
        }
    });
    var $author$project$Service$Script$stop = A2($author$project$Service$Script$event, "stop", $elm$json$Json$Encode$null);
    var $author$project$Lia$Markdown$Code$Events$stop = function(projectID) {
        return A2($author$project$Lia$Markdown$Code$Events$toProject, projectID, $author$project$Service$Script$stop);
    };
    var $author$project$Lia$Markdown$Code$Update$stop = function(project) {
        var _v0 = A2($elm$core$Array$get, project.version_active, project.version);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var code = _v1.a;
            return _Utils_update(project, {
                running: false,
                terminal: $elm$core$Maybe$Nothing,
                version: project.syncMode ? project.version : A3($elm$core$Array$set, project.version_active, _Utils_Tuple2(code, project.log), project.version)
            });
        } else return project;
    };
    var $author$project$Lia$Markdown$Code$Events$updateVersion = F3(function(projectID, sectionID, _return) {
        if (sectionID.$ === "Just") {
            var section = sectionID.a;
            return A2($author$project$Return$batchEvent, A3($author$project$Lia$Markdown$Code$Events$update_, section, {
                cmd: "version",
                id: projectID
            }, _List_fromArray([
                _Utils_Tuple2("version_active", $elm$json$Json$Encode$int(_return.value.version_active)),
                _Utils_Tuple2("log", $author$project$Lia$Markdown$Code$Log$encode(_return.value.log)),
                _Utils_Tuple2("version", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Code$Json$fromVersion, A2($elm$core$Array$get, _return.value.version_active, _return.value.version))))
            ])), _return);
        } else return _return;
    });
    var $author$project$Lia$Markdown$Code$Terminal$print_to = function(terminal) {
        return A2($elm$core$Maybe$withDefault, true, A2($elm$core$Maybe$map, function(h) {
            return !_Utils_eq(h, terminal.input);
        }, A2($elm$core$Array$get, terminal.history_value, terminal.history))) && terminal.input !== "" ? _Utils_update(terminal, {
            history: A2($elm$core$Array$push, terminal.input, terminal.history),
            history_value: $elm$core$Array$length(terminal.history) + 1,
            input: ""
        }) : _Utils_update(terminal, {
            history_value: terminal.history_value + 1,
            input: ""
        });
    };
    var $author$project$Lia$Markdown$Code$Terminal$restore_input = F2(function(up, terminal) {
        var new_hist = up ? terminal.history_value - 1 : terminal.history_value + 1;
        var _v0 = A2($elm$core$Array$get, new_hist, terminal.history);
        if (_v0.$ === "Just") {
            var str = _v0.a;
            return _Utils_update(terminal, {
                history_value: new_hist,
                input: str
            });
        } else return terminal;
    });
    var $author$project$Lia$Markdown$Code$Terminal$update = F2(function(msg, terminal) {
        if (msg.$ === "KeyDown") {
            var key = msg.a;
            return key === 13 ? _Utils_Tuple2($author$project$Lia$Markdown$Code$Terminal$print_to(terminal), $elm$core$Maybe$Just(terminal.input + "\n")) : key === 38 ? _Utils_Tuple2(A2($author$project$Lia$Markdown$Code$Terminal$restore_input, true, terminal), $elm$core$Maybe$Nothing) : key === 40 ? _Utils_Tuple2(A2($author$project$Lia$Markdown$Code$Terminal$restore_input, false, terminal), $elm$core$Maybe$Nothing) : _Utils_Tuple2(terminal, $elm$core$Maybe$Nothing);
        } else {
            var str = msg.a;
            return _Utils_Tuple2(_Utils_update(terminal, {
                input: str
            }), $elm$core$Maybe$Nothing);
        }
    });
    var $author$project$Lia$Markdown$Code$Update$update_terminal = F2(function(msg, project) {
        var _v0 = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Code$Terminal$update(msg), project.terminal);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var terminal = _v1.a;
            var log = _v1.b;
            return _Utils_Tuple2(_Utils_update(project, {
                terminal: $elm$core$Maybe$Just(terminal)
            }), log);
        } else return _Utils_Tuple2(project, $elm$core$Maybe$Nothing);
    });
    var $author$project$Lia$Markdown$Code$Update$update = F5(function(sync, sectionID, scripts, msg, model) {
        switch(msg.$){
            case "Eval":
                var idx = msg.a;
                return A5($author$project$Lia$Markdown$Code$Update$execute, sync, sectionID, scripts, model, idx);
            case "Update":
                var id_1 = msg.a;
                var id_2 = msg.b;
                var code_str = msg.c;
                return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id_1, model) ? $author$project$Return$val(model) : A5($author$project$Lia$Markdown$Code$Update$update_file, id_1, id_2, model, function(f) {
                    return _Utils_update(f, {
                        code: code_str
                    });
                }, function(_v1) {
                    return _List_Nil;
                });
            case "FlipView":
                if (msg.a.$ === "Evaluate") {
                    var projectID = msg.a.a;
                    var fileID = msg.b;
                    return A4($author$project$Lia$Markdown$Code$Update$flipEval, sectionID, model, projectID, fileID);
                } else {
                    var projectID = msg.a.a;
                    var fileID = msg.b;
                    return A3($author$project$Lia$Markdown$Code$Update$flipHigh, model, projectID, fileID);
                }
            case "FlipFullscreen":
                if (msg.a.$ === "Highlight") {
                    var id_1 = msg.a.a;
                    var id_2 = msg.b;
                    return $author$project$Return$val(_Utils_update(model, {
                        highlight: A3($andre_dietrich$elm_conditional$Conditional$Array$setWhen, id_1, A2($elm$core$Maybe$map, function(pro) {
                            return _Utils_update(pro, {
                                file: A3($author$project$Lia$Markdown$Code$Update$updateArray, function(f) {
                                    return _Utils_update(f, {
                                        fullscreen: !f.fullscreen
                                    });
                                }, id_2, pro.file)
                            });
                        }, A2($elm$core$Array$get, id_1, model.highlight)), model.highlight)
                    }));
                } else {
                    var projectID = msg.a.a;
                    var fileID = msg.b;
                    return A5($author$project$Lia$Markdown$Code$Update$update_file, projectID, fileID, model, function(f) {
                        return _Utils_update(f, {
                            fullscreen: !f.fullscreen
                        });
                    }, A3($author$project$Lia$Markdown$Code$Events$fullscreen, sectionID, projectID, fileID));
                }
            case "Load":
                var idx = msg.a;
                var version = msg.b;
                return A4($author$project$Lia$Markdown$Code$Update$load, sectionID, model, idx, version);
            case "First":
                var idx = msg.a;
                return A4($author$project$Lia$Markdown$Code$Update$load, sectionID, model, idx, 0);
            case "Last":
                var projectID = msg.a;
                var version = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, function($) {
                    return $.value;
                }, A3($author$project$Lia$Markdown$Code$Update$maybe_project, projectID, A2($elm$core$Basics$composeR, function($) {
                    return $.version;
                }, A2($elm$core$Basics$composeR, $elm$core$Array$length, $elm$core$Basics$add(-1))), model)));
                return A4($author$project$Lia$Markdown$Code$Update$load, sectionID, model, projectID, version);
            case "Handle":
                var event = msg.a;
                var _v2 = $author$project$Service$Event$destructure(event);
                _v2$3: while(true)if (_v2.a.$ === "Nothing") {
                    if (_v2.c.a === "load") {
                        var _v3 = _v2.a;
                        var _v4 = _v2.c;
                        var param = _v4.b;
                        return A3($author$project$Lia$Markdown$Code$Update$doSync, sync, sectionID, A3($author$project$Lia$Markdown$Code$Update$restore, sectionID, param, model));
                    } else break _v2$3;
                } else {
                    if (_v2.a.a === "project") switch(_v2.c.a){
                        case "eval":
                            var id = _v2.b;
                            var _v5 = _v2.c;
                            var param = _v5.b;
                            var e = $author$project$Service$Script$decode(param);
                            var _v6 = e.result;
                            switch(_v6){
                                case "LIA: wait":
                                    return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id, model) ? A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, function(p) {
                                        return _Utils_update(p, {
                                            syncLog: $author$project$Lia$Markdown$Code$Log$empty
                                        });
                                    }, model)) : A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, function(p) {
                                        return _Utils_update(p, {
                                            log: $author$project$Lia$Markdown$Code$Log$empty
                                        });
                                    }, model));
                                case "LIA: stop":
                                    return A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A2($elm$core$Maybe$map, A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id, model) ? $elm$core$Basics$identity : A2($author$project$Lia$Markdown$Code$Events$updateVersion, id, sectionID), A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, $author$project$Lia$Markdown$Code$Update$stop, model)));
                                case "LIA: clear":
                                    return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id, model) ? A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, function(p) {
                                        return _Utils_update(p, {
                                            syncLog: $author$project$Lia$Markdown$Code$Log$empty
                                        });
                                    }, model)) : A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, $author$project$Lia$Markdown$Code$Update$clr, model));
                                case "LIA: terminal":
                                    return A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, function(p) {
                                        return _Utils_update(p, {
                                            terminal: $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Terminal$init)
                                        });
                                    }, model));
                                default:
                                    return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id, model) ? A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, A2($elm$core$Basics$composeR, function(p) {
                                        return _Utils_update(p, {
                                            syncLog: A2($author$project$Lia$Markdown$Code$Log$add_Eval, e, p.syncLog)
                                        });
                                    }, $author$project$Lia$Markdown$Code$Update$set_result(e)), model)) : A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A2($elm$core$Maybe$map, A2($author$project$Lia$Markdown$Code$Events$updateVersion, id, sectionID), A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, $author$project$Lia$Markdown$Code$Update$set_result(e), model)));
                            }
                        case "log":
                            var id = _v2.b;
                            var _v7 = _v2.c;
                            var param = _v7.b;
                            var _v8 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$list($elm$json$Json$Decode$string), param);
                            if (_v8.$ === "Ok" && _v8.a.b && _v8.a.b.b && !_v8.a.b.b.b) {
                                var _v9 = _v8.a;
                                var log = _v9.a;
                                var _v10 = _v9.b;
                                var message = _v10.a;
                                return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id, model) ? A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, function(p) {
                                    return _Utils_update(p, {
                                        syncLog: A3($author$project$Lia$Markdown$Code$Log$add, A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Code$Log$Info, $author$project$Lia$Markdown$Code$Log$fromString(log)), message, p.syncLog)
                                    });
                                }, model)) : A3($author$project$Lia$Markdown$Code$Update$maybe_update, id, model, A3($author$project$Lia$Markdown$Code$Update$maybe_project, id, A2($author$project$Lia$Markdown$Code$Update$logger, log, message), model));
                            } else return $author$project$Return$val(model);
                        default:
                            break _v2$3;
                    }
                    else break _v2$3;
                }
                return $author$project$Return$val(model);
            case "Stop":
                var idx = msg.a;
                return A3($author$project$Lia$Markdown$Code$Update$maybe_update, idx, model, A2($elm$core$Maybe$map, $author$project$Return$batchEvent($author$project$Lia$Markdown$Code$Events$stop(idx)), A3($author$project$Lia$Markdown$Code$Update$maybe_project, idx, function(p) {
                    return _Utils_update(p, {
                        running: false,
                        terminal: $elm$core$Maybe$Nothing
                    });
                }, model)));
            case "Resize":
                var code = msg.a;
                var height = msg.b;
                return $author$project$Return$val(function() {
                    if (code.$ === "Evaluate") {
                        var id = code.a;
                        return _Utils_update(model, {
                            evaluate: A3($author$project$Lia$Markdown$Code$Update$onResize, id, height, model.evaluate)
                        });
                    } else {
                        var id = code.a;
                        return _Utils_update(model, {
                            highlight: A3($author$project$Lia$Markdown$Code$Update$onResize, id, height, model.highlight)
                        });
                    }
                }());
            case "UpdateTerminal":
                var idx = msg.a;
                var childMsg = msg.b;
                var _v12 = A2($elm$core$Maybe$map, function($) {
                    return $.value;
                }, A3($author$project$Lia$Markdown$Code$Update$maybe_project, idx, $author$project$Lia$Markdown$Code$Update$update_terminal(childMsg), model));
                if (_v12.$ === "Just") {
                    if (_v12.a.b.$ === "Just") {
                        var _v13 = _v12.a;
                        var project = _v13.a;
                        var str = _v13.b.a;
                        return A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, idx, model) ? A3($author$project$Lia$Markdown$Code$Update$maybe_update, idx, model, $elm$core$Maybe$Just(A2($author$project$Return$batchEvent, A2($author$project$Lia$Markdown$Code$Events$input, idx, str), $author$project$Return$val(_Utils_update(project, {
                            syncLog: A3($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, str, project.syncLog)
                        }))))) : A3($author$project$Lia$Markdown$Code$Update$maybe_update, idx, model, $elm$core$Maybe$Just(A2($author$project$Return$batchEvent, A2($author$project$Lia$Markdown$Code$Events$input, idx, str), $author$project$Return$val(_Utils_update(project, {
                            log: A3($author$project$Lia$Markdown$Code$Log$add, $author$project$Lia$Markdown$Code$Log$Info, str, project.log)
                        })))));
                    } else {
                        var _v14 = _v12.a;
                        var project = _v14.a;
                        var _v15 = _v14.b;
                        return A3($author$project$Lia$Markdown$Code$Update$maybe_update, idx, model, $elm$core$Maybe$Just($author$project$Return$val(project)));
                    }
                } else return $author$project$Return$val(model);
            case "ToggleSync":
                var id = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    evaluate: A3($andre_dietrich$elm_conditional$Conditional$Array$setWhen, id, A2($elm$core$Maybe$map, function(pro) {
                        return _Utils_update(pro, {
                            syncMode: !pro.syncMode
                        });
                    }, A2($elm$core$Array$get, id, model.evaluate)), model.evaluate)
                }));
            case "Synchronize":
                var id1 = msg.a;
                var id2 = msg.b;
                var event = msg.c;
                return A2($author$project$Return$batchEvent, A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id1, model) ? A3($author$project$Service$Sync$code, id1, id2, event) : $author$project$Service$Event$none, $author$project$Return$val(model));
            case "SynchronizeCursor":
                var id1 = msg.a;
                var id2 = msg.b;
                var position = msg.c;
                return A2($author$project$Return$batchEvent, A2($author$project$Lia$Markdown$Code$Update$isSyncModeActive, id1, model) ? A3($author$project$Service$Sync$cursor, id1, id2, position) : $author$project$Service$Event$none, $author$project$Return$val(model));
            default:
                var project = msg.a;
                var file = msg.b;
                var code = function() {
                    if (project.$ === "Evaluate") {
                        var id = project.a;
                        return A2($elm$core$Maybe$withDefault, A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                            return $.code;
                        }, A2($elm$core$Maybe$andThen, $elm$core$Array$get(file), A2($elm$core$Maybe$map, function($) {
                            return $.file;
                        }, A2($elm$core$Array$get, id, model.evaluate))))), A2($elm$core$Maybe$andThen, $elm$core$Array$get(file), A2($elm$core$Array$get, id, sync)));
                    } else {
                        var id = project.a;
                        return A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                            return $.code;
                        }, A2($elm$core$Maybe$andThen, $elm$core$Array$get(file), A2($elm$core$Maybe$map, function($) {
                            return $.file;
                        }, A2($elm$core$Array$get, id, model.highlight)))));
                    }
                }();
                return A2($author$project$Return$cmd, $author$project$Lia$Markdown$Code$Update$copyToClipboard(code), $author$project$Return$val(model));
        }
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Update$Rendered = F2(function(a, b) {
        return {
            $: "Rendered",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Update$Send = function(a) {
        return {
            $: "Send",
            a: a
        };
    };
    var $author$project$Service$TTS$event = F2(function(cmd, message) {
        return A2($author$project$Service$Event$init, "tts", {
            cmd: cmd,
            param: message
        });
    });
    var $author$project$Service$TTS$cancel = A2($author$project$Service$TTS$event, "cancel", $elm$json$Json$Encode$null);
    var $author$project$Lia$Markdown$Effect$Model$current_comment = function(model) {
        var _v0 = A2($elm$core$Dict$get, model.visible, model.comments);
        if (_v0.$ === "Just") return $elm$core$Maybe$Just(model.visible);
        else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Service$TTS$BrowserTTS = function(a) {
        return {
            $: "BrowserTTS",
            a: a
        };
    };
    var $author$project$Service$TTS$Error = function(a) {
        return {
            $: "Error",
            a: a
        };
    };
    var $author$project$Service$TTS$ResponsiveVoiceTTS = function(a) {
        return {
            $: "ResponsiveVoiceTTS",
            a: a
        };
    };
    var $author$project$Service$TTS$Start = {
        $: "Start"
    };
    var $author$project$Service$TTS$Stop = {
        $: "Stop"
    };
    var $author$project$Service$TTS$decode = function(e) {
        var _v0 = e.service;
        if (_v0 === "tts") {
            var _v1 = e.message.cmd;
            switch(_v1){
                case "start":
                    return $author$project$Service$TTS$Start;
                case "stop":
                    return $author$project$Service$TTS$Stop;
                case "error":
                    var _v2 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, e.message.param);
                    if (_v2.$ === "Ok") {
                        var msg = _v2.a;
                        return $author$project$Service$TTS$Error(msg);
                    } else {
                        var msg = _v2.a;
                        return $author$project$Service$TTS$Error($elm$json$Json$Decode$errorToString(msg));
                    }
                case "browserTTS":
                    var _v3 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, e.message.param);
                    if (_v3.$ === "Ok") {
                        var support = _v3.a;
                        return $author$project$Service$TTS$BrowserTTS(support);
                    } else return $author$project$Service$TTS$BrowserTTS(false);
                case "responsiveVoiceTTS":
                    var _v4 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, e.message.param);
                    if (_v4.$ === "Ok") {
                        var support = _v4.a;
                        return $author$project$Service$TTS$ResponsiveVoiceTTS(support);
                    } else return $author$project$Service$TTS$ResponsiveVoiceTTS(false);
                default:
                    var unknown = _v1;
                    return $author$project$Service$TTS$Error("unknown cmd => " + unknown);
            }
        } else return $author$project$Service$TTS$Error("Wrong Service -> " + e.service);
    };
    var $author$project$Lia$Markdown$Effect$Script$Update$execute = F2(function(delay, _v0) {
        var id = _v0.a;
        var worker = _v0.b;
        var code = _v0.c;
        return A3($author$project$Service$Event$pushWithId, "script", id, A3($author$project$Service$Script$exec, delay, worker, code));
    });
    var $elm$core$Array$toIndexedList = function(array) {
        var len = array.a;
        var helper = F2(function(entry, _v0) {
            var index = _v0.a;
            var list = _v0.b;
            return _Utils_Tuple2(index - 1, A2($elm$core$List$cons, _Utils_Tuple2(index, entry), list));
        });
        return A3($elm$core$Array$foldr, helper, _Utils_Tuple2(len - 1, _List_Nil), array).b;
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$filterMap = F2(function(filter, map) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$toIndexedList, A2($elm$core$Basics$composeR, $elm$core$List$filter(A2($elm$core$Basics$composeR, $elm$core$Tuple$second, filter)), $elm$core$List$map($elm$core$Tuple$mapSecond(map))));
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$getIdle = $author$project$Lia$Markdown$Effect$Script$Types$filterMap(function(js) {
        return !js.running && !js.block && !(js.runOnce && js.counter >= 1) && !_Utils_eq(js.input.type_, $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Button_(true)));
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$getValue = function(i) {
        return !_Utils_eq(i.type_, $elm$core$Maybe$Nothing) && !_Utils_eq(i.type_, $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Button_(true))) ? $elm$core$Maybe$Just(i.value) : $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$replaceInputs = function(javascript) {
        var inputs = $author$project$Lia$Markdown$Effect$Script$Types$outputs(javascript);
        return $elm$core$List$map(function(_v0) {
            var id = _v0.id;
            var worker = _v0.worker;
            var script = _v0.script;
            var input_ = _v0.input_;
            return _Utils_Tuple3(id, worker, function(code) {
                if (input_.$ === "Just") {
                    var str = input_.a;
                    return A2($author$project$Service$Script$replace_input, str, code);
                } else return code;
            }(A3($elm$core$List$foldl, $author$project$Service$Script$replace_inputKey, script, inputs)));
        });
    };
    var $author$project$Lia$Markdown$Effect$Script$Update$getAll = function(javascript) {
        return A2($author$project$Lia$Markdown$Effect$Script$Types$replaceInputs, javascript, A2($elm$core$List$map, function(_v0) {
            var id = _v0.a;
            var node = _v0.b;
            return {
                id: id,
                input_: $author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input),
                script: node.script,
                worker: node.worker
            };
        }, A2($author$project$Lia$Markdown$Effect$Script$Update$getIdle, $elm$core$Basics$identity, javascript)));
    };
    var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
    var $author$project$Lia$Markdown$Effect$Script$Update$getVisible = F2(function(visible, javascript) {
        return A2($author$project$Lia$Markdown$Effect$Script$Types$replaceInputs, javascript, A2($elm$core$List$filterMap, function(_v0) {
            var id = _v0.a;
            var node = _v0.b;
            return _Utils_eq(node.effect_id, visible) && !_Utils_eq(node.input.type_, $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Button_(true))) ? $elm$core$Maybe$Just({
                id: id,
                input_: $author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input),
                script: node.script,
                worker: node.worker
            }) : $elm$core$Maybe$Nothing;
        }, A2($author$project$Lia$Markdown$Effect$Script$Update$getIdle, $elm$core$Basics$identity, javascript)));
    });
    var $author$project$Lia$Markdown$Effect$Update$has_next = function(model) {
        return _Utils_cmp(model.visible, model.effects) < 0;
    };
    var $author$project$Lia$Markdown$Effect$Update$has_previous = function(model) {
        return model.visible > 0;
    };
    var $author$project$Service$Event$checkId = function(_v0) {
        var i = _v0.b;
        return i >= 0 ? $elm$core$Maybe$Just(i) : $elm$core$Maybe$Nothing;
    };
    var $author$project$Service$Event$id = A2($elm$core$Basics$composeR, $author$project$Service$Event$poi, $elm$core$Maybe$andThen($author$project$Service$Event$checkId));
    var $author$project$Lia$Markdown$Effect$Script$Types$set = F3(function(idx, fn, javascript) {
        var _v0 = A2($elm$core$Array$get, idx, javascript);
        if (_v0.$ === "Just") {
            var js = _v0.a;
            return A3($elm$core$Array$set, idx, fn(js), javascript);
        } else return javascript;
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$setRunning = F3(function(id, state, javascript) {
        return A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
            return _Utils_update(js, {
                running: state
            });
        }, javascript);
    });
    var $author$project$Lia$Markdown$Effect$Update$markRunning = function(_return) {
        return A2($author$project$Return$mapVal, function(model) {
            return _Utils_update(model, {
                javascript: A3($elm$core$List$foldl, F2(function(e, js) {
                    var _v0 = $author$project$Service$Event$id(e);
                    if (_v0.$ === "Just") {
                        var id = _v0.a;
                        return id < 0 ? js : A3($author$project$Lia$Markdown$Effect$Script$Update$setRunning, id, true, js);
                    } else return js;
                }), model.javascript, _return.events)
            });
        }, _return);
    };
    var $author$project$Service$TTS$readFrom = function(id) {
        return A2($author$project$Service$TTS$event, "read", $elm$json$Json$Encode$string("lia-tts-" + $elm$core$String$fromInt(id)));
    };
    var $author$project$Service$Slide$event = F2(function(cmd, message) {
        return $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "slide", {
            cmd: cmd,
            param: message
        }));
    });
    var $author$project$Service$Slide$scrollIntoView = F2(function(elementID, delay) {
        return A2($author$project$Service$Slide$event, "scroll_into_view", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$string(elementID)),
            _Utils_Tuple2("delay", $elm$json$Json$Encode$int(delay))
        ])));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$IFrame = function(a) {
        return {
            $: "IFrame",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$NoOp = {
        $: "NoOp"
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$Sub = F2(function(a, b) {
        return {
            $: "Sub",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$active = F2(function(bool, i) {
        return _Utils_update(i, {
            active: i.alwaysActive ? true : bool
        });
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$default = function(i) {
        return _Utils_update(i, {
            value: i._default
        });
    };
    var $author$project$Service$Event$encPoint = function(_v0) {
        var po = _v0.a;
        var i = _v0.b;
        return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_fromArray([
            $elm$json$Json$Encode$string(po),
            $elm$json$Json$Encode$int(i)
        ]));
    };
    var $author$project$Service$Event$encode = function(event) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("reply", $elm$json$Json$Encode$bool(event.reply)),
            _Utils_Tuple2("track", A2($elm$json$Json$Encode$list, $author$project$Service$Event$encPoint, event.track)),
            _Utils_Tuple2("service", $elm$json$Json$Encode$string(event.service)),
            _Utils_Tuple2("message", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("cmd", $elm$json$Json$Encode$string(event.message.cmd)),
                _Utils_Tuple2("param", event.message.param)
            ])))
        ]));
    };
    var $author$project$Service$Script$encode = function(_v0) {
        var ok = _v0.ok;
        var result = _v0.result;
        var details = _v0.details;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("ok", $elm$json$Json$Encode$bool(ok)),
            _Utils_Tuple2("result", $elm$json$Json$Encode$string(result)),
            _Utils_Tuple2("details", A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, details))
        ]));
    };
    var $author$project$Service$Script$evalDummy = function(result) {
        return A2($author$project$Service$Script$event, "exec", $author$project$Service$Script$encode(A3($author$project$Service$Script$Eval, true, result, _List_Nil)));
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$get = F2(function(fn, id) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$get(id), $elm$core$Maybe$map(fn));
    });
    var $author$project$Service$Event$popWithId = function(event) {
        var _v0 = event.track;
        if (_v0.b) {
            var _v1 = _v0.a;
            var po = _v1.a;
            var i = _v1.b;
            var track = _v0.b;
            return $elm$core$Maybe$Just(_Utils_Tuple3(po, i, _Utils_update(event, {
                track: track
            })));
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Effect$Script$Update$reRun = F4(function(fn, cmd, id, scripts) {
        var scripts_ = A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
            return fn(js.running ? _Utils_update(js, {
                update: true
            }) : js);
        }, scripts);
        var _v0 = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, id, scripts_);
        if (_v0.$ === "Just") {
            var node = _v0.a;
            return A2($author$project$Return$batchEvents, node.running || node.block ? _List_Nil : A2($elm$core$List$map, $author$project$Lia$Markdown$Effect$Script$Update$execute(0), A2($author$project$Lia$Markdown$Effect$Script$Types$replaceInputs, scripts, _List_fromArray([
                {
                    id: id,
                    input_: $author$project$Lia$Markdown$Effect$Script$Input$getValue(node.input),
                    script: node.script,
                    worker: node.worker
                }
            ]))), A2($author$project$Return$cmd, cmd, $author$project$Return$val(scripts_)));
        } else return $author$project$Return$val(scripts_);
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$scriptChildren = F2(function(output, javascript) {
        return A2($author$project$Lia$Markdown$Effect$Script$Types$replaceInputs, javascript, A2($elm$core$List$filterMap, function(_v0) {
            var i = _v0.a;
            var js = _v0.b;
            return !js.running && !js.block && A2($elm$core$List$member, output, js.inputs) ? $elm$core$Maybe$Just({
                id: i,
                input_: $author$project$Lia$Markdown$Effect$Script$Input$getValue(js.input),
                script: js.script,
                worker: js.worker
            }) : $elm$core$Maybe$Nothing;
        }, $elm$core$Array$toIndexedList(javascript)));
    });
    var $elm_community$list_extra$List$Extra$updateAt = F3(function(index, fn, list) {
        if (index < 0) return list;
        else {
            var tail = A2($elm$core$List$drop, index, list);
            if (tail.b) {
                var x = tail.a;
                var xs = tail.b;
                return _Utils_ap(A2($elm$core$List$take, index, list), A2($elm$core$List$cons, fn(x), xs));
            } else return list;
        }
    });
    var $elm_community$list_extra$List$Extra$setAt = F2(function(index, value) {
        return A2($elm_community$list_extra$List$Extra$updateAt, index, $elm$core$Basics$always(value));
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$decodeList = A2($elm$core$Basics$composeR, $elm$json$Json$Decode$decodeString($elm$json$Json$Decode$list($elm$json$Json$Decode$string)), $elm$core$Result$toMaybe);
    var $author$project$Lia$Markdown$Effect$Script$Input$encodeList = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$list($elm$json$Json$Encode$string), $elm$json$Json$Encode$encode(0));
    var $author$project$Lia$Markdown$Effect$Script$Input$toggle = F2(function(str, i) {
        return _Utils_update(i, {
            value: $author$project$Lia$Markdown$Effect$Script$Input$encodeList(function() {
                var _v0 = $author$project$Lia$Markdown$Effect$Script$Input$decodeList(i.value);
                if (_v0.$ === "Just") {
                    var list = _v0.a;
                    return A2($elm$core$List$member, str, list) ? A2($elm$core$List$filter, $elm$core$Basics$neq(str), list) : A2($elm$core$List$cons, str, list);
                } else return _List_Nil;
            }())
        });
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$updateChildren = function(output) {
        return $elm$core$Array$map(function(js) {
            return js.running && A2($elm$core$List$member, output, js.inputs) ? _Utils_update(js, {
                update: true
            }) : js;
        });
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$Error = function(a) {
        return {
            $: "Error",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$HTML = function(a) {
        return {
            $: "HTML",
            a: a
        };
    };
    var $author$project$Lia$Parser$Parser$parse_subsection = F3(function(globals, id, code) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, A2($andre_dietrich$parser_combinators$Combine$keep, $author$project$Lia$Markdown$Parser$run, $author$project$Lia$Definition$Parser$parse), A3($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, A2($elm$core$Maybe$withDefault, A2($author$project$Lia$Definition$Types$default, "", ""), globals)), $elm$core$String$trim(code) + "\n");
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var state = _v1.a;
            var es = _v1.c;
            return $elm$core$Result$Ok(function() {
                if (es.b && es.a.$ === "Paragraph" && !es.a.a.b && !es.b.b) {
                    var _v3 = es.a;
                    var sub = _v3.b;
                    return $author$project$Lia$Section$SubSubSection({
                        body: sub,
                        effect_model: state.effect_model,
                        error: $elm$core$Maybe$Nothing,
                        id: id
                    });
                } else return $author$project$Lia$Section$SubSection({
                    body: es,
                    code_model: state.code_model,
                    effect_model: state.effect_model,
                    error: $elm$core$Maybe$Nothing,
                    footnote2show: $elm$core$Maybe$Nothing,
                    footnotes: state.footnotes,
                    gallery_vector: state.gallery_vector,
                    id: id,
                    quiz_vector: state.quiz_vector,
                    survey_vector: state.survey_vector,
                    table_vector: state.table_vector,
                    task_vector: state.task_vector
                });
            }());
        } else {
            var _v4 = _v0.a;
            var stream = _v4.b;
            var ms = _v4.c;
            return $elm$core$Result$Err(A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
        }
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$eval_ = F5(function(async, defintion, id, e, js) {
        var waiting = e.result === "LIA: wait";
        return _Utils_update(js, {
            counter: js.counter + 1,
            result: waiting ? js.result : e.result === "LIA: stop" ? js.result : e.result === "LIA: clear" ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(function() {
                if (e.ok) {
                    if (A2($elm$core$String$startsWith, "HTML:", e.result)) return $author$project$Lia$Markdown$Effect$Script$Types$HTML(A2($elm$core$String$dropLeft, 5, e.result));
                    else {
                        if (A2($elm$core$String$startsWith, "LIASCRIPT:", e.result)) {
                            var _v0 = A3($author$project$Lia$Parser$Parser$parse_subsection, defintion, id, A2($elm$core$String$dropLeft, 10, e.result));
                            if (_v0.$ === "Ok") {
                                var rslt = _v0.a;
                                return $author$project$Lia$Markdown$Effect$Script$Types$IFrame(rslt);
                            } else {
                                var info = _v0.a;
                                return $author$project$Lia$Markdown$Effect$Script$Types$Error(info);
                            }
                        } else return $author$project$Lia$Markdown$Effect$Script$Types$Text(e.result);
                    }
                } else return $author$project$Lia$Markdown$Effect$Script$Types$Error(e.result);
            }()),
            running: async && e.result !== "LIA: stop" ? true : e.result === "LIA: stop" ? false : waiting
        });
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$update_ = F5(function(async, defintion, id, e, scripts) {
        var _v0 = A2($elm$core$Array$get, id, scripts);
        if (_v0.$ === "Just") {
            var js = _v0.a;
            var _new = A5($author$project$Lia$Markdown$Effect$Script$Update$eval_, async, defintion, id, $author$project$Service$Script$decode(e), js);
            return _Utils_Tuple2(!_Utils_eq(_new.result, js.result), A3($elm$core$Array$set, id, _new, scripts));
        } else return _Utils_Tuple2(false, scripts);
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$value = F2(function(str, i) {
        return _Utils_update(i, {
            value: str
        });
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$update = F3(function(main, msg, scripts) {
        switch(msg.$){
            case "Sub":
                var id = msg.a;
                var sub = msg.b;
                var _v1 = A2($elm$core$Maybe$andThen, function($) {
                    return $.result;
                }, A2($elm$core$Array$get, id, scripts));
                if (_v1.$ === "Just" && _v1.a.$ === "IFrame") {
                    var lia = _v1.a.a;
                    return A3($author$project$Return$mapEvents, "sub", id, A3($author$project$Return$mapValCmd, function(v) {
                        return A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(s) {
                            return _Utils_update(s, {
                                result: $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Types$IFrame(v))
                            });
                        }, scripts);
                    }, $author$project$Lia$Markdown$Effect$Script$Types$Sub(id), A3(main.update, scripts, sub, lia)));
                } else return $author$project$Return$val(scripts);
            case "Execute":
                var id = msg.a;
                var value = msg.b;
                var _v2 = A2($elm$core$Array$get, id, scripts);
                if (_v2.$ === "Just") {
                    var node = _v2.a;
                    return A3($author$project$Lia$Markdown$Effect$Script$Update$update, main, $author$project$Lia$Markdown$Effect$Script$Types$Handle(A3($author$project$Service$Event$pushWithId, "script", id, $author$project$Service$Script$evalDummy(value))), A3($elm$core$Array$set, id, _Utils_update(node, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, value, node.input),
                        updated: true
                    }), scripts));
                } else return $author$project$Return$val(scripts);
            case "Activate":
                var active = msg.a;
                var id = msg.b;
                var _v3 = A2($elm$core$Array$get, id, scripts);
                if (_v3.$ === "Just") {
                    var node = _v3.a;
                    return active ? A2($author$project$Return$cmd, A2($author$project$Lia$Utils$focus, $author$project$Lia$Markdown$Effect$Script$Types$NoOp, "lia-focus"), $author$project$Return$val(A3($elm$core$Array$set, id, _Utils_update(node, {
                        input: node.updated ? node.input : A2($author$project$Lia$Markdown$Effect$Script$Input$active, active, node.input),
                        updated: false
                    }), scripts))) : A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, function(js) {
                        return _Utils_update(js, {
                            input: node.updated ? js.input : A2($author$project$Lia$Markdown$Effect$Script$Input$active, active, js.input),
                            updated: false
                        });
                    }, $elm$core$Platform$Cmd$none, id, scripts);
                } else return $author$project$Return$val(scripts);
            case "Value":
                var id = msg.a;
                var exec = msg.b;
                var str = msg.c;
                return exec ? A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input)
                    });
                }, $elm$core$Platform$Cmd$none, id, scripts) : $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input)
                    });
                }, scripts));
            case "Checkbox":
                var id = msg.a;
                var exec = msg.b;
                var str = msg.c;
                return exec ? A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$toggle, str, js.input),
                        updated: true
                    });
                }, $elm$core$Platform$Cmd$none, id, scripts) : $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$toggle, str, js.input),
                        updated: true
                    });
                }, scripts));
            case "Radio":
                var id = msg.a;
                var exec = msg.b;
                var str = msg.c;
                return exec ? A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input),
                        updated: true
                    });
                }, $elm$core$Platform$Cmd$none, id, scripts) : $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$value, str, js.input),
                        updated: true
                    });
                }, scripts));
            case "Click":
                var id = msg.a;
                return A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, $elm$core$Basics$identity, $elm$core$Platform$Cmd$none, id, scripts);
            case "Reset":
                var id = msg.a;
                return A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, function(js) {
                    return _Utils_update(js, {
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$active, true, $author$project$Lia$Markdown$Effect$Script$Input$default(js.input))
                    });
                }, $elm$core$Platform$Cmd$none, id, scripts);
            case "NoOp":
                return $author$project$Return$val(scripts);
            case "Delay":
                var milliseconds = msg.a;
                var subMsg = msg.b;
                return A2($author$project$Return$cmd, A2($elm$core$Task$perform, $elm$core$Basics$always(subMsg), $elm$core$Process$sleep(milliseconds)), $author$project$Return$val(scripts));
            case "Edit":
                var bool = msg.a;
                var id = msg.b;
                var fn = function(js) {
                    return _Utils_update(js, {
                        edit: bool,
                        input: A2($author$project$Lia$Markdown$Effect$Script$Input$active, false, js.input)
                    });
                };
                return bool ? A2($author$project$Return$cmd, A2($author$project$Lia$Utils$focus, $author$project$Lia$Markdown$Effect$Script$Types$NoOp, "lia-focus"), $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, fn, scripts))) : A4($author$project$Lia$Markdown$Effect$Script$Update$reRun, fn, $elm$core$Platform$Cmd$none, id, scripts);
            case "EditCode":
                var id = msg.a;
                var str = msg.b;
                return $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
                    return _Utils_update(js, {
                        script: str
                    });
                }, scripts));
            case "EditParam":
                var id = msg.a;
                var subPattern = msg.b;
                var str = msg.c;
                return $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, id, function(js) {
                    return _Utils_update(js, {
                        script: A2($elm$core$String$join, subPattern, A3($elm_community$list_extra$List$Extra$setAt, 1, str, A2($elm$core$String$split, subPattern, js.script)))
                    });
                }, scripts));
            default:
                var event = msg.a;
                var _v4 = $author$project$Service$Event$destructure(event);
                _v4$3: while(true){
                    if (_v4.a.$ === "Just") switch(_v4.a.a){
                        case "script":
                            switch(_v4.c.a){
                                case "exec":
                                    var section = _v4.b;
                                    var _v5 = _v4.c;
                                    var param = _v5.b;
                                    var _v6 = A5($author$project$Lia$Markdown$Effect$Script$Update$update_, false, main.globals, section, param, scripts);
                                    var publish = _v6.a;
                                    var javascript = _v6.b;
                                    var node = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, section, javascript);
                                    var nodeUpdate = A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function($) {
                                        return $.update;
                                    }, node)) ? A2($author$project$Lia$Markdown$Effect$Script$Types$replaceInputs, javascript, A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(n) {
                                        return _List_fromArray([
                                            {
                                                id: section,
                                                input_: $author$project$Lia$Markdown$Effect$Script$Input$getValue(n.input),
                                                script: n.script,
                                                worker: n.worker
                                            }
                                        ]);
                                    }, node))) : _List_Nil;
                                    var _v7 = A2($elm$core$Maybe$andThen, function($) {
                                        return $.output;
                                    }, node);
                                    if (_v7.$ === "Nothing") return A2($author$project$Return$batchEvents, A2($elm$core$List$map, $author$project$Lia$Markdown$Effect$Script$Update$execute(0), nodeUpdate), $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, section, function(js) {
                                        return _Utils_update(js, {
                                            update: false
                                        });
                                    }, javascript)));
                                    else {
                                        var output = _v7.a;
                                        return A2($author$project$Return$batchEvents, publish ? A2($elm$core$List$map, $author$project$Lia$Markdown$Effect$Script$Update$execute(0), A2($elm$core$List$append, nodeUpdate, A2($author$project$Lia$Markdown$Effect$Script$Types$scriptChildren, output, javascript))) : _List_Nil, $author$project$Return$val(A3($author$project$Lia$Markdown$Effect$Script$Types$set, section, function(js) {
                                            return _Utils_update(js, {
                                                update: false
                                            });
                                        }, A2($author$project$Lia$Markdown$Effect$Script$Types$updateChildren, output, javascript))));
                                    }
                                case "async":
                                    var section = _v4.b;
                                    var _v8 = _v4.c;
                                    var param = _v8.b;
                                    var _v9 = A5($author$project$Lia$Markdown$Effect$Script$Update$update_, true, main.globals, section, param, scripts);
                                    var publish = _v9.a;
                                    var javascript = _v9.b;
                                    var node = A3($author$project$Lia$Markdown$Effect$Script$Types$get, $elm$core$Basics$identity, section, javascript);
                                    var _v10 = A2($elm$core$Maybe$andThen, function($) {
                                        return $.output;
                                    }, node);
                                    if (_v10.$ === "Nothing") return $author$project$Return$val(javascript);
                                    else {
                                        var output = _v10.a;
                                        return A2($author$project$Return$batchEvents, publish ? A2($elm$core$List$map, $author$project$Lia$Markdown$Effect$Script$Update$execute(0), A2($author$project$Lia$Markdown$Effect$Script$Types$scriptChildren, output, javascript)) : _List_Nil, $author$project$Return$val(A2($author$project$Lia$Markdown$Effect$Script$Types$updateChildren, output, javascript)));
                                    }
                                default:
                                    break _v4$3;
                            }
                        case "sub":
                            var section = _v4.b;
                            var _v11 = _v4.c;
                            var param = _v11.b;
                            var subParams = function() {
                                var _v13 = $author$project$Service$Event$popWithId(event);
                                if (_v13.$ === "Just" && _v13.a.a === "sub") {
                                    var _v14 = _v13.a;
                                    var e = _v14.c;
                                    return $author$project$Service$Event$encode(e);
                                } else return param;
                            }();
                            var _v12 = A2($elm$core$Maybe$andThen, function($) {
                                return $.result;
                            }, A2($elm$core$Array$get, section, scripts));
                            if (_v12.$ === "Just" && _v12.a.$ === "IFrame") {
                                var lia = _v12.a.a;
                                return A3($author$project$Return$mapEvents, "sub", section, A3($author$project$Return$mapValCmd, function(v) {
                                    return A3($author$project$Lia$Markdown$Effect$Script$Types$set, section, function(s) {
                                        return _Utils_update(s, {
                                            result: $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Types$IFrame(v))
                                        });
                                    }, scripts);
                                }, $author$project$Lia$Markdown$Effect$Script$Types$Sub(section), A3(main.handle, scripts, subParams, lia)));
                            } else return $author$project$Return$val(scripts);
                        default:
                            break _v4$3;
                    }
                    else break _v4$3;
                }
                return $author$project$Return$val(scripts);
        }
    });
    var $author$project$Service$Console$console = F2(function(cmd, message) {
        return $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "console", {
            cmd: cmd,
            param: $elm$json$Json$Encode$string(message)
        }));
    });
    var $author$project$Service$Console$warn = function(message) {
        return A2($author$project$Service$Console$console, "warn", message);
    };
    var $author$project$Lia$Markdown$Effect$Update$execute = F5(function(main, sound, run_all, delay, model) {
        var javascript = run_all ? $author$project$Lia$Markdown$Effect$Script$Update$getAll(model.javascript) : A2($author$project$Lia$Markdown$Effect$Script$Update$getVisible, model.visible, model.javascript);
        return A4($author$project$Lia$Markdown$Effect$Update$update, main, sound, $author$project$Lia$Markdown$Effect$Update$Send($elm$core$List$reverse(A2($elm$core$List$map, $author$project$Lia$Markdown$Effect$Script$Update$execute(delay), javascript))), model);
    });
    var $author$project$Lia$Markdown$Effect$Update$update = F4(function(main, sound, msg, model) {
        return $author$project$Lia$Markdown$Effect$Update$markRunning(function() {
            switch(msg.$){
                case "Init":
                    var run_all_javascript = msg.a;
                    return A2($author$project$Return$cmd, A2($elm$core$Task$perform, $author$project$Lia$Markdown$Effect$Update$Rendered(run_all_javascript), $elm$browser$Browser$Dom$getViewport), $author$project$Return$val(model));
                case "Next":
                    return $author$project$Lia$Markdown$Effect$Update$has_next(model) ? A5($author$project$Lia$Markdown$Effect$Update$execute, main, sound, false, 0, _Utils_update(model, {
                        visible: model.visible + 1
                    })) : $author$project$Return$val(model);
                case "Previous":
                    return $author$project$Lia$Markdown$Effect$Update$has_previous(model) ? A5($author$project$Lia$Markdown$Effect$Update$execute, main, sound, false, 0, _Utils_update(model, {
                        visible: model.visible - 1
                    })) : $author$project$Return$val(model);
                case "Mute":
                    var id = msg.a;
                    return A2($author$project$Return$batchEvent, A3($author$project$Service$Event$pushWithId, "playback", id, $author$project$Service$TTS$cancel), $author$project$Return$val(_Utils_update(model, {
                        speaking: $elm$core$Maybe$Nothing
                    })));
                case "Send":
                    var event = msg.a;
                    var events = A2($elm$core$List$cons, A2($author$project$Service$Slide$scrollIntoView, "focused", 350), A2($elm$core$List$cons, A2($author$project$Service$Slide$scrollIntoView, "lia-notes-active", 350), event));
                    return A2($author$project$Return$batchEvents, function() {
                        var _v1 = $author$project$Lia$Markdown$Effect$Model$current_comment(model);
                        if (_v1.$ === "Just") {
                            var id = _v1.a;
                            return sound ? A2($elm$core$List$cons, $author$project$Service$TTS$readFrom(id), events) : events;
                        } else return A2($elm$core$List$cons, $author$project$Service$TTS$cancel, events);
                    }(), $author$project$Return$val(model));
                case "Rendered":
                    var run_all_javascript = msg.a;
                    return A5($author$project$Lia$Markdown$Effect$Update$execute, main, sound, run_all_javascript, 0, model);
                case "Script":
                    var childMsg = msg.a;
                    return A3($author$project$Return$mapValCmd, function(v) {
                        return _Utils_update(model, {
                            javascript: v
                        });
                    }, $author$project$Lia$Markdown$Effect$Update$Script, A3($author$project$Lia$Markdown$Effect$Script$Update$update, main, childMsg, model.javascript));
                default:
                    var event = msg.a;
                    var _v2 = $author$project$Service$Event$destructure(event);
                    _v2$4: while(true)if (_v2.a.$ === "Nothing") {
                        var _v3 = _v2.a;
                        var _v4 = _v2.c;
                        var cmd = _v4.a;
                        var param = _v4.b;
                        var _v5 = $author$project$Service$TTS$decode(event);
                        switch(_v5.$){
                            case "Start":
                                return $author$project$Return$val(_Utils_update(model, {
                                    speaking: $elm$core$Maybe$Just(-1)
                                }));
                            case "Stop":
                                return $author$project$Return$val(_Utils_update(model, {
                                    speaking: $elm$core$Maybe$Nothing
                                }));
                            case "Error":
                                var info = _v5.a;
                                return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn(info), $author$project$Return$val(model));
                            default:
                                return $author$project$Return$val(model);
                        }
                    } else {
                        if (_v2.a.a === "playback") switch(_v2.c.a){
                            case "start":
                                var id = _v2.b;
                                var _v6 = _v2.c;
                                return $author$project$Return$val(_Utils_update(model, {
                                    speaking: $elm$core$Maybe$Just(id)
                                }));
                            case "stop":
                                var _v7 = _v2.c;
                                return $author$project$Return$val(_Utils_update(model, {
                                    speaking: $elm$core$Maybe$Nothing
                                }));
                            case "error":
                                var _v8 = _v2.c;
                                return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("effects: local playback error"), $author$project$Return$val(_Utils_update(model, {
                                    speaking: $elm$core$Maybe$Nothing
                                })));
                            default:
                                break _v2$4;
                        }
                        else break _v2$4;
                    }
                    return A3($author$project$Return$mapValCmd, function(v) {
                        return _Utils_update(model, {
                            javascript: v
                        });
                    }, $author$project$Lia$Markdown$Effect$Update$Script, A3($author$project$Lia$Markdown$Effect$Script$Update$update, main, $author$project$Lia$Markdown$Effect$Script$Types$Handle(event), model.javascript));
            }
        }());
    });
    var $author$project$Lia$Markdown$Quiz$Solution$ReSolved = {
        $: "ReSolved"
    };
    var $author$project$Lia$Markdown$Quiz$Solution$Solved = {
        $: "Solved"
    };
    var $author$project$Lia$Markdown$Quiz$Block$Types$comp = F3(function(id, quiz, state) {
        var _v0 = _Utils_Tuple3(id, quiz.solution, state);
        _v0$4: while(true)switch(_v0.b.$){
            case "Text":
                if (_v0.c.$ === "Text") {
                    var str1 = _v0.b.a;
                    var str2 = _v0.c.a;
                    return _Utils_eq(str1, str2);
                } else break _v0$4;
            case "Select":
                if (_v0.c.$ === "Select" && _v0.c.b.b && !_v0.c.b.b.b) {
                    var _v1 = _v0.b;
                    var list = _v1.b;
                    var _v2 = _v0.c;
                    var _v3 = _v2.b;
                    var i = _v3.a;
                    return !$elm$core$List$isEmpty(A2($elm$core$List$filter, $elm$core$Basics$eq(i), list));
                } else break _v0$4;
            default:
                if (_v0.a.$ === "Nothing") {
                    if (_v0.c.$ === "Drop" && _v0.c.c.b && !_v0.c.c.b.b) {
                        var _v4 = _v0.a;
                        var _v5 = _v0.b;
                        var list = _v5.c;
                        var _v6 = _v0.c;
                        var _v7 = _v6.c;
                        var i = _v7.a;
                        return !$elm$core$List$isEmpty(A2($elm$core$List$filter, $elm$core$Basics$eq(i), list));
                    } else break _v0$4;
                } else {
                    if (_v0.c.$ === "Drop" && _v0.c.c.b && _v0.c.c.b.b && !_v0.c.c.b.b.b) {
                        var i = _v0.a.a;
                        var _v8 = _v0.b;
                        var list = _v8.c;
                        var _v9 = _v0.c;
                        var _v10 = _v9.c;
                        var j = _v10.a;
                        var _v11 = _v10.b;
                        var k = _v11.a;
                        return _Utils_eq(i, j) ? !$elm$core$List$isEmpty(A2($elm$core$List$filter, $elm$core$Basics$eq(k), list)) : false;
                    } else break _v0$4;
                }
        }
        return false;
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Types$comp = F2(function(quiz, state) {
        var _v0 = _Utils_Tuple2(quiz.solution, state);
        _v0$2: while(true)if (_v0.a.$ === "SingleChoice") {
            if (_v0.b.$ === "SingleChoice") {
                var list1 = _v0.a.a;
                var list2 = _v0.b.a;
                return A2($elm$core$List$any, $elm$core$Basics$identity, list1) ? A2($elm$core$List$any, $elm$core$Basics$identity, A3($elm$core$List$map2, F2(function(l1, l2) {
                    return l1 && l2;
                }), list1, list2)) : A2($elm$core$List$all, $elm$core$Basics$not, list2);
            } else break _v0$2;
        } else {
            if (_v0.b.$ === "MultipleChoice") {
                var list1 = _v0.a.a;
                var list2 = _v0.b.a;
                return _Utils_eq(list1, list2);
            } else break _v0$2;
        }
        return false;
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$Types$comp2 = F2(function(quiz, state) {
        var list2 = $elm$core$Array$toList(state);
        var list1 = A2($elm$core$List$map, $author$project$Lia$Markdown$Quiz$Vector$Types$Quiz(_List_Nil), $elm$core$Array$toList(quiz.solution));
        return A3($elm$core$List$map2, $author$project$Lia$Markdown$Quiz$Vector$Types$comp, list1, list2);
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$Types$comp = F2(function(quiz, state) {
        return A2($elm$core$List$all, $elm$core$Basics$identity, A2($author$project$Lia$Markdown$Quiz$Matrix$Types$comp2, quiz, state));
    });
    var $author$project$Lia$Markdown$Quiz$Multi$Types$comp2 = F2(function(quiz, state) {
        var list2 = $elm$core$Array$toList(state);
        var list1 = A2($elm$core$List$map, $author$project$Lia$Markdown$Quiz$Block$Types$Quiz(_List_Nil), $elm$core$Array$toList(quiz.solution));
        return A2($elm$core$List$indexedMap, F2(function(i, _v0) {
            var x = _v0.a;
            var y = _v0.b;
            return A3($author$project$Lia$Markdown$Quiz$Block$Types$comp, $elm$core$Maybe$Just(i), x, y);
        }), A3($elm$core$List$map2, $elm$core$Tuple$pair, list1, list2));
    });
    var $author$project$Lia$Markdown$Quiz$Multi$Types$comp = function(quiz) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Quiz$Multi$Types$comp2(quiz), $elm$core$List$all($elm$core$Basics$identity));
    };
    var $author$project$Lia$Markdown$Quiz$Types$comp = F2(function(quiz, state) {
        return function() {
            var _v0 = _Utils_Tuple2(quiz, state);
            _v0$4: while(true)switch(_v0.a.$){
                case "Block_Type":
                    if (_v0.b.$ === "Block_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A3($author$project$Lia$Markdown$Quiz$Block$Types$comp, $elm$core$Maybe$Nothing, q, s);
                    } else break _v0$4;
                case "Multi_Type":
                    if (_v0.b.$ === "Multi_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A2($author$project$Lia$Markdown$Quiz$Multi$Types$comp, q, s);
                    } else break _v0$4;
                case "Vector_Type":
                    if (_v0.b.$ === "Vector_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A2($author$project$Lia$Markdown$Quiz$Vector$Types$comp, q, s);
                    } else break _v0$4;
                case "Matrix_Type":
                    if (_v0.b.$ === "Matrix_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A2($author$project$Lia$Markdown$Quiz$Matrix$Types$comp, q, s);
                    } else break _v0$4;
                default:
                    break _v0$4;
            }
            return false;
        }() ? $author$project$Lia$Markdown$Quiz$Solution$Solved : $author$project$Lia$Markdown$Quiz$Solution$Open;
    });
    var $author$project$Lia$Markdown$Quiz$Types$comp2 = F3(function(perform, quiz, state) {
        return perform ? $elm$core$Array$fromList(function() {
            var _v0 = _Utils_Tuple2(quiz, state);
            _v0$2: while(true)switch(_v0.a.$){
                case "Multi_Type":
                    if (_v0.b.$ === "Multi_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A2($author$project$Lia$Markdown$Quiz$Multi$Types$comp2, q, s);
                    } else break _v0$2;
                case "Matrix_Type":
                    if (_v0.b.$ === "Matrix_State") {
                        var q = _v0.a.a;
                        var s = _v0.b.a;
                        return A2($author$project$Lia$Markdown$Quiz$Matrix$Types$comp2, q, s);
                    } else break _v0$2;
                default:
                    break _v0$2;
            }
            return _List_Nil;
        }()) : $elm$core$Array$empty;
    });
    var $author$project$Lia$Markdown$Quiz$Types$toState = function(quiz) {
        switch(quiz.$){
            case "Generic_Type":
                return $author$project$Lia$Markdown$Quiz$Types$Generic_State;
            case "Block_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Block_State(q.solution);
            case "Multi_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Multi_State(q.solution);
            case "Vector_Type":
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Vector_State(q.solution);
            default:
                var q = quiz.a;
                return $author$project$Lia$Markdown$Quiz$Types$Matrix_State(q.solution);
        }
    };
    var $author$project$Lia$Markdown$Quiz$Update$isSolved = F3(function(solution, state, e) {
        var partiallySolved = function() {
            if (solution.$ === "Just") {
                var quiz = solution.a;
                return A3($author$project$Lia$Markdown$Quiz$Types$comp2, e.opt.showPartialSolution, quiz, e.state);
            } else return $elm$core$Array$empty;
        }();
        var _v0 = _Utils_Tuple2(e.opt.maxTrials, e.solved);
        _v0$2: while(true)if (_v0.a.$ === "Nothing") {
            if (_v0.b.$ === "Open") {
                var _v1 = _v0.a;
                var _v2 = _v0.b;
                return _Utils_update(e, {
                    error_msg: "",
                    partiallySolved: partiallySolved,
                    solved: state,
                    trial: e.trial + 1
                });
            } else break _v0$2;
        } else {
            if (_v0.b.$ === "Open") {
                var maxTrials = _v0.a.a;
                var _v3 = _v0.b;
                return _Utils_cmp(e.trial + 1, maxTrials) < 0 || _Utils_eq(state, $author$project$Lia$Markdown$Quiz$Solution$Solved) ? _Utils_update(e, {
                    error_msg: "",
                    partiallySolved: partiallySolved,
                    solved: state,
                    trial: e.trial + 1
                }) : _Utils_update(e, {
                    error_msg: "",
                    partiallySolved: partiallySolved,
                    solved: $author$project$Lia$Markdown$Quiz$Solution$ReSolved,
                    state: A2($elm$core$Maybe$withDefault, e.state, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Types$toState, solution)),
                    trial: e.trial + 1
                });
            } else break _v0$2;
        }
        return e;
    });
    var $author$project$Lia$Markdown$Quiz$Update$check = F2(function(solution, e) {
        return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Update$isSolved, $elm$core$Maybe$Just(solution), A2($author$project$Lia$Markdown$Quiz$Types$comp, solution, e.state), e));
    });
    var $author$project$Lia$Markdown$Quiz$Sync$encoder = function(state) {
        if (state.$ === "Just") {
            var i = state.a;
            return $elm$json$Json$Encode$int(i);
        } else return $elm$json$Json$Encode$null;
    };
    var $author$project$Service$Sync$quiz = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Service$Sync$publish("quiz"), A2($author$project$Service$Event$pushWithId, "id", id));
    };
    var $author$project$Lia$Markdown$Quiz$Sync$sync = function(quiz) {
        var _v0 = quiz.solved;
        switch(_v0.$){
            case "Solved":
                return $elm$core$Maybe$Just($elm$core$Maybe$Just(quiz.trial));
            case "ReSolved":
                return $elm$core$Maybe$Just($elm$core$Maybe$Nothing);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$Lia$Markdown$Quiz$Sync$event = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Quiz$Sync$sync, A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Quiz$Sync$encoder, $author$project$Service$Sync$quiz(id))), $elm$core$Maybe$withDefault($author$project$Service$Event$none)));
    };
    var $author$project$Lia$Markdown$Quiz$Update$doSync = F4(function(sync, sectionID, vectorID, ret) {
        if (!sync) return ret;
        else {
            var _v0 = _Utils_Tuple2(sectionID, vectorID);
            if (_v0.a.$ === "Nothing") {
                var _v1 = _v0.a;
                return ret;
            } else if (_v0.b.$ === "Nothing") {
                var _v2 = _v0.b;
                return A2($author$project$Return$batchEvents, A2($elm$core$List$indexedMap, $author$project$Lia$Markdown$Quiz$Sync$event, $elm$core$Array$toList(ret.value)), ret);
            } else {
                var id = _v0.b.a;
                return A2($author$project$Return$batchEvent, A2($elm$core$Maybe$withDefault, $author$project$Service$Event$none, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Sync$event(id), A2($elm$core$Array$get, id, ret.value))), ret);
            }
        }
    });
    var $author$project$Lia$Markdown$Quiz$Update$evalEventDecoder = function(json) {
        var _eval = $author$project$Service$Script$decode(json);
        return _eval.ok ? _eval.result === "true" ? A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Quiz$Update$isSolved, $elm$core$Maybe$Nothing, $author$project$Lia$Markdown$Quiz$Solution$Solved), $author$project$Return$val) : A2($elm$core$String$startsWith, "LIA:", _eval.result) ? $author$project$Return$val : A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$Quiz$Update$isSolved, $elm$core$Maybe$Nothing, $author$project$Lia$Markdown$Quiz$Solution$Open), $author$project$Return$val) : function(e) {
            return $author$project$Return$val(_Utils_update(e, {
                error_msg: _eval.result
            }));
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$Execute = F2(function(a, b) {
        return {
            $: "Execute",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$run = $author$project$Lia$Markdown$Effect$Script$Types$Execute;
    var $author$project$Lia$Markdown$Quiz$Block$Update$toString = F2(function(withQuotes, state) {
        _v0$3: while(true)switch(state.$){
            case "Text":
                var str = state.a;
                return withQuotes ? '"' + (str + '"') : str;
            case "Select":
                if (state.b.b && !state.b.b.b) {
                    var _v1 = state.b;
                    var i = _v1.a;
                    return $elm$core$String$fromInt(i);
                } else break _v0$3;
            default:
                if (state.c.b && !state.c.b.b) {
                    var _v2 = state.c;
                    var i = _v2.a;
                    return $elm$core$String$fromInt(i);
                } else break _v0$3;
        }
        return "-1";
    });
    var $elm_community$list_extra$List$Extra$findIndexHelp = F3(function(index, predicate, list) {
        findIndexHelp: while(true){
            if (!list.b) return $elm$core$Maybe$Nothing;
            else {
                var x = list.a;
                var xs = list.b;
                if (predicate(x)) return $elm$core$Maybe$Just(index);
                else {
                    var $temp$index = index + 1, $temp$predicate = predicate, $temp$list = xs;
                    index = $temp$index;
                    predicate = $temp$predicate;
                    list = $temp$list;
                    continue findIndexHelp;
                }
            }
        }
    });
    var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
    var $author$project$Lia$Markdown$Quiz$Vector$Update$toString = function(state) {
        if (state.$ === "SingleChoice") {
            var list = state.a;
            return $elm$core$String$fromInt(A2($elm$core$Maybe$withDefault, -1, A2($elm_community$list_extra$List$Extra$findIndex, $elm$core$Basics$identity, list)));
        } else {
            var values = state.a;
            return A2($elm$json$Json$Encode$encode, 0, A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, A2($elm$core$List$map, function(s) {
                return s ? 1 : 0;
            }, values)));
        }
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Update$toString = function(state) {
        return function(str) {
            return "[" + (str + "]");
        }(A2($elm$core$String$join, ",", A2($elm$core$List$map, $author$project$Lia$Markdown$Quiz$Vector$Update$toString, $elm$core$Array$toList(state))));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Update$toString = function(state) {
        return function(str) {
            return "[" + (str + "]");
        }(A2($elm$core$String$join, ",", A2($elm$core$List$map, $author$project$Lia$Markdown$Quiz$Block$Update$toString(true), $elm$core$Array$toList(state))));
    };
    var $author$project$Lia$Markdown$Quiz$Update$toString = function(state) {
        switch(state.$){
            case "Block_State":
                var b = state.a;
                return A2($author$project$Lia$Markdown$Quiz$Block$Update$toString, false, b);
            case "Multi_State":
                var b = state.a;
                return $author$project$Lia$Markdown$Quiz$Multi$Update$toString(b);
            case "Vector_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Vector$Update$toString(s);
            case "Matrix_State":
                var m = state.a;
                return $author$project$Lia$Markdown$Quiz$Matrix$Update$toString(m);
            default:
                return "";
        }
    };
    var $author$project$Lia$Markdown$Quiz$Update$execute = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Quiz$Update$toString, $author$project$Lia$Markdown$Effect$Script$Update$run(id));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Update$handle = $author$project$Lia$Markdown$Quiz$Multi$Update$Handle;
    var $author$project$Lia$Markdown$Quiz$Update$init = F2(function(fn, _return) {
        return A3($elm$core$Array$foldl, F2(function(state, ret) {
            var _v0 = state.scriptID;
            if (_v0.$ === "Just") {
                var id = _v0.a;
                return A2($author$project$Return$script, A2(fn, id, state), ret);
            } else return ret;
        }), _return, _return.value);
    });
    var $author$project$Lia$Markdown$Quiz$Update$merge = F2(function(map, v1) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$toList, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, map, $elm$core$Array$toList(v1)), $elm$core$Array$fromList));
    });
    var $author$project$Lia$Markdown$Quiz$Types$reset = function(state) {
        switch(state.$){
            case "Block_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Types$Block_State($author$project$Lia$Markdown$Quiz$Block$Types$initState(s));
            case "Multi_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Types$Multi_State($author$project$Lia$Markdown$Quiz$Multi$Types$initState(s));
            case "Vector_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Types$Vector_State($author$project$Lia$Markdown$Quiz$Vector$Types$initState(s));
            case "Matrix_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Types$Matrix_State($author$project$Lia$Markdown$Quiz$Matrix$Types$initState(s));
            default:
                return state;
        }
    };
    var $author$project$Lia$Markdown$Quiz$Update$mergeMap = F2(function(sID, body) {
        return _Utils_update(body, {
            opt: sID.opt,
            scriptID: sID.scriptID,
            state: function() {
                var _v0 = _Utils_Tuple2(sID.opt.randomize, body.solved);
                if (_v0.a.$ === "Just" && _v0.b.$ === "Open") {
                    var _v1 = _v0.b;
                    return $author$project$Lia$Markdown$Quiz$Types$reset(body.state);
                } else return body.state;
            }()
        });
    });
    var $author$project$Lia$Markdown$Quiz$Update$mergeHelper = $author$project$Lia$Markdown$Quiz$Update$merge($author$project$Lia$Markdown$Quiz$Update$mergeMap);
    var $author$project$Lia$Markdown$Quiz$Update$Block_Update = F2(function(a, b) {
        return {
            $: "Block_Update",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Quiz$Update$setState = F3(function(e, fn, state) {
        return _Utils_update(e, {
            state: fn(state)
        });
    });
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropExit = {
        $: "DropExit"
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$update = F2(function(msg, state) {
        var _v0 = _Utils_Tuple2(msg, state);
        _v0$11: while(true)switch(_v0.a.$){
            case "Choose":
                if (_v0.b.$ === "Select") {
                    var option = _v0.a.a;
                    var _v1 = _v0.b;
                    return $author$project$Return$val(A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, true, _List_fromArray([
                        option
                    ])));
                } else break _v0$11;
            case "Toggle":
                if (_v0.b.$ === "Select") {
                    var _v2 = _v0.a;
                    var _v3 = _v0.b;
                    var open = _v3.a;
                    var id = _v3.b;
                    return $author$project$Return$val(A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, !open, id));
                } else break _v0$11;
            case "Input":
                if (_v0.b.$ === "Text") {
                    var str = _v0.a.a;
                    return $author$project$Return$val($author$project$Lia$Markdown$Quiz$Block$Types$Text(str));
                } else break _v0$11;
            case "Script":
                var sub = _v0.a.a;
                return A2($author$project$Return$script, sub, $author$project$Return$val(state));
            case "DropStart":
                if (_v0.b.$ === "Drop") {
                    var _v4 = _v0.a;
                    var _v5 = _v0.b;
                    var allowed = _v5.a;
                    var value = _v5.c;
                    return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, allowed, true, value));
                } else break _v0$11;
            case "DropData":
                if (_v0.b.$ === "Drop") {
                    var id = _v0.a.a;
                    var _v6 = _v0.b;
                    var highlight = _v6.a;
                    var value = _v6.c;
                    return $author$project$Return$val(highlight ? A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, _List_fromArray([
                        id
                    ])) : !highlight && _Utils_eq(_List_fromArray([
                        id
                    ]), value) ? A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, _List_Nil) : A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, highlight, false, value));
                } else break _v0$11;
            case "DropEnter":
                if (_v0.a.a) {
                    if (_v0.b.$ === "Drop") {
                        var _v7 = _v0.b;
                        var active = _v7.b;
                        var value = _v7.c;
                        return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, true, active, value));
                    } else break _v0$11;
                } else return A2($author$project$Return$cmd, A2($elm$core$Task$attempt, $elm$core$Basics$always($author$project$Lia$Markdown$Quiz$Block$Update$DropExit), $elm$core$Process$sleep(1)), $author$project$Return$val(state));
            case "DropExit":
                if (_v0.b.$ === "Drop") {
                    var _v8 = _v0.a;
                    var _v9 = _v0.b;
                    var active = _v9.b;
                    var value = _v9.c;
                    return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, active, value));
                } else break _v0$11;
            case "DropTarget":
                if (_v0.b.$ === "Drop") {
                    var _v10 = _v0.a;
                    var _v11 = _v0.b;
                    var highlight = _v11.a;
                    return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, highlight, false, _List_Nil));
                } else break _v0$11;
            case "DropSource":
                if (_v0.b.$ === "Drop") {
                    var id = _v0.a.a;
                    var _v12 = _v0.b;
                    return $author$project$Return$val(A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, _List_fromArray([
                        id
                    ])));
                } else break _v0$11;
            default:
                break _v0$11;
        }
        return $author$project$Return$val(state);
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple = function(id) {
        return $elm$core$List$indexedMap(F2(function(i, value) {
            return _Utils_eq(i, id) ? !value : value;
        }));
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle = function(id) {
        return $elm$core$List$indexedMap(F2(function(i, value) {
            return _Utils_eq(i, id) ? !value : false;
        }));
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Update$toggle = F2(function(id, state) {
        if (state.$ === "SingleChoice") {
            var list = state.a;
            return $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice(A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleSingle, id, list));
        } else {
            var list = state.a;
            return $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice(A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggleMultiple, id, list));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$Update$update = F2(function(msg, state) {
        if (msg.$ === "Toggle") {
            var row_id = msg.a;
            var column_id = msg.b;
            return $author$project$Return$val(function() {
                var _v1 = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Quiz$Vector$Update$toggle(column_id), A2($elm$core$Array$get, row_id, state));
                if (_v1.$ === "Just") {
                    var row = _v1.a;
                    return A3($elm$core$Array$set, row_id, row, state);
                } else return state;
            }());
        } else {
            var sub = msg.a;
            return A2($author$project$Return$script, sub, $author$project$Return$val(state));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Vector$Update$update = F2(function(msg, state) {
        if (msg.$ === "Toggle") {
            var id = msg.a;
            return $author$project$Return$val(A2($author$project$Lia$Markdown$Quiz$Vector$Update$toggle, id, state));
        } else {
            var sub = msg.a;
            return A2($author$project$Return$script, sub, $author$project$Return$val(state));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Update$state_ = F3(function(i, msg, e) {
        var _v0 = _Utils_Tuple2(msg, e.state);
        _v0$3: while(true)switch(_v0.a.$){
            case "Block_Update":
                if (_v0.b.$ === "Block_State") {
                    var _v1 = _v0.a;
                    var m = _v1.b;
                    var s = _v0.b.a;
                    return A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Quiz$Update$Block_Update(i), A2($author$project$Return$mapVal, A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Block_State), A2($author$project$Lia$Markdown$Quiz$Block$Update$update, m, s)));
                } else break _v0$3;
            case "Vector_Update":
                if (_v0.b.$ === "Vector_State") {
                    var _v2 = _v0.a;
                    var m = _v2.b;
                    var s = _v0.b.a;
                    return A2($author$project$Return$mapVal, A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Vector_State), A2($author$project$Lia$Markdown$Quiz$Vector$Update$update, m, s));
                } else break _v0$3;
            case "Matrix_Update":
                if (_v0.b.$ === "Matrix_State") {
                    var _v3 = _v0.a;
                    var m = _v3.b;
                    var s = _v0.b.a;
                    return A2($author$project$Return$mapVal, A2($author$project$Lia$Markdown$Quiz$Update$setState, e, $author$project$Lia$Markdown$Quiz$Types$Matrix_State), A2($author$project$Lia$Markdown$Quiz$Matrix$Update$update, m, s));
                } else break _v0$3;
            default:
                break _v0$3;
        }
        return $author$project$Return$val(e);
    });
    var $author$project$Lia$Markdown$Quiz$Block$Json$fromState = function(state) {
        return $elm$json$Json$Encode$object(function() {
            switch(state.$){
                case "Text":
                    var x = state.a;
                    return _List_fromArray([
                        _Utils_Tuple2("Text", $elm$json$Json$Encode$string(x))
                    ]);
                case "Select":
                    if (state.b.b && !state.b.b.b) {
                        var _v1 = state.b;
                        var x = _v1.a;
                        return _List_fromArray([
                            _Utils_Tuple2("Select", $elm$json$Json$Encode$int(x))
                        ]);
                    } else return _List_fromArray([
                        _Utils_Tuple2("Select", $elm$json$Json$Encode$int(-1))
                    ]);
                default:
                    if (state.c.b && !state.c.b.b) {
                        var _v2 = state.c;
                        var x = _v2.a;
                        return _List_fromArray([
                            _Utils_Tuple2("Drop", $elm$json$Json$Encode$int(x))
                        ]);
                    } else return _List_fromArray([
                        _Utils_Tuple2("Drop", $elm$json$Json$Encode$int(-1))
                    ]);
            }
        }());
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Json$fromState = function(state) {
        return $elm$json$Json$Encode$object(function() {
            if (state.$ === "SingleChoice") {
                var list = state.a;
                return _List_fromArray([
                    _Utils_Tuple2("SingleChoice", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$bool, list))
                ]);
            } else {
                var list = state.a;
                return _List_fromArray([
                    _Utils_Tuple2("MultipleChoice", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$bool, list))
                ]);
            }
        }());
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Json$uid = "Matrix";
    var $author$project$Lia$Markdown$Quiz$Matrix$Json$fromState = function(state) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2($author$project$Lia$Markdown$Quiz$Matrix$Json$uid, A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Quiz$Vector$Json$fromState, state))
        ]));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Json$uid = "Multi";
    var $author$project$Lia$Markdown$Quiz$Multi$Json$fromState = function(state) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2($author$project$Lia$Markdown$Quiz$Multi$Json$uid, A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Quiz$Block$Json$fromState, state))
        ]));
    };
    var $author$project$Lia$Markdown$Quiz$Json$fromState = function(state) {
        switch(state.$){
            case "Generic_State":
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("Generic", $elm$json$Json$Encode$null)
                ]));
            case "Block_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Block$Json$fromState(s);
            case "Multi_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Multi$Json$fromState(s);
            case "Vector_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Vector$Json$fromState(s);
            default:
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Matrix$Json$fromState(s);
        }
    };
    var $author$project$Lia$Markdown$Quiz$Json$fromElement = function(element) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("solved", $elm$json$Json$Encode$int(function() {
                var _v0 = element.solved;
                switch(_v0.$){
                    case "Open":
                        return 0;
                    case "Solved":
                        return 1;
                    default:
                        return -1;
                }
            }())),
            _Utils_Tuple2("state", $author$project$Lia$Markdown$Quiz$Json$fromState(element.state)),
            _Utils_Tuple2("trial", $elm$json$Json$Encode$int(element.trial)),
            _Utils_Tuple2("hint", $elm$json$Json$Encode$int(element.hint)),
            _Utils_Tuple2("error_msg", $elm$json$Json$Encode$string(element.error_msg)),
            _Utils_Tuple2("score", $elm$json$Json$Encode$float(A2($elm$core$Maybe$withDefault, 1, element.opt.score)))
        ]));
    };
    var $author$project$Lia$Markdown$Quiz$Json$fromVector = $elm$json$Json$Encode$array($author$project$Lia$Markdown$Quiz$Json$fromElement);
    var $author$project$Lia$Markdown$Quiz$Update$store = F2(function(sectionID, _return) {
        if (sectionID.$ === "Just") {
            var id = sectionID.a;
            return A2($author$project$Return$batchEvent, A3($author$project$Service$Database$store, "quiz", id, $author$project$Lia$Markdown$Quiz$Json$fromVector(_return.value)), _return);
        } else return _return;
    });
    var $author$project$Lia$Markdown$Effect$Script$Update$submit = F2(function(scriptID, event) {
        return $author$project$Lia$Markdown$Effect$Script$Types$Handle(_Utils_update(event, {
            message: {
                cmd: "exec",
                param: event.message.param
            },
            service: "script",
            track: _List_fromArray([
                _Utils_Tuple2("script", scriptID)
            ])
        }));
    });
    var $author$project$Lia$Markdown$Quiz$Types$Element = F9(function(solved, state, trial, hint, error_msg, scriptID, opt, partiallySolved, isActive) {
        return {
            error_msg: error_msg,
            hint: hint,
            isActive: isActive,
            opt: opt,
            partiallySolved: partiallySolved,
            scriptID: scriptID,
            solved: solved,
            state: state,
            trial: trial
        };
    });
    var $author$project$Lia$Markdown$Quiz$Block$Json$toState = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Block$Types$Text, A2($elm$json$Json$Decode$field, "Text", $elm$json$Json$Decode$string)),
        A2($elm$json$Json$Decode$map, A2($elm$core$Basics$composeR, $elm$core$List$singleton, $author$project$Lia$Markdown$Quiz$Block$Types$Select(false)), A2($elm$json$Json$Decode$field, "Select", $elm$json$Json$Decode$int))
    ]));
    var $author$project$Lia$Markdown$Quiz$Vector$Json$toState = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Vector$Types$SingleChoice, A2($elm$json$Json$Decode$field, "SingleChoice", $elm$json$Json$Decode$list($elm$json$Json$Decode$bool))),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Vector$Types$MultipleChoice, A2($elm$json$Json$Decode$field, "MultipleChoice", $elm$json$Json$Decode$list($elm$json$Json$Decode$bool)))
    ]));
    var $author$project$Lia$Markdown$Quiz$Matrix$Json$toState = A2($elm$json$Json$Decode$field, $author$project$Lia$Markdown$Quiz$Matrix$Json$uid, $elm$json$Json$Decode$array($author$project$Lia$Markdown$Quiz$Vector$Json$toState));
    var $author$project$Lia$Markdown$Quiz$Multi$Json$toState = A2($elm$json$Json$Decode$field, $author$project$Lia$Markdown$Quiz$Multi$Json$uid, $elm$json$Json$Decode$array($author$project$Lia$Markdown$Quiz$Block$Json$toState));
    var $author$project$Lia$Markdown$Quiz$Json$toState = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Block_State, $author$project$Lia$Markdown$Quiz$Block$Json$toState),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Vector_State, $author$project$Lia$Markdown$Quiz$Vector$Json$toState),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Matrix_State, $author$project$Lia$Markdown$Quiz$Matrix$Json$toState),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Quiz$Types$Multi_State, $author$project$Lia$Markdown$Quiz$Multi$Json$toState),
        A2($elm$json$Json$Decode$map, function(_v0) {
            return $author$project$Lia$Markdown$Quiz$Types$Generic_State;
        }, A2($elm$json$Json$Decode$field, "Generic", $elm$json$Json$Decode$value))
    ]));
    var $author$project$Lia$Markdown$Quiz$Json$toElement = function() {
        var solved_decoder = function(i) {
            switch(i){
                case 0:
                    return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Solution$Open);
                case 1:
                    return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Solution$Solved);
                default:
                    return $elm$json$Json$Decode$succeed($author$project$Lia$Markdown$Quiz$Solution$ReSolved);
            }
        };
        var set = F5(function(solved, state, trial, hint, error_msg) {
            return A9($author$project$Lia$Markdown$Quiz$Types$Element, solved, state, trial, hint, error_msg, $elm$core$Maybe$Nothing, {
                maxTrials: $elm$core$Maybe$Nothing,
                randomize: $elm$core$Maybe$Nothing,
                score: $elm$core$Maybe$Nothing,
                showHintsAt: 0,
                showPartialSolution: false,
                showResolveAt: 0
            }, $elm$core$Array$empty, true);
        });
        return A6($elm$json$Json$Decode$map5, set, A2($elm$json$Json$Decode$andThen, solved_decoder, A2($elm$json$Json$Decode$field, "solved", $elm$json$Json$Decode$int)), A2($elm$json$Json$Decode$field, "state", $author$project$Lia$Markdown$Quiz$Json$toState), A2($elm$json$Json$Decode$field, "trial", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "hint", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "error_msg", $elm$json$Json$Decode$string));
    }();
    var $author$project$Lia$Markdown$Quiz$Json$toVector = $elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$array($author$project$Lia$Markdown$Quiz$Json$toElement));
    var $author$project$Lia$Markdown$Quiz$Multi$Update$decodeId = $elm$json$Json$Decode$decodeValue(A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$int));
    var $author$project$Lia$Markdown$Quiz$Multi$Update$decodeValue = function(type_) {
        return $elm$json$Json$Decode$decodeValue(A2($elm$json$Json$Decode$field, "value", type_));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Update$decodeList = A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Quiz$Multi$Update$decodeValue($elm$json$Json$Decode$list($elm$json$Json$Decode$int)), A2($elm$core$Basics$composeR, $elm$core$Result$toMaybe, $elm$core$Maybe$withDefault(_List_Nil)));
    var $author$project$Lia$Markdown$Quiz$Multi$Update$update = F2(function(msg, state) {
        if (msg.$ === "Handle") {
            var _v1 = msg.a;
            var cmd = _v1.a;
            var param = _v1.b;
            var _v2 = _Utils_Tuple2(cmd, $author$project$Lia$Markdown$Quiz$Multi$Update$decodeId(param));
            _v2$8: while(true)switch(_v2.a){
                case "input":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        var _v3 = _Utils_Tuple2(A2($elm$core$Array$get, id, state), A2($author$project$Lia$Markdown$Quiz$Multi$Update$decodeValue, $elm$json$Json$Decode$string, param));
                        if (_v3.a.$ === "Just" && _v3.a.a.$ === "Text" && _v3.b.$ === "Ok") {
                            var text = _v3.b.a;
                            return $author$project$Return$val(A3($elm$core$Array$set, id, $author$project$Lia$Markdown$Quiz$Block$Types$Text(text), state));
                        } else return $author$project$Return$val(state);
                    } else break _v2$8;
                case "choose":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        var _v4 = _Utils_Tuple2(A2($elm$core$Array$get, id, state), A2($author$project$Lia$Markdown$Quiz$Multi$Update$decodeValue, $elm$json$Json$Decode$int, param));
                        if (_v4.a.$ === "Just" && _v4.a.a.$ === "Select" && _v4.b.$ === "Ok") {
                            var _v5 = _v4.a.a;
                            var open = _v5.a;
                            var option = _v4.b.a;
                            return $author$project$Return$val(A3($elm$core$Array$set, id, A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, open, _List_fromArray([
                                option
                            ])), state));
                        } else return $author$project$Return$val(state);
                    } else break _v2$8;
                case "toggle":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        var _v6 = A2($elm$core$Array$get, id, state);
                        if (_v6.$ === "Just" && _v6.a.$ === "Select") {
                            var _v7 = _v6.a;
                            var open = _v7.a;
                            var option = _v7.b;
                            return $author$project$Return$val(A3($elm$core$Array$set, id, A2($author$project$Lia$Markdown$Quiz$Block$Types$Select, !open, option), state));
                        } else return $author$project$Return$val(state);
                    } else break _v2$8;
                case "dragstart":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        var _v8 = A2($elm$core$Array$get, id, state);
                        if (_v8.$ === "Just" && _v8.a.$ === "Drop") {
                            var _v9 = _v8.a;
                            var highlight = _v9.a;
                            var option = _v9.c;
                            return $author$project$Return$val(A3($elm$core$Array$set, id, A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, highlight, true, option), state));
                        } else return $author$project$Return$val(state);
                    } else break _v2$8;
                case "dragenter":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        var _v10 = A2($elm$core$Array$get, id, state);
                        if (_v10.$ === "Just" && _v10.a.$ === "Drop") {
                            var _v11 = _v10.a;
                            var option = _v11.c;
                            return $author$project$Return$val(A3($elm$core$Array$set, id, A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, A2($elm$core$Result$withDefault, false, A2($author$project$Lia$Markdown$Quiz$Multi$Update$decodeValue, $elm$json$Json$Decode$bool, param)), false, option), state));
                        } else return $author$project$Return$val(state);
                    } else break _v2$8;
                case "dragend":
                    var pos = $author$project$Lia$Markdown$Quiz$Multi$Update$decodeList(param);
                    return $author$project$Return$val(A2($elm$core$Array$map, function(block) {
                        if (block.$ === "Drop") {
                            if (!block.a) {
                                var pp = block.c;
                                return A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, _Utils_eq(pos, pp) ? _List_Nil : pp);
                            } else return A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, pos);
                        } else return block;
                    }, state));
                case "dragtarget":
                    if (_v2.b.$ === "Ok") {
                        var id = _v2.b.a;
                        return $author$project$Return$val(A2($elm$core$Array$indexedMap, F2(function(i, block) {
                            if (block.$ === "Drop") {
                                var pp = block.c;
                                return A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, _Utils_eq(i, id), pp);
                            } else return block;
                        }), state));
                    } else break _v2$8;
                case "dragsource":
                    var pos = $author$project$Lia$Markdown$Quiz$Multi$Update$decodeList(param);
                    return $author$project$Return$val(A2($elm$core$Array$indexedMap, F2(function(i, block) {
                        if (block.$ === "Drop" && block.b) return A3($author$project$Lia$Markdown$Quiz$Block$Types$Drop, false, false, pos);
                        else return block;
                    }), state));
                default:
                    break _v2$8;
            }
            return $author$project$Return$val(state);
        } else {
            var sub = msg.a;
            return A2($author$project$Return$script, sub, $author$project$Return$val(state));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Update$update_ = F3(function(idx, vector, fn) {
        var _v0 = A2($elm$core$Maybe$map, fn, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just") {
            var ret = _v0.a;
            return A2($author$project$Return$mapVal, function(v) {
                return A3($elm$core$Array$set, idx, v, vector);
            }, ret);
        } else return $author$project$Return$val(vector);
    });
    var $author$project$Lia$Markdown$Quiz$Update$update = F5(function(sync, sectionID, scripts, msg, vector) {
        switch(msg.$){
            case "Block_Update":
                var id = msg.a;
                return A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, A2($author$project$Lia$Markdown$Quiz$Update$state_, id, msg));
            case "Multi_Update":
                var id = msg.a;
                return A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, A2($author$project$Lia$Markdown$Quiz$Update$state_, id, msg));
            case "Vector_Update":
                var id = msg.a;
                return A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, A2($author$project$Lia$Markdown$Quiz$Update$state_, id, msg));
            case "Matrix_Update":
                var id = msg.a;
                return A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, A2($author$project$Lia$Markdown$Quiz$Update$state_, id, msg));
            case "Check":
                var id = msg.a;
                var solution = msg.b;
                var _v1 = A2($elm$core$Array$get, id, vector);
                if (_v1.$ === "Just") {
                    var e = _v1.a;
                    var _v2 = e.scriptID;
                    if (_v2.$ === "Nothing") return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(id), A2($author$project$Lia$Markdown$Quiz$Update$store, sectionID, A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, $author$project$Lia$Markdown$Quiz$Update$check(solution))));
                    else {
                        var scriptID = _v2.a;
                        return A2($author$project$Return$batchEvents, function() {
                            var _v3 = A2($elm$core$Maybe$map, function($) {
                                return $.script;
                            }, A2($elm$core$Array$get, scriptID, scripts));
                            if (_v3.$ === "Just") {
                                var code = _v3.a;
                                return _List_fromArray([
                                    A3($author$project$Service$Event$pushWithId, "eval", id, A3($author$project$Service$Script$eval, code, $author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts), _List_fromArray([
                                        $author$project$Lia$Markdown$Quiz$Update$toString(e.state)
                                    ])))
                                ]);
                            } else return _List_Nil;
                        }(), $author$project$Return$val(vector));
                    }
                } else return $author$project$Return$val(vector);
            case "ShowHint":
                var idx = msg.a;
                return A2($author$project$Lia$Markdown$Quiz$Update$store, sectionID, A3($author$project$Lia$Markdown$Quiz$Update$update_, idx, vector, function(e) {
                    return $author$project$Return$val(_Utils_update(e, {
                        hint: e.hint + 1
                    }));
                }));
            case "ShowSolution":
                var id = msg.a;
                var solution = msg.b;
                return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(id), function(_return) {
                    var _v4 = A2($elm$core$Maybe$andThen, function($) {
                        return $.scriptID;
                    }, A2($elm$core$Array$get, id, vector));
                    if (_v4.$ === "Just") {
                        var scriptID = _v4.a;
                        if (solution.$ === "Generic_Type") return A2($author$project$Return$script, A2($author$project$Lia$Markdown$Effect$Script$Update$run, scriptID, "true"), _return);
                        else return A2($author$project$Return$script, A2($author$project$Lia$Markdown$Quiz$Update$execute, scriptID, $author$project$Lia$Markdown$Quiz$Types$toState(solution)), _return);
                    } else return _return;
                }(A2($author$project$Lia$Markdown$Quiz$Update$store, sectionID, A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, function(e) {
                    return $author$project$Return$val(_Utils_update(e, {
                        error_msg: "",
                        solved: $author$project$Lia$Markdown$Quiz$Solution$ReSolved,
                        state: $author$project$Lia$Markdown$Quiz$Types$toState(solution)
                    }));
                }))));
            case "Handle":
                var event = msg.a;
                var _v6 = $author$project$Service$Event$destructure(event);
                _v6$4: while(true)if (_v6.a.$ === "Nothing") {
                    if (_v6.c.a === "load") {
                        var _v7 = _v6.a;
                        var _v8 = _v6.c;
                        var param = _v8.b;
                        return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Nothing, A2($author$project$Lia$Markdown$Quiz$Update$init, F2(function(i, s) {
                            return A2($author$project$Lia$Markdown$Quiz$Update$execute, i, s.state);
                        }), $author$project$Return$val(A2($elm$core$Result$withDefault, vector, A2($elm$core$Result$map, $author$project$Lia$Markdown$Quiz$Update$mergeHelper(vector), $author$project$Lia$Markdown$Quiz$Json$toVector(param))))));
                    } else break _v6$4;
                } else switch(_v6.a.a){
                    case "input":
                        var id = _v6.b;
                        var xxx = _v6.c;
                        var _v9 = A2($elm$core$Maybe$map, function($) {
                            return $.state;
                        }, A2($elm$core$Array$get, id, vector));
                        if (_v9.$ === "Just" && _v9.a.$ === "Multi_State") {
                            var state = _v9.a.a;
                            return A2($author$project$Return$mapVal, function(s) {
                                return A2($elm$core$Maybe$withDefault, vector, A2($elm$core$Maybe$map, function(v) {
                                    return A3($elm$core$Array$set, id, _Utils_update(v, {
                                        state: $author$project$Lia$Markdown$Quiz$Types$Multi_State(s)
                                    }), vector);
                                }, A2($elm$core$Array$get, id, vector)));
                            }, A2($author$project$Lia$Markdown$Quiz$Multi$Update$update, $author$project$Lia$Markdown$Quiz$Multi$Update$handle(xxx), state));
                        } else return $author$project$Return$val(vector);
                    case "eval":
                        if (_v6.c.a === "eval") {
                            var id = _v6.b;
                            var _v10 = _v6.c;
                            var param = _v10.b;
                            var _v11 = A2($elm$core$Maybe$andThen, function($) {
                                return $.scriptID;
                            }, A2($elm$core$Array$get, id, vector));
                            if (_v11.$ === "Just") {
                                var scriptID = _v11.a;
                                return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(id), A2($author$project$Return$script, A2($author$project$Lia$Markdown$Effect$Script$Update$submit, scriptID, event), A2($author$project$Lia$Markdown$Quiz$Update$store, sectionID, A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, $author$project$Lia$Markdown$Quiz$Update$evalEventDecoder(param)))));
                            } else return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(id), A2($author$project$Lia$Markdown$Quiz$Update$store, sectionID, A3($author$project$Lia$Markdown$Quiz$Update$update_, id, vector, $author$project$Lia$Markdown$Quiz$Update$evalEventDecoder(param))));
                        } else break _v6$4;
                    case "restore":
                        var _v12 = _v6.c;
                        var cmd = _v12.a;
                        var param = _v12.b;
                        return A4($author$project$Lia$Markdown$Quiz$Update$doSync, sync, sectionID, $elm$core$Maybe$Nothing, A2($author$project$Lia$Markdown$Quiz$Update$init, F2(function(i, s) {
                            return A2($author$project$Lia$Markdown$Quiz$Update$execute, i, s.state);
                        }), $author$project$Return$val(A2($elm$core$Result$withDefault, vector, A2($elm$core$Result$map, $author$project$Lia$Markdown$Quiz$Update$mergeHelper(vector), $author$project$Lia$Markdown$Quiz$Json$toVector(param))))));
                    default:
                        break _v6$4;
                }
                var _v13 = _v6.c;
                var cmd = _v13.a;
                return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("Quiz: unknown command => " + cmd), $author$project$Return$val(vector));
            default:
                var sub = msg.a;
                return A2($author$project$Return$script, sub, $author$project$Return$val(vector));
        }
    });
    var $author$project$Lia$Markdown$Survey$Update$DropUpdate = F2(function(a, b) {
        return {
            $: "DropUpdate",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$Update$Exit = {
        $: "Exit"
    };
    var $author$project$Lia$Markdown$Survey$Json$dict2json = function(dict) {
        return $elm$json$Json$Encode$object(A2($elm$core$List$map, function(_v0) {
            var s = _v0.a;
            var b = _v0.b;
            return _Utils_Tuple2(s, $elm$json$Json$Encode$bool(b));
        }, $elm$core$Dict$toList(dict)));
    };
    var $author$project$Lia$Markdown$Survey$Json$fromState = function(state) {
        return $elm$json$Json$Encode$object(function() {
            switch(state.$){
                case "Text_State":
                    var str = state.a;
                    return _List_fromArray([
                        _Utils_Tuple2("Text", $elm$json$Json$Encode$string(str))
                    ]);
                case "Select_State":
                    var i = state.b;
                    return _List_fromArray([
                        _Utils_Tuple2("Select", $elm$json$Json$Encode$int(i))
                    ]);
                case "DragAndDrop_State":
                    var i = state.c;
                    return _List_fromArray([
                        _Utils_Tuple2("Drop", $elm$json$Json$Encode$int(i))
                    ]);
                case "Vector_State":
                    var single = state.a;
                    var vector = state.b;
                    return _List_fromArray([
                        _Utils_Tuple2(single ? "SingleChoice" : "MultipleChoice", $author$project$Lia$Markdown$Survey$Json$dict2json(vector))
                    ]);
                default:
                    var single = state.a;
                    var matrix = state.b;
                    return _List_fromArray([
                        _Utils_Tuple2(single ? "SingleChoiceMatrix" : "MultipleChoiceMatrix", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Survey$Json$dict2json, matrix))
                    ]);
            }
        }());
    };
    var $author$project$Lia$Markdown$Survey$Sync$encoder = function(_v0) {
        var state = _v0.a;
        return $author$project$Lia$Markdown$Survey$Json$fromState(state);
    };
    var $author$project$Service$Sync$survey = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Service$Sync$publish("survey"), A2($author$project$Service$Event$pushWithId, "id", id));
    };
    var $author$project$Lia$Markdown$Survey$Sync$Sync = function(a) {
        return {
            $: "Sync",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Sync$sync = function(survey) {
        return survey.submitted ? $elm$core$Maybe$Just($author$project$Lia$Markdown$Survey$Sync$Sync(survey.state)) : $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Survey$Sync$event = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Sync$sync, A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Sync$encoder, $author$project$Service$Sync$survey(id))), $elm$core$Maybe$withDefault($author$project$Service$Event$none)));
    };
    var $author$project$Lia$Markdown$Survey$Update$doSync = F4(function(sync, sectionID, vectorID, ret) {
        if (!sync) return ret;
        else {
            var _v0 = _Utils_Tuple2(sectionID, vectorID);
            if (_v0.a.$ === "Nothing") {
                var _v1 = _v0.a;
                return ret;
            } else if (_v0.b.$ === "Nothing") {
                var _v2 = _v0.b;
                return A2($author$project$Return$batchEvents, A2($elm$core$List$indexedMap, $author$project$Lia$Markdown$Survey$Sync$event, $elm$core$Array$toList(ret.value)), ret);
            } else {
                var id = _v0.b.a;
                return A2($author$project$Return$batchEvent, A2($elm$core$Maybe$withDefault, $author$project$Service$Event$none, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Survey$Sync$event(id), A2($elm$core$Array$get, id, ret.value))), ret);
            }
        }
    });
    var $author$project$Lia$Markdown$Survey$Update$evalEventDecoder = function(json) {
        var _eval = $author$project$Service$Script$decode(json);
        return _eval.ok ? _eval.result === "true" ? function(e) {
            return $author$project$Return$val(_Utils_update(e, {
                submitted: true
            }));
        } : $author$project$Return$val : function(e) {
            return $author$project$Return$val(_Utils_update(e, {
                errorMsg: $elm$core$Maybe$Just(_eval.result)
            }));
        };
    };
    var $author$project$Lia$Markdown$Survey$Types$key_value_string = function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        return '"' + (key + ('": ' + (value ? "1" : "0")));
    };
    var $author$project$Lia$Markdown$Survey$Types$toString = function(state) {
        switch(state.$){
            case "Text_State":
                var str = state.a;
                return str;
            case "Select_State":
                var i = state.b;
                return $elm$core$String$fromInt(i);
            case "DragAndDrop_State":
                var i = state.c;
                return $elm$core$String$fromInt(i);
            case "Vector_State":
                var dict = state.b;
                return "{" + (A2($elm$core$String$join, ", ", A2($elm$core$List$map, $author$project$Lia$Markdown$Survey$Types$key_value_string, $elm$core$Dict$toList(dict))) + "}");
            default:
                var array = state.b;
                return "[" + (A2($elm$core$String$join, ",\n", A2($elm$core$List$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Types$Vector_State(false), $author$project$Lia$Markdown$Survey$Types$toString), $elm$core$Array$toList(array))) + "]");
        }
    };
    var $author$project$Lia$Markdown$Survey$Update$execute = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Types$toString, $author$project$Lia$Markdown$Effect$Script$Update$run(id));
    };
    var $author$project$Lia$Markdown$Survey$Json$fromError = $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$Tuple$pair("errorMessage")));
    var $author$project$Lia$Markdown$Survey$Json$fromElement = function(element) {
        return $elm$json$Json$Encode$object(A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, $author$project$Lia$Markdown$Survey$Json$fromError(element.errorMsg), _List_fromArray([
            _Utils_Tuple2("submitted", $elm$json$Json$Encode$bool(element.submitted)),
            _Utils_Tuple2("state", $author$project$Lia$Markdown$Survey$Json$fromState(element.state))
        ])));
    };
    var $author$project$Lia$Markdown$Survey$Json$fromVector = $elm$json$Json$Encode$array($author$project$Lia$Markdown$Survey$Json$fromElement);
    var $author$project$Lia$Markdown$Survey$Update$store = F2(function(sectionID, _return) {
        if (sectionID.$ === "Just") {
            var id = sectionID.a;
            return A2($author$project$Return$batchEvent, A3($author$project$Service$Database$store, "survey", id, $author$project$Lia$Markdown$Survey$Json$fromVector(_return.value)), _return);
        } else return _return;
    });
    var $author$project$Lia$Markdown$Survey$Update$submit = F2(function(vector, idx) {
        var _v0 = A2($elm$core$Array$get, idx, vector);
        if (_v0.$ === "Just") {
            var element = _v0.a;
            return A3($elm$core$Array$set, idx, _Utils_update(element, {
                submitted: true
            }), vector);
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$submittable = F2(function(vector, idx) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple2(e.submitted, e.state);
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && !_v0.a.a) switch(_v0.a.b.$){
            case "Text_State":
                var _v1 = _v0.a;
                var state = _v1.b.a;
                return state !== "";
            case "Select_State":
                var _v2 = _v0.a;
                var _v3 = _v2.b;
                var state = _v3.b;
                return !_Utils_eq(state, -1);
            case "DragAndDrop_State":
                var _v4 = _v0.a;
                var _v5 = _v4.b;
                var state = _v5.c;
                return !_Utils_eq(state, -1);
            case "Vector_State":
                var _v6 = _v0.a;
                var _v7 = _v6.b;
                var state = _v7.b;
                return function(s) {
                    return s > 0;
                }($elm$core$List$length(A2($elm$core$List$filter, function(a) {
                    return a;
                }, $elm$core$Dict$values(state))));
            default:
                var _v8 = _v0.a;
                var _v9 = _v8.b;
                var state = _v9.b;
                return A2($elm$core$List$all, function(a) {
                    return $elm$core$List$length(a) > 0;
                }, A2($elm$core$List$map, function(l) {
                    return A2($elm$core$List$filter, function(a) {
                        return a;
                    }, l);
                }, A2($elm$core$List$map, $elm$core$Dict$values, $elm$core$Array$toList(state))));
        }
        else return false;
    });
    var $author$project$Lia$Markdown$Survey$Types$Element = F4(function(submitted, state, errorMsg, scriptID) {
        return {
            errorMsg: errorMsg,
            scriptID: scriptID,
            state: state,
            submitted: submitted
        };
    });
    var $elm$json$Json$Decode$maybe = function(decoder) {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
            $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
        ]));
    };
    var $author$project$Lia$Markdown$Survey$Json$toState = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Text_State, A2($elm$json$Json$Decode$field, "Text", $elm$json$Json$Decode$string)),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Select_State(false), A2($elm$json$Json$Decode$field, "Select", $elm$json$Json$Decode$int)),
        A2($elm$json$Json$Decode$map, A2($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false), A2($elm$json$Json$Decode$field, "Drop", $elm$json$Json$Decode$int)),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Vector_State(true), A2($elm$json$Json$Decode$field, "SingleChoice", $elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Vector_State(false), A2($elm$json$Json$Decode$field, "MultipleChoice", $elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Matrix_State(false), A2($elm$json$Json$Decode$field, "SingleChoiceMatrix", $elm$json$Json$Decode$array($elm$json$Json$Decode$dict($elm$json$Json$Decode$bool)))),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Types$Matrix_State(true), A2($elm$json$Json$Decode$field, "MultipleChoiceMatrix", $elm$json$Json$Decode$array($elm$json$Json$Decode$dict($elm$json$Json$Decode$bool))))
    ]));
    var $author$project$Lia$Markdown$Survey$Json$toElement = A5($elm$json$Json$Decode$map4, $author$project$Lia$Markdown$Survey$Types$Element, A2($elm$json$Json$Decode$field, "submitted", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "state", $author$project$Lia$Markdown$Survey$Json$toState), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "errorMessage", $elm$json$Json$Decode$string)), $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));
    var $author$project$Lia$Markdown$Survey$Json$toVector = $elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$array($author$project$Lia$Markdown$Survey$Json$toElement));
    var $author$project$Lia$Markdown$Survey$Update$set_state = F3(function(vector, id, element) {
        return A3($elm$core$Array$set, id, element, vector);
    });
    var $author$project$Lia$Markdown$Survey$Update$updateError = F3(function(vector, id, message) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple2(e.submitted, e);
        }, A2($elm$core$Array$get, id, vector));
        if (_v0.$ === "Just" && !_v0.a.a) {
            var _v1 = _v0.a;
            var element = _v1.b;
            return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, id, _Utils_update(element, {
                errorMsg: message
            }));
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update_ = F3(function(idx, vector, fn) {
        var _v0 = A2($elm$core$Maybe$map, fn, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just") {
            var ret = _v0.a;
            return A2($author$project$Return$mapVal, function(v) {
                return A3($elm$core$Array$set, idx, v, vector);
            }, ret);
        } else return $author$project$Return$val(vector);
    });
    var $author$project$Lia$Markdown$Survey$Update$update_drop = F3(function(vector, id, event) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple3(e.submitted, e.state, e);
        }, A2($elm$core$Array$get, id, vector));
        if (_v0.$ === "Just" && !_v0.a.a && _v0.a.b.$ === "DragAndDrop_State") {
            var _v1 = _v0.a;
            var _v2 = _v1.b;
            var highlight = _v2.a;
            var active = _v2.b;
            var value = _v2.c;
            var element = _v1.c;
            return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, id, _Utils_update(element, {
                state: function() {
                    switch(event.$){
                        case "Start":
                            return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, highlight, true, value);
                        case "Drop":
                            var idx = event.a;
                            return highlight ? A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false, idx) : !highlight && _Utils_eq(idx, value) ? A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false, -1) : A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, highlight, false, value);
                        case "Enter":
                            if (event.a) return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, true, active, value);
                            else return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, highlight, active, value);
                        case "Exit":
                            return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false, -1);
                        case "Target":
                            return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, highlight, false, -1);
                        default:
                            var idx = event.a;
                            return A3($author$project$Lia$Markdown$Survey$Types$DragAndDrop_State, false, false, idx);
                    }
                }()
            }));
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update_matrix = F4(function(vector, col_id, row_id, _var) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple3(e.submitted, e.state, e);
        }, A2($elm$core$Array$get, col_id, vector));
        if (_v0.$ === "Just" && !_v0.a.a && _v0.a.b.$ === "Matrix_State") {
            if (!_v0.a.b.a) {
                var _v1 = _v0.a;
                var _v2 = _v1.b;
                var matrix = _v2.b;
                var element = _v1.c;
                var row = A2($elm$core$Array$get, row_id, matrix);
                return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, col_id, _Utils_update(element, {
                    state: A2($author$project$Lia$Markdown$Survey$Types$Matrix_State, false, A2($elm$core$Maybe$withDefault, matrix, A2($elm$core$Maybe$map, function(d) {
                        return A3($elm$core$Array$set, row_id, d, matrix);
                    }, A2($elm$core$Maybe$map, function(d) {
                        return A3($elm$core$Dict$update, _var, function(_v5) {
                            return $elm$core$Maybe$Just(true);
                        }, d);
                    }, A2($elm$core$Maybe$map, function(d) {
                        return A2($elm$core$Dict$map, F2(function(_v3, _v4) {
                            return false;
                        }), d);
                    }, row)))))
                }));
            } else {
                var _v6 = _v0.a;
                var _v7 = _v6.b;
                var matrix = _v7.b;
                var element = _v6.c;
                var row = A2($elm$core$Array$get, row_id, matrix);
                return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, col_id, _Utils_update(element, {
                    state: A2($author$project$Lia$Markdown$Survey$Types$Matrix_State, true, A2($elm$core$Maybe$withDefault, matrix, A2($elm$core$Maybe$map, function(d) {
                        return A3($elm$core$Array$set, row_id, d, matrix);
                    }, A2($elm$core$Maybe$map, function(d) {
                        return A3($elm$core$Dict$update, _var, function(b) {
                            return A2($elm$core$Maybe$map, $elm$core$Basics$not, b);
                        }, d);
                    }, row))))
                }));
            }
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update_select = F3(function(vector, id, event) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple3(e.submitted, e.state, e);
        }, A2($elm$core$Array$get, id, vector));
        if (_v0.$ === "Just" && !_v0.a.a && _v0.a.b.$ === "Select_State") {
            var _v1 = _v0.a;
            var _v2 = _v1.b;
            var b = _v2.a;
            var value = _v2.b;
            var element = _v1.c;
            return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, id, _Utils_update(element, {
                state: function() {
                    if (event.$ === "Choose") return A2($author$project$Lia$Markdown$Survey$Types$Select_State, !b, value);
                    else {
                        var newValue = event.a;
                        return A2($author$project$Lia$Markdown$Survey$Types$Select_State, false, newValue);
                    }
                }()
            }));
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update_text = F3(function(vector, idx, str) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple3(e.submitted, e.state, e);
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && !_v0.a.a && _v0.a.b.$ === "Text_State") {
            var _v1 = _v0.a;
            var element = _v1.c;
            return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, idx, _Utils_update(element, {
                state: $author$project$Lia$Markdown$Survey$Types$Text_State(str)
            }));
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update_vector = F3(function(vector, idx, _var) {
        var _v0 = A2($elm$core$Maybe$map, function(e) {
            return _Utils_Tuple3(e.submitted, e.state, e);
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && !_v0.a.a && _v0.a.b.$ === "Vector_State") {
            if (!_v0.a.b.a) {
                var _v1 = _v0.a;
                var _v2 = _v1.b;
                var e = _v2.b;
                var element = _v1.c;
                return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, idx, _Utils_update(element, {
                    state: A2($author$project$Lia$Markdown$Survey$Types$Vector_State, false, A3($elm$core$Dict$update, _var, function(_v5) {
                        return $elm$core$Maybe$Just(true);
                    }, A2($elm$core$Dict$map, F2(function(_v3, _v4) {
                        return false;
                    }), e)))
                }));
            } else {
                var _v6 = _v0.a;
                var _v7 = _v6.b;
                var e = _v7.b;
                var element = _v6.c;
                return A3($author$project$Lia$Markdown$Survey$Update$set_state, vector, idx, _Utils_update(element, {
                    state: A2($author$project$Lia$Markdown$Survey$Types$Vector_State, true, A3($elm$core$Dict$update, _var, function(b) {
                        return A2($elm$core$Maybe$map, $elm$core$Basics$not, b);
                    }, e))
                }));
            }
        } else return vector;
    });
    var $author$project$Lia$Markdown$Survey$Update$update = F5(function(sync, sectionID, scripts, msg, vector) {
        switch(msg.$){
            case "TextUpdate":
                var idx = msg.a;
                var str = msg.b;
                return $author$project$Return$val(A3($author$project$Lia$Markdown$Survey$Update$update_text, vector, idx, str));
            case "SelectUpdate":
                var id = msg.a;
                var event = msg.b;
                return $author$project$Return$val(A3($author$project$Lia$Markdown$Survey$Update$update_select, vector, id, event));
            case "VectorUpdate":
                var idx = msg.a;
                var _var = msg.b;
                return $author$project$Return$val(A3($author$project$Lia$Markdown$Survey$Update$update_vector, vector, idx, _var));
            case "MatrixUpdate":
                var idx = msg.a;
                var row = msg.b;
                var _var = msg.c;
                return $author$project$Return$val(A4($author$project$Lia$Markdown$Survey$Update$update_matrix, vector, idx, row, _var));
            case "DropUpdate":
                var idx = msg.a;
                var event = msg.b;
                return A2($author$project$Return$cmd, function() {
                    if (event.$ === "Enter" && !event.a) return A2($elm$core$Task$attempt, $elm$core$Basics$always(A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, idx, $author$project$Lia$Markdown$Survey$Update$Exit)), $elm$core$Process$sleep(1));
                    else return $elm$core$Platform$Cmd$none;
                }(), $author$project$Return$val(A3($author$project$Lia$Markdown$Survey$Update$update_drop, vector, idx, event)));
            case "Submit":
                var id = msg.a;
                var _v2 = A2($elm$core$Array$get, id, vector);
                if (_v2.$ === "Just") {
                    var element = _v2.a;
                    var _v3 = element.scriptID;
                    if (_v3.$ === "Nothing") {
                        if (A2($author$project$Lia$Markdown$Survey$Update$submittable, vector, id)) {
                            var new_vector = A2($author$project$Lia$Markdown$Survey$Update$submit, vector, id);
                            return A2($author$project$Lia$Markdown$Survey$Update$store, sectionID, A4($author$project$Lia$Markdown$Survey$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(id), $author$project$Return$val(new_vector)));
                        } else return $author$project$Return$val(vector);
                    } else {
                        var scriptID = _v3.a;
                        return A2($author$project$Return$batchEvent, function() {
                            var _v4 = A2($elm$core$Maybe$map, function($) {
                                return $.script;
                            }, A2($elm$core$Array$get, scriptID, scripts));
                            if (_v4.$ === "Just") {
                                var code = _v4.a;
                                return A3($author$project$Service$Event$pushWithId, "eval", id, A3($author$project$Service$Script$eval, code, $author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts), _List_fromArray([
                                    $author$project$Lia$Markdown$Survey$Types$toString(element.state)
                                ])));
                            } else return $author$project$Service$Event$none;
                        }(), $author$project$Return$val(_Utils_eq(element.errorMsg, $elm$core$Maybe$Nothing) ? vector : A3($author$project$Lia$Markdown$Survey$Update$updateError, vector, id, $elm$core$Maybe$Nothing)));
                    }
                } else return $author$project$Return$val(vector);
            case "Script":
                var sub = msg.a;
                return A2($author$project$Return$script, sub, $author$project$Return$val(vector));
            case "Handle":
                var event = msg.a;
                var _v5 = $author$project$Service$Event$destructure(event);
                _v5$3: while(true)if (_v5.a.$ === "Nothing") {
                    if (_v5.c.a === "load") {
                        var _v6 = _v5.a;
                        var _v7 = _v5.c;
                        var param = _v7.b;
                        return A2($author$project$Lia$Markdown$Quiz$Update$init, F2(function(i, s) {
                            return A2($author$project$Lia$Markdown$Survey$Update$execute, i, s.state);
                        }), A4($author$project$Lia$Markdown$Survey$Update$doSync, sync, sectionID, $elm$core$Maybe$Nothing, $author$project$Return$val(A2($elm$core$Result$withDefault, vector, A2($elm$core$Result$map, A2($author$project$Lia$Markdown$Quiz$Update$merge, F2(function(sID, body) {
                            return _Utils_update(body, {
                                scriptID: sID.scriptID
                            });
                        }), vector), $author$project$Lia$Markdown$Survey$Json$toVector(param))))));
                    } else break _v5$3;
                } else switch(_v5.a.a){
                    case "eval":
                        if (_v5.c.a === "eval") {
                            var section = _v5.b;
                            var _v8 = _v5.c;
                            var param = _v8.b;
                            var _v9 = A2($elm$core$Maybe$andThen, function($) {
                                return $.scriptID;
                            }, A2($elm$core$Array$get, section, vector));
                            if (_v9.$ === "Just") {
                                var scriptID = _v9.a;
                                return A4($author$project$Lia$Markdown$Survey$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(section), A2($author$project$Return$script, A2($author$project$Lia$Markdown$Effect$Script$Update$submit, scriptID, event), A2($author$project$Lia$Markdown$Survey$Update$store, sectionID, A3($author$project$Lia$Markdown$Survey$Update$update_, section, vector, $author$project$Lia$Markdown$Survey$Update$evalEventDecoder(param)))));
                            } else return A4($author$project$Lia$Markdown$Survey$Update$doSync, sync, sectionID, $elm$core$Maybe$Just(section), A2($author$project$Lia$Markdown$Survey$Update$store, sectionID, A3($author$project$Lia$Markdown$Survey$Update$update_, section, vector, $author$project$Lia$Markdown$Survey$Update$evalEventDecoder(param))));
                        } else break _v5$3;
                    case "restore":
                        var _v10 = _v5.c;
                        var cmd = _v10.a;
                        var param = _v10.b;
                        return A2($author$project$Lia$Markdown$Quiz$Update$init, F2(function(i, s) {
                            return A2($author$project$Lia$Markdown$Survey$Update$execute, i, s.state);
                        }), A4($author$project$Lia$Markdown$Survey$Update$doSync, sync, sectionID, $elm$core$Maybe$Nothing, $author$project$Return$val(A2($elm$core$Result$withDefault, vector, A2($elm$core$Result$map, A2($author$project$Lia$Markdown$Quiz$Update$merge, F2(function(sID, body) {
                            return _Utils_update(body, {
                                scriptID: sID.scriptID
                            });
                        }), vector), $author$project$Lia$Markdown$Survey$Json$toVector(param))))));
                    default:
                        break _v5$3;
                }
                return $author$project$Return$val(vector);
            default:
                return $author$project$Return$val(vector);
        }
    });
    var $author$project$Lia$Markdown$Table$Update$updateSort = F2(function(column, state) {
        return !_Utils_eq(state.column, column) ? _Utils_update(state, {
            column: column,
            dir: true
        }) : state.dir ? _Utils_update(state, {
            dir: false
        }) : _Utils_update(state, {
            column: -1
        });
    });
    var $author$project$Lia$Markdown$Table$Update$sort = F3(function(id, vector, col) {
        return $author$project$Return$val(A2($elm$core$Maybe$withDefault, vector, A2($elm$core$Maybe$map, function(state) {
            return A3($elm$core$Array$set, id, A2($author$project$Lia$Markdown$Table$Update$updateSort, col, state), vector);
        }, A2($elm$core$Array$get, id, vector))));
    });
    var $author$project$Lia$Markdown$Table$Update$toggle = F2(function(id, vector) {
        return $author$project$Return$val(A2($elm$core$Maybe$withDefault, vector, A2($elm$core$Maybe$map, function(state) {
            return A3($elm$core$Array$set, id, _Utils_update(state, {
                diagram: !state.diagram
            }), vector);
        }, A2($elm$core$Array$get, id, vector))));
    });
    var $author$project$Lia$Markdown$Table$Update$update = F2(function(msg, vector) {
        switch(msg.$){
            case "Sort":
                var id = msg.a;
                var col = msg.b;
                return A3($author$project$Lia$Markdown$Table$Update$sort, id, vector, col);
            case "Toggle":
                var id = msg.a;
                return A2($author$project$Lia$Markdown$Table$Update$toggle, id, vector);
            case "Handle":
                return $author$project$Return$val(vector);
            default:
                return $author$project$Return$val(vector);
        }
    });
    var $author$project$Lia$Markdown$Task$Update$execute = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Task$Types$toString, $author$project$Lia$Markdown$Effect$Script$Update$run(id));
    };
    var $author$project$Lia$Markdown$Task$Json$fromVector = $elm$json$Json$Encode$array(A2($elm$core$Basics$composeR, function($) {
        return $.state;
    }, $elm$json$Json$Encode$array($elm$json$Json$Encode$bool)));
    var $author$project$Lia$Markdown$Task$Update$store = F2(function(sectionID, _return) {
        if (sectionID.$ === "Just") {
            var id = sectionID.a;
            return A2($author$project$Return$batchEvent, A3($author$project$Service$Database$store, "task", id, $author$project$Lia$Markdown$Task$Json$fromVector(_return.value)), _return);
        } else return _return;
    });
    var $author$project$Lia$Markdown$Task$Json$toVector = $elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$array(A2($elm$json$Json$Decode$map, function(v) {
        return {
            scriptID: $elm$core$Maybe$Nothing,
            state: v
        };
    }, $elm$json$Json$Decode$array($elm$json$Json$Decode$bool))));
    var $author$project$Lia$Markdown$Task$Update$toggle = F2(function(y, element) {
        return _Utils_update(element, {
            state: A3($elm$core$Array$set, y, A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$Basics$not, A2($elm$core$Array$get, y, element.state))), element.state)
        });
    });
    var $author$project$Lia$Markdown$Task$Update$update = F4(function(sectionID, scripts, msg, vector) {
        switch(msg.$){
            case "Toggle":
                var x = msg.a;
                var y = msg.b;
                var _v1 = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Task$Update$toggle(y), A2($elm$core$Array$get, x, vector));
                if (_v1.$ === "Just") {
                    var element = _v1.a;
                    var _v2 = element.scriptID;
                    if (_v2.$ === "Nothing") return A2($author$project$Lia$Markdown$Task$Update$store, sectionID, $author$project$Return$val(A3($elm$core$Array$set, x, element, vector)));
                    else {
                        var scriptID = _v2.a;
                        return A2($author$project$Lia$Markdown$Task$Update$store, sectionID, A2($author$project$Return$batchEvent, function() {
                            var _v3 = A2($elm$core$Maybe$map, function($) {
                                return $.script;
                            }, A2($elm$core$Array$get, scriptID, scripts));
                            if (_v3.$ === "Nothing") return $author$project$Service$Event$none;
                            else {
                                var code = _v3.a;
                                return A3($author$project$Service$Event$pushWithId, "eval", x, A3($author$project$Service$Script$eval, code, $author$project$Lia$Markdown$Effect$Script$Types$outputs(scripts), _List_fromArray([
                                    $author$project$Lia$Markdown$Task$Types$toString(element)
                                ])));
                            }
                        }(), $author$project$Return$val(A3($elm$core$Array$set, x, element, vector))));
                    }
                } else return $author$project$Return$val(vector);
            case "Script":
                var sub = msg.a;
                return A2($author$project$Return$script, sub, $author$project$Return$val(vector));
            default:
                var event = msg.a;
                var _v4 = $author$project$Service$Event$destructure(event);
                _v4$2: while(true)if (_v4.a.$ === "Nothing") {
                    if (_v4.c.a === "load") {
                        var _v5 = _v4.a;
                        var _v6 = _v4.c;
                        var param = _v6.b;
                        return A2($author$project$Lia$Markdown$Quiz$Update$init, $author$project$Lia$Markdown$Task$Update$execute, $author$project$Return$val(A2($elm$core$Result$withDefault, vector, A2($elm$core$Result$map, A2($author$project$Lia$Markdown$Quiz$Update$merge, F2(function(sID, body) {
                            return _Utils_update(body, {
                                scriptID: sID.scriptID
                            });
                        }), vector), $author$project$Lia$Markdown$Task$Json$toVector(param)))));
                    } else break _v4$2;
                } else {
                    if (_v4.a.a === "eval" && _v4.c.a === "eval") {
                        var section = _v4.b;
                        var _v7 = _v4.c;
                        var _v8 = A2($elm$core$Maybe$andThen, function($) {
                            return $.scriptID;
                        }, A2($elm$core$Array$get, section, vector));
                        if (_v8.$ === "Just") {
                            var scriptID = _v8.a;
                            return A2($author$project$Return$script, A2($author$project$Lia$Markdown$Effect$Script$Update$submit, scriptID, event), $author$project$Return$val(vector));
                        } else return $author$project$Return$val(vector);
                    } else break _v4$2;
                }
                return $author$project$Return$val(vector);
        }
    });
    var $author$project$Lia$Markdown$Effect$Update$updateSub = F2(function(main, msg) {
        return A3($author$project$Lia$Markdown$Effect$Update$update, main, true, $author$project$Lia$Markdown$Effect$Update$Script(msg));
    });
    var $author$project$Lia$Markdown$Update$subHandle = F3(function(js, json, section) {
        var _v6 = A2($elm$core$Maybe$map, $author$project$Service$Event$pop, $elm$core$Result$toMaybe($author$project$Service$Event$decode(json)));
        _v6$6: while(true){
            if (_v6.$ === "Just" && _v6.a.a.$ === "Just") switch(_v6.a.a.a){
                case "code":
                    var _v7 = _v6.a;
                    var event = _v7.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, $author$project$Lia$Markdown$Update$UpdateCode($author$project$Lia$Markdown$Code$Update$handle(event)), section);
                case "quiz":
                    var _v8 = _v6.a;
                    var event = _v8.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, $author$project$Lia$Markdown$Update$UpdateQuiz($author$project$Lia$Markdown$Quiz$Update$handle(event)), section);
                case "survey":
                    var _v9 = _v6.a;
                    var event = _v9.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, $author$project$Lia$Markdown$Update$UpdateSurvey($author$project$Lia$Markdown$Survey$Update$handle(event)), section);
                case "effect":
                    var _v10 = _v6.a;
                    var event = _v10.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, A2($author$project$Lia$Markdown$Update$UpdateEffect, true, $author$project$Lia$Markdown$Effect$Update$handle(event)), section);
                case "task":
                    var _v11 = _v6.a;
                    var event = _v11.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, $author$project$Lia$Markdown$Update$UpdateTask($author$project$Lia$Markdown$Task$Update$handle(event)), section);
                case "table":
                    var _v12 = _v6.a;
                    var event = _v12.b;
                    return A3($author$project$Lia$Markdown$Update$subUpdate, js, $author$project$Lia$Markdown$Update$UpdateTable($author$project$Lia$Markdown$Table$Update$handle(event)), section);
                default:
                    break _v6$6;
            }
            else break _v6$6;
        }
        return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("subHandle Problem"), $author$project$Return$val(section));
    });
    var $author$project$Lia$Markdown$Update$subUpdate = F3(function(js, msg, section) {
        subUpdate: while(true)if (section.$ === "SubSection") {
            var subsection = section.a;
            switch(msg.$){
                case "UpdateEffect":
                    var sound = msg.a;
                    var childMsg = msg.b;
                    return A3($author$project$Return$mapEvents, "effect", subsection.id, A3($author$project$Return$mapValCmd, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            effect_model: v
                        }));
                    }, $author$project$Lia$Markdown$Update$UpdateEffect(sound), A4($author$project$Lia$Markdown$Effect$Update$update, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Nothing), sound, childMsg, subsection.effect_model)));
                case "UpdateTable":
                    var childMsg = msg.a;
                    return A3($author$project$Return$mapEvents, "table", subsection.id, A2($author$project$Return$mapVal, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            table_vector: v
                        }));
                    }, A2($author$project$Lia$Markdown$Table$Update$update, childMsg, subsection.table_vector)));
                case "UpdateCode":
                    var childMsg = msg.a;
                    return A3($author$project$Return$mapEvents, "code", subsection.id, A3($author$project$Return$mapValCmd, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            code_model: v
                        }));
                    }, $author$project$Lia$Markdown$Update$UpdateCode, A5($author$project$Lia$Markdown$Code$Update$update, $elm$core$Array$empty, $elm$core$Maybe$Nothing, js, childMsg, subsection.code_model)));
                case "UpdateQuiz":
                    var childMsg = msg.a;
                    var result = A5($author$project$Lia$Markdown$Quiz$Update$update, false, $elm$core$Maybe$Nothing, js, childMsg, subsection.quiz_vector);
                    var _v2 = result.sub;
                    if (_v2.$ === "Just") {
                        var $temp$js = js, $temp$msg = $author$project$Lia$Markdown$Update$UpdateQuiz(childMsg), $temp$section = $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            quiz_vector: result.value
                        }));
                        js = $temp$js;
                        msg = $temp$msg;
                        section = $temp$section;
                        continue subUpdate;
                    } else return A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Update$UpdateQuiz, A3($author$project$Return$mapEvents, "quiz", subsection.id, A2($author$project$Return$mapVal, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            quiz_vector: v
                        }));
                    }, result)));
                case "UpdateSurvey":
                    var childMsg = msg.a;
                    var result = A5($author$project$Lia$Markdown$Survey$Update$update, false, $elm$core$Maybe$Nothing, js, childMsg, subsection.survey_vector);
                    var _v3 = result.sub;
                    if (_v3.$ === "Just") {
                        var $temp$js = js, $temp$msg = $author$project$Lia$Markdown$Update$UpdateSurvey(childMsg), $temp$section = $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            survey_vector: result.value
                        }));
                        js = $temp$js;
                        msg = $temp$msg;
                        section = $temp$section;
                        continue subUpdate;
                    } else return A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Update$UpdateSurvey, A3($author$project$Return$mapEvents, "survey", subsection.id, A2($author$project$Return$mapVal, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            survey_vector: v
                        }));
                    }, result)));
                case "UpdateTask":
                    var childMsg = msg.a;
                    var result = A4($author$project$Lia$Markdown$Task$Update$update, $elm$core$Maybe$Nothing, js, childMsg, subsection.task_vector);
                    var _v4 = result.sub;
                    if (_v4.$ === "Just") {
                        var $temp$js = js, $temp$msg = $author$project$Lia$Markdown$Update$UpdateTask(childMsg), $temp$section = $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            task_vector: result.value
                        }));
                        js = $temp$js;
                        msg = $temp$msg;
                        section = $temp$section;
                        continue subUpdate;
                    } else return A3($author$project$Return$mapEvents, "task", subsection.id, A2($author$project$Return$mapVal, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            task_vector: v
                        }));
                    }, result));
                case "Script":
                    var childMsg = msg.a;
                    return A3($author$project$Return$mapEvents, "script", subsection.id, A3($author$project$Return$mapValCmd, function(v) {
                        return $author$project$Lia$Section$SubSection(_Utils_update(subsection, {
                            effect_model: v
                        }));
                    }, $author$project$Lia$Markdown$Update$UpdateEffect(true), A3($author$project$Lia$Markdown$Effect$Update$updateSub, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Nothing), childMsg, subsection.effect_model)));
                default:
                    return $author$project$Return$val(section);
            }
        } else {
            var sub = section.a;
            switch(msg.$){
                case "Script":
                    var childMsg = msg.a;
                    return A3($author$project$Return$mapEvents, "script", sub.id, A3($author$project$Return$mapValCmd, function(v) {
                        return $author$project$Lia$Section$SubSubSection(_Utils_update(sub, {
                            effect_model: v
                        }));
                    }, $author$project$Lia$Markdown$Update$UpdateEffect(true), A3($author$project$Lia$Markdown$Effect$Update$updateSub, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Nothing), childMsg, sub.effect_model)));
                case "UpdateEffect":
                    var sound = msg.a;
                    var childMsg = msg.b;
                    return A3($author$project$Return$mapEvents, "effect", sub.id, A3($author$project$Return$mapValCmd, function(v) {
                        return $author$project$Lia$Section$SubSubSection(_Utils_update(sub, {
                            effect_model: v
                        }));
                    }, $author$project$Lia$Markdown$Update$UpdateEffect(sound), A4($author$project$Lia$Markdown$Effect$Update$update, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Nothing), sound, childMsg, sub.effect_model)));
                default:
                    return $author$project$Return$val(section);
            }
        }
    });
    var $author$project$Lia$Markdown$Update$subs = function(globals) {
        return {
            globals: globals,
            handle: $author$project$Lia$Markdown$Update$subHandle,
            update: $author$project$Lia$Markdown$Update$subUpdate
        };
    };
    var $author$project$Lia$Markdown$Gallery$Update$close = function(id) {
        return A2($elm$core$Basics$composeR, A2($elm$core$Array$set, id, -1), $author$project$Return$val);
    };
    var $author$project$Lia$Markdown$Gallery$Update$show = F2(function(id1, id2) {
        return A2($elm$core$Basics$composeR, A2($elm$core$Array$set, id1, id2), $author$project$Return$val);
    });
    var $author$project$Lia$Markdown$Gallery$Update$update = F2(function(msg, vector) {
        switch(msg.$){
            case "Show":
                var id = msg.a;
                var id2 = msg.b;
                return A3($author$project$Lia$Markdown$Gallery$Update$show, id, id2, vector);
            case "Close":
                var id = msg.a;
                return A2($author$project$Lia$Markdown$Gallery$Update$close, id, vector);
            case "Script":
                var sub = msg.a;
                return A2($author$project$Return$script, sub, $author$project$Return$val(vector));
            default:
                return $author$project$Return$val(vector);
        }
    });
    var $author$project$Return$batchCmd = F2(function(cmds, r) {
        return _Utils_update(r, {
            command: $elm$core$Platform$Cmd$batch(A2($elm$core$List$cons, r.command, cmds))
        });
    });
    var $author$project$Lia$Markdown$Update$updateScript = function(_return) {
        var _v0 = _return.sub;
        if (_v0.$ === "Nothing") return _return;
        else {
            var sub = _v0.a;
            var section = _return.value;
            var ret = A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Update$UpdateEffect(true), A3($author$project$Return$mapEvents, "effect", section.id, A3($author$project$Lia$Markdown$Effect$Update$updateSub, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Nothing), sub, _return.value.effect_model)));
            return A2($author$project$Return$batchEvents, ret.events, A2($author$project$Return$batchCmd, _List_fromArray([
                ret.command
            ]), A2($author$project$Return$replace, _return, _Utils_update(section, {
                effect_model: ret.value
            }))));
        }
    };
    var $author$project$Lia$Markdown$Update$update = F4(function(sync, globals, msg, section) {
        switch(msg.$){
            case "UpdateEffect":
                var sound = msg.a;
                var childMsg = msg.b;
                return A3($author$project$Return$mapEvents, "effect", section.id, A3($author$project$Return$mapValCmd, function(v) {
                    return _Utils_update(section, {
                        effect_model: v
                    });
                }, $author$project$Lia$Markdown$Update$UpdateEffect(sound), A4($author$project$Lia$Markdown$Effect$Update$update, $author$project$Lia$Markdown$Update$subs($elm$core$Maybe$Just(A2($elm$core$Maybe$withDefault, globals, section.definition))), sound, childMsg, section.effect_model)));
            case "UpdateCode":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A3($author$project$Return$mapEvents, "code", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        code_model: v
                    });
                }, A5($author$project$Lia$Markdown$Code$Update$update, A2($elm$core$Maybe$withDefault, $elm$core$Array$empty, A2($elm$core$Dict$get, section.id, sync.data.code)), $elm$core$Maybe$Just(section.id), section.effect_model.javascript, childMsg, section.code_model))));
            case "UpdateQuiz":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Update$UpdateQuiz, A3($author$project$Return$mapEvents, "quiz", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        quiz_vector: v
                    });
                }, A5($author$project$Lia$Markdown$Quiz$Update$update, $author$project$Lia$Sync$Types$isConnected(sync.state), $elm$core$Maybe$Just(section.id), section.effect_model.javascript, childMsg, section.quiz_vector)))));
            case "UpdateTask":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A3($author$project$Return$mapEvents, "task", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        task_vector: v
                    });
                }, A4($author$project$Lia$Markdown$Task$Update$update, $elm$core$Maybe$Just(section.id), section.effect_model.javascript, childMsg, section.task_vector))));
            case "UpdateGallery":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A3($author$project$Return$mapEvents, "gallery", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        gallery_vector: v
                    });
                }, A2($author$project$Lia$Markdown$Gallery$Update$update, childMsg, section.gallery_vector))));
            case "UpdateSurvey":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A2($author$project$Return$mapCmd, $author$project$Lia$Markdown$Update$UpdateSurvey, A3($author$project$Return$mapEvents, "survey", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        survey_vector: v
                    });
                }, A5($author$project$Lia$Markdown$Survey$Update$update, $author$project$Lia$Sync$Types$isConnected(sync.state), $elm$core$Maybe$Just(section.id), section.effect_model.javascript, childMsg, section.survey_vector)))));
            case "UpdateTable":
                var childMsg = msg.a;
                return A3($author$project$Return$mapEvents, "table", section.id, A2($author$project$Return$mapVal, function(v) {
                    return _Utils_update(section, {
                        table_vector: v
                    });
                }, A2($author$project$Lia$Markdown$Table$Update$update, childMsg, section.table_vector)));
            case "FootnoteShow":
                var key = msg.a;
                return A2($author$project$Return$cmd, A2($author$project$Lia$Utils$focus, $author$project$Lia$Markdown$Update$NoOp, "lia-modal__close"), $author$project$Return$val(_Utils_update(section, {
                    footnote2show: $elm$core$Maybe$Just(key)
                })));
            case "FootnoteHide":
                return A2($author$project$Return$cmd, A2($elm$core$Maybe$withDefault, $elm$core$Platform$Cmd$none, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Footnote$View$byKey, $author$project$Lia$Utils$focus($author$project$Lia$Markdown$Update$NoOp)), section.footnote2show)), $author$project$Return$val(_Utils_update(section, {
                    footnote2show: $elm$core$Maybe$Nothing
                })));
            case "Script":
                var childMsg = msg.a;
                return $author$project$Lia$Markdown$Update$updateScript(A2($author$project$Return$script, childMsg, $author$project$Return$val(section)));
            default:
                return $author$project$Return$val(section);
        }
    });
    var $author$project$Lia$Markdown$Update$handle = F5(function(sync, globals, topic, event, section) {
        switch(topic){
            case "code":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateCode($author$project$Lia$Markdown$Code$Update$handle(event)), section);
            case "quiz":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateQuiz($author$project$Lia$Markdown$Quiz$Update$handle(event)), section);
            case "survey":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateSurvey($author$project$Lia$Markdown$Survey$Update$handle(event)), section);
            case "effect":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, A2($author$project$Lia$Markdown$Update$UpdateEffect, true, $author$project$Lia$Markdown$Effect$Update$handle(event)), section);
            case "task":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateTask($author$project$Lia$Markdown$Task$Update$handle(event)), section);
            case "table":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateTable($author$project$Lia$Markdown$Table$Update$handle(event)), section);
            case "gallery":
                return A4($author$project$Lia$Markdown$Update$update, sync, globals, $author$project$Lia$Markdown$Update$UpdateGallery($author$project$Lia$Markdown$Gallery$Update$handle(event)), section);
            default:
                return $author$project$Return$val(section);
        }
    });
    var $author$project$Lia$Settings$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Settings$Update$handle = $author$project$Lia$Settings$Update$Handle;
    var $author$project$Lia$Sync$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Sync$Types$Connected = function(a) {
        return {
            $: "Connected",
            a: a
        };
    };
    var $author$project$Lia$Sync$Types$Pending = {
        $: "Pending"
    };
    var $author$project$Lia$Sync$Update$Random_Result = function(a) {
        return {
            $: "Random_Result",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$closeSelect = function(sync) {
        return _Utils_update(sync, {
            open: false
        });
    };
    var $author$project$Library$IPFS$protocol = "ipfs://";
    var $author$project$Library$IPFS$proxy = "https://ipfs.io/ipfs/";
    var $author$project$Library$IPFS$fromHTTPS = function(url) {
        return A2($elm$core$String$startsWith, $author$project$Library$IPFS$proxy, url) ? $elm$core$Maybe$Just(A3($elm$core$String$replace, $author$project$Library$IPFS$proxy, $author$project$Library$IPFS$protocol, url)) : $elm$core$Maybe$Nothing;
    };
    var $author$project$Library$IPFS$isIPFS = $elm$core$String$startsWith($author$project$Library$IPFS$protocol);
    var $author$project$Library$IPFS$origin = function(url) {
        return $author$project$Library$IPFS$isIPFS(url) ? $elm$core$Maybe$Just(url) : $author$project$Library$IPFS$fromHTTPS(url);
    };
    var $author$project$Lia$Sync$Via$toString = F2(function(full, via) {
        switch(via.$){
            case "Edrys":
                return "Edrys";
            case "NoStr":
                return "NoStr";
            case "MQTT":
                return "MQTT";
            case "Torrent":
                return "Torrent";
            case "GUN":
                var urls = via.a.urls;
                var persistent = via.a.persistent;
                return "GUN" + (full ? (persistent ? "|t" : "|f") + ("|" + urls) : "");
            case "PubNub":
                var pubKey = via.a.pubKey;
                var subKey = via.a.subKey;
                return "PubNub" + (full ? "|" + (pubKey + ("|" + subKey)) : "");
            default:
                var urls = via.a;
                return "P2PT" + (full ? "|" + urls : "");
        }
    });
    var $author$project$Service$Sync$connect = function(param) {
        return A2($author$project$Service$Sync$publish, "connect", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("backend", $elm$json$Json$Encode$string($elm$core$String$toLower(A2($author$project$Lia$Sync$Via$toString, false, param.backend)))),
            _Utils_Tuple2("config", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("course", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, param.course, $author$project$Library$IPFS$origin(param.course)))),
                _Utils_Tuple2("room", $elm$json$Json$Encode$string(param.room)),
                _Utils_Tuple2("password", $elm$core$String$isEmpty(param.password) ? $elm$json$Json$Encode$null : $elm$json$Json$Encode$string(param.password)),
                _Utils_Tuple2("config", function() {
                    var _v0 = param.backend;
                    switch(_v0.$){
                        case "GUN":
                            var urls = _v0.a.urls;
                            var persistent = _v0.a.persistent;
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("persistent", $elm$json$Json$Encode$bool(persistent)),
                                _Utils_Tuple2("urls", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, A2($elm$core$List$filter, A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not), A2($elm$core$List$map, $elm$core$String$trim, A2($elm$core$String$split, ",", urls)))))
                            ]));
                        case "PubNub":
                            var pubKey = _v0.a.pubKey;
                            var subKey = _v0.a.subKey;
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("publishKey", $elm$json$Json$Encode$string(pubKey)),
                                _Utils_Tuple2("subscribeKey", $elm$json$Json$Encode$string(subKey))
                            ]));
                        case "P2PT":
                            var urls = _v0.a;
                            return A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$json$Json$Encode$string), A2($elm$core$String$split, ",", urls));
                        default:
                            return $elm$json$Json$Encode$null;
                    }
                }())
            ])))
        ])));
    };
    var $author$project$Service$Sync$disconnect = function(id) {
        return A2($author$project$Service$Sync$publish, "disconnect", $elm$json$Json$Encode$string(id));
    };
    var $elm$random$Random$Generate = function(a) {
        return {
            $: "Generate",
            a: a
        };
    };
    var $elm$random$Random$Seed = F2(function(a, b) {
        return {
            $: "Seed",
            a: a,
            b: b
        };
    });
    var $elm$random$Random$next = function(_v0) {
        var state0 = _v0.a;
        var incr = _v0.b;
        return A2($elm$random$Random$Seed, state0 * 1664525 + incr >>> 0, incr);
    };
    var $elm$random$Random$initialSeed = function(x) {
        var _v0 = $elm$random$Random$next(A2($elm$random$Random$Seed, 0, 1013904223));
        var state1 = _v0.a;
        var incr = _v0.b;
        var state2 = state1 + x >>> 0;
        return $elm$random$Random$next(A2($elm$random$Random$Seed, state2, incr));
    };
    var $elm$time$Time$Name = function(a) {
        return {
            $: "Name",
            a: a
        };
    };
    var $elm$time$Time$Offset = function(a) {
        return {
            $: "Offset",
            a: a
        };
    };
    var $elm$time$Time$Zone = F2(function(a, b) {
        return {
            $: "Zone",
            a: a,
            b: b
        };
    });
    var $elm$time$Time$customZone = $elm$time$Time$Zone;
    var $elm$time$Time$Posix = function(a) {
        return {
            $: "Posix",
            a: a
        };
    };
    var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
    var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
    var $elm$time$Time$posixToMillis = function(_v0) {
        var millis = _v0.a;
        return millis;
    };
    var $elm$random$Random$init = A2($elm$core$Task$andThen, function(time) {
        return $elm$core$Task$succeed($elm$random$Random$initialSeed($elm$time$Time$posixToMillis(time)));
    }, $elm$time$Time$now);
    var $elm$random$Random$step = F2(function(_v0, seed) {
        var generator = _v0.a;
        return generator(seed);
    });
    var $elm$random$Random$onEffects = F3(function(router, commands, seed) {
        if (!commands.b) return $elm$core$Task$succeed(seed);
        else {
            var generator = commands.a.a;
            var rest = commands.b;
            var _v1 = A2($elm$random$Random$step, generator, seed);
            var value = _v1.a;
            var newSeed = _v1.b;
            return A2($elm$core$Task$andThen, function(_v2) {
                return A3($elm$random$Random$onEffects, router, rest, newSeed);
            }, A2($elm$core$Platform$sendToApp, router, value));
        }
    });
    var $elm$random$Random$onSelfMsg = F3(function(_v0, _v1, seed) {
        return $elm$core$Task$succeed(seed);
    });
    var $elm$random$Random$Generator = function(a) {
        return {
            $: "Generator",
            a: a
        };
    };
    var $elm$random$Random$map = F2(function(func, _v0) {
        var genA = _v0.a;
        return $elm$random$Random$Generator(function(seed0) {
            var _v1 = genA(seed0);
            var a = _v1.a;
            var seed1 = _v1.b;
            return _Utils_Tuple2(func(a), seed1);
        });
    });
    var $elm$random$Random$cmdMap = F2(function(func, _v0) {
        var generator = _v0.a;
        return $elm$random$Random$Generate(A2($elm$random$Random$map, func, generator));
    });
    _Platform_effectManagers["Random"] = _Platform_createManager($elm$random$Random$init, $elm$random$Random$onEffects, $elm$random$Random$onSelfMsg, $elm$random$Random$cmdMap);
    var $elm$random$Random$command = _Platform_leaf("Random");
    var $elm$random$Random$generate = F2(function(tagger, generator) {
        return $elm$random$Random$command($elm$random$Random$Generate(A2($elm$random$Random$map, tagger, generator)));
    });
    var $elm$random$Random$peel = function(_v0) {
        var state = _v0.a;
        var word = (state ^ state >>> (state >>> 28) + 4) * 277803737;
        return (word >>> 22 ^ word) >>> 0;
    };
    var $elm$random$Random$int = F2(function(a, b) {
        return $elm$random$Random$Generator(function(seed0) {
            var _v0 = _Utils_cmp(a, b) < 0 ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
            var lo = _v0.a;
            var hi = _v0.b;
            var range = hi - lo + 1;
            if (!(range - 1 & range)) return _Utils_Tuple2(((range - 1 & $elm$random$Random$peel(seed0)) >>> 0) + lo, $elm$random$Random$next(seed0));
            else {
                var threshhold = (-range >>> 0) % range >>> 0;
                var accountForBias = function(seed) {
                    accountForBias: while(true){
                        var x = $elm$random$Random$peel(seed);
                        var seedN = $elm$random$Random$next(seed);
                        if (_Utils_cmp(x, threshhold) < 0) {
                            var $temp$seed = seedN;
                            seed = $temp$seed;
                            continue accountForBias;
                        } else return _Utils_Tuple2(x % range + lo, seedN);
                    }
                };
                return accountForBias(seed0);
            }
        });
    });
    var $elm$random$Random$listHelp = F4(function(revList, n, gen, seed) {
        listHelp: while(true){
            if (n < 1) return _Utils_Tuple2(revList, seed);
            else {
                var _v0 = gen(seed);
                var value = _v0.a;
                var newSeed = _v0.b;
                var $temp$revList = A2($elm$core$List$cons, value, revList), $temp$n = n - 1, $temp$gen = gen, $temp$seed = newSeed;
                revList = $temp$revList;
                n = $temp$n;
                gen = $temp$gen;
                seed = $temp$seed;
                continue listHelp;
            }
        }
    });
    var $elm$random$Random$list = F2(function(n, _v0) {
        var gen = _v0.a;
        return $elm$random$Random$Generator(function(seed) {
            return A4($elm$random$Random$listHelp, _List_Nil, n, gen, seed);
        });
    });
    var $author$project$Lia$Sync$Room$positiveWords = $elm$core$Array$fromList(_List_fromArray([
        "Accommodating",
        "Accomplished",
        "Authentic",
        "Awesome",
        "Awe-Inspiring",
        "Brave",
        "Bright",
        "Brilliant",
        "Caring",
        "Creative",
        "Delightful",
        "Dreamy",
        "Easy",
        "Education",
        "Effortless",
        "Empathy",
        "Empowering",
        "Engaging",
        "Epic",
        "Exciting",
        "Exhilarating",
        "Eye-Opening",
        "Fabulous",
        "Fair",
        "Fantastical",
        "Flexible",
        "Free",
        "Friendly",
        "Fun",
        "Genius",
        "Great",
        "Good",
        "Hands-On",
        "Happy",
        "High-Expectations",
        "Hilarious",
        "Honest",
        "Idyllic",
        "Important",
        "Inclusive",
        "Inspiring",
        "Interactive",
        "Inviting",
        "Joyful",
        "Kind",
        "Knowledge",
        "Learning",
        "LiaScript",
        "Life-Changing",
        "Lucky",
        "Magical",
        "Marvelous",
        "Mind-Blowing",
        "Motivating",
        "New",
        "Open",
        "Optimistic",
        "Outstanding",
        "Passion",
        "Participatory",
        "Playful",
        "Polite",
        "Relaxing",
        "Reliable",
        "Respectful",
        "Safe",
        "Social",
        "Successful",
        "Thankful",
        "Thoughtful",
        "Trustworthy",
        "Ultimate",
        "United",
        "Useful",
        "Varied",
        "Warm",
        "Welcoming",
        "Yummy"
    ]));
    var $elm_community$list_extra$List$Extra$splitAt = F2(function(n, xs) {
        return _Utils_Tuple2(A2($elm$core$List$take, n, xs), A2($elm$core$List$drop, n, xs));
    });
    var $elm_community$list_extra$List$Extra$uniqueHelp = F4(function(f, existing, remaining, accumulator) {
        uniqueHelp: while(true){
            if (!remaining.b) return $elm$core$List$reverse(accumulator);
            else {
                var first = remaining.a;
                var rest = remaining.b;
                var computedFirst = f(first);
                if (A2($elm$core$List$member, computedFirst, existing)) {
                    var $temp$f = f, $temp$existing = existing, $temp$remaining = rest, $temp$accumulator = accumulator;
                    f = $temp$f;
                    existing = $temp$existing;
                    remaining = $temp$remaining;
                    accumulator = $temp$accumulator;
                    continue uniqueHelp;
                } else {
                    var $temp$f = f, $temp$existing = A2($elm$core$List$cons, computedFirst, existing), $temp$remaining = rest, $temp$accumulator = A2($elm$core$List$cons, first, accumulator);
                    f = $temp$f;
                    existing = $temp$existing;
                    remaining = $temp$remaining;
                    accumulator = $temp$accumulator;
                    continue uniqueHelp;
                }
            }
        }
    });
    var $elm_community$list_extra$List$Extra$unique = function(list) {
        return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
    };
    var $author$project$Lia$Sync$Room$toSentence = A2($elm$core$Basics$composeR, $elm_community$list_extra$List$Extra$unique, A2($elm$core$Basics$composeR, $elm$core$List$filterMap(function(id) {
        return A2($elm$core$Array$get, id, $author$project$Lia$Sync$Room$positiveWords);
    }), A2($elm$core$Basics$composeR, $elm_community$list_extra$List$Extra$splitAt(4), A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$String$concat))));
    var $author$project$Lia$Sync$Room$generator = A2($elm$random$Random$map, $author$project$Lia$Sync$Room$toSentence, A2($elm$random$Random$list, 10, A2($elm$random$Random$int, 0, $elm$core$Array$length($author$project$Lia$Sync$Room$positiveWords))));
    var $author$project$Lia$Sync$Types$id = function(state) {
        if (state.$ === "Connected") {
            var hash = state.a;
            return $elm$core$Maybe$Just(hash);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Service$Sync$join = $author$project$Service$Sync$publish("join");
    var $author$project$Lia$Sync$Container$encode = F2(function(fn, _v0) {
        var bag = _v0.a;
        return A2($elm$json$Json$Encode$array, A2($elm$json$Json$Encode$dict, $elm$core$Basics$identity, fn), bag);
    });
    var $author$project$Lia$Markdown$Code$Sync$encoder = $elm$json$Json$Encode$array($elm$json$Json$Encode$string);
    var $author$project$Lia$Section$syncEncode = function(s) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("q", A2($author$project$Lia$Sync$Container$encode, $author$project$Lia$Markdown$Quiz$Sync$encoder, s.quiz)),
            _Utils_Tuple2("s", A2($author$project$Lia$Sync$Container$encode, $author$project$Lia$Markdown$Survey$Sync$encoder, s.survey)),
            _Utils_Tuple2("c", A2($elm$json$Json$Encode$array, $author$project$Lia$Markdown$Code$Sync$encoder, s.code))
        ]));
    };
    var $author$project$Lia$Sync$Container$Container = function(a) {
        return {
            $: "Container",
            a: a
        };
    };
    var $author$project$Lia$Sync$Container$init = F2(function(id, map) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$map(function(x) {
            var _v0 = map(x);
            if (_v0.$ === "Just") {
                var sync = _v0.a;
                return $elm$core$Dict$fromList(_List_fromArray([
                    _Utils_Tuple2(id, sync)
                ]));
            } else return $elm$core$Dict$empty;
        }), $author$project$Lia$Sync$Container$Container);
    });
    var $author$project$Lia$Section$syncInit = F2(function(id, section) {
        return {
            code: A2($elm$core$Array$map, $author$project$Lia$Markdown$Code$Sync$sync, section.code_model.evaluate),
            quiz: A3($author$project$Lia$Sync$Container$init, id, $author$project$Lia$Markdown$Quiz$Sync$sync, section.quiz_vector),
            survey: A3($author$project$Lia$Sync$Container$init, id, $author$project$Lia$Markdown$Survey$Sync$sync, section.survey_vector)
        };
    });
    var $author$project$Lia$Section$sync = function(id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Section$syncInit(id), $author$project$Lia$Section$syncEncode);
    };
    var $author$project$Lia$Sync$Update$join = function(model) {
        var _v0 = model.sync.state;
        if (_v0.$ === "Connected") {
            var id = _v0.a;
            return A2($author$project$Return$batchEvent, $author$project$Service$Sync$join(A2($elm$json$Json$Encode$array, $author$project$Lia$Section$sync(id), model.sections)), $author$project$Return$val(model));
        } else return $author$project$Return$val(model);
    };
    var $author$project$Session$encodeRoom = function(_v0) {
        var backend = _v0.backend;
        var course = _v0.course;
        var room = _v0.room;
        return $truqu$elm_base64$Base64$encode(A2($elm$json$Json$Encode$encode, 0, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("backend", $elm$json$Json$Encode$string(backend)),
            _Utils_Tuple2("course", $elm$json$Json$Encode$string(course)),
            _Utils_Tuple2("room", $elm$json$Json$Encode$string(room))
        ]))));
    };
    var $author$project$Session$setQuery = F2(function(query, session) {
        var url = session.url;
        return _Utils_update(session, {
            url: _Utils_update(url, {
                query: $elm$core$Maybe$Just(query)
            })
        });
    });
    var $author$project$Session$setClass = function(room) {
        return $author$project$Session$setQuery($author$project$Session$encodeRoom(room));
    };
    var $elm$core$Dict$singleton = F2(function(key, value) {
        return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
    });
    var $elm$core$Set$singleton = function(key) {
        return $elm$core$Set$Set_elm_builtin(A2($elm$core$Dict$singleton, key, _Utils_Tuple0));
    };
    var $author$project$Lia$Sync$Update$dataDecoder = function(data) {
        return $elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$list(A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "data", data))));
    };
    var $author$project$Lia$Sync$Update$dataMerge = F2(function(data, _new) {
        return A3($elm$core$List$foldl, F2(function(_v0, store) {
            var key = _v0.a;
            var value = _v0.b;
            return A3($elm$core$Dict$insert, key, value, store);
        }), data, _new);
    });
    var $author$project$Lia$Sync$Types$Cursor = F6(function(id, color, section, project, file, state) {
        return {
            color: color,
            file: file,
            id: id,
            project: project,
            section: section,
            state: state
        };
    });
    var $author$project$Lia$Markdown$Code$Editor$Cursor = F2(function(position, selection) {
        return {
            position: position,
            selection: selection
        };
    });
    var $author$project$Lia$Markdown$Code$Editor$decodeCursor = A3($elm$json$Json$Decode$map2, $author$project$Lia$Markdown$Code$Editor$Cursor, A2($elm$json$Json$Decode$field, "position", A3($elm$json$Json$Decode$map2, F2(function(row, column) {
        return {
            column: column,
            row: row
        };
    }), A2($elm$json$Json$Decode$field, "row", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "column", $elm$json$Json$Decode$int))), A2($elm$json$Json$Decode$field, "selection", $elm$json$Json$Decode$list($elm$json$Json$Decode$int)));
    var $elm$json$Json$Decode$map6 = _Json_map6;
    var $author$project$Lia$Sync$Types$decodeCursor = A7($elm$json$Json$Decode$map6, $author$project$Lia$Sync$Types$Cursor, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "color", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "section", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "project", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "file", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "state", $author$project$Lia$Markdown$Code$Editor$decodeCursor));
    var $author$project$Lia$Sync$Types$decodeCursors = $elm$json$Json$Decode$list($author$project$Lia$Sync$Types$decodeCursor);
    var $author$project$Lia$Sync$Types$decodePeers = $elm$json$Json$Decode$list($elm$json$Json$Decode$string);
    var $author$project$Lia$Chat$Sync$Change = F4(function(id, color, message, user) {
        return {
            color: color,
            id: id,
            message: message,
            user: user
        };
    });
    var $author$project$Lia$Chat$Sync$changeDecoder = A5($elm$json$Json$Decode$map4, $author$project$Lia$Chat$Sync$Change, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "color", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "message", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "user", $elm$json$Json$Decode$string));
    var $author$project$Lia$Chat$Sync$decoder = $elm$json$Json$Decode$list($author$project$Lia$Chat$Sync$changeDecoder);
    var $author$project$Lia$Markdown$Code$Sync$decoder = $elm$json$Json$Decode$array($elm$json$Json$Decode$string);
    var $author$project$Lia$Markdown$Quiz$Sync$decoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$int),
        $elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
    ]));
    var $author$project$Lia$Markdown$Survey$Sync$decoder = A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Survey$Sync$Sync, $author$project$Lia$Markdown$Survey$Json$toState);
    var $author$project$Lia$Sync$Container$decoder = function(fn) {
        return A2($elm$json$Json$Decode$map, $author$project$Lia$Sync$Container$Container, $elm$json$Json$Decode$array($elm$json$Json$Decode$dict(fn)));
    };
    var $author$project$Lia$Section$Base = F3(function(indentation, title, code) {
        return {
            code: code,
            indentation: indentation,
            title: title
        };
    });
    var $author$project$Lia$Chat$Model$load = function(id) {
        return A3($author$project$Service$Event$pushWithId, "code", id, A2($author$project$Service$Event$init, "db", {
            cmd: "load",
            param: $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("table", $elm$json$Json$Encode$string("code")),
                _Utils_Tuple2("id", $elm$json$Json$Encode$int(id)),
                _Utils_Tuple2("data", $elm$json$Json$Encode$null)
            ]))
        }));
    };
    var $author$project$Lia$Chat$Model$parse = F5(function(scriptsEnabled, searchIndex, definition, change, _v0) {
        var todo = _v0.a;
        var chat = _v0.b;
        var _v1 = A3($author$project$Lia$Parser$Parser$parse_section, searchIndex, definition, A3($author$project$Lia$Section$init, 0, change.id, A3($author$project$Lia$Section$Base, 2, _List_Nil, change.message + "\n\n")));
        if (_v1.$ === "Ok") {
            var _new = _v1.a;
            var effect_model = _new.effect_model;
            var _v2 = $elm$core$List$unzip(A2($elm$core$List$map, function(js) {
                return _Utils_Tuple2(scriptsEnabled ? js : _Utils_update(js, {
                    result: $elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Types$HTML("<code class='notranslate lia-code lia-code--inline'>blocked script</code>")),
                    running: true
                }), js.script);
            }, $elm$core$Array$toList(_new.effect_model.javascript)));
            var javascript = _v2.a;
            var _eval = _v2.b;
            var newTodo = scriptsEnabled ? A2($elm$core$List$append, todo, A2($elm$core$List$indexedMap, F2(function(id, event) {
                return A3($author$project$Service$Event$pushWithId, "effect", change.id, A3($author$project$Service$Event$pushWithId, "script", id, A3($author$project$Service$Script$exec, 350, false, event)));
            }), _eval)) : todo;
            var section = _Utils_update(_new, {
                effect_model: _Utils_update(effect_model, {
                    javascript: $elm$core$Array$fromList(javascript)
                })
            });
            return _Utils_Tuple2($elm$core$Array$isEmpty(section.code_model.evaluate) ? newTodo : A2($elm$core$List$cons, $author$project$Lia$Chat$Model$load(change.id), newTodo), A3($elm$core$Dict$insert, $elm$core$String$fromInt(change.id), section, chat));
        } else return _Utils_Tuple2(todo, chat);
    });
    var $author$project$Lia$Chat$Model$insert = F5(function(scriptsEnabled, searchIndex, definition, model, changes) {
        var _v0 = A3($elm$core$List$foldl, A3($author$project$Lia$Chat$Model$parse, scriptsEnabled, searchIndex, definition), _Utils_Tuple2(_List_Nil, model.messages), changes);
        var todo = _v0.a;
        var messages = _v0.b;
        return _Utils_Tuple2(todo, _Utils_update(model, {
            messages: messages
        }));
    });
    var $author$project$Service$Slide$scrollDown = F2(function(elementID, delay) {
        return A2($author$project$Service$Slide$event, "scroll_down", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$string(elementID)),
            _Utils_Tuple2("delay", $elm$json$Json$Encode$int(delay))
        ])));
    });
    var $author$project$Lia$Settings$Update$updatedChatMessages = function(settings) {
        if (settings.chat.show) return settings;
        else {
            var chat = settings.chat;
            return _Utils_update(settings, {
                chat: _Utils_update(chat, {
                    updates: true
                })
            });
        }
    };
    var $author$project$Lia$Sync$Update$warn = F2(function(what, info) {
        return $author$project$Return$batchEvent($author$project$Service$Console$warn("Sync: " + (what + (" -> " + info))));
    });
    var $author$project$Lia$Sync$Update$synchronize = F2(function(model, json) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "cmd", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "param", $elm$json$Json$Decode$value)), json);
        if (_v0.$ === "Ok") switch(_v0.a.a){
            case "cursor":
                var _v1 = _v0.a;
                var param = _v1.b;
                var sync = model.sync;
                var data = sync.data;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        data: _Utils_update(data, {
                            cursor: A2($elm$core$Result$withDefault, data.cursor, A2($elm$json$Json$Decode$decodeValue, $author$project$Lia$Sync$Types$decodeCursors, param))
                        })
                    })
                }));
            case "chat":
                var _v2 = _v0.a;
                var param = _v2.b;
                var _v3 = A2($elm$core$Result$withDefault, _Utils_Tuple2(_List_Nil, model.chat), A2($elm$core$Result$map, A4($author$project$Lia$Chat$Model$insert, model.sync.scriptsEnabled, model.search_index, model.definition, model.chat), A2($elm$json$Json$Decode$decodeValue, $author$project$Lia$Chat$Sync$decoder, param)));
                var todo = _v3.a;
                var chat = _v3.b;
                return A2($author$project$Return$batchEvent, A2($author$project$Service$Slide$scrollDown, "lia-chat-messages", 350), A2($author$project$Return$batchEvents, todo, $author$project$Return$val(_Utils_update(model, {
                    chat: chat,
                    settings: $author$project$Lia$Settings$Update$updatedChatMessages(model.settings)
                }))));
            case "peer":
                var _v4 = _v0.a;
                var param = _v4.b;
                var sync = model.sync;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        peers: A2($elm$core$Result$withDefault, sync.peers, A2($elm$core$Result$map, $elm$core$Set$fromList, A2($elm$json$Json$Decode$decodeValue, $author$project$Lia$Sync$Types$decodePeers, param)))
                    })
                }));
            case "code":
                var _v5 = _v0.a;
                var param = _v5.b;
                var _v6 = A2($elm$core$Result$map, $author$project$Lia$Sync$Update$dataMerge(model.sync.data.code), A2($author$project$Lia$Sync$Update$dataDecoder, $elm$json$Json$Decode$array($author$project$Lia$Markdown$Code$Sync$decoder), param));
                if (_v6.$ === "Ok") {
                    var dataUpdate = _v6.a;
                    var sync = model.sync;
                    var data = sync.data;
                    return $author$project$Return$val(_Utils_update(model, {
                        sync: _Utils_update(sync, {
                            data: _Utils_update(data, {
                                code: dataUpdate
                            })
                        })
                    }));
                } else {
                    var info = _v6.a;
                    return A3($author$project$Lia$Sync$Update$warn, "decoding code", $elm$json$Json$Decode$errorToString(info), $author$project$Return$val(model));
                }
            case "quiz":
                var _v7 = _v0.a;
                var param = _v7.b;
                var _v8 = A2($elm$core$Result$map, $author$project$Lia$Sync$Update$dataMerge(model.sync.data.quiz), A2($author$project$Lia$Sync$Update$dataDecoder, $author$project$Lia$Sync$Container$decoder($author$project$Lia$Markdown$Quiz$Sync$decoder), param));
                if (_v8.$ === "Ok") {
                    var dataUpdate = _v8.a;
                    var sync = model.sync;
                    var data = sync.data;
                    return $author$project$Return$val(_Utils_update(model, {
                        sync: _Utils_update(sync, {
                            data: _Utils_update(data, {
                                quiz: dataUpdate
                            })
                        })
                    }));
                } else {
                    var info = _v8.a;
                    return A3($author$project$Lia$Sync$Update$warn, "decoding quiz", $elm$json$Json$Decode$errorToString(info), $author$project$Return$val(model));
                }
            case "survey":
                var _v9 = _v0.a;
                var param = _v9.b;
                var _v10 = A2($elm$core$Result$map, $author$project$Lia$Sync$Update$dataMerge(model.sync.data.survey), A2($author$project$Lia$Sync$Update$dataDecoder, $author$project$Lia$Sync$Container$decoder($author$project$Lia$Markdown$Survey$Sync$decoder), param));
                if (_v10.$ === "Ok") {
                    var dataUpdate = _v10.a;
                    var sync = model.sync;
                    var data = sync.data;
                    return $author$project$Return$val(_Utils_update(model, {
                        sync: _Utils_update(sync, {
                            data: _Utils_update(data, {
                                survey: dataUpdate
                            })
                        })
                    }));
                } else {
                    var info = _v10.a;
                    return A3($author$project$Lia$Sync$Update$warn, "decoding survey", $elm$json$Json$Decode$errorToString(info), $author$project$Return$val(model));
                }
            default:
                var _v11 = _v0.a;
                var cmd = _v11.a;
                return A3($author$project$Lia$Sync$Update$warn, "unknown command", cmd, $author$project$Return$val(model));
        }
        else {
            var info = _v0.a;
            return A3($author$project$Lia$Sync$Update$warn, "decoding error", $elm$json$Json$Decode$errorToString(info), $author$project$Return$val(model));
        }
    });
    var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
    var $author$project$Session$update = function(session) {
        return A2($elm$browser$Browser$Navigation$replaceUrl, session.key, $elm$url$Url$toString(session.url));
    };
    var $author$project$Lia$Sync$Via$update = F2(function(msg, backend) {
        var _v0 = _Utils_Tuple2(msg, backend);
        _v0$5: while(true)switch(_v0.a.$){
            case "InputGun":
                if (_v0.b.$ === "GUN") {
                    var urls = _v0.a.a;
                    var data = _v0.b.a;
                    return $author$project$Lia$Sync$Via$GUN(_Utils_update(data, {
                        urls: urls
                    }));
                } else break _v0$5;
            case "CheckboxGun":
                if (_v0.b.$ === "GUN") {
                    var _v1 = _v0.a;
                    var data = _v0.b.a;
                    return $author$project$Lia$Sync$Via$GUN(_Utils_update(data, {
                        persistent: !data.persistent
                    }));
                } else break _v0$5;
            case "InputPubNub":
                if (_v0.b.$ === "PubNub") switch(_v0.a.a){
                    case "pub":
                        var _v2 = _v0.a;
                        var _new = _v2.b;
                        var data = _v0.b.a;
                        return $author$project$Lia$Sync$Via$PubNub(_Utils_update(data, {
                            pubKey: _new
                        }));
                    case "sub":
                        var _v3 = _v0.a;
                        var _new = _v3.b;
                        var data = _v0.b.a;
                        return $author$project$Lia$Sync$Via$PubNub(_Utils_update(data, {
                            subKey: _new
                        }));
                    default:
                        break _v0$5;
                }
                else break _v0$5;
            default:
                if (_v0.b.$ === "P2PT") {
                    var urls = _v0.a.a;
                    return $author$project$Lia$Sync$Via$P2PT(urls);
                } else break _v0$5;
        }
        return backend;
    });
    var $author$project$Lia$Sync$Update$updateSync = F2(function(msg, sync) {
        switch(msg.$){
            case "Open":
                var open = msg.a;
                return _Utils_update(sync, {
                    open: open
                });
            case "Select":
                var backend = msg.a;
                return _Utils_update(sync, {
                    open: false,
                    select: backend
                });
            default:
                var childMsg = msg.a;
                var _v1 = sync.select;
                if (_v1.$ === "Just" && _v1.a.a) {
                    var _v2 = _v1.a;
                    var select = _v2.b;
                    return _Utils_update(sync, {
                        select: $elm$core$Maybe$Just(_Utils_Tuple2(true, A2($author$project$Lia$Sync$Via$update, childMsg, select)))
                    });
                } else return sync;
        }
    });
    var $author$project$Lia$Sync$Update$update = F3(function(session, model, msg) {
        var sync = model.sync;
        switch(msg.$){
            case "Handle":
                var event = msg.a;
                var _v1 = $author$project$Service$Event$message(event);
                switch(_v1.a){
                    case "update":
                        var param = _v1.b;
                        return A2($author$project$Lia$Sync$Update$synchronize, model, param);
                    case "error":
                        var param = _v1.b;
                        var _v2 = _Utils_Tuple2(A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, param), sync.sync.select);
                        if (_v2.a.$ === "Ok" && _v2.b.$ === "Just" && _v2.b.a.a) {
                            var message = _v2.a.a;
                            var _v3 = _v2.b.a;
                            return $author$project$Return$val(_Utils_update(model, {
                                sync: _Utils_update(sync, {
                                    error: $elm$core$Maybe$Just(message),
                                    peers: $elm$core$Set$empty,
                                    state: $author$project$Lia$Sync$Types$Disconnected
                                })
                            }));
                        } else return $author$project$Return$val(_Utils_update(model, {
                            sync: _Utils_update(sync, {
                                error: $elm$core$Maybe$Just("unknown"),
                                peers: $elm$core$Set$empty,
                                state: $author$project$Lia$Sync$Types$Disconnected
                            })
                        }));
                    case "connect":
                        var param = _v1.b;
                        var _v4 = _Utils_Tuple2(A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, param), sync.sync.select);
                        if (_v4.a.$ === "Ok" && _v4.b.$ === "Just" && _v4.b.a.a) {
                            var hashID = _v4.a.a;
                            var _v5 = _v4.b.a;
                            var backend = _v5.b;
                            return A2($author$project$Return$cmd, $author$project$Session$update(A2($author$project$Session$setClass, {
                                backend: A2($author$project$Lia$Sync$Via$toString, true, backend),
                                course: model.readme,
                                room: sync.room
                            }, session)), $author$project$Lia$Sync$Update$join(_Utils_update(model, {
                                sync: _Utils_update(sync, {
                                    error: $elm$core$Maybe$Nothing,
                                    peers: $elm$core$Set$singleton(hashID),
                                    state: $author$project$Lia$Sync$Types$Connected(hashID)
                                })
                            })));
                        } else return A2($author$project$Return$cmd, $author$project$Session$update(A2($author$project$Session$setQuery, model.readme, session)), $author$project$Return$val(_Utils_update(model, {
                            sync: _Utils_update(sync, {
                                peers: $elm$core$Set$empty,
                                state: $author$project$Lia$Sync$Types$Disconnected
                            })
                        })));
                    case "disconnect":
                        return A2($author$project$Return$cmd, $author$project$Session$update(A2($author$project$Session$setQuery, model.readme, session)), $author$project$Return$val(_Utils_update(model, {
                            chat: $author$project$Lia$Chat$Model$init,
                            sync: _Utils_update(sync, {
                                data: {
                                    code: $elm$core$Dict$empty,
                                    cursor: _List_Nil,
                                    quiz: $elm$core$Dict$empty,
                                    survey: $elm$core$Dict$empty
                                },
                                error: $elm$core$Maybe$Nothing,
                                peers: $elm$core$Set$empty,
                                state: $author$project$Lia$Sync$Types$Disconnected
                            })
                        })));
                    default:
                        return $author$project$Return$val(model);
                }
            case "Password":
                var str = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        password: str
                    })
                }));
            case "Room":
                var str = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        room: str
                    })
                }));
            case "Random_Generate":
                return A2($author$project$Return$cmd, A2($elm$random$Random$generate, $author$project$Lia$Sync$Update$Random_Result, $author$project$Lia$Sync$Room$generator), $author$project$Return$val(model));
            case "Random_Result":
                var roomName = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        room: roomName
                    })
                }));
            case "Backend":
                var sub = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        sync: A2($author$project$Lia$Sync$Update$updateSync, sub, sync.sync)
                    })
                }));
            case "EnabledScript":
                var enabled = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        scriptsEnabled: !enabled
                    })
                }));
            case "Connect":
                var _v6 = _Utils_Tuple2(sync.sync.select, sync.state);
                if (_v6.a.$ === "Just" && _v6.a.a.a && _v6.b.$ === "Disconnected") {
                    var _v7 = _v6.a.a;
                    var backend = _v7.b;
                    var _v8 = _v6.b;
                    return A2($author$project$Return$batchEvent, $author$project$Service$Sync$connect({
                        backend: backend,
                        course: model.readme,
                        password: sync.password,
                        room: sync.room
                    }), $author$project$Return$val(_Utils_update(model, {
                        sync: _Utils_update(sync, {
                            state: $author$project$Lia$Sync$Types$Pending,
                            sync: $author$project$Lia$Sync$Update$closeSelect(sync.sync)
                        })
                    })));
                } else return $author$project$Return$val(model);
            default:
                return A2($author$project$Return$batchEvent, A2($elm$core$Maybe$withDefault, $author$project$Service$Event$none, A2($elm$core$Maybe$map, $author$project$Service$Sync$disconnect, $author$project$Lia$Sync$Types$id(model.sync.state))), $author$project$Return$val(_Utils_update(model, {
                    sync: _Utils_update(sync, {
                        state: $author$project$Lia$Sync$Types$Pending
                    })
                })));
        }
    });
    var $author$project$Lia$Sync$Update$handle = F2(function(session, model) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Sync$Update$Handle, A2($author$project$Lia$Sync$Update$update, session, model));
    });
    var $author$project$Lia$Markdown$Effect$Update$Init = function(a) {
        return {
            $: "Init",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Update$init = function(run_all_javascript) {
        return $author$project$Lia$Markdown$Effect$Update$Init(run_all_javascript);
    };
    var $author$project$Lia$Markdown$Code$Update$runAll = F3(function(sectionID, scripts, model) {
        return A3($elm$core$Array$foldl, F2(function(_v0, _v1) {
            var id = _v1.a;
            var _return = _v1.b;
            var ret = A5($author$project$Lia$Markdown$Code$Update$execute, $elm$core$Array$empty, sectionID, scripts, _return.value, id);
            return _Utils_Tuple2(id + 1, A2($author$project$Return$batchCmd, _List_fromArray([
                _return.command
            ]), A2($author$project$Return$batchEvents, _return.events, ret)));
        }), _Utils_Tuple2(0, $author$project$Return$val(model)), model.evaluate).b;
    });
    var $author$project$Lia$Markdown$Update$initEffect = F5(function(sync, globals, run_all_javascript, sound, section) {
        var _return = A4($author$project$Lia$Markdown$Update$update, sync, globals, A2($author$project$Lia$Markdown$Update$UpdateEffect, sound, $author$project$Lia$Markdown$Effect$Update$init(run_all_javascript)), section);
        var return2 = $author$project$Lia$Markdown$Update$updateScript(A3($author$project$Return$mapEvents, "code", section.id, A2($author$project$Return$mapVal, function(v) {
            return _Utils_update(section, {
                code_model: v
            });
        }, A3($author$project$Lia$Markdown$Code$Update$runAll, $elm$core$Maybe$Just(section.id), section.effect_model.javascript, _return.value.code_model))));
        return A2($author$project$Return$batchCmd, _List_fromArray([
            _return.command
        ]), A2($author$project$Return$batchEvents, _return.events, return2));
    });
    var $author$project$Lia$Update$getTitle = function(model) {
        var _v0 = $author$project$Lia$Update$get_active_section(model);
        if (_v0.$ === "Just") {
            var sec = _v0.a;
            return A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, {
                input: {
                    options: $elm$core$Array$empty,
                    state: $elm$core$Array$empty
                },
                scripts: sec.effect_model.javascript,
                visible: sec.visible ? $elm$core$Maybe$Just(sec.effect_model.visible) : $elm$core$Maybe$Nothing
            }, sec.title) + (" \xb7 " + model.title);
        } else return model.title;
    };
    var $author$project$Service$Slide$initialize = F2(function(slide, title) {
        return A2($author$project$Service$Slide$event, "init", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("slide", $elm$json$Json$Encode$int(slide)),
            _Utils_Tuple2("title", $elm$json$Json$Encode$string(title))
        ])));
    });
    var $author$project$Lia$Update$initializeSlide = function(model) {
        return A2($author$project$Service$Slide$initialize, model.section_active, $author$project$Lia$Update$getTitle(model));
    };
    var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
    var $author$project$Session$navTo = function(session) {
        return A2($elm$core$Basics$composeR, $elm$url$Url$toString, $elm$browser$Browser$Navigation$pushUrl(session.key));
    };
    var $author$project$Session$navToHome = function(session) {
        var url = session.url;
        return A2($author$project$Session$navTo, session, _Utils_update(url, {
            fragment: $elm$core$Maybe$Nothing,
            query: $elm$core$Maybe$Nothing
        }));
    };
    var $author$project$Session$navToSlide = F2(function(session, id) {
        var url = session.url;
        return A2($author$project$Session$navTo, session, _Utils_update(url, {
            fragment: $elm$core$Maybe$Just($elm$core$String$fromInt(1 + id))
        }));
    });
    var $author$project$Lia$Markdown$Effect$Update$Next = {
        $: "Next"
    };
    var $author$project$Lia$Markdown$Effect$Update$next = $author$project$Lia$Markdown$Effect$Update$Next;
    var $author$project$Lia$Markdown$Update$nextEffect = F3(function(sync, globals, sound) {
        return A3($author$project$Lia$Markdown$Update$update, sync, globals, A2($author$project$Lia$Markdown$Update$UpdateEffect, sound, $author$project$Lia$Markdown$Effect$Update$next));
    });
    var $author$project$Lia$Markdown$Effect$Update$Previous = {
        $: "Previous"
    };
    var $author$project$Lia$Markdown$Effect$Update$previous = $author$project$Lia$Markdown$Effect$Update$Previous;
    var $author$project$Lia$Markdown$Update$previousEffect = F3(function(sync, globals, sound) {
        return A3($author$project$Lia$Markdown$Update$update, sync, globals, A2($author$project$Lia$Markdown$Update$UpdateEffect, sound, $author$project$Lia$Markdown$Effect$Update$previous));
    });
    var $author$project$Lia$Markdown$Update$ttsReplay = F3(function(sound, _true, section) {
        return sound ? _true ? A2($elm$core$Maybe$map, function(s) {
            return A3($author$project$Service$Event$pushWithId, "settings", s.id, $author$project$Service$TTS$readFrom(s.effect_model.visible));
        }, section) : $elm$core$Maybe$Just(A3($author$project$Service$Event$pushWithId, "settings", A2($elm$core$Maybe$withDefault, -1, A2($elm$core$Maybe$map, function($) {
            return $.id;
        }, section)), $author$project$Service$TTS$cancel)) : $elm$core$Maybe$Nothing;
    });
    var $author$project$Lia$Chat$Update$UpdateMarkdown = F2(function(a, b) {
        return {
            $: "UpdateMarkdown",
            a: a,
            b: b
        };
    });
    var $author$project$Service$Sync$chat = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $author$project$Service$Sync$publish("chat"));
    var $author$project$Lia$Chat$Update$update = function(_v0) {
        var msg = _v0.msg;
        var definition = _v0.definition;
        var model = _v0.model;
        var sync = _v0.sync;
        switch(msg.$){
            case "UpdateMarkdown":
                var id = msg.a;
                var childMsg = msg.b;
                var _v2 = A2($elm$core$Dict$get, id, model.messages);
                if (_v2.$ === "Just") {
                    var section = _v2.a;
                    return A3($author$project$Return$mapValCmd, function(sec) {
                        return _Utils_update(model, {
                            messages: A3($elm$core$Dict$insert, id, sec, model.messages)
                        });
                    }, $author$project$Lia$Chat$Update$UpdateMarkdown(id), A4($author$project$Lia$Markdown$Update$update, sync, definition, childMsg, section));
                } else return $author$project$Return$val(model);
            case "Handle":
                var event = msg.a;
                var _v3 = $author$project$Service$Event$popWithId(event);
                if (_v3.$ === "Just") {
                    var _v4 = _v3.a;
                    var topic = _v4.a;
                    var id = _v4.b;
                    var e = _v4.c;
                    var id_ = $elm$core$String$fromInt(id);
                    var _v5 = A2($elm$core$Dict$get, id_, model.messages);
                    if (_v5.$ === "Just") {
                        var section = _v5.a;
                        return A3($author$project$Return$mapValCmd, function(sec) {
                            return _Utils_update(model, {
                                messages: A3($elm$core$Dict$insert, id_, sec, model.messages)
                            });
                        }, $author$project$Lia$Chat$Update$UpdateMarkdown(id_), A5($author$project$Lia$Markdown$Update$handle, sync, definition, topic, e, section));
                    } else return $author$project$Return$val(model);
                } else return $author$project$Return$val(model);
            case "Input":
                var str = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    input: str
                }));
            default:
                return $elm$core$String$trim(model.input) === "" ? $author$project$Return$val(model) : A2($author$project$Return$batchEvent, $author$project$Service$Sync$chat(model.input), $author$project$Return$val(_Utils_update(model, {
                    input: ""
                })));
        }
    };
    var $author$project$Lia$Index$Update$NoOp = {
        $: "NoOp"
    };
    var $author$project$Lia$Index$Update$make_visible = function(section) {
        return _Utils_update(section, {
            visible: true
        });
    };
    var $author$project$Lia$Index$Update$search_ = F2(function(pattern, text) {
        search_: while(true){
            if (!pattern.b) return true;
            else {
                var p = pattern.a;
                var ps = pattern.b;
                if (!A2($elm$core$String$contains, p, text)) return false;
                else {
                    var $temp$pattern = ps, $temp$text = text;
                    pattern = $temp$pattern;
                    text = $temp$text;
                    continue search_;
                }
            }
        }
    });
    var $author$project$Lia$Index$Update$search = F2(function(pattern, section) {
        return _Utils_update(section, {
            visible: A2($author$project$Lia$Index$Update$search_, A2($elm$core$List$filter, $elm$core$Basics$neq(""), A2($elm$core$String$split, " ", pattern)), $elm$core$String$toLower(_Utils_ap(section.code, $author$project$Lia$Markdown$Inline$Stringify$stringify(section.title))))
        });
    });
    var $author$project$Lia$Index$Update$scan = F2(function(sections, pattern) {
        var check = pattern === "" ? $author$project$Lia$Index$Update$make_visible : $author$project$Lia$Index$Update$search($elm$core$String$toLower(pattern));
        return A2($elm$core$Array$map, check, sections);
    });
    var $author$project$Lia$Index$Update$update = F3(function(msg, model, sections) {
        switch(msg.$){
            case "ScanIndex":
                var pattern = msg.a;
                return _Utils_Tuple3(pattern, A2($author$project$Lia$Index$Update$scan, sections, pattern), $elm$core$Platform$Cmd$none);
            case "DeleteSearch":
                return _Utils_Tuple3("", A2($author$project$Lia$Index$Update$scan, sections, ""), A2($author$project$Lia$Utils$focus, $author$project$Lia$Index$Update$NoOp, "lia-input-search"));
            default:
                return _Utils_Tuple3(model, sections, $elm$core$Platform$Cmd$none);
        }
    });
    var $author$project$Lia$Settings$Update$Action = function(a) {
        return {
            $: "Action",
            a: a
        };
    };
    var $author$project$Lia$Settings$Types$Close = {
        $: "Close"
    };
    var $author$project$Lia$Settings$Update$Ignore = {
        $: "Ignore"
    };
    var $author$project$Lia$Settings$Update$Toggle = function(a) {
        return {
            $: "Toggle",
            a: a
        };
    };
    var $author$project$Service$Slide$fullscreen = A2($author$project$Service$Slide$event, "fullscreen", $elm$json$Json$Encode$bool(true));
    var $author$project$Service$Translate$google = $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "translate", {
        cmd: "google",
        param: $elm$json$Json$Encode$null
    }));
    var $author$project$Service$Share$link = function(_v0) {
        var title = _v0.title;
        var text = _v0.text;
        var url = _v0.url;
        var image = _v0.image;
        return $author$project$Service$Event$withNoReply(A2($author$project$Service$Event$init, "share", {
            cmd: "link",
            param: $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("title", $elm$json$Json$Encode$string(title)),
                _Utils_Tuple2("text", $elm$json$Json$Encode$string(text)),
                _Utils_Tuple2("url", $elm$json$Json$Encode$string(url)),
                _Utils_Tuple2("files", A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$List$singleton), image))))
            ]))
        }));
    };
    var $author$project$Lia$Settings$Update$load = function(model) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Settings$Json$toModel(model), $elm$core$Result$withDefault(model));
    };
    var $author$project$Lia$Settings$Update$maybeFocus = A2($elm$core$Basics$composeR, $elm$core$Maybe$map($author$project$Lia$Utils$focus($author$project$Lia$Settings$Update$Ignore)), $elm$core$Maybe$withDefault($elm$core$Platform$Cmd$none));
    var $author$project$Lia$Settings$Update$log = F2(function(elementID, settings) {
        return A2($author$project$Return$batchEvent, $author$project$Lia$Settings$Update$customizeEvent(settings), A2($author$project$Return$cmd, $author$project$Lia$Settings$Update$maybeFocus(elementID), $author$project$Return$val(settings)));
    });
    var $author$project$Lia$Settings$Update$no_log = function(elementID) {
        return A2($elm$core$Basics$composeR, $author$project$Return$val, $author$project$Return$cmd($author$project$Lia$Settings$Update$maybeFocus(elementID)));
    };
    var $author$project$Service$TTS$preferBrowser = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$bool, $author$project$Service$TTS$event("preferBrowserTTS"));
    var $author$project$Lia$Utils$scheduleFocus = F3(function(delay, msg, elementID) {
        return A2($elm$core$Task$attempt, $elm$core$Basics$always(msg), A2($elm$core$Task$andThen, $elm$core$Basics$always($elm$browser$Browser$Dom$focus(elementID)), $elm$core$Process$sleep(A2($elm$core$Maybe$withDefault, 500, delay))));
    });
    var $author$project$Lia$Settings$Update$update = F3(function(main, msg, model) {
        update: while(true)switch(msg.$){
            case "Handle":
                var event = msg.a;
                var _v1 = $author$project$Service$Event$destructure(event);
                if (_v1.a.$ === "Nothing" && _v1.c.a === "init") {
                    var _v2 = _v1.a;
                    var _v3 = _v1.c;
                    var settings = _v3.b;
                    var newSettings = A2($author$project$Lia$Settings$Update$load, _Utils_update(model, {
                        initialized: true
                    }), settings);
                    return A2($author$project$Return$batchEvent, $author$project$Service$TTS$preferBrowser(newSettings.tts.preferBrowser), A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, newSettings));
                } else {
                    var _v4 = event.service;
                    if (_v4 === "tts") return A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, function() {
                        var _v5 = $author$project$Service$TTS$decode(event);
                        switch(_v5.$){
                            case "Start":
                                return _Utils_update(model, {
                                    speaking: true
                                });
                            case "Stop":
                                return _Utils_update(model, {
                                    speaking: false
                                });
                            case "BrowserTTS":
                                var support = _v5.a;
                                var tts = model.tts;
                                return _Utils_update(model, {
                                    tts: _Utils_update(tts, {
                                        isBrowserSupported: support
                                    })
                                });
                            case "ResponsiveVoiceTTS":
                                var support = _v5.a;
                                var tts = model.tts;
                                return _Utils_update(model, {
                                    tts: _Utils_update(tts, {
                                        isResponsiveVoiceSupported: support
                                    })
                                });
                            default:
                                return model;
                        }
                    }());
                    else return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, model);
                }
            case "SwitchMode":
                var mode = msg.a;
                if (mode.$ === "Textbook") return A2($author$project$Return$batchEvent, $author$project$Service$TTS$cancel, A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    mode: $author$project$Lia$Settings$Types$Textbook,
                    sound: false
                })));
                else return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    mode: mode
                }));
            case "ChangeTheme":
                var theme = msg.a;
                return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    theme: theme
                }));
            case "ChangeEditor":
                var theme = msg.a;
                return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    editor: theme
                }));
            case "ChangeFontSize":
                var size = msg.a;
                return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    font_size: size
                }));
            case "ChangeLang":
                var lang = msg.a;
                return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    lang: lang
                }));
            case "Change":
                var audio_setting = msg.a;
                var audio = model.audio;
                return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                    audio: function() {
                        if (audio_setting.$ === "Pitch") {
                            var pitch = audio_setting.a;
                            return _Utils_update(audio, {
                                pitch: pitch
                            });
                        } else {
                            var value = audio_setting.a;
                            return _Utils_update(audio, {
                                rate: value
                            });
                        }
                    }()
                }));
            case "ShareCourse":
                var url = msg.a;
                return A2($author$project$Return$batchEvent, $author$project$Service$Share$link({
                    image: A2($elm$core$Maybe$andThen, function($) {
                        return $.logo;
                    }, main),
                    text: A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
                        return $.comment;
                    }, $author$project$Lia$Markdown$Inline$Stringify$stringify), main)),
                    title: A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                        return $.title;
                    }, main)),
                    url: url
                }), $author$project$Return$val(model));
            case "Toggle":
                switch(msg.a.$){
                    case "TableOfContents":
                        var _v6 = msg.a;
                        return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            action: $elm$core$Maybe$Nothing,
                            table_of_contents: !model.table_of_contents
                        }));
                    case "SupportMenu":
                        var _v7 = msg.a;
                        return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            action: $elm$core$Maybe$Nothing,
                            support_menu: !model.support_menu
                        }));
                    case "Sound":
                        var _v8 = msg.a;
                        return A2($author$project$Return$batchEvent, A2($author$project$Service$Event$push, "settings", model.sound ? $author$project$Service$TTS$cancel : A2($elm$core$Maybe$withDefault, $author$project$Service$Event$none, A2($elm$core$Maybe$map, $author$project$Service$TTS$readFrom, A2($elm$core$Maybe$andThen, function($) {
                            return $.effectID;
                        }, main)))), A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            sound: !model.sound
                        })));
                    case "Light":
                        var _v9 = msg.a;
                        return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            light: !model.light
                        }));
                    case "Fullscreen":
                        var _v10 = msg.a;
                        return A2($author$project$Return$batchEvent, $author$project$Service$Slide$fullscreen, A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            fullscreen: !model.fullscreen
                        })));
                    case "Tooltips":
                        var _v11 = msg.a;
                        return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            tooltips: !model.tooltips
                        }));
                    case "Sync":
                        var _v12 = msg.a;
                        return A2($author$project$Return$batchCmd, _Utils_eq(model.sync, $elm$core$Maybe$Just(false)) ? _List_fromArray([
                            A3($author$project$Lia$Utils$scheduleFocus, $elm$core$Maybe$Nothing, $author$project$Lia$Settings$Update$Ignore, "lia-modal-focus")
                        ]) : _List_Nil, A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            sync: A2($elm$core$Maybe$map, $elm$core$Basics$not, model.sync)
                        })));
                    case "QRCode":
                        var _v13 = msg.a;
                        return A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            showQRCode: !model.showQRCode
                        }));
                    case "VideoComments":
                        var _v14 = msg.a;
                        return A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            hideVideoComments: !model.hideVideoComments
                        }));
                    case "Chat":
                        var _v15 = msg.a;
                        var chat = model.chat;
                        return A2($author$project$Return$batchEvent, chat.show ? $author$project$Service$Event$none : A2($author$project$Service$Slide$scrollDown, "lia-chat-messages", 350), A2($author$project$Lia$Settings$Update$no_log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            chat: _Utils_update(chat, {
                                show: !chat.show,
                                updates: !chat.show
                            }),
                            support_menu: false
                        })));
                    case "Action":
                        var action = msg.a.a;
                        return A2($author$project$Lia$Settings$Update$no_log, function() {
                            switch(action.$){
                                case "ShowModes":
                                    return $elm$core$Maybe$Just("lia-mode-textbook");
                                case "ShowSettings":
                                    return $elm$core$Maybe$Just("lia-btn-light-mode");
                                case "ShowShare":
                                    return $elm$core$Maybe$Just("lia-button-qr-code");
                                case "ShowTranslations":
                                    var _v17 = model.translateWithGoogle;
                                    if (_v17.$ === "Just") {
                                        if (!_v17.a) return $elm$core$Maybe$Just("lia-checkbox-google_translate");
                                        else return $elm$core$Maybe$Just("google-te-combo");
                                    } else return $elm$core$Maybe$Nothing;
                                default:
                                    return $elm$core$Maybe$Nothing;
                            }
                        }(), _Utils_update(model, {
                            action: _Utils_eq(action, $author$project$Lia$Settings$Types$Close) ? $elm$core$Maybe$Nothing : !_Utils_eq(model.action, $elm$core$Maybe$Just(action)) ? $elm$core$Maybe$Just(action) : $elm$core$Maybe$Nothing
                        }));
                    case "PreferBrowserTTS":
                        var _v20 = msg.a;
                        var tts = model.tts;
                        var newPreference = !tts.preferBrowser;
                        return A2($author$project$Return$batchEvent, $author$project$Service$TTS$preferBrowser(newPreference), A2($author$project$Lia$Settings$Update$log, $elm$core$Maybe$Nothing, _Utils_update(model, {
                            tts: _Utils_update(tts, {
                                preferBrowser: newPreference
                            })
                        })));
                    default:
                        var _v21 = msg.a;
                        return A2($author$project$Return$batchEvent, $author$project$Service$Translate$google, $author$project$Return$val(_Utils_update(model, {
                            translateWithGoogle: function() {
                                var _v22 = model.translateWithGoogle;
                                if (_v22.$ === "Just") return $elm$core$Maybe$Just(true);
                                else return $elm$core$Maybe$Nothing;
                            }()
                        })));
                }
            case "FocusLoss":
                var $temp$main = main, $temp$msg = $author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Action($author$project$Lia$Settings$Types$Close)), $temp$model = model;
                main = $temp$main;
                msg = $temp$msg;
                model = $temp$model;
                continue update;
            default:
                return $author$project$Return$val(model);
        }
    });
    var $author$project$Library$Overlay$FollowMouse = function(a) {
        return {
            $: "FollowMouse",
            a: a
        };
    };
    var $author$project$Library$Overlay$FollowResize = function(a) {
        return {
            $: "FollowResize",
            a: a
        };
    };
    var $author$project$Library$Overlay$Resize = {
        $: "Resize"
    };
    var $author$project$Library$Overlay$draggedPosition = F2(function(model, pos) {
        var _v0 = model.drag;
        if (_v0.$ === "Just") {
            var start = _v0.a.start;
            return A2($author$project$Library$Overlay$Position, model.initialPosition.x + (start.x - pos.x), model.initialPosition.y + (pos.y - start.y));
        } else return model.position;
    });
    var $author$project$Library$Overlay$movePosition = F2(function(pos, direction) {
        switch(direction.$){
            case "Up":
                return _Utils_update(pos, {
                    y: pos.y - 10
                });
            case "Down":
                return _Utils_update(pos, {
                    y: pos.y + 10
                });
            case "Left":
                return _Utils_update(pos, {
                    x: pos.x - 10
                });
            default:
                return _Utils_update(pos, {
                    x: pos.x + 10
                });
        }
    });
    var $author$project$Library$Overlay$resizeWithArrows = F2(function(size, direction) {
        switch(direction.$){
            case "Up":
                return _Utils_update(size, {
                    height: A2($elm$core$Basics$max, 100, size.height - 10)
                });
            case "Down":
                return _Utils_update(size, {
                    height: size.height + 10
                });
            case "Left":
                return _Utils_update(size, {
                    width: A2($elm$core$Basics$max, 100, size.width - 10)
                });
            default:
                return _Utils_update(size, {
                    width: size.width + 10
                });
        }
    });
    var $author$project$Library$Overlay$resizedSize = F2(function(model, pos) {
        var _v0 = model.resize;
        if (_v0.$ === "Just") {
            var start = _v0.a.start;
            return A2($author$project$Library$Overlay$Size, A2($elm$core$Basics$max, 100, model.initialSize.width + pos.x - start.x), A2($elm$core$Basics$max, 100, model.initialSize.height + pos.y - start.y));
        } else return model.size;
    });
    var $author$project$Library$Overlay$toggleMode = function(mode) {
        switch(mode.$){
            case "Move":
                return $author$project$Library$Overlay$Resize;
            case "Resize":
                return $author$project$Library$Overlay$Move;
            case "FollowMouse":
                return $author$project$Library$Overlay$Move;
            default:
                return $author$project$Library$Overlay$Resize;
        }
    };
    var $author$project$Library$Overlay$update = F2(function(msg, model) {
        switch(msg.$){
            case "DragStart":
                var pos = msg.a;
                return _Utils_Tuple3(_Utils_update(model, {
                    drag: $elm$core$Maybe$Just({
                        current: pos,
                        start: pos
                    }),
                    initialPosition: model.position,
                    mode: $author$project$Library$Overlay$Move
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "DragAt":
                var pos = msg.a;
                return _Utils_Tuple3(_Utils_update(model, {
                    drag: A2($elm$core$Maybe$map, function(_v1) {
                        var start = _v1.start;
                        return {
                            current: pos,
                            start: start
                        };
                    }, model.drag),
                    position: A2($author$project$Library$Overlay$draggedPosition, model, pos)
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "DragEnd":
                return _Utils_Tuple3(_Utils_update(model, {
                    drag: $elm$core$Maybe$Nothing
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ResizeStart":
                var pos = msg.a;
                return _Utils_Tuple3(_Utils_update(model, {
                    initialSize: model.size,
                    mode: $author$project$Library$Overlay$Resize,
                    resize: $elm$core$Maybe$Just({
                        current: pos,
                        start: pos
                    })
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ResizeAt":
                var pos = msg.a;
                return _Utils_Tuple3(_Utils_update(model, {
                    resize: A2($elm$core$Maybe$map, function(_v2) {
                        var start = _v2.start;
                        return {
                            current: pos,
                            start: start
                        };
                    }, model.resize),
                    size: A2($author$project$Library$Overlay$resizedSize, model, pos)
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ResizeEnd":
                return _Utils_Tuple3(_Utils_update(model, {
                    resize: $elm$core$Maybe$Nothing
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ArrowMove":
                var direction = msg.a;
                var newPosition = A2($author$project$Library$Overlay$movePosition, model.position, direction);
                return _Utils_Tuple3(_Utils_update(model, {
                    position: newPosition
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ArrowResize":
                var direction = msg.a;
                var newSize = A2($author$project$Library$Overlay$resizeWithArrows, model.size, direction);
                return _Utils_Tuple3(_Utils_update(model, {
                    size: newSize
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ToggleMode":
                return _Utils_Tuple3(_Utils_update(model, {
                    mode: $author$project$Library$Overlay$toggleMode(model.mode)
                }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "DoubleClick":
                var pos = msg.a;
                return _Utils_Tuple3(function() {
                    var _v3 = model.mode;
                    if (_v3.$ === "FollowMouse") return _Utils_update(model, {
                        followOffset: $elm$core$Maybe$Nothing,
                        mode: $author$project$Library$Overlay$Move
                    });
                    else return _Utils_update(model, {
                        followOffset: $elm$core$Maybe$Just(A2($author$project$Library$Overlay$Position, pos.x + model.position.x, pos.y - model.position.y)),
                        mode: $author$project$Library$Overlay$FollowMouse(pos)
                    });
                }(), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "DoubleClickResize":
                var pos = msg.a;
                return _Utils_Tuple3(function() {
                    var _v4 = model.mode;
                    if (_v4.$ === "FollowResize") return _Utils_update(model, {
                        mode: $author$project$Library$Overlay$Resize,
                        resizeOffset: $elm$core$Maybe$Nothing
                    });
                    else return _Utils_update(model, {
                        mode: $author$project$Library$Overlay$FollowResize(pos),
                        resizeOffset: $elm$core$Maybe$Just(A2($author$project$Library$Overlay$Position, pos.x - model.size.width, pos.y - model.size.height))
                    });
                }(), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "MouseMoveFollow":
                var pos = msg.a;
                var _v5 = model.mode;
                if (_v5.$ === "FollowMouse") {
                    var newPosition = function() {
                        var _v6 = model.followOffset;
                        if (_v6.$ === "Just") {
                            var offset = _v6.a;
                            return A2($author$project$Library$Overlay$Position, offset.x - pos.x, pos.y - offset.y);
                        } else return model.position;
                    }();
                    return _Utils_Tuple3(_Utils_update(model, {
                        position: newPosition
                    }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
                } else return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "MouseResizeFollow":
                var pos = msg.a;
                var _v7 = model.mode;
                if (_v7.$ === "FollowResize") {
                    var newSize = function() {
                        var _v8 = model.resizeOffset;
                        if (_v8.$ === "Just") {
                            var offset = _v8.a;
                            return A2($author$project$Library$Overlay$Size, A2($elm$core$Basics$max, 100, pos.x - offset.x), A2($elm$core$Basics$max, 100, pos.y - offset.y));
                        } else return model.size;
                    }();
                    return _Utils_Tuple3(_Utils_update(model, {
                        size: newSize
                    }), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
                } else return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "ExitFollowMode":
                return _Utils_Tuple3(function() {
                    var _v9 = model.mode;
                    switch(_v9.$){
                        case "FollowMouse":
                            return _Utils_update(model, {
                                followOffset: $elm$core$Maybe$Nothing,
                                mode: $author$project$Library$Overlay$Move
                            });
                        case "FollowResize":
                            return _Utils_update(model, {
                                mode: $author$project$Library$Overlay$Resize,
                                resizeOffset: $elm$core$Maybe$Nothing
                            });
                        default:
                            return model;
                    }
                }(), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "LostFocus":
                return _Utils_Tuple3(function() {
                    var _v10 = model.mode;
                    switch(_v10.$){
                        case "FollowMouse":
                            return _Utils_update(model, {
                                followOffset: $elm$core$Maybe$Nothing,
                                mode: $author$project$Library$Overlay$Move
                            });
                        case "FollowResize":
                            return _Utils_update(model, {
                                mode: $author$project$Library$Overlay$Resize,
                                resizeOffset: $elm$core$Maybe$Nothing
                            });
                        default:
                            return model;
                    }
                }(), $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
            case "Foreign":
                var parentMsg = msg.a;
                return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Just(parentMsg));
            default:
                return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
        }
    });
    var $author$project$Library$SplitPane$UpdateConfig = function(a) {
        return {
            $: "UpdateConfig",
            a: a
        };
    };
    var $author$project$Library$SplitPane$createUpdateConfig = function(config) {
        return $author$project$Library$SplitPane$UpdateConfig(config);
    };
    var $author$project$Library$SplitPane$Px = function(a) {
        return {
            $: "Px",
            a: a
        };
    };
    var $author$project$Library$SplitPane$Bound$updateValue = F2(function(f, _v0) {
        var value = _v0.a;
        var bound = _v0.b;
        return _Utils_Tuple2(A2($author$project$Library$SplitPane$Bound$boundTo, bound, f(value)), bound);
    });
    var $author$project$Library$SplitPane$resize = F5(function(ori, splitterPosition, step, paneWidth, paneHeight) {
        if (ori.$ === "Horizontal") {
            if (splitterPosition.$ === "Px") {
                var p = splitterPosition.a;
                return $author$project$Library$SplitPane$Px(A2($author$project$Library$SplitPane$Bound$updateValue, function(v) {
                    return v + step.x;
                }, p));
            } else {
                var p = splitterPosition.a;
                return $author$project$Library$SplitPane$Percentage(A2($author$project$Library$SplitPane$Bound$updateValue, function(v) {
                    return v + step.x / paneWidth;
                }, p));
            }
        } else if (splitterPosition.$ === "Px") {
            var p = splitterPosition.a;
            return $author$project$Library$SplitPane$Px(A2($author$project$Library$SplitPane$Bound$updateValue, function(v) {
                return v + step.y;
            }, p));
        } else {
            var p = splitterPosition.a;
            return $author$project$Library$SplitPane$Percentage(A2($author$project$Library$SplitPane$Bound$updateValue, function(v) {
                return v + step.y / paneHeight;
            }, p));
        }
    });
    var $author$project$Library$SplitPane$customUpdate = F3(function(_v0, msg, _v1) {
        var updateConfig = _v0.a;
        var state = _v1.a;
        var _v2 = _Utils_Tuple2(state.dragState, msg);
        _v2$3: while(true){
            if (_v2.a.$ === "Draggable") {
                if (_v2.a.a.$ === "Nothing") {
                    if (_v2.b.$ === "SplitterClick") {
                        var _v3 = _v2.a.a;
                        var pos = _v2.b.a;
                        return _Utils_Tuple2($author$project$Library$SplitPane$State(_Utils_update(state, {
                            dragState: $author$project$Library$SplitPane$Draggable($elm$core$Maybe$Just({
                                anchor: {
                                    x: A2($elm$core$Maybe$withDefault, pos.parentWidth / 2 | 0, pos.x),
                                    y: A2($elm$core$Maybe$withDefault, 0, pos.y)
                                },
                                paneInfo: {
                                    height: pos.parentHeight,
                                    width: pos.parentWidth
                                }
                            }))
                        })), updateConfig.onResizeStarted);
                    } else break _v2$3;
                } else switch(_v2.b.$){
                    case "SplitterLeftAlone":
                        return _Utils_Tuple2($author$project$Library$SplitPane$State(_Utils_update(state, {
                            dragState: $author$project$Library$SplitPane$Draggable($elm$core$Maybe$Nothing)
                        })), updateConfig.onResizeEnded);
                    case "SplitterMove":
                        var paneInfo = _v2.a.a.a.paneInfo;
                        var anchor = _v2.a.a.a.anchor;
                        var newRequestedPosition = _v2.b.a;
                        var step = {
                            x: newRequestedPosition.x - anchor.x,
                            y: newRequestedPosition.y - anchor.y
                        };
                        var newSplitterPosition = A5($author$project$Library$SplitPane$resize, state.orientation, state.splitterPosition, step, paneInfo.width, paneInfo.height);
                        return _Utils_Tuple2($author$project$Library$SplitPane$State(_Utils_update(state, {
                            dragState: $author$project$Library$SplitPane$Draggable($elm$core$Maybe$Just({
                                anchor: {
                                    x: newRequestedPosition.x,
                                    y: newRequestedPosition.y
                                },
                                paneInfo: {
                                    height: paneInfo.height,
                                    width: paneInfo.width
                                }
                            })),
                            splitterPosition: newSplitterPosition
                        })), updateConfig.onResize(newSplitterPosition));
                    default:
                        break _v2$3;
                }
            } else break _v2$3;
        }
        return _Utils_Tuple2($author$project$Library$SplitPane$State(state), $elm$core$Maybe$Nothing);
    });
    var $author$project$Library$SplitPane$update = F2(function(msg, model) {
        var _v0 = A3($author$project$Library$SplitPane$customUpdate, $author$project$Library$SplitPane$createUpdateConfig({
            onResize: function(_v1) {
                return $elm$core$Maybe$Nothing;
            },
            onResizeEnded: $elm$core$Maybe$Nothing,
            onResizeStarted: $elm$core$Maybe$Nothing
        }), msg, model);
        var updatedModel = _v0.a;
        return updatedModel;
    });
    var $author$project$Lia$Update$maybeTextbookChange = F3(function(session, mode, ret) {
        return _Utils_eq(ret.value.settings.mode, $author$project$Lia$Settings$Types$Textbook) && !_Utils_eq(mode, $author$project$Lia$Settings$Types$Textbook) ? A2($author$project$Return$batchEvents, ret.events, A3($author$project$Lia$Update$update, session, A2($author$project$Lia$Update$Load, false, ret.value.section_active), ret.value)) : ret;
    });
    var $author$project$Lia$Update$update = F3(function(session, msg, model) {
        update: while(true)switch(msg.$){
            case "Focus":
                var settings = model.settings;
                return A2($author$project$Return$batchEvent, $author$project$Lia$Update$initializeSlide(model), $author$project$Return$val(_Utils_update(model, {
                    settings: _Utils_update(settings, {
                        table_of_contents: _Utils_cmp(session.screen.width, $author$project$Const$globalBreakpoints.sm) < 1 ? false : settings.table_of_contents
                    })
                })));
            case "Load":
                var force = msg.a;
                var idx = msg.b;
                if (_Utils_cmp(-1, idx) < 0 && _Utils_cmp(idx, $elm$core$Array$length(model.sections)) < 0) {
                    var settings = model.settings;
                    if (_Utils_eq(idx, model.section_active) || force) {
                        var $temp$session = session, $temp$msg = $author$project$Lia$Update$InitSection, $temp$model = $author$project$Lia$Update$generate(_Utils_update(model, {
                            section_active: idx,
                            settings: _Utils_update(settings, {
                                table_of_contents: _Utils_cmp(session.screen.width, $author$project$Const$globalBreakpoints.sm) < 1 ? false : settings.table_of_contents
                            })
                        }));
                        session = $temp$session;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    } else return A2($author$project$Return$cmd, A2($author$project$Session$navToSlide, session, idx), $author$project$Return$val(_Utils_update(model, {
                        section_active: idx,
                        settings: _Utils_update(settings, {
                            table_of_contents: _Utils_cmp(session.screen.width, $author$project$Const$globalBreakpoints.sm) < 1 ? false : settings.table_of_contents
                        })
                    })));
                } else return $author$project$Return$val(model);
            case "Home":
                return A2($author$project$Return$cmd, $author$project$Session$navToHome(session), $author$project$Return$val(model));
            case "UpdateIndex":
                var childMsg = msg.a;
                var _v1 = A3($author$project$Lia$Index$Update$update, childMsg, model.index_model, model.sections);
                var index = _v1.a;
                var sections = _v1.b;
                var cmd = _v1.c;
                return A2($author$project$Return$cmd, A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateIndex, cmd), $author$project$Return$val(_Utils_update(model, {
                    index_model: index,
                    sections: sections
                })));
            case "UpdateSync":
                var childMsg = msg.a;
                return A3($author$project$Return$mapEvents, "sync", -1, A2($author$project$Return$mapCmd, $author$project$Lia$Update$UpdateSync, A3($author$project$Lia$Sync$Update$update, session, model, childMsg)));
            case "UpdateOverlay":
                var childMsg = msg.a;
                var _v2 = A2($author$project$Library$Overlay$update, childMsg, model.overlayVideo);
                var overlay = _v2.a;
                var cmd = _v2.b;
                var cmdParent = _v2.c;
                return A2($author$project$Return$cmd, function() {
                    if (cmdParent.$ === "Just") {
                        var parent = cmdParent.a;
                        return $elm$core$Platform$Cmd$none;
                    } else return A2($elm$core$Platform$Cmd$map, $author$project$Lia$Update$UpdateOverlay, cmd);
                }(), $author$project$Return$val(_Utils_update(model, {
                    overlayVideo: overlay
                })));
            case "Handle":
                var event = msg.a;
                var _v4 = $author$project$Service$Event$pop(event);
                if (_v4.a.$ === "Just") switch(_v4.a.a){
                    case "settings":
                        var e = _v4.b;
                        var $temp$session = session, $temp$msg = $author$project$Lia$Update$UpdateSettings($author$project$Lia$Settings$Update$handle(e)), $temp$model = model;
                        session = $temp$session;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    case "load":
                        var $temp$session = session, $temp$msg = $author$project$Lia$Update$InitSection, $temp$model = $author$project$Lia$Update$generate(model);
                        session = $temp$session;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    case "goto":
                        var _v5 = event.message.cmd;
                        switch(_v5){
                            case "goto":
                                var _v6 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$int, event.message.param);
                                if (_v6.$ === "Ok") {
                                    var id = _v6.a;
                                    var $temp$session = session, $temp$msg = A2($author$project$Lia$Update$Load, true, id), $temp$model = model;
                                    session = $temp$session;
                                    msg = $temp$msg;
                                    model = $temp$model;
                                    continue update;
                                } else return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("message goto with no id"), $author$project$Return$val(model));
                            case "next":
                                var $temp$session = session, $temp$msg = $author$project$Lia$Update$NextSection, $temp$model = model;
                                session = $temp$session;
                                msg = $temp$msg;
                                model = $temp$model;
                                continue update;
                            case "prev":
                                var $temp$session = session, $temp$msg = $author$project$Lia$Update$PrevSection, $temp$model = model;
                                session = $temp$session;
                                msg = $temp$msg;
                                model = $temp$model;
                                continue update;
                            default:
                                return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("message goto unknown"), $author$project$Return$val(model));
                        }
                    case "sync":
                        var e = _v4.b;
                        var _v7 = $author$project$Service$Event$popWithId(e);
                        if (_v7.$ === "Nothing") return A3($author$project$Return$mapEvents, "sync", -1, A2($author$project$Return$mapCmd, $author$project$Lia$Update$UpdateSync, A3($author$project$Lia$Sync$Update$handle, session, function() {
                            var _v8 = e.message.cmd;
                            if (_v8 === "connect") return _Utils_update(model, {
                                settings: $author$project$Lia$Settings$Update$closeSync(model.settings)
                            });
                            else return model;
                        }(), e)));
                        else if (_v7.a.a === "load") {
                            var _v9 = _v7.a;
                            var id = _v9.b;
                            var $temp$session = session, $temp$msg = A2($author$project$Lia$Update$Load, true, id), $temp$model = model;
                            session = $temp$session;
                            msg = $temp$msg;
                            model = $temp$model;
                            continue update;
                        } else {
                            var _v10 = _v7.a;
                            var topic = _v10.a;
                            var id = _v10.b;
                            var e_ = _v10.c;
                            var _v11 = _Utils_Tuple2(id < 10000, A2($elm$core$Array$get, id, model.sections));
                            _v11$2: while(true)if (_v11.a) {
                                if (_v11.b.$ === "Just") {
                                    var sec = _v11.b.a;
                                    return A3($author$project$Return$mapValCmd, function(v) {
                                        return _Utils_update(model, {
                                            sections: A3($elm$core$Array$set, id, v, model.sections)
                                        });
                                    }, $author$project$Lia$Update$UpdateMarkdown, A5($author$project$Lia$Markdown$Update$handle, model.sync, model.definition, topic, e_, sec));
                                } else break _v11$2;
                            } else {
                                if (_v11.b.$ === "Nothing") {
                                    var _v12 = _v11.b;
                                    var $temp$session = session, $temp$msg = $author$project$Lia$Update$UpdateChat($author$project$Lia$Chat$Update$handle(e)), $temp$model = model;
                                    session = $temp$session;
                                    msg = $temp$msg;
                                    model = $temp$model;
                                    continue update;
                                } else break _v11$2;
                            }
                            return $author$project$Return$val(model);
                        }
                    case "swipe":
                        var e = _v4.b;
                        var _v13 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, $author$project$Service$Event$message(e).b);
                        _v13$2: while(true){
                            if (_v13.$ === "Ok") switch(_v13.a){
                                case "left":
                                    var $temp$session = session, $temp$msg = $author$project$Lia$Update$NextSection, $temp$model = model;
                                    session = $temp$session;
                                    msg = $temp$msg;
                                    model = $temp$model;
                                    continue update;
                                case "right":
                                    var $temp$session = session, $temp$msg = $author$project$Lia$Update$PrevSection, $temp$model = model;
                                    session = $temp$session;
                                    msg = $temp$msg;
                                    model = $temp$model;
                                    continue update;
                                default:
                                    break _v13$2;
                            }
                            else break _v13$2;
                        }
                        return $author$project$Return$val(model);
                    default:
                        var topic = _v4.a.a;
                        var e = _v4.b;
                        var _v14 = A2($elm$core$Maybe$map, function(id) {
                            return _Utils_Tuple2(id, A2($elm$core$Array$get, id, model.sections));
                        }, $author$project$Service$Event$id(event));
                        if (_v14.$ === "Just") {
                            if (_v14.a.b.$ === "Just") {
                                var _v15 = _v14.a;
                                var id = _v15.a;
                                var sec = _v15.b.a;
                                return A3($author$project$Return$mapValCmd, function(v) {
                                    return _Utils_update(model, {
                                        sections: A3($elm$core$Array$set, id, v, model.sections)
                                    });
                                }, $author$project$Lia$Update$UpdateMarkdown, A5($author$project$Lia$Markdown$Update$handle, model.sync, model.definition, topic, e, sec));
                            } else {
                                var _v16 = _v14.a;
                                var id = _v16.a;
                                var _v17 = _v16.b;
                                var $temp$session = session, $temp$msg = $author$project$Lia$Update$UpdateChat($author$project$Lia$Chat$Update$handle(event)), $temp$model = model;
                                session = $temp$session;
                                msg = $temp$msg;
                                model = $temp$model;
                                continue update;
                            }
                        } else return $author$project$Return$val(model);
                }
                else {
                    var _v18 = _v4.a;
                    return A2($author$project$Return$batchEvent, $author$project$Service$Console$warn("unknown event: " + (event.service + (" / " + event.message.cmd))), $author$project$Return$val(model));
                }
            case "Script":
                var _v19 = msg.a;
                var id = _v19.a;
                var sub = _v19.b;
                var _v20 = A2($elm$core$Array$get, id, model.sections);
                if (_v20.$ === "Just") {
                    var sec = _v20.a;
                    return A3($author$project$Return$mapValCmd, function(v) {
                        return _Utils_update(model, {
                            sections: A3($elm$core$Array$set, id, v, model.sections)
                        });
                    }, $author$project$Lia$Update$UpdateMarkdown, $author$project$Lia$Markdown$Update$updateScript(A2($author$project$Return$script, sub, $author$project$Return$val(sec))));
                } else return $author$project$Return$val(model);
            case "Media":
                var _v21 = msg.a;
                var url = _v21.a;
                var width = _v21.b;
                var height = _v21.c;
                return $author$project$Return$val(function() {
                    var _v22 = _Utils_Tuple2(width, height);
                    _v22$2: while(true)if (_v22.a.$ === "Just") {
                        if (_v22.b.$ === "Just") {
                            var w = _v22.a.a;
                            var h = _v22.b.a;
                            return _Utils_update(model, {
                                media: A3($elm$core$Dict$insert, url, _Utils_Tuple2(w, h), model.media)
                            });
                        } else break _v22$2;
                    } else {
                        if (_v22.b.$ === "Nothing") {
                            var _v23 = _v22.a;
                            var _v24 = _v22.b;
                            return _Utils_update(model, {
                                modal: url === "" ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(url)
                            });
                        } else break _v22$2;
                    }
                    return model;
                }());
            case "Pane":
                var paneMsg = msg.a;
                return $author$project$Return$val(_Utils_update(model, {
                    pane: A2($author$project$Library$SplitPane$update, paneMsg, model.pane)
                }));
            case "UpdateChat":
                var childMsg = msg.a;
                return A3($author$project$Return$mapValCmd, function(chat) {
                    return _Utils_update(model, {
                        chat: chat
                    });
                }, $author$project$Lia$Update$UpdateChat, $author$project$Lia$Chat$Update$update({
                    definition: model.definition,
                    model: model.chat,
                    msg: childMsg,
                    sync: model.sync
                }));
            default:
                var _v25 = _Utils_Tuple2(msg, $author$project$Lia$Update$get_active_section(model));
                _v25$7: while(true)switch(_v25.a.$){
                    case "UpdateMarkdown":
                        if (_v25.b.$ === "Just") {
                            var childMsg = _v25.a.a;
                            var sec = _v25.b.a;
                            return A3($author$project$Return$mapValCmd, $author$project$Lia$Update$set_active_section(model), $author$project$Lia$Update$UpdateMarkdown, A4($author$project$Lia$Markdown$Update$update, model.sync, model.definition, childMsg, sec));
                        } else break _v25$7;
                    case "NextSection":
                        if (_v25.b.$ === "Just") {
                            var _v26 = _v25.a;
                            var sec = _v25.b.a;
                            if (_Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook) || !$author$project$Lia$Markdown$Effect$Update$has_next(sec.effect_model)) {
                                var $temp$session = session, $temp$msg = A2($author$project$Lia$Update$Load, false, model.section_active + 1), $temp$model = model;
                                session = $temp$session;
                                msg = $temp$msg;
                                model = $temp$model;
                                continue update;
                            } else return A3($author$project$Return$mapValCmd, $author$project$Lia$Update$set_active_section(model), $author$project$Lia$Update$UpdateMarkdown, A4($author$project$Lia$Markdown$Update$nextEffect, model.sync, model.definition, model.settings.sound, sec));
                        } else break _v25$7;
                    case "PrevSection":
                        if (_v25.b.$ === "Just") {
                            var _v27 = _v25.a;
                            var sec = _v25.b.a;
                            if (_Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook) || !$author$project$Lia$Markdown$Effect$Update$has_previous(sec.effect_model)) {
                                var $temp$session = session, $temp$msg = A2($author$project$Lia$Update$Load, false, model.section_active - 1), $temp$model = model;
                                session = $temp$session;
                                msg = $temp$msg;
                                model = $temp$model;
                                continue update;
                            } else return A3($author$project$Return$mapValCmd, $author$project$Lia$Update$set_active_section(model), $author$project$Lia$Update$UpdateMarkdown, A4($author$project$Lia$Markdown$Update$previousEffect, model.sync, model.definition, model.settings.sound, sec));
                        } else break _v25$7;
                    case "InitSection":
                        if (_v25.b.$ === "Just") {
                            var _v28 = _v25.a;
                            var sec = _v25.b.a;
                            var _return = function() {
                                var _v29 = model.settings.mode;
                                if (_v29.$ === "Textbook") return A5($author$project$Lia$Markdown$Update$initEffect, model.sync, model.definition, true, false, sec);
                                else return A5($author$project$Lia$Markdown$Update$initEffect, model.sync, model.definition, false, model.settings.sound, sec);
                            }();
                            return A2($author$project$Return$batchEvent, _Utils_cmp(model.section_active, $elm$core$Array$length(model.sections)) < 0 ? A3($author$project$Service$Script$exec, !model.section_active ? 5000 : 100, false, "window.LIA.goto(" + ($elm$core$String$fromInt(model.section_active + 1) + ")")) : $author$project$Service$Event$none, A2($author$project$Return$batchEvents, A2($elm$core$List$cons, $author$project$Lia$Update$initializeSlide(model), model.to_do), A3($author$project$Return$mapValCmd, $author$project$Lia$Update$set_active_section(_Utils_update(model, {
                                to_do: _List_Nil
                            })), $author$project$Lia$Update$UpdateMarkdown, _return)));
                        } else break _v25$7;
                    case "JumpToFragment":
                        if (_v25.b.$ === "Just") {
                            var id = _v25.a.a;
                            var sec = _v25.b.a;
                            if (_Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook) || _Utils_eq(sec.effect_model.visible, id)) return $author$project$Return$val(model);
                            else {
                                var effect = sec.effect_model;
                                var _return = A4($author$project$Lia$Markdown$Update$nextEffect, model.sync, model.definition, model.settings.sound, _Utils_update(sec, {
                                    effect_model: _Utils_update(effect, {
                                        visible: id - 1
                                    })
                                }));
                                return A3($author$project$Return$mapValCmd, $author$project$Lia$Update$set_active_section(model), $author$project$Lia$Update$UpdateMarkdown, _return);
                            }
                        } else break _v25$7;
                    case "UpdateSettings":
                        var childMsg = _v25.a.a;
                        var sec = _v25.b;
                        var mode = model.settings.mode;
                        return A3($author$project$Lia$Update$maybeTextbookChange, session, mode, A3($author$project$Return$mapValCmd, function(v) {
                            return _Utils_update(model, {
                                settings: v
                            });
                        }, $author$project$Lia$Update$UpdateSettings, A3($author$project$Lia$Settings$Update$update, $elm$core$Maybe$Just({
                            comment: model.definition.comment,
                            effectID: A2($elm$core$Maybe$map, function($) {
                                return $.visible;
                            }, A2($elm$core$Maybe$map, function($) {
                                return $.effect_model;
                            }, sec)),
                            logo: function(logo) {
                                return $elm$core$String$isEmpty(logo) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(logo);
                            }(model.definition.logo),
                            title: model.title
                        }), childMsg, model.settings)));
                    case "TTSReplay":
                        var bool = _v25.a.a;
                        var sec = _v25.b;
                        var _v30 = A3($author$project$Lia$Markdown$Update$ttsReplay, model.settings.sound, bool, sec);
                        if (_v30.$ === "Just") {
                            var event = _v30.a;
                            return A2($author$project$Return$batchEvent, event, $author$project$Return$val(model));
                        } else return $author$project$Return$val(model);
                    default:
                        break _v25$7;
                }
                return $author$project$Return$val(model);
        }
    });
    var $author$project$Lia$Script$load_slide = F2(function(session, force) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Update$Load(force), $author$project$Lia$Update$update(session));
    });
    var $author$project$Lia$Script$pages = A2($elm$core$Basics$composeR, function($) {
        return $.sections;
    }, $elm$core$Array$length);
    var $author$project$Lia$Script$filterIndex = F2(function(str, _v0) {
        var idx = _v0.a;
        return _Utils_eq(str, idx);
    });
    var $elm_community$list_extra$List$Extra$find = F2(function(predicate, list) {
        find: while(true){
            if (!list.b) return $elm$core$Maybe$Nothing;
            else {
                var first = list.a;
                var rest = list.b;
                if (predicate(first)) return $elm$core$Maybe$Just(first);
                else {
                    var $temp$predicate = predicate, $temp$list = rest;
                    predicate = $temp$predicate;
                    list = $temp$list;
                    continue find;
                }
            }
        }
    });
    var $author$project$Lia$Script$searchIndex = F2(function(index, str) {
        var fn = $author$project$Lia$Script$filterIndex($elm$core$String$toLower(A2($elm$core$Maybe$withDefault, str, $elm$url$Url$percentDecode(str))));
        var _v0 = A2($elm_community$list_extra$List$Extra$find, fn, index);
        if (_v0.$ === "Just") {
            var _v1 = _v0.a;
            var key = _v1.b;
            return key;
        } else return str;
    });
    var $author$project$Lia$Script$load_first_slide = F2(function(session, model) {
        var search_index = $author$project$Lia$Script$searchIndex(A2($elm$core$List$indexedMap, $author$project$Lia$Script$generateIndex, $elm$core$Array$toList(A2($elm$core$Array$map, A2($elm$core$Basics$composeR, function($) {
            return $.title;
        }, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Stringify$stringify, $elm$core$String$trim)), model.sections))));
        var slide = A2($elm$core$Maybe$withDefault, model.section_active, A2($elm$core$Maybe$andThen, $author$project$Lia$Script$getSectionNumberFrom(search_index), model.anchor));
        return A4($author$project$Lia$Script$load_slide, session, false, _Utils_cmp(slide, $author$project$Lia$Script$pages(model)) > -1 ? $author$project$Lia$Script$pages(model) - 1 : slide, _Utils_update(model, {
            persistent: $author$project$Lia$Utils$checkPersistency(model.definition.macro),
            search_index: search_index,
            title: $author$project$Lia$Script$get_title(model.sections),
            to_do: A2($elm$core$List$cons, $author$project$Service$Database$index_store(model), A2($elm$core$List$cons, $author$project$Lia$Settings$Update$customizeEvent(model.settings), model.to_do))
        }));
    });
    var $author$project$Lia$Definition$Types$setPersistent = F2(function(b, def) {
        return _Utils_update(def, {
            macro: A3($elm$core$Dict$insert, "persistent", b ? "true" : "false", def.macro)
        });
    });
    var $author$project$Update$startWithError = function(model) {
        var session = A2($author$project$Session$setQuery, model.lia.readme, model.session);
        var lia = model.lia;
        var _return = A2($author$project$Lia$Script$load_first_slide, session, _Utils_update(lia, {
            definition: A2($author$project$Lia$Definition$Types$setPersistent, false, lia.definition),
            section_active: 0,
            sections: $author$project$Error$Report$generate(model.state)
        }));
        return _Utils_Tuple2(_Utils_update(model, {
            lia: _return.value,
            session: session
        }), A2($author$project$Update$batch, $author$project$Update$LiaScript, _return));
    };
    var $author$project$Update$load = F2(function(model, initial) {
        var _v0 = initial.code;
        if (_v0.$ === "Just") {
            var code_ = _v0.a;
            return _Utils_Tuple2(_Utils_update(model, {
                code: initial.code,
                lia: initial.model,
                size: $elm$core$String$length(code_),
                state: A2($author$project$Model$Parsing, true, $elm$core$List$length(initial.templates))
            }), $elm$core$Platform$Cmd$batch(A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($elm$core$Maybe$map, $author$project$Update$event2js, initial.event), A2($elm$core$List$cons, $author$project$Update$message($author$project$Update$LiaParse), A2($elm$core$List$map, $author$project$Update$download(true), initial.templates)))));
        } else return $author$project$Update$startWithError(_Utils_update(model, {
            state: A2($author$project$Error$Report$add, model.state, A2($elm$core$Maybe$withDefault, "", initial.model.error))
        }));
    });
    var $author$project$Update$removeCR = A2($elm$core$String$replace, "\r", "");
    var $author$project$Update$load_readme = F2(function(readme, model) {
        var initial = A2($author$project$Lia$Script$init_script, model.lia, $author$project$Update$removeCR(readme));
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $author$project$Index$Update$inCache(initial.model.definition.version), model.preload)) ? _Utils_Tuple2(model, $author$project$Update$event2js($author$project$Service$Database$index_restore({
            url: initial.model.readme,
            version: initial.model.definition.version
        }))) : A2($author$project$Update$load, model, initial);
    });
    var $author$project$Lia$Sync$Via$eq = F2(function(a, b) {
        var _v0 = _Utils_Tuple2(a, b);
        _v0$3: while(true)switch(_v0.a.$){
            case "GUN":
                if (_v0.b.$ === "GUN") return true;
                else break _v0$3;
            case "PubNub":
                if (_v0.b.$ === "PubNub") return true;
                else break _v0$3;
            case "P2PT":
                if (_v0.b.$ === "P2PT") return true;
                else break _v0$3;
            default:
                break _v0$3;
        }
        return _Utils_eq(a, b);
    });
    var $author$project$Lia$Sync$Types$initRoom = F2(function(config, settings) {
        var _v0 = $author$project$Lia$Sync$Via$fromString(config.backend);
        if (_v0.$ === "Just") {
            var backend = _v0.a;
            var sync = settings.sync;
            return _Utils_update(settings, {
                room: config.room,
                sync: _Utils_update(sync, {
                    select: $elm$core$Maybe$Just(_Utils_Tuple2(A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$Tuple$first, $elm$core$List$head(A2($elm$core$List$filter, function(_v1) {
                        var support = _v1.a;
                        var _for = _v1.b;
                        return A2($author$project$Lia$Sync$Via$eq, _for, backend) ? support : false;
                    }, settings.sync.support)))), backend))
                })
            });
        } else return _Utils_update(settings, {
            error: $elm$core$Maybe$Just("Unknown Backend type: " + config.backend)
        });
    });
    var $author$project$Main$openSync = F2(function(room, model) {
        var settings = model.lia.settings;
        var lia = model.lia;
        return _Utils_update(model, {
            lia: _Utils_update(lia, {
                settings: _Utils_update(settings, {
                    sync: function() {
                        var _v0 = settings.sync;
                        if (_v0.$ === "Just") return $elm$core$Maybe$Just(true);
                        else return $elm$core$Maybe$Nothing;
                    }()
                }),
                sync: A2($author$project$Lia$Sync$Types$initRoom, room, lia.sync)
            })
        });
    });
    var $elm_community$list_extra$List$Extra$unconsLast = function(list) {
        var _v0 = $elm$core$List$reverse(list);
        if (!_v0.b) return $elm$core$Maybe$Nothing;
        else {
            var last_ = _v0.a;
            var rest = _v0.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2(last_, $elm$core$List$reverse(rest)));
        }
    };
    var $author$project$Lia$Utils$urlBasePath = A2($elm$core$Basics$composeR, $elm$core$String$split("/"), A2($elm$core$Basics$composeR, $elm_community$list_extra$List$Extra$unconsLast, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$core$Tuple$second, A2($elm$core$Basics$composeR, $elm$core$String$join("/"), function(path) {
        return path + "/";
    })))));
    var $author$project$Main$init = F3(function(flags, url, key) {
        var openTableOfContents = _Utils_cmp(flags.screen.width, $author$project$Const$globalBreakpoints.sm) > 0;
        var model = F3(function(url_, state_, lia_) {
            return A9($author$project$Model$Model, A2($elm$core$Maybe$withDefault, false, flags.fullPage), 0, flags.hasIndex, $elm$core$Maybe$Nothing, $author$project$Index$Model$init, $elm$core$Maybe$Nothing, A4($author$project$Session$Session, A2($elm$core$Maybe$withDefault, false, flags.hasShareAPI), key, flags.screen, url_), state_, $author$project$Lia$Script$init({
                anchor: lia_.anchor,
                backends: flags.sync,
                hasShareApi: flags.hasShareAPI,
                isFullscreen: flags.isFullscreen,
                openTOC: openTableOfContents,
                origin: lia_.origin,
                readme: lia_.readme,
                seed: flags.seed,
                settings: flags.settings,
                url: lia_.url
            }));
        });
        var courseUrl = _Utils_update(url, {
            query: A2($elm$core$Maybe$map, $author$project$Lia$Parser$PatReplace$link, url.query)
        });
        var _v0 = _Utils_Tuple3(courseUrl.query, flags.courseUrl, flags.script);
        if (_v0.c.$ === "Just") {
            var script = _v0.c.a;
            var subURL = _Utils_update(courseUrl, {
                query: $elm$core$Maybe$Just("README.md")
            });
            return A2($author$project$Update$load_readme, script, A3(model, subURL, $author$project$Model$Idle, {
                anchor: $elm$core$Maybe$Nothing,
                origin: "",
                readme: flags.hideURL ? "" : "README.md",
                url: $author$project$Main$get_base(subURL)
            }));
        } else if (_v0.b.$ === "Just") {
            var query = _v0.b.a;
            return A2($author$project$Update$getIndex, query, A3(model, _Utils_update(courseUrl, {
                query: $elm$core$Maybe$Just(query)
            }), $author$project$Model$Loading, {
                anchor: url.fragment,
                origin: A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlBasePath(query)),
                readme: flags.hideURL ? "" : query,
                url: $author$project$Main$get_base(A2($elm$core$Maybe$withDefault, _Utils_update(courseUrl, {
                    query: $elm$core$Maybe$Just(query)
                }), $elm$url$Url$fromString(query)))
            }));
        } else {
            if (_v0.a.$ === "Just") {
                var query = _v0.a.a;
                var _v1 = $author$project$Session$getType(courseUrl);
                switch(_v1.$){
                    case "Index":
                        return $author$project$Update$initIndex(A3(model, courseUrl, $author$project$Model$Idle, {
                            anchor: url.fragment,
                            origin: "",
                            readme: "",
                            url: ""
                        }));
                    case "Course":
                        var fragment = _v1.b;
                        return A2($author$project$Update$getIndex, query, A3(model, courseUrl, $author$project$Model$Loading, {
                            anchor: fragment,
                            origin: A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$andThen, $author$project$Lia$Utils$urlBasePath, courseUrl.query)),
                            readme: flags.hideURL ? "" : query,
                            url: $author$project$Main$get_base(courseUrl)
                        }));
                    default:
                        var room = _v1.a;
                        var fragment = _v1.b;
                        return A2($author$project$Update$getIndex, room.course, A2($author$project$Main$openSync, room, A3(model, courseUrl, $author$project$Model$Loading, {
                            anchor: fragment,
                            origin: A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlBasePath(room.course)),
                            readme: room.course,
                            url: $author$project$Main$get_base(courseUrl)
                        })));
                }
            } else return $author$project$Update$initIndex(A3(model, courseUrl, $author$project$Model$Idle, {
                anchor: url.fragment,
                origin: "",
                readme: "",
                url: ""
            }));
        }
    });
    var $author$project$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Update$Resize = function(a) {
        return {
            $: "Resize",
            a: a
        };
    };
    var $author$project$Session$Screen = F2(function(width, height) {
        return {
            height: height,
            width: width
        };
    });
    var $elm$core$Platform$Sub$batch = _Platform_batch;
    var $author$project$Update$event2elm = _Platform_incomingPort("event2elm", A2($elm$json$Json$Decode$andThen, function(track) {
        return A2($elm$json$Json$Decode$andThen, function(service) {
            return A2($elm$json$Json$Decode$andThen, function(reply) {
                return A2($elm$json$Json$Decode$andThen, function(message) {
                    return $elm$json$Json$Decode$succeed({
                        message: message,
                        reply: reply,
                        service: service,
                        track: track
                    });
                }, A2($elm$json$Json$Decode$field, "message", A2($elm$json$Json$Decode$andThen, function(param) {
                    return A2($elm$json$Json$Decode$andThen, function(cmd) {
                        return $elm$json$Json$Decode$succeed({
                            cmd: cmd,
                            param: param
                        });
                    }, A2($elm$json$Json$Decode$field, "cmd", $elm$json$Json$Decode$string));
                }, A2($elm$json$Json$Decode$field, "param", $elm$json$Json$Decode$value))));
            }, A2($elm$json$Json$Decode$field, "reply", $elm$json$Json$Decode$bool));
        }, A2($elm$json$Json$Decode$field, "service", $elm$json$Json$Decode$string));
    }, A2($elm$json$Json$Decode$field, "track", $elm$json$Json$Decode$list(A2($elm$json$Json$Decode$andThen, function(_v0) {
        return A2($elm$json$Json$Decode$andThen, function(_v1) {
            return $elm$json$Json$Decode$succeed(_Utils_Tuple2(_v0, _v1));
        }, A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
    }, A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string))))));
    var $elm$browser$Browser$Events$Window = {
        $: "Window"
    };
    var $elm$browser$Browser$Events$MySub = F3(function(a, b, c) {
        return {
            $: "MySub",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Browser$Events$State = F2(function(subs, pids) {
        return {
            pids: pids,
            subs: subs
        };
    });
    var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
    var $elm$browser$Browser$Events$nodeToKey = function(node) {
        if (node.$ === "Document") return "d_";
        else return "w_";
    };
    var $elm$browser$Browser$Events$addKey = function(sub) {
        var node = sub.a;
        var name = sub.b;
        return _Utils_Tuple2(_Utils_ap($elm$browser$Browser$Events$nodeToKey(node), name), sub);
    };
    var $elm$browser$Browser$Events$Event = F2(function(key, event) {
        return {
            event: event,
            key: key
        };
    });
    var $elm$browser$Browser$Events$spawn = F3(function(router, key, _v0) {
        var node = _v0.a;
        var name = _v0.b;
        var actualNode = function() {
            if (node.$ === "Document") return _Browser_doc;
            else return _Browser_window;
        }();
        return A2($elm$core$Task$map, function(value) {
            return _Utils_Tuple2(key, value);
        }, A3(_Browser_on, actualNode, name, function(event) {
            return A2($elm$core$Platform$sendToSelf, router, A2($elm$browser$Browser$Events$Event, key, event));
        }));
    });
    var $elm$browser$Browser$Events$onEffects = F3(function(router, subs, state) {
        var stepRight = F3(function(key, sub, _v6) {
            var deads = _v6.a;
            var lives = _v6.b;
            var news = _v6.c;
            return _Utils_Tuple3(deads, lives, A2($elm$core$List$cons, A3($elm$browser$Browser$Events$spawn, router, key, sub), news));
        });
        var stepLeft = F3(function(_v4, pid, _v5) {
            var deads = _v5.a;
            var lives = _v5.b;
            var news = _v5.c;
            return _Utils_Tuple3(A2($elm$core$List$cons, pid, deads), lives, news);
        });
        var stepBoth = F4(function(key, pid, _v2, _v3) {
            var deads = _v3.a;
            var lives = _v3.b;
            var news = _v3.c;
            return _Utils_Tuple3(deads, A3($elm$core$Dict$insert, key, pid, lives), news);
        });
        var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
        var _v0 = A6($elm$core$Dict$merge, stepLeft, stepBoth, stepRight, state.pids, $elm$core$Dict$fromList(newSubs), _Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
        var deadPids = _v0.a;
        var livePids = _v0.b;
        var makeNewPids = _v0.c;
        return A2($elm$core$Task$andThen, function(pids) {
            return $elm$core$Task$succeed(A2($elm$browser$Browser$Events$State, newSubs, A2($elm$core$Dict$union, livePids, $elm$core$Dict$fromList(pids))));
        }, A2($elm$core$Task$andThen, function(_v1) {
            return $elm$core$Task$sequence(makeNewPids);
        }, $elm$core$Task$sequence(A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
    });
    var $elm$browser$Browser$Events$onSelfMsg = F3(function(router, _v0, state) {
        var key = _v0.key;
        var event = _v0.event;
        var toMessage = function(_v2) {
            var subKey = _v2.a;
            var _v3 = _v2.b;
            var node = _v3.a;
            var name = _v3.b;
            var decoder = _v3.c;
            return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
        };
        var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
        return A2($elm$core$Task$andThen, function(_v1) {
            return $elm$core$Task$succeed(state);
        }, $elm$core$Task$sequence(A2($elm$core$List$map, $elm$core$Platform$sendToApp(router), messages)));
    });
    var $elm$browser$Browser$Events$subMap = F2(function(func, _v0) {
        var node = _v0.a;
        var name = _v0.b;
        var decoder = _v0.c;
        return A3($elm$browser$Browser$Events$MySub, node, name, A2($elm$json$Json$Decode$map, func, decoder));
    });
    _Platform_effectManagers["Browser.Events"] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
    var $elm$browser$Browser$Events$subscription = _Platform_leaf("Browser.Events");
    var $elm$browser$Browser$Events$on = F3(function(node, name, decoder) {
        return $elm$browser$Browser$Events$subscription(A3($elm$browser$Browser$Events$MySub, node, name, decoder));
    });
    var $elm$browser$Browser$Events$onResize = function(func) {
        return A3($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Window, "resize", A2($elm$json$Json$Decode$field, "target", A3($elm$json$Json$Decode$map2, func, A2($elm$json$Json$Decode$field, "innerWidth", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "innerHeight", $elm$json$Json$Decode$int))));
    };
    var $author$project$Lia$Update$Media = function(a) {
        return {
            $: "Media",
            a: a
        };
    };
    var $author$project$Lia$Update$Pane = function(a) {
        return {
            $: "Pane",
            a: a
        };
    };
    var $author$project$Lia$Update$media = _Platform_incomingPort("media", A2($elm$json$Json$Decode$andThen, function(_v0) {
        return A2($elm$json$Json$Decode$andThen, function(_v1) {
            return A2($elm$json$Json$Decode$andThen, function(_v2) {
                return $elm$json$Json$Decode$succeed(_Utils_Tuple3(_v0, _v1, _v2));
            }, A2($elm$json$Json$Decode$index, 2, $elm$json$Json$Decode$oneOf(_List_fromArray([
                $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$int)
            ]))));
        }, A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$oneOf(_List_fromArray([
            $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
            A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$int)
        ]))));
    }, A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string)));
    var $author$project$Lia$Markdown$Update$FootnoteShow = function(a) {
        return {
            $: "FootnoteShow",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Update$footnote = _Platform_incomingPort("footnote", $elm$json$Json$Decode$string);
    var $author$project$Lia$Markdown$Update$subscriptions = function(_v0) {
        return $author$project$Lia$Markdown$Update$footnote($author$project$Lia$Markdown$Update$FootnoteShow);
    };
    var $author$project$Library$SplitPane$Position = F2(function(x, y) {
        return {
            x: x,
            y: y
        };
    });
    var $author$project$Library$SplitPane$SplitterLeftAlone = function(a) {
        return {
            $: "SplitterLeftAlone",
            a: a
        };
    };
    var $author$project$Library$SplitPane$SplitterMove = function(a) {
        return {
            $: "SplitterMove",
            a: a
        };
    };
    var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
    var $elm$browser$Browser$Events$Document = {
        $: "Document"
    };
    var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, "mousemove");
    var $elm$browser$Browser$Events$onMouseUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, "mouseup");
    var $author$project$Library$SplitPane$subscriptions = function(_v0) {
        var state = _v0.a;
        var _v1 = state.dragState;
        if (_v1.$ === "Draggable" && _v1.a.$ === "Just") return $elm$core$Platform$Sub$batch(_List_fromArray([
            $elm$browser$Browser$Events$onMouseMove(A2($elm$json$Json$Decode$map, $author$project$Library$SplitPane$SplitterMove, A3($elm$json$Json$Decode$map2, $author$project$Library$SplitPane$Position, A2($elm$json$Json$Decode$field, "pageX", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "pageY", $elm$json$Json$Decode$int)))),
            $elm$browser$Browser$Events$onMouseUp(A2($elm$json$Json$Decode$map, $author$project$Library$SplitPane$SplitterLeftAlone, A3($elm$json$Json$Decode$map2, $author$project$Library$SplitPane$Position, A2($elm$json$Json$Decode$field, "pageX", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "pageY", $elm$json$Json$Decode$int))))
        ]));
        else return $elm$core$Platform$Sub$none;
    };
    var $author$project$Lia$Update$subscriptions = function(model) {
        var _v0 = $author$project$Lia$Update$get_active_section(model);
        if (_v0.$ === "Just") {
            var section = _v0.a;
            return $elm$core$Platform$Sub$batch(_List_fromArray([
                A2($elm$core$Platform$Sub$map, $author$project$Lia$Update$UpdateMarkdown, $author$project$Lia$Markdown$Update$subscriptions(section)),
                $author$project$Lia$Update$media($author$project$Lia$Update$Media),
                A2($elm$core$Platform$Sub$map, $author$project$Lia$Update$Pane, $author$project$Library$SplitPane$subscriptions(model.pane))
            ]));
        } else return $author$project$Lia$Update$media($author$project$Lia$Update$Media);
    };
    var $author$project$Lia$Script$subscriptions = $author$project$Lia$Update$subscriptions;
    var $author$project$Update$subscriptions = function(model) {
        return $elm$core$Platform$Sub$batch(_List_fromArray([
            $author$project$Update$event2elm($author$project$Update$Handle),
            A2($elm$core$Platform$Sub$map, $author$project$Update$LiaScript, $author$project$Lia$Script$subscriptions(model.lia)),
            A2($elm$core$Platform$Sub$map, $author$project$Update$Resize, $elm$browser$Browser$Events$onResize($author$project$Session$Screen))
        ]));
    };
    var $author$project$Update$GotResponse = F2(function(a, b) {
        return {
            $: "GotResponse",
            a: a,
            b: b
        };
    });
    var $author$project$Update$IsZip = {
        $: "IsZip"
    };
    var $author$project$Model$Loading_Zip = {
        $: "Loading_Zip"
    };
    var $author$project$Update$UpdateIndex = function(a) {
        return {
            $: "UpdateIndex",
            a: a
        };
    };
    var $author$project$Lia$Script$add_imports = F2(function(_v0, code) {
        var model = _v0.model;
        var base = _v0.base;
        var _v1 = A3($author$project$Lia$Parser$Parser$parse_definition, A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlBasePath(base)), A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlQuery(base)), code);
        if (_v1.$ === "Ok") {
            var _v2 = _v1.a;
            var definition = _v2.a;
            return A2($author$project$Lia$Script$add_todos, definition, model);
        } else return model;
    });
    var $author$project$Error$Message$reasonCause = F2(function(reason, cause) {
        return "**Error:** " + (reason + ("\n\n**Cause:** " + cause));
    });
    var $author$project$Error$Message$parseNetworkError = function(msg) {
        switch(msg.$){
            case "BadUrl":
                var url = msg.a;
                return A2($author$project$Error$Message$reasonCause, "Bad Url " + url, "This means that the provided URL was not valid.");
            case "Timeout":
                return A2($author$project$Error$Message$reasonCause, "Network Timeout", "It took too long to get a response.");
            case "BadStatus":
                var _int = msg.a;
                return A2($author$project$Error$Message$reasonCause, "Bad Status " + $elm$core$String$fromInt(_int), "This means I got a response back, but the status code indicates failure... You can check out [Wikipedia](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to see what the code means in detail.");
            case "NetworkError":
                return A2($author$project$Error$Message$reasonCause, "Network Error", "This means that you might have no internet connection, have turned off your Wi-FI or you are in a cave...");
            default:
                var body = msg.a;
                return A2($author$project$Error$Message$reasonCause, "Bad Body", "I received a response back with a nice status code, but the body of the response was something unexpected.\n\n```\n") + (body + "\n```");
        }
    };
    var $author$project$Error$Message$badStatus = F2(function(url, statusCode) {
        return "> I received a response back with a nice status code, but the status code indicates failure...\n\n" + ($author$project$Error$Message$parseNetworkError($elm$http$Http$BadStatus(statusCode)) + ("\n\n---\n\n" + ("The following URL seems to be broken:\n\n" + (url + ("\n\n---\n\n" + ("The error message is:\n\n" + function() {
            switch(statusCode){
                case 400:
                    return "__Bad Request: The server cannot process the request due to a client error. The request may be malformed.__\n\n**Hint:** Check if the URL contains special characters that need encoding.";
                case 401:
                    return "__Unauthorized: Authentication is required and has failed or has not been provided.__\n\n**Hint:** You may need to log in or provide authentication credentials to access this resource.";
                case 403:
                    return "__Forbidden: You don't have permission to access this resource.__\n\n**Hint:** The server understood the request but refuses to authorize it. Contact the resource owner if you believe you should have access.";
                case 404:
                    return "__Not Found: The requested resource could not be found on the server.__\n\n1. **Hint:** Check if the URL is typed correctly. The resource might have been moved or deleted.\n\n2. **Hint:** Check if the repository is publicly available, a private repository cannot be accessed.";
                case 405:
                    return "__Method Not Allowed: The request method is not supported for the requested resource.__\n\n**Hint:** This is typically a server configuration issue and not something you can fix as a user.";
                case 408:
                    return "__Request Timeout: The server timed out waiting for the request.__\n\n**Hint:** Try again later when your connection is more stable or the server is less busy.";
                case 429:
                    return "__Too Many Requests: You have sent too many requests in a given amount of time.__\n\n- **Hint:** Wait before trying again. The server is limiting how often you can access this resource.";
                default:
                    return statusCode >= 400 && statusCode < 500 ? "__Client Error " + ($elm$core$String$fromInt(statusCode) + ": Your request contains an error.__\n\n**Hint:** Check the URL and try again. If the problem persists, the resource might be temporarily unavailable.") : "__Error " + ($elm$core$String$fromInt(statusCode) + ": An unknown error occurred.__\n\n**Hint:** If this persists, contact the website administrator or check if the service is down.");
            }
        }()))))));
    });
    var $author$project$Lia$Model$clear = function(model) {
        return _Utils_update(model, {
            anchor: $elm$core$Maybe$Nothing,
            chat: $author$project$Lia$Chat$Model$init,
            definition: A2($author$project$Lia$Definition$Types$default, "", ""),
            error: $elm$core$Maybe$Nothing,
            index_model: $author$project$Lia$Index$Model$init,
            langCode: "en",
            langCodeOriginal: "en",
            media: $elm$core$Dict$empty,
            modal: $elm$core$Maybe$Nothing,
            origin: "",
            persistent: false,
            readme: "",
            repositoryUrl: $elm$core$Maybe$Nothing,
            resource: _List_Nil,
            search_index: $elm$core$Basics$identity,
            section_active: 0,
            sections: $elm$core$Array$empty,
            seed: model.seed + 111,
            title: "Lia",
            to_do: _List_Nil,
            translation: $author$project$I18n$Translations$En,
            url: ""
        });
    };
    var $author$project$Lia$Model$Model = function(url) {
        return function(repositoryUrl) {
            return function(readme) {
                return function(origin) {
                    return function(title) {
                        return function(settings) {
                            return function(error) {
                                return function(sections) {
                                    return function(section_active) {
                                        return function(anchor) {
                                            return function(definition) {
                                                return function(index_model) {
                                                    return function(resource) {
                                                        return function(to_do) {
                                                            return function(translation) {
                                                                return function(langCode) {
                                                                    return function(langName) {
                                                                        return function(langCodeOriginal) {
                                                                            return function(search_index) {
                                                                                return function(media) {
                                                                                    return function(modal) {
                                                                                        return function(sync) {
                                                                                            return function(persistent) {
                                                                                                return function(seed) {
                                                                                                    return function(pane) {
                                                                                                        return function(chat) {
                                                                                                            return function(overlayVideo) {
                                                                                                                return {
                                                                                                                    anchor: anchor,
                                                                                                                    chat: chat,
                                                                                                                    definition: definition,
                                                                                                                    error: error,
                                                                                                                    index_model: index_model,
                                                                                                                    langCode: langCode,
                                                                                                                    langCodeOriginal: langCodeOriginal,
                                                                                                                    langName: langName,
                                                                                                                    media: media,
                                                                                                                    modal: modal,
                                                                                                                    origin: origin,
                                                                                                                    overlayVideo: overlayVideo,
                                                                                                                    pane: pane,
                                                                                                                    persistent: persistent,
                                                                                                                    readme: readme,
                                                                                                                    repositoryUrl: repositoryUrl,
                                                                                                                    resource: resource,
                                                                                                                    search_index: search_index,
                                                                                                                    section_active: section_active,
                                                                                                                    sections: sections,
                                                                                                                    seed: seed,
                                                                                                                    settings: settings,
                                                                                                                    sync: sync,
                                                                                                                    title: title,
                                                                                                                    to_do: to_do,
                                                                                                                    translation: translation,
                                                                                                                    url: url
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Lia$Json$Decode$andMap = F2(function(key, dec) {
        return A2($elm$json$Json$Decode$map2, $elm$core$Basics$apR, A2($elm$json$Json$Decode$field, key, dec));
    });
    var $author$project$Lia$Definition$Types$Definition = function(author) {
        return function(date) {
            return function(email) {
                return function(language) {
                    return function(typographic_quotation) {
                        return function(logo) {
                            return function(narrator) {
                                return function(version) {
                                    return function(comment) {
                                        return function(resources) {
                                            return function(base) {
                                                return function(appendix) {
                                                    return function(translation) {
                                                        return function(formulas) {
                                                            return function(macro) {
                                                                return function(imports) {
                                                                    return function(attributes) {
                                                                        return function(section) {
                                                                            return function(uid) {
                                                                                return function(debug) {
                                                                                    return function(onload) {
                                                                                        return function(lightMode) {
                                                                                            return function(mode) {
                                                                                                return {
                                                                                                    appendix: appendix,
                                                                                                    attributes: attributes,
                                                                                                    author: author,
                                                                                                    base: base,
                                                                                                    comment: comment,
                                                                                                    date: date,
                                                                                                    debug: debug,
                                                                                                    email: email,
                                                                                                    formulas: formulas,
                                                                                                    imports: imports,
                                                                                                    language: language,
                                                                                                    lightMode: lightMode,
                                                                                                    logo: logo,
                                                                                                    macro: macro,
                                                                                                    mode: mode,
                                                                                                    narrator: narrator,
                                                                                                    onload: onload,
                                                                                                    resources: resources,
                                                                                                    section: section,
                                                                                                    translation: translation,
                                                                                                    typographic_quotation: typographic_quotation,
                                                                                                    uid: uid,
                                                                                                    version: version
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Lia$Definition$Json$Decode$andMap = F2(function(key, dec) {
        return A2($elm$json$Json$Decode$map2, $elm$core$Basics$apR, A2($elm$json$Json$Decode$field, key, dec));
    });
    var $author$project$Lia$Definition$Json$Decode$decResource = $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $author$project$Lia$Definition$Types$Link, A2($elm$json$Json$Decode$field, "Link", $elm$json$Json$Decode$string)),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Definition$Types$Script, A2($elm$json$Json$Decode$field, "Script", $elm$json$Json$Decode$string)),
        A2($elm$json$Json$Decode$map, $author$project$Lia$Definition$Types$Module, A2($elm$json$Json$Decode$field, "Module", $elm$json$Json$Decode$string))
    ]));
    var $author$project$Lia$Markdown$Effect$Types$Effect = F6(function(content, playback, begin, end, voice, id) {
        return {
            begin: begin,
            content: content,
            end: end,
            id: id,
            playback: playback,
            voice: voice
        };
    });
    var $author$project$Lia$Markdown$HTML$Types$decode = function(contentDecoder) {
        return A4($elm$json$Json$Decode$map3, $author$project$Lia$Markdown$HTML$Types$Node, A2($elm$json$Json$Decode$field, "node", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$map, $elm$core$Dict$toList, A2($elm$json$Json$Decode$field, "attr", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string))), A2($elm$json$Json$Decode$field, "children", $elm$json$Json$Decode$list(contentDecoder)));
    };
    var $elm$json$Json$Decode$lazy = function(thunk) {
        return A2($elm$json$Json$Decode$andThen, thunk, $elm$json$Json$Decode$succeed(_Utils_Tuple0));
    };
    var $author$project$Lia$Markdown$Inline$Json$Decode$strReader = F2(function(key, type_) {
        return A2($elm$json$Json$Decode$map, type_, A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$string));
    });
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation = function(fn) {
        return A2($elm$json$Json$Decode$map, fn, $elm$json$Json$Decode$oneOf(_List_fromArray([
            A2($elm$json$Json$Decode$field, "a", $elm$json$Json$Decode$list(A2($elm$json$Json$Decode$andThen, function(p) {
                if (p.b && p.b.b && !p.b.b.b) {
                    var key = p.a;
                    var _v1 = p.b;
                    var value = _v1.a;
                    return $elm$json$Json$Decode$succeed(_Utils_Tuple2(key, value));
                } else return $elm$json$Json$Decode$fail("not correct parameter list");
            }, $elm$json$Json$Decode$list($elm$json$Json$Decode$string)))),
            $elm$json$Json$Decode$succeed(_List_Nil)
        ])));
    };
    var $author$project$Lia$Markdown$Inline$Json$Decode$inlReader = F2(function(key, type_) {
        return A2($elm$json$Json$Decode$map, type_, A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$lazy(function(_v3) {
            return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
        })));
    });
    var $author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia = F2(function(fn3, _class) {
        return A4($elm$json$Json$Decode$map3, fn3, A2($elm$json$Json$Decode$field, _class, $elm$json$Json$Decode$lazy(function(_v2) {
            return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
        })), A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "stream", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "url", $elm$json$Json$Decode$string)), $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle());
    });
    var $author$project$Lia$Markdown$Inline$Json$Decode$toRef = F2(function(fn3, _class) {
        return A4($elm$json$Json$Decode$map3, fn3, A2($elm$json$Json$Decode$field, _class, $elm$json$Json$Decode$lazy(function(_v1) {
            return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
        })), A2($elm$json$Json$Decode$field, "url", $elm$json$Json$Decode$string), $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle());
    });
    function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode() {
        return $elm$json$Json$Decode$list($author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline());
    }
    function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline() {
        return A2($elm$json$Json$Decode$andThen, $author$project$Lia$Markdown$Inline$Json$Decode$toAnnotation, $elm$json$Json$Decode$oneOf(_List_fromArray([
            A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, "Chars", $author$project$Lia$Markdown$Inline$Types$Chars),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, "FootnoteMark", $author$project$Lia$Markdown$Inline$Types$FootnoteMark),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, "Symbol", $author$project$Lia$Markdown$Inline$Types$Symbol),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$strReader, "Verbatim", $author$project$Lia$Markdown$Inline$Types$Verbatim),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, "Bold", $author$project$Lia$Markdown$Inline$Types$Bold),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, "Italic", $author$project$Lia$Markdown$Inline$Types$Italic),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, "Strike", $author$project$Lia$Markdown$Inline$Types$Strike),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, "Superscript", $author$project$Lia$Markdown$Inline$Types$Superscript),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$inlReader, "Underline", $author$project$Lia$Markdown$Inline$Types$Underline),
            A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Inline$Types$Ref, A2($elm$json$Json$Decode$field, "Ref", $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference())),
            A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Inline$Types$Container, A2($elm$json$Json$Decode$field, "Container", $elm$json$Json$Decode$lazy(function(_v5) {
                return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
            }))),
            A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Inline$Types$IHTML, A2($elm$json$Json$Decode$field, "IHTML", $elm$json$Json$Decode$lazy(function(_v6) {
                return $author$project$Lia$Markdown$HTML$Types$decode($author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline());
            }))),
            A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Inline$Types$Script, A2($elm$json$Json$Decode$field, "Script", $elm$json$Json$Decode$int)),
            A2($elm$json$Json$Decode$map, $author$project$Lia$Markdown$Inline$Types$EInline, $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect())
        ])));
    }
    function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect() {
        return A7($elm$json$Json$Decode$map6, $author$project$Lia$Markdown$Effect$Types$Effect, A2($elm$json$Json$Decode$field, "EInline", $elm$json$Json$Decode$lazy(function(_v4) {
            return $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
        })), A2($elm$json$Json$Decode$field, "playback", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "begin", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "end", $elm$json$Json$Decode$maybe($elm$json$Json$Decode$int)), A2($elm$json$Json$Decode$field, "voice", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$int));
    }
    function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference() {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Link, "Link"),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Mail, "Mail"),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Image, "Image"),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toRef, $author$project$Lia$Markdown$Inline$Types$Embed, "Embed"),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, $author$project$Lia$Markdown$Inline$Types$Audio, "Audio"),
            A2($author$project$Lia$Markdown$Inline$Json$Decode$toMultimedia, $author$project$Lia$Markdown$Inline$Types$Movie, "Movie")
        ]));
    }
    function $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle() {
        return A2($elm$json$Json$Decode$field, "title", $elm$json$Json$Decode$lazy(function(_v0) {
            return $elm$json$Json$Decode$maybe($author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode());
        }));
    }
    try {
        var $author$project$Lia$Markdown$Inline$Json$Decode$decode = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode();
        $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decode = function() {
            return $author$project$Lia$Markdown$Inline$Json$Decode$decode;
        };
        var $author$project$Lia$Markdown$Inline$Json$Decode$decInline = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline();
        $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$decInline = function() {
            return $author$project$Lia$Markdown$Inline$Json$Decode$decInline;
        };
        var $author$project$Lia$Markdown$Inline$Json$Decode$effect = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect();
        $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$effect = function() {
            return $author$project$Lia$Markdown$Inline$Json$Decode$effect;
        };
        var $author$project$Lia$Markdown$Inline$Json$Decode$toReference = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference();
        $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toReference = function() {
            return $author$project$Lia$Markdown$Inline$Json$Decode$toReference;
        };
        var $author$project$Lia$Markdown$Inline$Json$Decode$toTitle = $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle();
        $author$project$Lia$Markdown$Inline$Json$Decode$cyclic$toTitle = function() {
            return $author$project$Lia$Markdown$Inline$Json$Decode$toTitle;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Inline.Json.Decode` are causing infinite recursion:\n\n  ┌─────┐\n  │    decode\n  │     ↓\n  │    decInline\n  │     ↓\n  │    effect\n  │     ↓\n  │    inlReader\n  │     ↓\n  │    toReference\n  │     ↓\n  │    toMultimedia\n  │     ↓\n  │    toRef\n  │     ↓\n  │    toTitle\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Definition$Json$Decode$decode = function(appendix) {
        return A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($author$project$Lia$Definition$Json$Decode$andMap, "onload", $elm$json$Json$Decode$string, A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(false), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(-1), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(-1), A3($author$project$Lia$Definition$Json$Decode$andMap, "attributes", $elm$json$Json$Decode$list($author$project$Lia$Markdown$Inline$Json$Decode$decode), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(_List_Nil), A3($author$project$Lia$Definition$Json$Decode$andMap, "macro", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, A2($elm$json$Json$Decode$map, $elm$core$Maybe$withDefault($elm$core$Dict$empty), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "formulas", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string)))), A3($author$project$Lia$Definition$Json$Decode$andMap, "translation", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(appendix), A3($author$project$Lia$Definition$Json$Decode$andMap, "base", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "resources", $elm$json$Json$Decode$list($author$project$Lia$Definition$Json$Decode$decResource), A3($author$project$Lia$Definition$Json$Decode$andMap, "comment", $author$project$Lia$Markdown$Inline$Json$Decode$decode, A3($author$project$Lia$Definition$Json$Decode$andMap, "version", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "narrator", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "logo", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "language", A2($elm$json$Json$Decode$map, $author$project$I18n$Quotation$quotation, $elm$json$Json$Decode$string), A3($author$project$Lia$Definition$Json$Decode$andMap, "language", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "email", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "date", $elm$json$Json$Decode$string, A3($author$project$Lia$Definition$Json$Decode$andMap, "author", $elm$json$Json$Decode$string, $elm$json$Json$Decode$succeed($author$project$Lia$Definition$Types$Definition))))))))))))))))))))))));
    };
    var $author$project$Lia$Json$Decode$toSectionBase = A4($elm$json$Json$Decode$map3, $author$project$Lia$Section$Base, A2($elm$json$Json$Decode$field, "indentation", $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$field, "title", $author$project$Lia$Markdown$Inline$Json$Decode$decode), A2($elm$json$Json$Decode$field, "code", $elm$json$Json$Decode$string));
    var $author$project$Lia$Json$Decode$toModel = F3(function(seed, pane, sync) {
        return A2($elm$json$Json$Decode$andThen, function(readme) {
            return A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($author$project$Library$Overlay$init), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($author$project$Lia$Chat$Model$init), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(pane), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(seed), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(false), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(sync), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Dict$empty), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Basics$identity), A3($author$project$Lia$Json$Decode$andMap, "translation", $elm$json$Json$Decode$string, A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($author$project$Lia$Json$Decode$andMap, "translation", $elm$json$Json$Decode$string, A3($author$project$Lia$Json$Decode$andMap, "translation", A2($elm$json$Json$Decode$map, A2($elm$core$Basics$composeR, $author$project$I18n$Translations$getLnFromCode, $elm$core$Maybe$withDefault($author$project$I18n$Translations$En)), $elm$json$Json$Decode$string), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(_List_Nil), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(_List_Nil), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($author$project$Lia$Index$Model$init), A3($author$project$Lia$Json$Decode$andMap, "definition", $author$project$Lia$Definition$Json$Decode$decode(A2($elm$core$Maybe$withDefault, "", $author$project$Lia$Utils$urlQuery(readme))), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($author$project$Lia$Json$Decode$andMap, "section_active", $elm$json$Json$Decode$int, A3($author$project$Lia$Json$Decode$andMap, "sections", A2($elm$json$Json$Decode$map, $elm$core$Array$indexedMap($author$project$Lia$Section$init(seed)), $elm$json$Json$Decode$array($author$project$Lia$Json$Decode$toSectionBase)), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(A3($author$project$Lia$Settings$Types$init, $elm$core$Maybe$Just(false), false, $author$project$Lia$Settings$Types$Slides)), A3($author$project$Lia$Json$Decode$andMap, "str_title", $elm$json$Json$Decode$string, A3($author$project$Lia$Json$Decode$andMap, "origin", $elm$json$Json$Decode$string, A3($elm$json$Json$Decode$map2, $elm$core$Basics$apR, $elm$json$Json$Decode$succeed(readme), A3($author$project$Lia$Json$Decode$andMap, "readme", A2($elm$json$Json$Decode$map, $author$project$Lia$Parser$PatReplace$repo, $elm$json$Json$Decode$string), A3($author$project$Lia$Json$Decode$andMap, "url", $elm$json$Json$Decode$string, $elm$json$Json$Decode$succeed($author$project$Lia$Model$Model))))))))))))))))))))))))))));
        }, A2($elm$json$Json$Decode$field, "readme", $elm$json$Json$Decode$string));
    });
    var $author$project$Lia$Json$Decode$decode = F3(function(seed, pane, sync) {
        return $elm$json$Json$Decode$decodeValue(A3($author$project$Lia$Json$Decode$toModel, seed, pane, sync));
    });
    var $author$project$Service$P2P$Response = F3(function(template, uri, body) {
        return {
            body: body,
            template: template,
            uri: uri
        };
    });
    var $author$project$Service$P2P$decoder = A4($elm$json$Json$Decode$map3, $author$project$Service$P2P$Response, A2($elm$json$Json$Decode$field, "template", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "uri", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "data", A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "ok", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "body", $elm$json$Json$Decode$string))));
    var $author$project$Service$P2P$decode = function(json) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Service$P2P$decoder, json);
        if (_v0.$ === "Ok") {
            var data = _v0.a;
            return _Utils_Tuple3(data.template, data.uri, function() {
                var _v1 = data.body;
                if (_v1.a) {
                    var content = _v1.b;
                    return $elm$core$Result$Ok(content);
                } else {
                    var info = _v1.b;
                    return $elm$core$Result$Err($elm$http$Http$BadBody(info));
                }
            }());
        } else {
            var info = _v0.a;
            return _Utils_Tuple3(false, "", $elm$core$Result$Err($elm$http$Http$BadBody($elm$json$Json$Decode$errorToString(info))));
        }
    };
    var $author$project$Service$Zip$decoder = A4($elm$json$Json$Decode$map3, F3(function(template, id, body) {
        return {
            body: body,
            id: id,
            template: template
        };
    }), A2($elm$json$Json$Decode$field, "template", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "data", A3($elm$json$Json$Decode$map2, $elm$core$Tuple$pair, A2($elm$json$Json$Decode$field, "ok", $elm$json$Json$Decode$bool), A2($elm$json$Json$Decode$field, "body", $elm$json$Json$Decode$string))));
    var $author$project$Service$Zip$decode = function(json) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Service$Zip$decoder, json);
        if (_v0.$ === "Ok") {
            var data = _v0.a;
            return _Utils_Tuple3(data.template, data.id, function() {
                var _v1 = data.body;
                if (_v1.a) {
                    var content = _v1.b;
                    return $elm$core$Result$Ok(content);
                } else {
                    var info = _v1.b;
                    return $elm$core$Result$Err($elm$http$Http$BadBody(info));
                }
            }());
        } else {
            var info = _v0.a;
            return _Utils_Tuple3(false, "", $elm$core$Result$Err($elm$http$Http$BadBody($elm$json$Json$Decode$errorToString(info))));
        }
    };
    var $author$project$Index$Model$Course = F5(function(id, versions, active, last_visit, popup) {
        return {
            active: active,
            id: id,
            last_visit: last_visit,
            popup: popup,
            versions: versions
        };
    });
    var $author$project$Index$Model$Release = F2(function(title, definition) {
        return {
            definition: definition,
            title: title
        };
    });
    var $author$project$Index$Update$decRelease = A3($elm$json$Json$Decode$map2, $author$project$Index$Model$Release, A2($elm$json$Json$Decode$field, "title", $author$project$Lia$Markdown$Inline$Json$Decode$decode), $author$project$Lia$Definition$Json$Decode$decode(""));
    var $author$project$Index$Update$decCourse = A6($elm$json$Json$Decode$map5, $author$project$Index$Model$Course, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "data", $elm$json$Json$Decode$dict($author$project$Index$Update$decRelease)), $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing), A2($elm$json$Json$Decode$field, "updated_str", $elm$json$Json$Decode$string), $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));
    var $author$project$Index$Update$decodeGet = function(event) {
        var _v0 = _Utils_Tuple2(A2($elm$json$Json$Decode$decodeValue, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), event), A2($elm$json$Json$Decode$decodeValue, $author$project$Index$Update$decCourse, event));
        if (_v0.a.$ === "Ok") {
            if (_v0.b.$ === "Ok") {
                var uri = _v0.a.a;
                var course = _v0.b.a;
                return $elm$core$Result$Ok(_Utils_Tuple2(uri, $elm$core$Maybe$Just(course)));
            } else {
                var uri = _v0.a.a;
                return $elm$core$Result$Ok(_Utils_Tuple2(uri, $elm$core$Maybe$Nothing));
            }
        } else {
            var info = _v0.a.a;
            return $elm$core$Result$Err(info);
        }
    };
    var $author$project$Service$Local$download = function(url) {
        return A2($author$project$Service$Local$event, "download", $elm$json$Json$Encode$string(url));
    };
    var $author$project$Update$IsMarkdown = function(a) {
        return {
            $: "IsMarkdown",
            a: a
        };
    };
    var $author$project$Update$getContentType = function(metadata) {
        return A2($elm$core$Maybe$map, $elm$core$Tuple$second, $elm$core$List$head(A2($elm$core$List$filter, function(_v0) {
            var name = _v0.a;
            return $elm$core$String$toLower(name) === "content-type";
        }, $elm$core$Dict$toList(metadata.headers))));
    };
    var $author$project$Update$handleResponse = function(response) {
        switch(response.$){
            case "GoodStatus_":
                var metadata = response.a;
                var body = response.b;
                var _v1 = $author$project$Update$getContentType(metadata);
                if (_v1.$ === "Just") {
                    var ct = _v1.a;
                    return A2($elm$core$String$contains, "application/zip", ct) ? $elm$core$Result$Ok($author$project$Update$IsZip) : $elm$core$Result$Ok($author$project$Update$IsMarkdown(body));
                } else return $elm$core$Result$Ok($author$project$Update$IsMarkdown(body));
            case "BadStatus_":
                var metadata = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata.statusCode));
            case "Timeout_":
                return $elm$core$Result$Err($elm$http$Http$Timeout);
            case "NetworkError_":
                return $elm$core$Result$Err($elm$http$Http$NetworkError);
            default:
                var info = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadUrl(info));
        }
    };
    var $author$project$Update$download_text_or_zip = function(url) {
        return $elm$http$Http$request({
            body: $elm$http$Http$emptyBody,
            expect: A2($elm$http$Http$expectStringResponse, $author$project$Update$GotResponse(url), $author$project$Update$handleResponse),
            headers: _List_Nil,
            method: "GET",
            timeout: $elm$core$Maybe$Nothing,
            tracker: $elm$core$Maybe$Nothing,
            url: url
        });
    };
    var $author$project$Index$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Index$Update$handle = $author$project$Index$Update$Handle;
    var $author$project$Lia$Update$Handle = function(a) {
        return {
            $: "Handle",
            a: a
        };
    };
    var $author$project$Lia$Script$handle = $author$project$Lia$Update$Handle;
    var $author$project$Update$isOffline = function(error) {
        switch(error.$){
            case "NetworkError":
                return true;
            case "Timeout":
                return true;
            default:
                return false;
        }
    };
    var $author$project$Update$isURI = function(url) {
        return A2($elm$core$String$startsWith, "data:text", url) || A2($elm$core$String$startsWith, "magnet:", url) || A2($elm$core$String$startsWith, "nostr:", url);
    };
    var $elm$browser$Browser$Navigation$load = _Browser_load;
    var $author$project$Session$load = A2($elm$core$Basics$composeR, $elm$url$Url$toString, $elm$browser$Browser$Navigation$load);
    var $author$project$Error$Message$loadingError = F3(function(message, url, networkStatus) {
        var hasProxy = A2($elm$core$String$startsWith, $author$project$Const$urlProxy, url);
        var rootUrl = hasProxy ? A3($elm$core$String$replace, $author$project$Const$urlProxy, "", url) : url;
        return "> " + (message + ("\n>\n> **" + (rootUrl + (" ** \n\n---\n" + ("From the network I received the following status\n\n" + ($author$project$Error$Message$parseNetworkError(networkStatus) + (hasProxy ? "\n\n---\n\n**Note:** The URL below looks a bit strange...\n\n" + (url + "\n\n\nThe reason for this is, that your resource could not be loaded in the first place.\nIn most cases this happens if\n[CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\nis not enabled on the root server. Hence, I tried to use a proxy to load it, but this didn't work either...\n") : "")))))));
    });
    var $author$project$Error$Message$loadingCourse = $author$project$Error$Message$loadingError("It seems, that I could not load the following LiaScript document for some reason:");
    var $author$project$Error$Message$loadingResource = $author$project$Error$Message$loadingError("I could not load the resource below. It contains a set of macros that need to\nbe loaded before the course. A later version of LiaScript might be more resilient\nto errors, but at the moment everything needs to be in place...");
    var $author$project$Lia$Parser$Preprocessor$check = function(c) {
        return !c ? $andre_dietrich$parser_combinators$Combine$fail("") : $andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0);
    };
    var $andre_dietrich$parser_combinators$Combine$currentColumn = A2($elm$core$Basics$composeR, $andre_dietrich$parser_combinators$Combine$currentLocation, function($) {
        return $.column;
    });
    var $andre_dietrich$parser_combinators$Combine$withColumn = function(f) {
        return $andre_dietrich$parser_combinators$Combine$Parser(F2(function(state, stream) {
            return A3($andre_dietrich$parser_combinators$Combine$app, f($andre_dietrich$parser_combinators$Combine$currentColumn(stream)), state, stream);
        }));
    };
    var $author$project$Lia$Parser$Preprocessor$body = A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$String$concat, $andre_dietrich$parser_combinators$Combine$many($andre_dietrich$parser_combinators$Combine$choice(_List_fromArray([
        $andre_dietrich$parser_combinators$Combine$regex("(?:[^#`<]+|[\\x0D\n]+|<!--[\\S\\s]{0,1000}?-->)"),
        $andre_dietrich$parser_combinators$Combine$regex("(`{3,})[\\S\\s]*?\\1"),
        $andre_dietrich$parser_combinators$Combine$regex("`.+?`"),
        A2($andre_dietrich$parser_combinators$Combine$regexWith, {
            caseInsensitive: true,
            multiline: false
        }, "<(?:area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)[ 	]*/?>"),
        $andre_dietrich$parser_combinators$Combine$regex("(?:<([\\w+\\-]+)[\\S\\s]*?<[ 	]*/[ 	]*\\1[ 	]*>|`|<)"),
        $andre_dietrich$parser_combinators$Combine$regex("#+(\\w|[^\\u0000-\\u007F]|[ 	]*\n)"),
        A2($andre_dietrich$parser_combinators$Combine$keep, $andre_dietrich$parser_combinators$Combine$string("#"), $andre_dietrich$parser_combinators$Combine$withColumn($author$project$Lia$Parser$Preprocessor$check))
    ]))));
    var $author$project$Lia$Parser$Preprocessor$title_str = A2($andre_dietrich$parser_combinators$Combine$ignore, $author$project$Lia$Parser$Helper$newline, $author$project$Lia$Markdown$Inline$Parser$line);
    var $author$project$Lia$Parser$Preprocessor$section = A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Parser$Preprocessor$body, A2($andre_dietrich$parser_combinators$Combine$andMap, $author$project$Lia$Parser$Preprocessor$title_str, A2($andre_dietrich$parser_combinators$Combine$map, $author$project$Lia$Section$Base, $author$project$Lia$Parser$Preprocessor$title_tag)));
    var $author$project$Lia$Parser$Parser$parse_titles = F2(function(defines, code) {
        var _v0 = A3($andre_dietrich$parser_combinators$Combine$runParser, $author$project$Lia$Parser$Preprocessor$section, A3($author$project$Lia$Parser$Context$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, defines), code);
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var data = _v1.b;
            var rslt = _v1.c;
            return $elm$core$Result$Ok(_Utils_Tuple2(rslt, data.input));
        } else {
            var _v2 = _v0.a;
            var stream = _v2.b;
            var ms = _v2.c;
            return $elm$core$Result$Err(A2($author$project$Lia$Parser$Parser$formatError, ms, stream));
        }
    });
    var $author$project$Lia$Script$parse_section = F2(function(model, code) {
        var _v0 = A2($author$project$Lia$Parser$Parser$parse_titles, model.definition, code);
        if (_v0.$ === "Ok") {
            var _v1 = _v0.a;
            var sec = _v1.a;
            var rest = _v1.b;
            return _Utils_Tuple2(function() {
                var seed = model.seed;
                return _Utils_update(model, {
                    sections: A2($elm$core$Array$push, A3($author$project$Lia$Section$init, seed, $author$project$Lia$Script$pages(model), sec), model.sections)
                });
            }(), $elm$core$String$isEmpty(rest) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(rest));
        } else {
            var msg = _v0.a;
            return _Utils_Tuple2(_Utils_update(model, {
                error: $elm$core$Maybe$Just(msg)
            }), $elm$core$Maybe$Nothing);
        }
    });
    var $author$project$Model$Running = {
        $: "Running"
    };
    var $author$project$Update$start = function(model) {
        var session = A2($author$project$Session$setQuery, model.lia.readme, model.session);
        var lia = model.lia;
        var slide = A2($elm$core$Maybe$withDefault, lia.section_active, A2($elm$core$Maybe$map, $elm$core$Basics$add(-1), A2($elm$core$Maybe$andThen, $elm$core$String$toInt, session.url.fragment)));
        var _return = A2($author$project$Lia$Script$load_first_slide, session, _Utils_update(lia, {
            section_active: slide
        }));
        return _Utils_Tuple2(_Utils_update(model, {
            lia: _return.value,
            session: session,
            state: $author$project$Model$Running
        }), $elm$core$Platform$Cmd$batch(_List_fromArray([
            A2($author$project$Update$batch, $author$project$Update$LiaScript, _return),
            _Utils_eq(session.url.fragment, $elm$core$Maybe$Nothing) ? A2($author$project$Session$navToSlide, session, slide) : $elm$core$Platform$Cmd$none
        ])));
    };
    var $author$project$Update$parsing = function(model) {
        parsing: while(true){
            var _v0 = model.state;
            _v0$2: while(true){
                if (_v0.$ === "Parsing") {
                    if (!_v0.a) {
                        if (!_v0.b) return $author$project$Update$start(model);
                        else break _v0$2;
                    } else {
                        var templates_to_load = _v0.b;
                        var _v1 = model.code;
                        if (_v1.$ === "Nothing") {
                            var $temp$model = _Utils_update(model, {
                                state: A2($author$project$Model$Parsing, false, templates_to_load)
                            });
                            model = $temp$model;
                            continue parsing;
                        } else {
                            var code = _v1.a;
                            var _v2 = A2($author$project$Lia$Script$parse_section, model.lia, code);
                            var lia = _v2.a;
                            var remaining_code = _v2.b;
                            var new_model = _Utils_update(model, {
                                code: remaining_code,
                                lia: lia
                            });
                            var _v3 = lia.error;
                            if (_v3.$ === "Nothing") {
                                if (!A2($elm$core$Basics$modBy, 4, $author$project$Lia$Script$pages(lia))) return _Utils_Tuple2(new_model, $author$project$Update$message($author$project$Update$LiaParse));
                                else {
                                    var $temp$model = new_model;
                                    model = $temp$model;
                                    continue parsing;
                                }
                            } else {
                                var error = _v3.a;
                                return $author$project$Update$startWithError(_Utils_update(model, {
                                    state: A2($author$project$Error$Report$add, model.state, A3($author$project$Error$Message$parseDefinition, false, _Utils_Tuple2(code, 0), error))
                                }));
                            }
                        }
                    }
                } else break _v0$2;
            }
            return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
        }
    };
    var $author$project$Index$Model$reset_modal = function(model) {
        return _Utils_update(model, {
            error: $elm$core$Maybe$Nothing,
            modal: $elm$core$Maybe$Nothing
        });
    };
    var $author$project$Update$restore = function(model) {
        return _Utils_Tuple2(model, $author$project$Update$event2js($author$project$Service$Database$index_restore({
            url: A2($elm$core$Maybe$withDefault, model.lia.readme, model.session.url.query),
            version: A2($elm$core$Maybe$withDefault, A2($elm$core$Maybe$withDefault, "0", A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, function($) {
                return $.versions;
            }, A2($elm$core$Basics$composeR, $elm$core$Dict$keys, $author$project$Index$Version$max)), model.preload)), A2($elm$core$Maybe$andThen, function($) {
                return $.active;
            }, model.preload))
        })));
    };
    var $author$project$Session$setFragment = F2(function(slide, session) {
        var url = session.url;
        return _Utils_update(session, {
            url: _Utils_update(url, {
                fragment: $elm$core$Maybe$Just($elm$core$String$fromInt(slide))
            })
        });
    });
    var $author$project$Session$setScreen = F2(function(size, session) {
        return _Utils_update(session, {
            screen: size
        });
    });
    var $author$project$Session$setUrl = F2(function(url, session) {
        return _Utils_update(session, {
            url: url
        });
    });
    var $author$project$Lia$Update$Focus = {
        $: "Focus"
    };
    var $author$project$Lia$Script$skip_to_main_content = function(session) {
        return A2($author$project$Lia$Update$update, session, $author$project$Lia$Update$Focus);
    };
    var $author$project$Library$IPFS$toHTTPS = F2(function(fallback, url) {
        return $author$project$Library$IPFS$isIPFS(url) ? A3($elm$core$String$replace, $author$project$Library$IPFS$protocol, $author$project$Library$IPFS$proxy, url) : fallback;
    });
    var $author$project$Index$Update$MasonryMsg = function(a) {
        return {
            $: "MasonryMsg",
            a: a
        };
    };
    var $author$project$Index$Update$NoOp = {
        $: "NoOp"
    };
    var $author$project$Index$Update$None = {
        $: "None"
    };
    var $author$project$Index$Model$Popup_Delete = {
        $: "Popup_Delete"
    };
    var $author$project$Index$Model$Popup_Reset = {
        $: "Popup_Reset"
    };
    var $elm$core$Dict$filter = F2(function(isGood, dict) {
        return A3($elm$core$Dict$foldl, F3(function(k, v, d) {
            return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
        }), $elm$core$Dict$empty, dict);
    });
    var $author$project$Index$Update$activate = F3(function(course, version, c) {
        return _Utils_eq(c.id, course) ? _Utils_update(c, {
            active: function() {
                if (version.$ === "Just") {
                    var ver = version.a;
                    return $elm$core$List$head($elm$core$Dict$keys(A2($elm$core$Dict$filter, F2(function(_v1, v) {
                        return _Utils_eq(v.definition.version, ver);
                    }), c.versions)));
                } else return $elm$core$Maybe$Nothing;
            }()
        }) : c;
    });
    var $author$project$Index$Update$IndexError = function(a) {
        return {
            $: "IndexError",
            a: a
        };
    };
    var $author$project$Index$Update$IndexList = function(a) {
        return {
            $: "IndexList",
            a: a
        };
    };
    var $author$project$Index$Update$decList = A2($elm$json$Json$Decode$map, $author$project$Index$Update$IndexList, $elm$json$Json$Decode$list($author$project$Index$Update$decCourse));
    var $author$project$Index$Update$decode = function(json) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Index$Update$decList, json);
        if (_v0.$ === "Ok") {
            var rslt = _v0.a;
            return rslt;
        } else return $author$project$Index$Update$IndexError("decode");
    };
    var $author$project$Service$Database$index_delete = function(url) {
        return A2($author$project$Service$Database$index_, "delete", $elm$json$Json$Encode$string(url));
    };
    var $author$project$Service$Database$index_reset = A2($elm$core$Basics$composeR, $author$project$Service$Database$toJson, $author$project$Service$Database$index_("reset"));
    var $author$project$Library$Masonry$Average = function(a) {
        return {
            $: "Average",
            a: a
        };
    };
    var $author$project$Library$Masonry$Id = function(a) {
        return {
            $: "Id",
            a: a
        };
    };
    var $author$project$Library$Masonry$toStringId = function(index) {
        return "elm-masonry-item-" + $elm$core$String$fromInt(index);
    };
    var $author$project$Library$Masonry$addId = F3(function(offset, masonryId, xs) {
        if (masonryId.$ === "Nothing") return A2($elm$core$List$indexedMap, F2(function(index, x) {
            return _Utils_Tuple2($author$project$Library$Masonry$Id($author$project$Library$Masonry$toStringId(index + offset)), x);
        }), xs);
        else {
            var id = masonryId.a;
            return A2($elm$core$List$indexedMap, F2(function(index, x) {
                return _Utils_Tuple2($author$project$Library$Masonry$Id($author$project$Library$Masonry$toStringId(index + offset) + ("-" + id)), x);
            }), xs);
        }
    });
    var $author$project$Library$Masonry$sumHeight = F3(function(_v0, height, acc) {
        if (height.$ === "Known") {
            var h = height.a;
            return (acc + h) / 2;
        } else return acc;
    });
    var $author$project$Library$Masonry$averageHeight = function(_v0) {
        var heights = _v0.a.heights;
        return $elm$core$Dict$isEmpty(heights) ? 100 : A3($elm$core$Dict$foldl, $author$project$Library$Masonry$sumHeight, 0, heights);
    };
    var $author$project$Library$Masonry$GotElement = function(a) {
        return {
            $: "GotElement",
            a: a
        };
    };
    var $elm$browser$Browser$Dom$getElement = _Browser_getElement;
    var $author$project$Library$Masonry$getHeight = function(itemId) {
        var id = itemId.a;
        return A2($elm$core$Task$attempt, $author$project$Library$Masonry$GotElement, A2($elm$core$Task$map, $elm$core$Tuple$pair(itemId), $elm$browser$Browser$Dom$getElement(id)));
    };
    var $author$project$Library$Masonry$append = F2(function(xs, masonry) {
        var masonry_ = masonry.a;
        var height = $author$project$Library$Masonry$averageHeight(masonry);
        var addedItems = A3($author$project$Library$Masonry$addId, $elm$core$List$length(masonry_.items), masonry_.id, xs);
        return _Utils_Tuple2($author$project$Library$Masonry$Masonry(_Utils_update(masonry_, {
            heights: A3($elm$core$List$foldl, F2(function(_v0, acc) {
                var id = _v0.a.a;
                return A3($elm$core$Dict$insert, id, $author$project$Library$Masonry$Average(height), acc);
            }), masonry_.heights, addedItems),
            items: _Utils_ap(masonry_.items, addedItems)
        })), $elm$core$Platform$Cmd$batch(A3($elm$core$List$foldl, A2($elm$core$Basics$composeL, A2($elm$core$Basics$composeL, $elm$core$List$cons, $author$project$Library$Masonry$getHeight), $elm$core$Tuple$first), _List_Nil, addedItems)));
    });
    var $author$project$Library$Masonry$init = F2(function(id, xs) {
        return A2($author$project$Library$Masonry$append, xs, $author$project$Library$Masonry$empty(id));
    });
    var $author$project$Library$Masonry$map = F2(function(f, _v0) {
        var masonry = _v0.a;
        return $author$project$Library$Masonry$Masonry(_Utils_update(masonry, {
            items: A2($elm$core$List$map, function(_v1) {
                var id = _v1.a;
                var x = _v1.b;
                return _Utils_Tuple2(id, f(x));
            }, masonry.items)
        }));
    });
    var $author$project$Index$Update$mapPopup = F3(function(action, courseID, course) {
        return _Utils_update(course, {
            popup: _Utils_eq(course.id, courseID) ? $elm$core$Maybe$Just(action) : $elm$core$Maybe$Nothing
        });
    });
    var $author$project$Library$Masonry$Known = function(a) {
        return {
            $: "Known",
            a: a
        };
    };
    var $author$project$Library$Masonry$update = F2(function(msg, masonry) {
        var masonry_ = masonry.a;
        if (msg.a.$ === "Err") return masonry;
        else {
            var _v1 = msg.a.a;
            var id = _v1.a.a;
            var element = _v1.b.element;
            return $author$project$Library$Masonry$Masonry(_Utils_update(masonry_, {
                heights: A3($elm$core$Dict$insert, id, $author$project$Library$Masonry$Known(element.height), masonry_.heights)
            }));
        }
    });
    var $author$project$Index$Update$UpdateSettings = function(a) {
        return {
            $: "UpdateSettings",
            a: a
        };
    };
    var $author$project$Index$Update$updateSettings = F3(function(msg, settings, _v0) {
        var model = _v0.a;
        var cmd = _v0.b;
        var events = _v0.c;
        if (msg.$ === "UpdateSettings") {
            var subMsg = msg.a;
            var _return = A3($author$project$Lia$Settings$Update$update, $elm$core$Maybe$Nothing, subMsg, settings);
            return _Utils_Tuple2(_return.value, _Utils_Tuple3(model, $elm$core$Platform$Cmd$batch(_List_fromArray([
                cmd,
                A2($elm$core$Platform$Cmd$map, $author$project$Index$Update$UpdateSettings, _return.command)
            ])), A2($elm$core$List$append, events, _return.events)));
        } else return _Utils_Tuple2(settings, _Utils_Tuple3(model, cmd, events));
    });
    var $author$project$Index$Update$update = F3(function(msg, settings, model) {
        return A3($author$project$Index$Update$updateSettings, msg, settings, function() {
            switch(msg.$){
                case "IndexList":
                    var list = msg.a;
                    var _v1 = A2($author$project$Library$Masonry$init, $elm$core$Maybe$Just("card"), list);
                    var masonry = _v1.a;
                    var cmd = _v1.b;
                    return _Utils_Tuple3(_Utils_update(model, {
                        courses: list,
                        initialized: true,
                        masonry: masonry
                    }), A2($elm$core$Platform$Cmd$map, $author$project$Index$Update$MasonryMsg, cmd), _List_Nil);
                case "IndexError":
                    return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
                case "Delete":
                    if (!msg.a) {
                        var courseID = msg.b;
                        return _Utils_Tuple3(_Utils_update(model, {
                            masonry: A2($author$project$Library$Masonry$map, A2($author$project$Index$Update$mapPopup, $author$project$Index$Model$Popup_Delete, courseID), model.masonry)
                        }), A2($author$project$Lia$Utils$focus, $author$project$Index$Update$None, "lia-popup"), _List_Nil);
                    } else {
                        var courseID = msg.b;
                        var courses = A2($elm$core$List$filter, A2($elm$core$Basics$composeR, function($) {
                            return $.id;
                        }, $elm$core$Basics$neq(courseID)), model.courses);
                        var _v2 = A2($author$project$Library$Masonry$init, $elm$core$Maybe$Just("card"), courses);
                        var masonry = _v2.a;
                        var cmd = _v2.b;
                        return _Utils_Tuple3(_Utils_update(model, {
                            courses: courses,
                            masonry: masonry
                        }), A2($elm$core$Platform$Cmd$map, $author$project$Index$Update$MasonryMsg, cmd), _List_fromArray([
                            $author$project$Service$Database$index_delete(courseID)
                        ]));
                    }
                case "PopupClose":
                    return _Utils_Tuple3(_Utils_update(model, {
                        masonry: A2($author$project$Library$Masonry$map, function(course) {
                            return _Utils_update(course, {
                                popup: $elm$core$Maybe$Nothing
                            });
                        }, model.masonry)
                    }), $elm$core$Platform$Cmd$none, _List_Nil);
                case "Reset":
                    if (!msg.a) {
                        var courseID = msg.b;
                        return _Utils_Tuple3(_Utils_update(model, {
                            masonry: A2($author$project$Library$Masonry$map, A2($author$project$Index$Update$mapPopup, $author$project$Index$Model$Popup_Reset, courseID), model.masonry)
                        }), A2($author$project$Lia$Utils$focus, $author$project$Index$Update$None, "lia-popup"), _List_Nil);
                    } else {
                        var courseID = msg.b;
                        var version = msg.c;
                        return _Utils_Tuple3(_Utils_update(model, {
                            masonry: A2($author$project$Library$Masonry$map, A2($author$project$Index$Update$mapPopup, $author$project$Index$Model$Popup_Reset, ""), model.masonry)
                        }), $elm$core$Platform$Cmd$none, _List_fromArray([
                            $author$project$Service$Database$index_reset({
                                url: courseID,
                                version: function() {
                                    if (version.$ === "Just") {
                                        var ver = version.a;
                                        return ver;
                                    } else return A2($elm$core$Maybe$withDefault, "-1", A2($elm$core$Maybe$map, function(c) {
                                        return $elm$core$String$fromInt(A2($elm$core$Maybe$withDefault, -1, $elm$core$List$maximum(A2($elm$core$List$filterMap, $elm$core$String$toInt, $elm$core$Dict$keys(c.versions)))));
                                    }, A2($elm_community$list_extra$List$Extra$find, A2($elm$core$Basics$composeR, function($) {
                                        return $.id;
                                    }, $elm$core$Basics$eq(courseID)), model.courses)));
                                }()
                            })
                        ]));
                    }
                case "Handle":
                    var event = msg.a;
                    var _v4 = $author$project$Service$Event$message(event);
                    switch(_v4.a){
                        case "index_list":
                            var param = _v4.b;
                            return A3($author$project$Index$Update$update, $author$project$Index$Update$decode(param), settings, model).b;
                        case "loading_error":
                            var param = _v4.b;
                            return _Utils_Tuple3(_Utils_update(model, {
                                error: $elm$core$Maybe$Just(function() {
                                    var _v5 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, param);
                                    if (_v5.$ === "Ok") {
                                        var error = _v5.a;
                                        return error;
                                    } else {
                                        var info = _v5.a;
                                        return $elm$json$Json$Decode$errorToString(info);
                                    }
                                }())
                            }), $elm$core$Platform$Cmd$none, _List_Nil);
                        default:
                            var unknown = _v4.a;
                            return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_fromArray([
                                $author$project$Service$Console$warn("Index: unknown cmd => " + unknown)
                            ]));
                    }
                case "Input":
                    var url = msg.a;
                    return _Utils_Tuple3(_Utils_update(model, {
                        input: url
                    }), $elm$core$Platform$Cmd$none, _List_Nil);
                case "Restore":
                    var course = msg.a;
                    var version = msg.b;
                    return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_fromArray([
                        $author$project$Service$Database$index_restore({
                            url: course,
                            version: A2($elm$core$Maybe$withDefault, "0.0.0", version)
                        })
                    ]));
                case "Activate":
                    var course = msg.a;
                    var version = msg.b;
                    return _Utils_Tuple3(_Utils_update(model, {
                        courses: A2($elm$core$List$map, A2($author$project$Index$Update$activate, course, version), model.courses),
                        masonry: A2($author$project$Library$Masonry$map, A2($author$project$Index$Update$activate, course, version), model.masonry)
                    }), $elm$core$Platform$Cmd$none, _List_Nil);
                case "Share":
                    var site = msg.a;
                    return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_fromArray([
                        $author$project$Service$Share$link(site)
                    ]));
                case "LoadCourse":
                    var url = msg.a;
                    return _Utils_Tuple3(model, $elm$browser$Browser$Navigation$load(url), _List_Nil);
                case "Modal":
                    var modal = msg.a;
                    return _Utils_Tuple3(_Utils_update(model, {
                        error: function() {
                            if (modal.$ === "Just") return model.error;
                            else return $elm$core$Maybe$Nothing;
                        }(),
                        modal: modal
                    }), A3($author$project$Lia$Utils$scheduleFocus, $elm$core$Maybe$Nothing, $author$project$Index$Update$NoOp, "lia-modal-focus"), _List_Nil);
                case "MasonryMsg":
                    var masonryMsg = msg.a;
                    return _Utils_Tuple3(_Utils_update(model, {
                        masonry: A2($author$project$Library$Masonry$update, masonryMsg, model.masonry)
                    }), $elm$core$Platform$Cmd$none, _List_Nil);
                default:
                    return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, _List_Nil);
            }
        }());
    });
    var $author$project$Lia$Script$update = $author$project$Lia$Update$update;
    var $author$project$Update$update = F2(function(msg, model) {
        update: while(true)switch(msg.$){
            case "LiaScript":
                var childMsg = msg.a;
                var _return = A3($author$project$Lia$Script$update, model.session, childMsg, model.lia);
                return _Utils_Tuple2(_Utils_update(model, {
                    lia: _return.value
                }), A2($author$project$Update$batch, $author$project$Update$LiaScript, _return));
            case "Handle":
                var event = msg.a;
                var _v1 = $author$project$Service$Event$destructure(event);
                _v1$6: while(true)if (_v1.a.$ === "Just") {
                    if (_v1.a.a === "index") {
                        var $temp$msg = $author$project$Update$UpdateIndex($author$project$Index$Update$handle($author$project$Service$Event$pop(event).b)), $temp$model = model;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    } else break _v1$6;
                } else switch(_v1.c.a){
                    case "index_get":
                        var _v2 = _v1.a;
                        var _v3 = _v1.c;
                        var param = _v3.b;
                        var _v4 = $author$project$Index$Update$decodeGet(param);
                        if (_v4.$ === "Ok") {
                            var _v5 = _v4.a;
                            var url = _v5.a;
                            var course = _v5.b;
                            return _Utils_Tuple2(_Utils_update(model, {
                                preload: course
                            }), $author$project$Update$isURI(url) ? A2($author$project$Update$download, false, url) : $author$project$Update$download_text_or_zip(url));
                        } else return _Utils_Tuple2(_Utils_update(model, {
                            preload: $elm$core$Maybe$Nothing
                        }), $author$project$Update$download_text_or_zip(model.lia.readme));
                    case "index_restore":
                        var _v6 = _v1.a;
                        var _v7 = _v1.c;
                        var param = _v7.b;
                        var _v8 = A4($author$project$Lia$Json$Decode$decode, model.lia.seed, model.lia.pane, model.lia.sync, param);
                        if (_v8.$ === "Ok") {
                            var lia = _v8.a;
                            return $author$project$Update$start(_Utils_update(model, {
                                lia: A2($author$project$Lia$Script$add_todos, lia.definition, _Utils_update(lia, {
                                    settings: model.lia.settings
                                }))
                            }));
                        } else return _Utils_Tuple2(_Utils_update(model, {
                            preload: $elm$core$Maybe$Nothing
                        }), $author$project$Update$download_text_or_zip(model.lia.readme));
                    case "lang":
                        var _v9 = _v1.a;
                        var _v10 = _v1.c;
                        var param = _v10.b;
                        var _v11 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$list($elm$json$Json$Decode$string), param);
                        if (_v11.$ === "Ok" && _v11.a.b && _v11.a.b.b && !_v11.a.b.b.b) {
                            var _v12 = _v11.a;
                            var language_code = _v12.a;
                            var _v13 = _v12.b;
                            var language_name = _v13.a;
                            var lia = model.lia;
                            return _Utils_Tuple2(_Utils_update(model, {
                                lia: _Utils_update(lia, {
                                    langCode: language_code,
                                    langName: $elm$core$Maybe$Just(language_name),
                                    translation: A2($elm$core$Maybe$withDefault, lia.translation, $author$project$I18n$Translations$getLnFromCode(language_code))
                                })
                            }), $elm$core$Platform$Cmd$none);
                        } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                    case "unzip":
                        var _v14 = _v1.a;
                        var _v15 = _v1.c;
                        var param = _v15.b;
                        var $temp$msg = function() {
                            var _v16 = $author$project$Service$Zip$decode(param);
                            if (!_v16.a) {
                                var id = _v16.b;
                                var result = _v16.c;
                                return A2($author$project$Update$Load_ReadMe_Result, id, result);
                            } else {
                                var id = _v16.b;
                                var result = _v16.c;
                                return A2($author$project$Update$Load_Template_Result, id, result);
                            }
                        }(), $temp$model = model;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    case "load":
                        var _v17 = _v1.a;
                        var _v18 = _v1.c;
                        var param = _v18.b;
                        var _v19 = $author$project$Service$P2P$decode(param);
                        if (!_v19.a) {
                            var uri = _v19.b;
                            var result = _v19.c;
                            var $temp$msg = A2($author$project$Update$Load_ReadMe_Result, uri, result), $temp$model = function() {
                                if ($elm$core$String$isEmpty(model.lia.readme) || !_Utils_eq(model.lia.readme, uri)) {
                                    var lia = model.lia;
                                    return _Utils_update(model, {
                                        lia: _Utils_update(lia, {
                                            origin: "",
                                            readme: uri,
                                            url: lia.url + ("/?" + uri)
                                        })
                                    });
                                } else return model;
                            }();
                            msg = $temp$msg;
                            model = $temp$model;
                            continue update;
                        } else {
                            var uri = _v19.b;
                            var result = _v19.c;
                            var $temp$msg = A2($author$project$Update$Load_Template_Result, uri, result), $temp$model = model;
                            msg = $temp$msg;
                            model = $temp$model;
                            continue update;
                        }
                    default:
                        break _v1$6;
                }
                var $temp$msg = $author$project$Update$LiaScript($author$project$Lia$Script$handle(event)), $temp$model = model;
                msg = $temp$msg;
                model = $temp$model;
                continue update;
            case "UpdateIndex":
                var childMsg = msg.a;
                var lia = model.lia;
                var _v20 = A3($author$project$Index$Update$update, childMsg, model.lia.settings, model.index);
                var settings = _v20.a;
                var _v21 = _v20.b;
                var index = _v21.a;
                var cmd = _v21.b;
                var events = _v21.c;
                return _Utils_Tuple2(_Utils_update(model, {
                    index: index,
                    lia: _Utils_update(lia, {
                        settings: settings
                    })
                }), A2($author$project$Update$batch, $author$project$Update$UpdateIndex, A2($author$project$Return$batchEvents, events, A2($author$project$Return$cmd, cmd, $author$project$Return$val(0)))));
            case "LinkClicked":
                var urlRequest = msg.a;
                if (urlRequest.$ === "Internal") {
                    var url = urlRequest.a;
                    var _v23 = _Utils_Tuple2(url.query, model.session.url.query);
                    _v23$2: while(true)if (_v23.a.$ === "Just") {
                        if (_v23.b.$ === "Just") {
                            var newCourseURL = _v23.a.a;
                            var oldCourseURL = _v23.b.a;
                            if (_Utils_eq(newCourseURL, oldCourseURL) && _Utils_eq(url.fragment, model.session.url.fragment)) {
                                var _return = A2($author$project$Lia$Script$skip_to_main_content, model.session, model.lia);
                                return _Utils_Tuple2(_Utils_update(model, {
                                    lia: _return.value
                                }), A2($author$project$Update$batch, $author$project$Update$LiaScript, _return));
                            } else {
                                if (!_Utils_eq(newCourseURL, oldCourseURL) || !_Utils_eq(url.fragment, $elm$core$Maybe$Just(""))) return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load($elm$url$Url$toString(url)));
                                else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            }
                        } else break _v23$2;
                    } else {
                        if (_v23.b.$ === "Just") {
                            var _v24 = _v23.a;
                            var oldCourseURL = _v23.b.a;
                            return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load($elm$url$Url$toString(_Utils_update(url, {
                                query: $elm$core$Maybe$Just(oldCourseURL)
                            }))));
                        } else break _v23$2;
                    }
                    return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load($elm$url$Url$toString(url)));
                } else {
                    var href = urlRequest.a;
                    return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load(href));
                }
            case "UrlChanged":
                var url = msg.a;
                if (!_Utils_eq(url, model.session.url)) {
                    var _v25 = $author$project$Session$getType(url);
                    switch(_v25.$){
                        case "Course":
                            var fragment = _v25.b;
                            var slide = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$andThen, $author$project$Lia$Script$getSectionNumberFrom(model.lia.search_index), fragment));
                            var session = A2($author$project$Session$setFragment, slide + 1, A2($author$project$Session$setUrl, url, model.session));
                            var _return = A4($author$project$Lia$Script$load_slide, session, true, slide, model.lia);
                            var lia = _return.value;
                            return _Utils_Tuple2(_Utils_update(model, {
                                lia: _Utils_update(lia, {
                                    url: $elm$url$Url$toString(_Utils_update(url, {
                                        fragment: $elm$core$Maybe$Nothing
                                    }))
                                }),
                                session: session
                            }), A2($author$project$Update$batch, $author$project$Update$LiaScript, _return));
                        case "Class":
                            var room = _v25.a;
                            var fragment = _v25.b;
                            var slide = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$andThen, $author$project$Lia$Script$getSectionNumberFrom(model.lia.search_index), fragment));
                            var session = A2($author$project$Session$setFragment, slide + 1, A2($author$project$Session$setClass, room, model.session));
                            var _return = A4($author$project$Lia$Script$load_slide, session, true, slide, model.lia);
                            var lia = _return.value;
                            return _Utils_Tuple2(_Utils_update(model, {
                                lia: _Utils_update(lia, {
                                    url: $elm$url$Url$toString(_Utils_update(url, {
                                        fragment: $elm$core$Maybe$Nothing
                                    }))
                                }),
                                session: session
                            }), A2($author$project$Update$batch, $author$project$Update$LiaScript, _return));
                        default:
                            return $author$project$Update$initIndex(_Utils_update(model, {
                                index: $author$project$Index$Model$reset_modal(model.index),
                                lia: $author$project$Lia$Model$clear(model.lia),
                                session: A2($author$project$Session$setUrl, url, model.session),
                                state: $author$project$Model$Idle
                            }));
                    }
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "Resize":
                var screen1 = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    session: A2($author$project$Session$setScreen, screen1, model.session)
                }), $elm$core$Platform$Cmd$none);
            case "LiaParse":
                return $author$project$Update$parsing(model);
            case "Load_ReadMe_Result":
                if (msg.b.$ === "Ok") {
                    var readme = msg.b.a;
                    return A2($author$project$Update$load_readme, readme, model);
                } else {
                    var url = msg.a;
                    var info = msg.b.a;
                    if (info.$ === "BadStatus") {
                        var errorCode = info.a;
                        return $author$project$Update$startWithError(_Utils_update(model, {
                            state: A2($author$project$Error$Report$add, model.state, A2($author$project$Error$Message$badStatus, url, errorCode))
                        }));
                    } else if (_Utils_eq(info, $elm$http$Http$NetworkError) && A2($elm$core$String$startsWith, "local://http", url)) {
                        var lia = model.lia;
                        var $temp$msg = A2($author$project$Update$GotResponse, A2($elm$core$String$dropLeft, 8, url), $elm$core$Result$Ok($author$project$Update$IsZip)), $temp$model = _Utils_update(model, {
                            lia: _Utils_update(lia, {
                                origin: ""
                            })
                        });
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    } else {
                        if (A2($elm$core$String$startsWith, $author$project$Const$urlProxy, url)) return $author$project$Update$startWithError(_Utils_update(model, {
                            state: A2($author$project$Error$Report$add, model.state, A2($author$project$Error$Message$loadingCourse, url, info))
                        }));
                        else {
                            if ($author$project$Update$isOffline(info) && !_Utils_eq(model.preload, $elm$core$Maybe$Nothing)) return $author$project$Update$restore(model);
                            else {
                                if ($author$project$Library$IPFS$isIPFS(url)) return _Utils_Tuple2(model, function() {
                                    var _v27 = $author$project$Session$getType(model.session.url);
                                    if (_v27.$ === "Class") {
                                        var room = _v27.a;
                                        return $author$project$Session$load(A2($author$project$Session$setClass, _Utils_update(room, {
                                            course: A2($author$project$Library$IPFS$toHTTPS, _Utils_ap($author$project$Const$urlProxy, url), url)
                                        }), model.session).url);
                                    } else return $author$project$Session$load(A2($author$project$Session$setQuery, A2($author$project$Library$IPFS$toHTTPS, _Utils_ap($author$project$Const$urlProxy, url), url), model.session).url);
                                }());
                                else return _Utils_Tuple2(model, $author$project$Session$load(A2($author$project$Session$setQuery, A2($author$project$Library$IPFS$toHTTPS, _Utils_ap($author$project$Const$urlProxy, url), url), model.session).url));
                            }
                        }
                    }
                }
            case "Load_Template_Result":
                if (msg.b.$ === "Ok") {
                    var url = msg.a;
                    var template = msg.b.a;
                    return $author$project$Update$parsing(_Utils_update(model, {
                        lia: A2($author$project$Lia$Script$add_imports, {
                            base: url,
                            model: model.lia
                        }, $author$project$Update$removeCR(template)),
                        state: function() {
                            var _v28 = model.state;
                            if (_v28.$ === "Parsing") {
                                var b = _v28.a;
                                var templates = _v28.b;
                                return A2($author$project$Model$Parsing, b, templates - 1);
                            } else return model.state;
                        }()
                    }));
                } else {
                    var url = msg.a;
                    var info = msg.b.a;
                    return A2($elm$core$String$startsWith, $author$project$Const$urlProxy, url) ? $author$project$Update$startWithError(_Utils_update(model, {
                        state: A2($author$project$Error$Report$add, model.state, A2($author$project$Error$Message$loadingResource, url, info))
                    })) : _Utils_Tuple2(model, A2($author$project$Update$download, true, A2($author$project$Library$IPFS$toHTTPS, _Utils_ap($author$project$Const$urlProxy, url), url)));
                }
            default:
                if (msg.b.$ === "Ok") {
                    var url = msg.a;
                    var responseData = msg.b.a;
                    if (responseData.$ === "IsMarkdown") {
                        var content = responseData.a;
                        var $temp$msg = A2($author$project$Update$Load_ReadMe_Result, url, $elm$core$Result$Ok(content)), $temp$model = model;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue update;
                    } else {
                        var new_model = _Utils_update(model, {
                            session: A2($author$project$Session$setQuery, "", model.session),
                            state: $author$project$Model$Loading_Zip
                        });
                        return _Utils_Tuple2(new_model, $author$project$Update$event2js($author$project$Service$Local$download(url)));
                    }
                } else {
                    var url = msg.a;
                    var info = msg.b.a;
                    var $temp$msg = A2($author$project$Update$Load_ReadMe_Result, url, $elm$core$Result$Err(info)), $temp$model = model;
                    msg = $temp$msg;
                    model = $temp$model;
                    continue update;
                }
        }
    });
    var $author$project$View$base_div = $elm$html$Html$div(_List_fromArray([
        A2($elm$html$Html$Attributes$style, "width", "100%"),
        A2($elm$html$Html$Attributes$style, "text-align", "center"),
        A2($elm$html$Html$Attributes$style, "top", "25%"),
        A2($elm$html$Html$Attributes$style, "position", "absolute")
    ]));
    var $elm$html$Html$br = _VirtualDom_node("br");
    var $elm$html$Html$h1 = _VirtualDom_node("h1");
    var $author$project$View$loading = _List_fromArray([
        $author$project$View$base_div(_List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Loading")
            ])),
            A2($elm$html$Html$br, _List_Nil, _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lds-dual-ring")
            ]), _List_Nil)
        ]))
    ]);
    var $elm$html$Html$progress = _VirtualDom_node("progress");
    var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
    var $tesk9$accessible_html$Accessibility$Utils$aria = A2($elm$core$Basics$composeL, $elm$html$Html$Attributes$attribute, $elm$core$Basics$append("aria-"));
    var $tesk9$accessible_html$Accessibility$Utils$toBoolString = function(bool) {
        return bool ? "true" : "false";
    };
    var $tesk9$accessible_html$Accessibility$Aria$hidden = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("hidden"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $author$project$Lia$Utils$deactivate = F2(function(_true, attr) {
        return _true ? A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Aria$hidden(true), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "inert", "true"), attr)) : attr;
    });
    var $author$project$Index$Update$Modal = function(a) {
        return {
            $: "Modal",
            a: a
        };
    };
    var $author$project$Index$View$Modal$input = function(attributes) {
        return A2($elm$html$Html$input, A2($elm$core$List$append, attributes, _List_fromArray([
            $elm$html$Html$Attributes$type_("file"),
            $elm$html$Html$Attributes$class("lia-input border-grey-light max-w-100 mb-1"),
            A2($elm$html$Html$Attributes$attribute, "onchange", "LIA.fileUpload(event)"),
            A2($elm$html$Html$Attributes$attribute, "ondrop", "LIA.fileUpload(event)")
        ])), _List_Nil);
    };
    var $elm$html$Html$Attributes$boolProperty = F2(function(key, bool) {
        return A2(_VirtualDom_property, key, $elm$json$Json$Encode$bool(bool));
    });
    var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty("disabled");
    var $elm$html$Html$Attributes$tabindex = function(n) {
        return A2(_VirtualDom_attribute, "tabIndex", $elm$core$String$fromInt(n));
    };
    var $tesk9$accessible_html$Accessibility$Key$tabbable = function(isTabbable) {
        return isTabbable ? $elm$html$Html$Attributes$tabindex(0) : $elm$html$Html$Attributes$tabindex(-1);
    };
    var $author$project$Lia$Utils$btn = function(_v0) {
        var title = _v0.title;
        var tabbable = _v0.tabbable;
        var msg = _v0.msg;
        return A2($elm$core$Basics$composeR, $elm$core$List$append(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn"),
            A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$disabled(true), A2($elm$core$Maybe$map, $elm$html$Html$Events$onClick, msg)),
            $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
            $elm$core$String$isEmpty(title) ? $elm$html$Html$Attributes$class("") : $elm$html$Html$Attributes$title(title)
        ])), $elm$html$Html$button);
    };
    var $elm$html$Html$i = _VirtualDom_node("i");
    var $author$project$Lia$Utils$icon = F2(function(_class, attributes) {
        return A2($elm$html$Html$i, A2($elm$core$List$append, _List_fromArray([
            $tesk9$accessible_html$Accessibility$Aria$hidden(true),
            $elm$html$Html$Attributes$class("icon"),
            $elm$html$Html$Attributes$class(_class)
        ]), attributes), _List_Nil);
    });
    var $author$project$Lia$Utils$btnIcon = F2(function(config, attr) {
        return A3($author$project$Lia$Utils$btn, config, attr, _List_fromArray([
            A2($author$project$Lia$Utils$icon, config.icon, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__icon")
            ]))
        ]));
    });
    var $tesk9$accessible_html$Accessibility$Utils$role = function(role_) {
        return A2($elm$html$Html$Attributes$attribute, "role", role_);
    };
    var $tesk9$accessible_html$Accessibility$Role$dialog = $tesk9$accessible_html$Accessibility$Utils$role("dialog");
    var $tesk9$accessible_html$Accessibility$Key$escape = function(msg) {
        return {
            keyCode: 27,
            msg: msg,
            shiftKey: false
        };
    };
    var $tesk9$accessible_html$Accessibility$Aria$modal = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("modal"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, "keyCode", $elm$json$Json$Decode$int);
    var $tesk9$accessible_html$Accessibility$Key$customOneOf = function(events) {
        var justMatches = F3(function(keyCode, shiftKey, event) {
            return _Utils_eq(event.keyCode, keyCode) && _Utils_eq(shiftKey, event.shiftKey) ? $elm$core$Maybe$Just(event.msg) : $elm$core$Maybe$Nothing;
        });
        return A2($elm$json$Json$Decode$andThen, A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$json$Json$Decode$succeed), $elm$core$Maybe$withDefault($elm$json$Json$Decode$fail("No matches"))), A3($elm$json$Json$Decode$map2, F2(function(keyCode, shiftKey) {
            return $elm$core$List$head(A2($elm$core$List$filterMap, A2(justMatches, keyCode, shiftKey), events));
        }), $elm$html$Html$Events$keyCode, A2($elm$json$Json$Decode$field, "shiftKey", $elm$json$Json$Decode$bool)));
    };
    var $tesk9$accessible_html$Accessibility$Key$onKeyDown = function(decoders) {
        return A2($elm$html$Html$Events$on, "keydown", $tesk9$accessible_html$Accessibility$Key$customOneOf(decoders));
    };
    var $author$project$Lia$Utils$modal = F3(function(msgClose, controls, content) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-modal"),
            $tesk9$accessible_html$Accessibility$Aria$modal(true),
            $tesk9$accessible_html$Accessibility$Role$dialog
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-modal__inner")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-modal__close")
                ]), _List_fromArray([
                    A2($author$project$Lia$Utils$btnIcon, {
                        icon: "icon-close",
                        msg: $elm$core$Maybe$Just(msgClose),
                        tabbable: true,
                        title: "close modal"
                    }, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-btn--transparent"),
                        $elm$html$Html$Attributes$id("lia-modal__close"),
                        $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                            $tesk9$accessible_html$Accessibility$Key$escape(msgClose)
                        ]))
                    ]))
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-modal__content")
                ]), content),
                A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, $elm$html$Html$div(_List_fromArray([
                    $elm$html$Html$Attributes$class("lia-modal__controls")
                ])), controls))
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-modal__outer"),
                $elm$html$Html$Events$onClick(msgClose)
            ]), _List_Nil)
        ]));
    });
    var $elm$html$Html$h3 = _VirtualDom_node("h3");
    var $author$project$Index$View$Modal$note = A2($elm$html$Html$div, _List_Nil, _List_fromArray([
        A2($elm$html$Html$h3, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "padding-top", "2rem")
        ]), _List_fromArray([
            $elm$html$Html$text("Note")
        ])),
        A2($elm$html$Html$p, _List_Nil, _List_fromArray([
            $elm$html$Html$text('Your project will be stored under the reference "local://...", followed by the hash value of the "README.md" file. '),
            $elm$html$Html$text("Therefore, loading the same course from different files will result in the same reference. "),
            $elm$html$Html$text("Any changes you make to the course will be stored under a new URL.")
        ]))
    ]));
    var $elm$html$Html$section = _VirtualDom_node("section");
    var $author$project$Index$View$Modal$showError = function(error) {
        if (error.$ === "Just") {
            var msg = error.a;
            return A2($elm$html$Html$section, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-error"),
                A2($elm$html$Html$Attributes$style, "border", "1px solid white"),
                A2($elm$html$Html$Attributes$style, "border-radius", "0.5rem"),
                A2($elm$html$Html$Attributes$style, "padding", "1.5rem")
            ]), _List_fromArray([
                A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("Ups an Error occurred")
                ])),
                A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(msg)
                ]))
            ]));
        } else return $elm$html$Html$text("");
    };
    var $author$project$Index$View$Modal$directory = function(error) {
        return A3($author$project$Lia$Utils$modal, $author$project$Index$Update$Modal($elm$core$Maybe$Nothing), $elm$core$Maybe$Nothing, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "max-width", "800px"),
                A2($elm$html$Html$Attributes$style, "margin", "auto"),
                A2($elm$html$Html$Attributes$style, "padding", "1rem")
            ]), _List_fromArray([
                A2($elm$html$Html$h1, _List_fromArray([
                    $elm$html$Html$Attributes$tabindex(-1),
                    $elm$html$Html$Attributes$id("lia-modal-focus")
                ]), _List_fromArray([
                    $elm$html$Html$text("Import Directory")
                ])),
                A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("Select a folder (which might contain sub-folders as well) by clicking on the button below or drag and drop it onto the field below. "),
                    $elm$html$Html$text('The folder should contain at least one "README.md" file, which will be used as the main entry point for your course.')
                ])),
                $author$project$Index$View$Modal$input(_List_fromArray([
                    A2($elm$html$Html$Attributes$attribute, "webkitdirectory", ""),
                    A2($elm$html$Html$Attributes$attribute, "directory", "")
                ])),
                $author$project$Index$View$Modal$note,
                $author$project$Index$View$Modal$showError(error)
            ]))
        ]));
    };
    var $author$project$Index$Model$Directory = {
        $: "Directory"
    };
    var $author$project$Index$View$Modal$btn_directory_import = A3($author$project$Lia$Utils$btn, {
        msg: $elm$core$Maybe$Just($author$project$Index$Update$Modal($elm$core$Maybe$Just($author$project$Index$Model$Directory))),
        tabbable: true,
        title: "Import files and subfolders from a directory"
    }, _List_Nil, _List_fromArray([
        $elm$html$Html$text("Import Directory")
    ]));
    var $elm$html$Html$Attributes$multiple = $elm$html$Html$Attributes$boolProperty("multiple");
    var $author$project$Index$View$Modal$files = function(error) {
        return A3($author$project$Lia$Utils$modal, $author$project$Index$Update$Modal($elm$core$Maybe$Nothing), $elm$core$Maybe$Nothing, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "max-width", "800px"),
                A2($elm$html$Html$Attributes$style, "margin", "auto"),
                A2($elm$html$Html$Attributes$style, "padding", "1rem")
            ]), _List_fromArray([
                A2($elm$html$Html$h1, _List_fromArray([
                    $elm$html$Html$Attributes$tabindex(-1),
                    $elm$html$Html$Attributes$id("lia-modal-focus")
                ]), _List_fromArray([
                    $elm$html$Html$text("Import File(s)")
                ])),
                A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("You can import a course either from a single ZIP file or from multiple uncompressed files that contain all the necessary content. "),
                    $elm$html$Html$text("To do this, you can either click on the button below to load the files or simply drag and drop them onto the field below. ")
                ])),
                $author$project$Index$View$Modal$input(_List_fromArray([
                    $elm$html$Html$Attributes$multiple(true)
                ])),
                A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("... from a ZIP")
                ])),
                A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                    $elm$html$Html$text('Your ZIP file should contain at least one "README.md" file, which will be used as the main entry point for your course. '),
                    $elm$html$Html$text("All other files (including images, audio, or video) will be extracted and stored in your browser's local database, "),
                    A2($elm$html$Html$a, _List_fromArray([
                        $elm$html$Html$Attributes$href("https://en.wikipedia.org/wiki/Indexed_Database_API")
                    ]), _List_fromArray([
                        $elm$html$Html$text("IndexedDB")
                    ])),
                    $elm$html$Html$text(". "),
                    $elm$html$Html$text("Depending on the size of the ZIP file, the initial loading might take some time.")
                ])),
                A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("... from Multiple Files")
                ])),
                A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("You can load multiple uncompressed files from a single directory. "),
                    $elm$html$Html$text('Similar to the ZIP file, the "README.md" file will be used as the main entry point for your course. '),
                    $elm$html$Html$text("HTML5 allows loading only files that are in the same folder; loading nested subfolders is not possible. "),
                    $elm$html$Html$text("If you want to load an entire folder with subfolders, please use the directory import option.")
                ])),
                $author$project$Index$View$Modal$btn_directory_import,
                $author$project$Index$View$Modal$note,
                $author$project$Index$View$Modal$showError(error)
            ]))
        ]));
    };
    var $author$project$Lia$Settings$Update$Chat = {
        $: "Chat"
    };
    var $author$project$I18n$Translations$chatClose = function(lang) {
        switch(lang.$){
            case "Am":
                return "ዝጋት ያድርጉ";
            case "Ar":
                return "إغلاق الدردشة";
            case "Bg":
                return "Затвори чат";
            case "Bn":
                return "চ্যাট বন্ধ করুন";
            case "De":
                return "Chat schlie\xdfen";
            case "Es":
                return "Cerrar chat";
            case "Fa":
                return "بستن گفتگو";
            case "Fr":
                return "Fermer le chat";
            case "Hi":
                return "चैट बंद करें";
            case "Hy":
                return "Փակել խոսակցություն";
            case "It":
                return "Chiudere la chat";
            case "Ja":
                return "チャットを閉じる";
            case "Ka":
                return "ჩატი დახურვა";
            case "Ko":
                return "채팅 닫기";
            case "Nl":
                return "Chat sluiten";
            case "Pa":
                return "ਚੈਟ ਬੰਦ ਕਰੋ";
            case "Pt":
                return "Fechar chat";
            case "Ru":
                return "Закрыть чат";
            case "Sw":
                return "Funga gumzo";
            case "Tw":
                return "關閉聊天室";
            case "Uk":
                return "Закрити чат";
            case "Ur":
                return "چیٹ بند کریں";
            case "Zh":
                return "关闭聊天";
            default:
                return "Close chat";
        }
    };
    var $author$project$I18n$Translations$chatNew = function(lang) {
        switch(lang.$){
            case "Am":
                return "የተከፈሉ የቀዳሚ መልዕክቶች አልተመለከተም";
            case "Ar":
                return "لديك رسائل دردشة غير مقروءة";
            case "Bg":
                return "Имате непрочетени чат съобщения";
            case "Bn":
                return "আপনার অপঠিত চ্যাট বার্তাগুলি আছে";
            case "De":
                return "Du hast ungelesene Chat-Nachrichten";
            case "Es":
                return "Tienes mensajes de chat no le\xeddos";
            case "Fa":
                return "شما پیام‌های چت خوانده نشده دارید";
            case "Fr":
                return "Vous avez des messages de chat non lus";
            case "Hi":
                return "आपके पास अपठित चैट संदेश हैं";
            case "Hy":
                return "Դուք ունեք չկարդացված խոսածքներ խոսակցության մեջ";
            case "It":
                return "Ci sono messaggi di chat non letti";
            case "Ja":
                return "未読のチャットメッセージがあります";
            case "Ka":
                return "გაქვთ არაკითხული ჩატის შეტყობინებები";
            case "Ko":
                return "읽지 않은 채팅 메시지가 있습니다";
            case "Nl":
                return "Je hebt ongelezen chatberichten";
            case "Pa":
                return "ਤੁਸੀਂ ਨਾ-ਪੜ੍ਹੇ ਚੈਟ ਸੁਨੇਹੇ ਹਨ";
            case "Pt":
                return "Voc\xea tem mensagens de chat n\xe3o lidas";
            case "Ru":
                return "У вас есть непрочитанные сообщения в чате";
            case "Sw":
                return "Una ujumbe wa gumzo usio soma";
            case "Tw":
                return "你有未讀的聊天訊息";
            case "Uk":
                return "У вас є непрочитані повідомлення в чаті";
            case "Ur":
                return "آپ کے پاس ان پڑھی چیٹ پیغامات ہیں";
            case "Zh":
                return "你有未读的聊天消息";
            default:
                return "You have unread chat messages";
        }
    };
    var $author$project$I18n$Translations$chatOpen = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቀዳሚ ማድረግ";
            case "Ar":
                return "فتح الدردشة";
            case "Bg":
                return "Отвори чат";
            case "Bn":
                return "চ্যাট খুলুন";
            case "De":
                return "Chat \xf6ffnen";
            case "Es":
                return "Abrir chat";
            case "Fa":
                return "باز کردن گفتگو";
            case "Fr":
                return "Ouvrir le chat";
            case "Hi":
                return "चैट खोलें";
            case "Hy":
                return "Բացել խոսակցություն";
            case "It":
                return "Aprire la chat";
            case "Ja":
                return "チャットを開く";
            case "Ka":
                return "ჩატი გახსნა";
            case "Ko":
                return "채팅 열기";
            case "Nl":
                return "Chat openen";
            case "Pa":
                return "ਚੈਟ ਖੋਲ੍ਹੋ";
            case "Pt":
                return "Abrir chat";
            case "Ru":
                return "Открыть чат";
            case "Sw":
                return "Fungua gumzo";
            case "Tw":
                return "開啟聊天室";
            case "Uk":
                return "Відкрити чат";
            case "Ur":
                return "چیٹ کھولیں";
            case "Zh":
                return "打开聊天";
            default:
                return "Open chat";
        }
    };
    var $tesk9$accessible_html$Accessibility$Aria$expanded = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("expanded"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp = A2($tesk9$accessible_html$Accessibility$Utils$aria, "haspopup", "menu");
    var $author$project$Lia$Settings$View$btnChat = function(_v0) {
        var lang = _v0.lang;
        var tabbable = _v0.tabbable;
        var hide = _v0.hide;
        var chat = _v0.chat;
        return hide ? A2($elm$html$Html$span, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin-right", "4rem")
        ]), _List_Nil) : A2($author$project$Lia$Utils$btnIcon, {
            icon: function() {
                var _v1 = _Utils_Tuple2(chat.show, chat.updates);
                if (_v1.a) return "icon-chat-open";
                else {
                    if (!_v1.b) return "icon-chat-close";
                    else return "icon-chat-new";
                }
            }(),
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Chat)),
            tabbable: tabbable,
            title: function() {
                var _v2 = _Utils_Tuple2(chat.show, chat.updates);
                if (_v2.a) return $author$project$I18n$Translations$chatClose(lang);
                else {
                    if (!_v2.b) return $author$project$I18n$Translations$chatOpen(lang);
                    else return $author$project$I18n$Translations$chatNew(lang);
                }
            }()
        }, _List_fromArray([
            $elm$html$Html$Attributes$id("lia-btn-chat"),
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent"),
            $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp,
            $tesk9$accessible_html$Accessibility$Aria$expanded(chat.show),
            A2($elm$html$Html$Attributes$style, "margin-right", "1rem"),
            $elm$html$Html$Attributes$class(chat.updates && !chat.show ? "shake" : "")
        ]));
    };
    var $author$project$Lia$Settings$Update$SupportMenu = {
        $: "SupportMenu"
    };
    var $author$project$I18n$Translations$confSettings = function(lang) {
        switch(lang.$){
            case "Am":
                return "ማስተካከያዎች";
            case "Ar":
                return "اعدادات";
            case "Bg":
                return "Настройки";
            case "Bn":
                return "সেটিংস";
            case "De":
                return "Einstellungen";
            case "Es":
                return "configuraci\xf3n";
            case "Fa":
                return "تنظیمات";
            case "Fr":
                return "Param\xe8tres";
            case "Hi":
                return "सेटिंग्स";
            case "Hy":
                return "կարգավորումներ";
            case "It":
                return "Impostazioni";
            case "Ja":
                return "設定";
            case "Ka":
                return "პარამეტრები";
            case "Ko":
                return "설정";
            case "Nl":
                return "Instellingen";
            case "Pa":
                return "ਸੈਟਿੰਗ";
            case "Pt":
                return "Configura\xe7\xf5es";
            case "Ru":
                return "настройки";
            case "Sw":
                return "Mipangilio";
            case "Tw":
                return "設定";
            case "Uk":
                return "налаштування";
            case "Ur":
                return "ترتیبات";
            case "Zh":
                return "設定";
            default:
                return "Settings";
        }
    };
    var $tesk9$accessible_html$Accessibility$Utils$toListString = $elm$core$String$join(" ");
    var $tesk9$accessible_html$Accessibility$Aria$controls = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("controls"), $tesk9$accessible_html$Accessibility$Utils$toListString);
    var $author$project$Lia$Settings$View$btnSupport = F2(function(lang, open) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: open ? "icon-close" : "icon-more",
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$SupportMenu)),
            tabbable: true,
            title: $author$project$I18n$Translations$confSettings(lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent"),
            $tesk9$accessible_html$Accessibility$Aria$controls(_List_fromArray([
                "lia-support-menu"
            ])),
            $elm$html$Html$Attributes$id("lia-btn-support"),
            $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp,
            $tesk9$accessible_html$Accessibility$Aria$expanded(open)
        ]));
    });
    var $elm$html$Html$header = _VirtualDom_node("header");
    var $elm$html$Html$img = _VirtualDom_node("img");
    var $tesk9$accessible_html$Accessibility$Role$menuBar = $tesk9$accessible_html$Accessibility$Utils$role("menubar");
    var $tesk9$accessible_html$Accessibility$Role$menuItem = $tesk9$accessible_html$Accessibility$Utils$role("menuitem");
    var $elm$html$Html$Attributes$src = function(url) {
        return A2($elm$html$Html$Attributes$stringProperty, "src", _VirtualDom_noJavaScriptOrHtmlUri(url));
    };
    var $author$project$Lia$Settings$View$header = function(_v0) {
        var online = _v0.online;
        var active = _v0.active;
        var lang = _v0.lang;
        var screen1 = _v0.screen;
        var settings = _v0.settings;
        var logo = _v0.logo;
        var progress = _v0.progress;
        var buttons = _v0.buttons;
        var tabbable = _Utils_cmp(screen1.width, $author$project$Const$globalBreakpoints.md) > -1 || settings.support_menu;
        return A2($elm$html$Html$header, A2($author$project$Lia$Utils$deactivate, !active, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-header"),
            $elm$html$Html$Attributes$id("lia-toolbar-nav")
        ])), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-header__left")
            ]), _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-header__middle")
            ]), _List_fromArray([
                A2($elm$html$Html$img, _List_fromArray([
                    $elm$html$Html$Attributes$src(logo),
                    $elm$html$Html$Attributes$class("lia_header__logo")
                ]), _List_Nil)
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-header__right")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-support-menu"),
                    $elm$html$Html$Attributes$id("lia-support-menu"),
                    $elm$html$Html$Attributes$class(settings.support_menu ? "lia-support-menu--open" : "lia-support-menu--closed")
                ]), _List_fromArray([
                    online ? A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-support-menu__toggler"),
                        A2($elm$html$Html$Attributes$style, "left", "-4rem")
                    ]), _List_fromArray([
                        $author$project$Lia$Settings$View$btnChat({
                            chat: settings.chat,
                            hide: settings.support_menu,
                            lang: lang,
                            tabbable: true
                        }),
                        A2($author$project$Lia$Settings$View$btnSupport, lang, settings.support_menu)
                    ])) : A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-support-menu__toggler")
                    ]), _List_fromArray([
                        A2($author$project$Lia$Settings$View$btnSupport, lang, settings.support_menu)
                    ])),
                    A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-support-menu__collapse")
                    ]), _List_fromArray([
                        A2($elm$html$Html$ul, _List_fromArray([
                            $elm$html$Html$Attributes$class("nav lia-support-menu__nav"),
                            $tesk9$accessible_html$Accessibility$Role$menuBar,
                            $tesk9$accessible_html$Accessibility$Key$tabbable(false)
                        ]), A2($elm$core$List$map, function(_v1) {
                            var fn = _v1.a;
                            var _class = _v1.b;
                            return A2($elm$html$Html$li, _List_fromArray([
                                $elm$html$Html$Attributes$class("nav__item lia-support-menu__item lia-support-menu__item--" + _class),
                                $tesk9$accessible_html$Accessibility$Role$menuItem,
                                $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp
                            ]), A3(fn, lang, tabbable, settings));
                        }, (online ? $elm$core$Basics$identity : A2($elm$core$Basics$composeR, $elm$core$List$tail, $elm$core$Maybe$withDefault(_List_Nil)))(buttons)))
                    ]))
                ]))
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-progress"),
                A2($elm$html$Html$Attributes$style, "width", progress)
            ]), _List_Nil)
        ]));
    };
    var $author$project$Const$icon = "icon.ico";
    var $elm$html$Html$article = _VirtualDom_node("article");
    var $author$project$Lia$Markdown$Inline$Config$init = function(config) {
        return {
            formulas: A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, config.formulas),
            hideVideoComments: config.hideVideoComments,
            image_zoom: true,
            input: {
                active: false,
                on: F3(function(_v0, _v1, _v2) {
                    return "";
                }),
                options: $elm$core$Array$empty,
                partiallyCorrect: $elm$core$Array$empty,
                path: _List_Nil,
                randomize: $elm$core$Maybe$Nothing,
                state: $elm$core$Array$empty
            },
            lang: config.lang,
            light: config.light,
            media: config.media,
            oEmbed: $elm$core$Maybe$Nothing,
            scripts: config.scripts,
            slide: config.slide,
            speaking: config.speaking,
            sync: config.sync,
            theme: config.theme,
            tooltips: config.tooltips,
            translations: config.translations,
            view: $elm$core$Maybe$Nothing,
            visible: _Utils_eq(config.mode, $author$project$Lia$Settings$Types$Textbook) ? $elm$core$Maybe$Nothing : config.visible
        };
    };
    var $author$project$I18n$Translations$baseLang = function(lang) {
        switch(lang.$){
            case "Am":
                return "አማርኛ";
            case "Ar":
                return "العربية";
            case "Bg":
                return "български";
            case "Bn":
                return "ইংরেজি";
            case "De":
                return "Deutsch";
            case "Es":
                return "Espa\xf1ol";
            case "Fa":
                return "فارسی";
            case "Fr":
                return "Fran\xe7ais";
            case "Hi":
                return "जर्मन";
            case "Hy":
                return "հայերեն";
            case "It":
                return "Italiano";
            case "Ja":
                return "日本語";
            case "Ka":
                return "ინგლისური";
            case "Ko":
                return "한국어";
            case "Nl":
                return "Nederlands";
            case "Pa":
                return "ਪੰਜਾਬੀ";
            case "Pt":
                return "Portugu\xeas";
            case "Ru":
                return "русский";
            case "Sw":
                return "Suaheli";
            case "Tw":
                return "中国人";
            case "Uk":
                return "Український";
            case "Ur":
                return "انگریزی";
            case "Zh":
                return "中国人";
            default:
                return "English";
        }
    };
    var $author$project$Lia$Markdown$Inline$View$getLang = function(config) {
        return A2($elm$core$Maybe$withDefault, $author$project$I18n$Translations$baseLang(config.lang), A2($elm$core$Maybe$map, function($) {
            return $._new;
        }, config.translations));
    };
    var $author$project$Lia$Markdown$Inline$View$addTranslation = F2(function(config, url_) {
        return A2($elm$core$String$startsWith, $author$project$Lia$Markdown$Inline$Multimedia$website.youtube, url_) ? _Utils_ap(url_, _Utils_ap(A2($elm$core$String$contains, "?", url_) ? "&hl=" : "?hl=", $author$project$Lia$Markdown$Inline$View$getLang(config))) : url_;
    });
    var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty("alt");
    var $author$project$Lia$Markdown$Inline$View$stringFrom = F2(function(config, el) {
        var _v0 = A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Stringify$stringify_(config), $elm$core$String$trim), el);
        if (_v0.$ === "Just" && _v0.a === "") return $elm$core$Maybe$Nothing;
        else {
            var str = _v0;
            return str;
        }
    });
    var $author$project$Lia$Markdown$Inline$View$alt = function(config) {
        return A2($elm$core$Basics$composeR, $elm$core$Maybe$Just, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$stringFrom(config), $elm$core$Maybe$map($elm$html$Html$Attributes$alt)));
    };
    var $author$project$Lia$Markdown$HTML$Attributes$toAttribute = $elm$core$List$map(function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        return A2($elm$html$Html$Attributes$attribute, key, value);
    });
    var $author$project$Lia$Markdown$HTML$Attributes$annotation = function(cls) {
        return A2($elm$core$Basics$composeR, $elm$core$List$cons(_Utils_Tuple2("class", cls)), $author$project$Lia$Markdown$HTML$Attributes$toAttribute);
    };
    var $elm$html$Html$audio = _VirtualDom_node("audio");
    var $elm$html$Html$Attributes$controls = $elm$html$Html$Attributes$boolProperty("controls");
    var $author$project$Lia$Markdown$Inline$View$onError = F2(function(tag, url) {
        return A2($elm$html$Html$Attributes$attribute, "onerror", "window.LIA.fetchError('" + (tag + ("','" + (url + "')"))));
    });
    var $elm$html$Html$Attributes$preload = $elm$html$Html$Attributes$stringProperty("preload");
    var $elm$html$Html$source = _VirtualDom_node("source");
    var $author$project$Lia$Markdown$Inline$View$audio = F2(function(attr, settings) {
        return A3($elm$html$Html$Keyed$node, "span", _List_Nil, _List_fromArray([
            _Utils_Tuple2(settings.url, A2($elm$html$Html$audio, A2($elm$core$List$cons, $elm$html$Html$Attributes$controls(settings.controls), A2($elm$core$List$cons, $elm$html$Html$Attributes$preload(settings.preload), attr)), _List_fromArray([
                A2($elm$html$Html$source, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, settings.errorHandling, A2($author$project$Lia$Markdown$Inline$View$onError, "audio", settings.url), _List_fromArray([
                    $elm$html$Html$Attributes$src(settings.url)
                ])), _List_Nil)
            ])))
        ]));
    });
    var $author$project$Lia$Utils$stopPropagationOn = F2(function(name, msg) {
        return A2($elm$html$Html$Events$stopPropagationOn, name, $elm$json$Json$Decode$succeed(_Utils_Tuple2(msg, true)));
    });
    var $author$project$Lia$Utils$blockKeydown = $author$project$Lia$Utils$stopPropagationOn("keydown");
    var $tesk9$accessible_html$Accessibility$Role$button = $tesk9$accessible_html$Accessibility$Utils$role("button");
    var $elm$html$Html$Attributes$draggable = _VirtualDom_attribute("draggable");
    var $author$project$Lia$Markdown$Inline$View$dropHere = function(attr) {
        return A2($elm$html$Html$div, A2($elm$core$List$append, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "justify-content", "center"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "line-height", "1"),
            A2($elm$html$Html$Attributes$style, "color", "#888"),
            A2($elm$html$Html$Attributes$style, "min-width", "3rem")
        ]), attr), _List_fromArray([
            $elm$html$Html$text("✛")
        ]));
    };
    var $elm$html$Html$em = _VirtualDom_node("em");
    var $elm$html$Html$figcaption = _VirtualDom_node("figcaption");
    var $elm$html$Html$figure = _VirtualDom_node("figure");
    var $pablohirafuji$elm_qrcode$QRCode$Quartile = {
        $: "Quartile"
    };
    var $pablohirafuji$elm_qrcode$QRCode$QRCode = function(a) {
        return {
            $: "QRCode",
            a: a
        };
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex = F3(function(size, row, col) {
        return size * row + col;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$isOccupy = F4(function(row, col, size, matrix) {
        var _v0 = A2($elm$core$Array$get, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col), matrix);
        if (_v0.$ === "Just" && _v0.a.$ === "Just") return true;
        else return false;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule = function(placement) {
        var row = placement.row;
        var col = placement.col;
        var isRight = placement.isRight;
        var isUp = placement.isUp;
        return isRight ? _Utils_update(placement, {
            col: col - 1,
            isRight: false
        }) : isUp ? _Utils_update(placement, {
            col: col + 1,
            isRight: true,
            row: row - 1
        }) : _Utils_update(placement, {
            col: col + 1,
            isRight: true,
            row: row + 1
        });
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$bitToColor = F2(function(_byte, offset) {
        return (1 & _byte >> 7 - offset) === 1;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setDataModule = F3(function(_v0, _byte, offset) {
        var size = _v0.size;
        var row = _v0.row;
        var col = _v0.col;
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col), $elm$core$Maybe$Just(_Utils_Tuple2(false, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$bitToColor, _byte, offset))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$addDataModule = F4(function(placement, bytes, offset, matrix) {
        addDataModule: while(true){
            var size = placement.size;
            var row = placement.row;
            var col = placement.col;
            if (!bytes.b) return matrix;
            else {
                var head = bytes.a;
                var tail = bytes.b;
                if (offset >= 8) {
                    var $temp$placement = placement, $temp$bytes = tail, $temp$offset = 0, $temp$matrix = matrix;
                    placement = $temp$placement;
                    bytes = $temp$bytes;
                    offset = $temp$offset;
                    matrix = $temp$matrix;
                    continue addDataModule;
                } else {
                    if (col === 6) {
                        var $temp$placement = _Utils_update(placement, {
                            col: col - 1,
                            isRight: true
                        }), $temp$bytes = bytes, $temp$offset = offset, $temp$matrix = matrix;
                        placement = $temp$placement;
                        bytes = $temp$bytes;
                        offset = $temp$offset;
                        matrix = $temp$matrix;
                        continue addDataModule;
                    } else if (row < 0) {
                        var $temp$placement = _Utils_update(placement, {
                            col: col - 2,
                            isRight: true,
                            isUp: false,
                            row: 0
                        }), $temp$bytes = bytes, $temp$offset = offset, $temp$matrix = matrix;
                        placement = $temp$placement;
                        bytes = $temp$bytes;
                        offset = $temp$offset;
                        matrix = $temp$matrix;
                        continue addDataModule;
                    } else {
                        if (_Utils_cmp(row, size) > -1) {
                            var $temp$placement = _Utils_update(placement, {
                                col: col - 2,
                                isRight: true,
                                isUp: true,
                                row: size - 1
                            }), $temp$bytes = bytes, $temp$offset = offset, $temp$matrix = matrix;
                            placement = $temp$placement;
                            bytes = $temp$bytes;
                            offset = $temp$offset;
                            matrix = $temp$matrix;
                            continue addDataModule;
                        } else if (A4($pablohirafuji$elm_qrcode$QRCode$Matrix$isOccupy, row, col, size, matrix)) {
                            var $temp$placement = $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule(placement), $temp$bytes = bytes, $temp$offset = offset, $temp$matrix = matrix;
                            placement = $temp$placement;
                            bytes = $temp$bytes;
                            offset = $temp$offset;
                            matrix = $temp$matrix;
                            continue addDataModule;
                        } else {
                            var $temp$placement = $pablohirafuji$elm_qrcode$QRCode$Matrix$nextModule(placement), $temp$bytes = bytes, $temp$offset = offset + 1, $temp$matrix = A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setDataModule, placement, head, offset, matrix);
                            placement = $temp$placement;
                            bytes = $temp$bytes;
                            offset = $temp$offset;
                            matrix = $temp$matrix;
                            continue addDataModule;
                        }
                    }
                }
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$initPlacement = function(size) {
        return {
            col: size + 1,
            isRight: true,
            isUp: true,
            row: size + 1,
            size: size
        };
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$addData = F3(function(size, bytes, matrix) {
        return A4($pablohirafuji$elm_qrcode$QRCode$Matrix$addDataModule, $pablohirafuji$elm_qrcode$QRCode$Matrix$initPlacement(size), bytes, 0, matrix);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Error$AlignmentPatternNotFound = {
        $: "AlignmentPatternNotFound"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPatternData = $elm$core$Array$fromList(_List_fromArray([
        _List_Nil,
        _List_fromArray([
            6,
            18
        ]),
        _List_fromArray([
            6,
            22
        ]),
        _List_fromArray([
            6,
            26
        ]),
        _List_fromArray([
            6,
            30
        ]),
        _List_fromArray([
            6,
            34
        ]),
        _List_fromArray([
            6,
            22,
            38
        ]),
        _List_fromArray([
            6,
            24,
            42
        ]),
        _List_fromArray([
            6,
            26,
            46
        ]),
        _List_fromArray([
            6,
            28,
            50
        ]),
        _List_fromArray([
            6,
            30,
            54
        ]),
        _List_fromArray([
            6,
            32,
            58
        ]),
        _List_fromArray([
            6,
            34,
            62
        ]),
        _List_fromArray([
            6,
            26,
            46,
            66
        ]),
        _List_fromArray([
            6,
            26,
            48,
            70
        ]),
        _List_fromArray([
            6,
            26,
            50,
            74
        ]),
        _List_fromArray([
            6,
            30,
            54,
            78
        ]),
        _List_fromArray([
            6,
            30,
            56,
            82
        ]),
        _List_fromArray([
            6,
            30,
            58,
            86
        ]),
        _List_fromArray([
            6,
            34,
            62,
            90
        ]),
        _List_fromArray([
            6,
            28,
            50,
            72,
            94
        ]),
        _List_fromArray([
            6,
            26,
            50,
            74,
            98
        ]),
        _List_fromArray([
            6,
            30,
            54,
            78,
            102
        ]),
        _List_fromArray([
            6,
            28,
            54,
            80,
            106
        ]),
        _List_fromArray([
            6,
            32,
            58,
            84,
            110
        ]),
        _List_fromArray([
            6,
            30,
            58,
            86,
            114
        ]),
        _List_fromArray([
            6,
            34,
            62,
            90,
            118
        ]),
        _List_fromArray([
            6,
            26,
            50,
            74,
            98,
            122
        ]),
        _List_fromArray([
            6,
            30,
            54,
            78,
            102,
            126
        ]),
        _List_fromArray([
            6,
            26,
            52,
            78,
            104,
            130
        ]),
        _List_fromArray([
            6,
            30,
            56,
            82,
            108,
            134
        ]),
        _List_fromArray([
            6,
            34,
            60,
            86,
            112,
            138
        ]),
        _List_fromArray([
            6,
            30,
            58,
            86,
            114,
            142
        ]),
        _List_fromArray([
            6,
            34,
            62,
            90,
            118,
            146
        ]),
        _List_fromArray([
            6,
            30,
            54,
            78,
            102,
            126,
            150
        ]),
        _List_fromArray([
            6,
            24,
            50,
            76,
            102,
            128,
            154
        ]),
        _List_fromArray([
            6,
            28,
            54,
            80,
            106,
            132,
            158
        ]),
        _List_fromArray([
            6,
            32,
            58,
            84,
            110,
            136,
            162
        ]),
        _List_fromArray([
            6,
            26,
            54,
            82,
            110,
            138,
            166
        ]),
        _List_fromArray([
            6,
            30,
            58,
            86,
            114,
            142,
            170
        ])
    ]));
    var $elm$core$Result$fromMaybe = F2(function(err, maybe) {
        if (maybe.$ === "Just") {
            var v = maybe.a;
            return $elm$core$Result$Ok(v);
        } else return $elm$core$Result$Err(err);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord = F2(function(rows, cols) {
        return A3($elm$core$List$foldl, F2(function(row, list) {
            return A3($elm$core$List$foldl, F2(function(col, list_) {
                return A2($elm$core$List$cons, _Utils_Tuple2(row, col), list_);
            }), list, cols);
        }), _List_Nil, rows);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$isValidAlign = F2(function(size, _v0) {
        var row = _v0.a;
        var col = _v0.b;
        return (row > 10 || 10 < col && _Utils_cmp(col, size - 10) < 0) && (_Utils_cmp(row, size - 10) < 0 || col > 10);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange = A2($elm$core$List$range, -2, 2);
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentColor = F2(function(row, col) {
        return _Utils_eq(row, -2) || row === 2 || _Utils_eq(col, -2) || col === 2 || !row && !col ? $elm$core$Maybe$Just(_Utils_Tuple2(true, true)) : $elm$core$Maybe$Just(_Utils_Tuple2(true, false));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignModule = F4(function(size, rowPos, colPos, _v0) {
        var row = _v0.a;
        var col = _v0.b;
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row + rowPos, col + colPos), A2($pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentColor, row, col));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignment = F3(function(size, _v0, matrix) {
        var row = _v0.a;
        var col = _v0.b;
        return A3($elm$core$List$foldl, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignModule, size, row, col), matrix, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentRange));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignments = F3(function(size, locations, matrix) {
        return A3($elm$core$List$foldl, $pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignment(size), matrix, A2($elm$core$List$filter, $pablohirafuji$elm_qrcode$QRCode$Matrix$isValidAlign(size), A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, locations, locations)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPattern = F3(function(version, size, matrix) {
        return A2($elm$core$Result$map, function(a) {
            return A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setAlignments, size, a, matrix);
        }, A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$AlignmentPatternNotFound, A2($elm$core$Array$get, version - 1, $pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPatternData)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$darkModule = F2(function(version, size) {
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, 4 * version + 9, 8), $elm$core$Maybe$Just(_Utils_Tuple2(true, true)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange = A2($elm$core$List$range, 0, 8);
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderColor = F2(function(row, col) {
        return 1 <= row && row <= 7 && (col === 1 || col === 7) || 1 <= col && col <= 7 && (row === 1 || row === 7) || 3 <= row && row <= 5 && 3 <= col && col <= 5;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFinder = F5(function(size, rowOffset, colOffset, _v0, matrix) {
        var row = _v0.a;
        var col = _v0.b;
        var finalRow = row + rowOffset;
        var finalCol = col + colOffset;
        return finalRow < 0 || finalCol < 0 || _Utils_cmp(finalRow, size) > -1 || _Utils_cmp(finalCol, size) > -1 ? matrix : A3($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, finalRow, finalCol), $elm$core$Maybe$Just(_Utils_Tuple2(true, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$finderColor, row, col))), matrix);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern = F4(function(size, rowOffset, colOffset, matrix) {
        return A3($elm$core$List$foldl, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setFinder, size, rowOffset, colOffset), matrix, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getAreaCoord, $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange, $pablohirafuji$elm_qrcode$QRCode$Matrix$finderRange));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskColor = F2(function(maybeModule, isChange) {
        if (isChange) {
            if (maybeModule.$ === "Just" && !maybeModule.a.a) {
                var _v1 = maybeModule.a;
                var isDark = _v1.b;
                return $elm$core$Maybe$Just(_Utils_Tuple2(false, !isDark));
            } else return maybeModule;
        } else return maybeModule;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getCoord = F2(function(size, index) {
        return _Utils_Tuple2(index / size | 0, A2($elm$core$Basics$modBy, size, index));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskFunction = F4(function(_function, size, index, maybeModule) {
        return A2($pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskColor, maybeModule, _function(A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getCoord, size, index)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$maskFunction = function(mask) {
        switch(mask.$){
            case "Pattern0":
                return function(_v1) {
                    var row = _v1.a;
                    var col = _v1.b;
                    return !A2($elm$core$Basics$modBy, 2, row + col);
                };
            case "Pattern1":
                return function(_v2) {
                    var row = _v2.a;
                    return !A2($elm$core$Basics$modBy, 2, row);
                };
            case "Pattern2":
                return function(_v3) {
                    var col = _v3.b;
                    return !A2($elm$core$Basics$modBy, 3, col);
                };
            case "Pattern3":
                return function(_v4) {
                    var row = _v4.a;
                    var col = _v4.b;
                    return !A2($elm$core$Basics$modBy, 3, row + col);
                };
            case "Pattern4":
                return function(_v5) {
                    var row = _v5.a;
                    var col = _v5.b;
                    return !A2($elm$core$Basics$modBy, 2, $elm$core$Basics$floor(row / 2) + $elm$core$Basics$floor(col / 3));
                };
            case "Pattern5":
                return function(_v6) {
                    var row = _v6.a;
                    var col = _v6.b;
                    return !(A2($elm$core$Basics$modBy, 2, row * col) + A2($elm$core$Basics$modBy, 3, row * col));
                };
            case "Pattern6":
                return function(_v7) {
                    var row = _v7.a;
                    var col = _v7.b;
                    return !A2($elm$core$Basics$modBy, 2, A2($elm$core$Basics$modBy, 2, row * col) + A2($elm$core$Basics$modBy, 3, row * col));
                };
            default:
                return function(_v8) {
                    var row = _v8.a;
                    var col = _v8.b;
                    return !A2($elm$core$Basics$modBy, 2, A2($elm$core$Basics$modBy, 3, row * col) + A2($elm$core$Basics$modBy, 2, row + col));
                };
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$applyMask = F3(function(size, mask, matrix) {
        return A2($elm$core$Array$indexedMap, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$applyMaskFunction, $pablohirafuji$elm_qrcode$QRCode$Matrix$maskFunction(mask), size), matrix);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$breakList = F3(function(width, list, acc) {
        breakList: while(true){
            if (!list.b) return $elm$core$List$reverse(acc);
            else {
                var $temp$width = width, $temp$list = A2($elm$core$List$drop, width, list), $temp$acc = A2($elm$core$List$cons, A2($elm$core$List$take, width, list), acc);
                width = $temp$width;
                list = $temp$list;
                acc = $temp$acc;
                continue breakList;
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$isDarkModule = A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$core$Tuple$second), $elm$core$Maybe$withDefault(false));
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score_ = F2(function(simplifiedList, _v0) {
        rule1Score_: while(true){
            var last = _v0.a;
            var partialScore = _v0.b;
            var score = _v0.c;
            if (!simplifiedList.b) return partialScore >= 5 ? score + partialScore - 2 : score;
            else {
                var head = simplifiedList.a;
                var tail = simplifiedList.b;
                if (_Utils_eq(last, head)) {
                    var $temp$simplifiedList = tail, $temp$_v0 = _Utils_Tuple3(last, partialScore + 1, score);
                    simplifiedList = $temp$simplifiedList;
                    _v0 = $temp$_v0;
                    continue rule1Score_;
                } else if (partialScore >= 5) {
                    var $temp$simplifiedList = tail, $temp$_v0 = _Utils_Tuple3(head, 0, score + partialScore - 2);
                    simplifiedList = $temp$simplifiedList;
                    _v0 = $temp$_v0;
                    continue rule1Score_;
                } else {
                    var $temp$simplifiedList = tail, $temp$_v0 = _Utils_Tuple3(head, 0, score);
                    simplifiedList = $temp$simplifiedList;
                    _v0 = $temp$_v0;
                    continue rule1Score_;
                }
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score = A2($elm$core$Basics$composeR, $elm$core$List$map(function(a) {
        return A2($pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score_, a, _Utils_Tuple3(false, 0, 0));
    }), $elm$core$List$sum);
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score_ = F4(function(row1, row2, maybeLast, score) {
        rule2Score_: while(true){
            if (!row1.b) return score;
            else {
                var head = row1.a;
                var tail = row1.b;
                if (!row2.b) return score;
                else {
                    var head2 = row2.a;
                    var tail2 = row2.b;
                    if (_Utils_eq(head, head2)) {
                        if (_Utils_eq($elm$core$Maybe$Just(head), maybeLast)) {
                            var $temp$row1 = tail, $temp$row2 = tail2, $temp$maybeLast = $elm$core$Maybe$Just(head), $temp$score = score + 3;
                            row1 = $temp$row1;
                            row2 = $temp$row2;
                            maybeLast = $temp$maybeLast;
                            score = $temp$score;
                            continue rule2Score_;
                        } else {
                            var $temp$row1 = tail, $temp$row2 = tail2, $temp$maybeLast = $elm$core$Maybe$Just(head), $temp$score = score;
                            row1 = $temp$row1;
                            row2 = $temp$row2;
                            maybeLast = $temp$maybeLast;
                            score = $temp$score;
                            continue rule2Score_;
                        }
                    } else {
                        var $temp$row1 = tail, $temp$row2 = tail2, $temp$maybeLast = $elm$core$Maybe$Nothing, $temp$score = score;
                        row1 = $temp$row1;
                        row2 = $temp$row2;
                        maybeLast = $temp$maybeLast;
                        score = $temp$score;
                        continue rule2Score_;
                    }
                }
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score = F2(function(list, score) {
        rule2Score: while(true){
            if (list.b && list.b.b) {
                var head1 = list.a;
                var _v1 = list.b;
                var head2 = _v1.a;
                var tail = _v1.b;
                var $temp$list = tail, $temp$score = score + A4($pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score_, head1, head2, $elm$core$Maybe$Nothing, 0);
                list = $temp$list;
                score = $temp$score;
                continue rule2Score;
            } else return score;
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score_ = F2(function(simplifiedList, score) {
        rule3Score_: while(true){
            _v0$3: while(true){
                if (!simplifiedList.b) return score;
                else if (!simplifiedList.a) {
                    if (simplifiedList.b.b && !simplifiedList.b.a && simplifiedList.b.b.b && !simplifiedList.b.b.a && simplifiedList.b.b.b.b && !simplifiedList.b.b.b.a && simplifiedList.b.b.b.b.b && simplifiedList.b.b.b.b.a && simplifiedList.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b && simplifiedList.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b && simplifiedList.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b && simplifiedList.b.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b.b.b && simplifiedList.b.b.b.b.b.b.b.b.b.b.a) {
                        var _v1 = simplifiedList.b;
                        var _v2 = _v1.b;
                        var _v3 = _v2.b;
                        var _v4 = _v3.b;
                        var _v5 = _v4.b;
                        var _v6 = _v5.b;
                        var _v7 = _v6.b;
                        var _v8 = _v7.b;
                        var _v9 = _v8.b;
                        var _v10 = _v9.b;
                        var tail = _v10.b;
                        var $temp$simplifiedList = tail, $temp$score = score + 40;
                        simplifiedList = $temp$simplifiedList;
                        score = $temp$score;
                        continue rule3Score_;
                    } else break _v0$3;
                } else {
                    if (simplifiedList.b.b && !simplifiedList.b.a && simplifiedList.b.b.b && simplifiedList.b.b.a && simplifiedList.b.b.b.b && simplifiedList.b.b.b.a && simplifiedList.b.b.b.b.b && simplifiedList.b.b.b.b.a && simplifiedList.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b && simplifiedList.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.b.b.b.b.a && simplifiedList.b.b.b.b.b.b.b.b.b.b.b && !simplifiedList.b.b.b.b.b.b.b.b.b.b.a) {
                        var _v11 = simplifiedList.b;
                        var _v12 = _v11.b;
                        var _v13 = _v12.b;
                        var _v14 = _v13.b;
                        var _v15 = _v14.b;
                        var _v16 = _v15.b;
                        var _v17 = _v16.b;
                        var _v18 = _v17.b;
                        var _v19 = _v18.b;
                        var _v20 = _v19.b;
                        var tail = _v20.b;
                        var $temp$simplifiedList = tail, $temp$score = score + 40;
                        simplifiedList = $temp$simplifiedList;
                        score = $temp$score;
                        continue rule3Score_;
                    } else break _v0$3;
                }
            }
            var head = simplifiedList.a;
            var tail = simplifiedList.b;
            var $temp$simplifiedList = tail, $temp$score = score;
            simplifiedList = $temp$simplifiedList;
            score = $temp$score;
            continue rule3Score_;
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score = A2($elm$core$List$foldl, $pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score_, 0);
    var $elm$core$Basics$round = _Basics_round;
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$rule4Score = F2(function(size, simplifiedList) {
        var moduleCount = size * size;
        var darkCount = $elm$core$List$length(A2($elm$core$List$filter, $elm$core$Basics$identity, simplifiedList));
        var darkPerc = $elm$core$Basics$round(100 * darkCount / moduleCount);
        var remOf5 = darkPerc % 5;
        var nextMult5 = $elm$core$Basics$round($elm$core$Basics$abs(darkPerc + (5 - remOf5) - 50) / 5);
        var prevMult5 = $elm$core$Basics$round($elm$core$Basics$abs(darkPerc - remOf5 - 50) / 5);
        return A2($elm$core$Basics$min, prevMult5, nextMult5) * 10;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose = function(ll) {
        transpose: while(true){
            if (!ll.b) return _List_Nil;
            else if (!ll.a.b) {
                var xss = ll.b;
                var $temp$ll = xss;
                ll = $temp$ll;
                continue transpose;
            } else {
                var _v1 = ll.a;
                var x = _v1.a;
                var xs = _v1.b;
                var xss = ll.b;
                var tails = A2($elm$core$List$filterMap, $elm$core$List$tail, xss);
                var heads = A2($elm$core$List$filterMap, $elm$core$List$head, xss);
                return A2($elm$core$List$cons, A2($elm$core$List$cons, x, heads), $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(A2($elm$core$List$cons, xs, tails)));
            }
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getMaskScore = F2(function(size, matrix) {
        var list = A2($elm$core$List$map, $pablohirafuji$elm_qrcode$QRCode$Matrix$isDarkModule, $elm$core$Array$toList(matrix));
        var rowList = A3($pablohirafuji$elm_qrcode$QRCode$Matrix$breakList, size, list, _List_Nil);
        var transposedRowList = $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(rowList);
        return function(b) {
            return _Utils_Tuple2(rowList, b);
        }(A2($pablohirafuji$elm_qrcode$QRCode$Matrix$rule4Score, size, list) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score(transposedRowList) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule3Score(rowList) + (A2($pablohirafuji$elm_qrcode$QRCode$Matrix$rule2Score, rowList, 0) + ($pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score(transposedRowList) + $pablohirafuji$elm_qrcode$QRCode$Matrix$rule1Score(rowList))))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$ecLevelToInt = function(ecLevel) {
        switch(ecLevel.$){
            case "L":
                return 1;
            case "M":
                return 0;
            case "Q":
                return 3;
            default:
                return 2;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit = function(_int) {
        var helper = F2(function(digit, int_) {
            helper: while(true){
                if (!!int_) {
                    var $temp$digit = digit + 1, $temp$int_ = int_ >>> 1;
                    digit = $temp$digit;
                    int_ = $temp$int_;
                    continue helper;
                } else return digit;
            }
        });
        return A2(helper, 0, _int);
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$maskToInt = function(mask) {
        switch(mask.$){
            case "Pattern0":
                return 0;
            case "Pattern1":
                return 1;
            case "Pattern2":
                return 2;
            case "Pattern3":
                return 3;
            case "Pattern4":
                return 4;
            case "Pattern5":
                return 5;
            case "Pattern6":
                return 6;
            default:
                return 7;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeFormatInfo = F2(function(ecLevel, mask) {
        var g15Mask = 21522;
        var g15Int = 1335;
        var g15Digit = $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(g15Int);
        var formatInfoInt = $pablohirafuji$elm_qrcode$QRCode$Matrix$maskToInt(mask) | $pablohirafuji$elm_qrcode$QRCode$Matrix$ecLevelToInt(ecLevel) << 3;
        var helper = function(d_) {
            helper: while(true){
                if ($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g15Digit >= 0) {
                    var $temp$d_ = d_ ^ g15Int << $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g15Digit;
                    d_ = $temp$d_;
                    continue helper;
                } else return g15Mask ^ (d_ | formatInfoInt << 10);
            }
        };
        var d = formatInfoInt << 10;
        return helper(d);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoHorizontal = F2(function(size, count) {
        return count < 8 ? _Utils_Tuple2(8, size - count - 1) : count < 9 ? _Utils_Tuple2(8, 15 - count) : _Utils_Tuple2(8, 15 - count - 1);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoVertical = F2(function(size, count) {
        return count < 6 ? _Utils_Tuple2(count, 8) : count < 8 ? _Utils_Tuple2(count + 1, 8) : _Utils_Tuple2(size - 15 + count, 8);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule = F4(function(size, isBlack, row, col) {
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col), $elm$core$Maybe$Just(_Utils_Tuple2(true, isBlack)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_ = F4(function(size, isBlackFn, count, matrix) {
        setFormatInfo_: while(true){
            if (count < 15) {
                var isBlack = isBlackFn(count);
                var _v0 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoVertical, size, count);
                var x2 = _v0.a;
                var y2 = _v0.b;
                var _v1 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$formatInfoHorizontal, size, count);
                var x1 = _v1.a;
                var y1 = _v1.b;
                var $temp$size = size, $temp$isBlackFn = isBlackFn, $temp$count = count + 1, $temp$matrix = A5($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule, size, isBlack, x2, y2, A5($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatModule, size, isBlack, x1, y1, matrix));
                size = $temp$size;
                isBlackFn = $temp$isBlackFn;
                count = $temp$count;
                matrix = $temp$matrix;
                continue setFormatInfo_;
            } else return matrix;
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo = F4(function(ecLevel, size, mask, matrix) {
        var isBlack = F2(function(bits_, count) {
            return (1 & bits_ >> count) === 1;
        });
        var bits = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$encodeFormatInfo, ecLevel, mask);
        return A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_, size, isBlack(bits), 0, matrix);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask_ = F5(function(ecLevel, size, matrix, mask, _v0) {
        var minSMatrix = _v0.a;
        var minScore = _v0.b;
        var maskedMatrix = A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo, ecLevel, size, mask, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$applyMask, size, mask, matrix));
        var _v1 = A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getMaskScore, size, maskedMatrix);
        var maskSMatrix = _v1.a;
        var maskScore = _v1.b;
        return _Utils_cmp(minScore, maskScore) < 0 && !_Utils_eq(minScore, -1) ? _Utils_Tuple2(minSMatrix, minScore) : _Utils_Tuple2(maskSMatrix, maskScore);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern0 = {
        $: "Pattern0"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern1 = {
        $: "Pattern1"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern2 = {
        $: "Pattern2"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern3 = {
        $: "Pattern3"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern4 = {
        $: "Pattern4"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern5 = {
        $: "Pattern5"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern6 = {
        $: "Pattern6"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern7 = {
        $: "Pattern7"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$patternList = _List_fromArray([
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern0,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern1,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern2,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern3,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern4,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern5,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern6,
        $pablohirafuji$elm_qrcode$QRCode$Matrix$Pattern7
    ]);
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask = F3(function(ecLevel, size, matrix) {
        return A3($elm$core$List$foldl, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask_, ecLevel, size, matrix), _Utils_Tuple2(_List_Nil, -1), $pablohirafuji$elm_qrcode$QRCode$Matrix$patternList).a;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$reserveFormatInfo = F2(function(size, matrix) {
        return A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setFormatInfo_, size, $elm$core$Basics$always(true), 0, matrix);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeVersionInfo = function(version) {
        var g18Int = 7973;
        var g18Digit = $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(g18Int);
        var helper = function(d_) {
            helper: while(true){
                if ($pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g18Digit >= 0) {
                    var $temp$d_ = d_ ^ g18Int << $pablohirafuji$elm_qrcode$QRCode$Matrix$getBCHDigit(d_) - g18Digit;
                    d_ = $temp$d_;
                    continue helper;
                } else return d_ | version << 12;
            }
        };
        var d = version << 12;
        return helper(d);
    };
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule = F3(function(size, isBlack, _v0) {
        var row = _v0.a;
        var col = _v0.b;
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col), $elm$core$Maybe$Just(_Utils_Tuple2(true, isBlack)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo_ = F4(function(size, isBlackFn, count, matrix) {
        setVersionInfo_: while(true){
            if (count < 18) {
                var topRight = _Utils_Tuple2($elm$core$Basics$floor(count / 3), A2($elm$core$Basics$modBy, 3, count) + size - 8 - 3);
                var isBlack = isBlackFn(count);
                var bottomLeft = _Utils_Tuple2(A2($elm$core$Basics$modBy, 3, count) + size - 8 - 3, $elm$core$Basics$floor(count / 3));
                var $temp$size = size, $temp$isBlackFn = isBlackFn, $temp$count = count + 1, $temp$matrix = A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule, size, isBlack, bottomLeft, A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionModule, size, isBlack, topRight, matrix));
                size = $temp$size;
                isBlackFn = $temp$isBlackFn;
                count = $temp$count;
                matrix = $temp$matrix;
                continue setVersionInfo_;
            } else return matrix;
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo = F3(function(version, size, matrix) {
        if (version >= 7) {
            var isBlack = F2(function(bits_, count) {
                return (1 & bits_ >> count) === 1;
            });
            var bits = $pablohirafuji$elm_qrcode$QRCode$Matrix$encodeVersionInfo(version);
            return A4($pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo_, size, isBlack(bits), 0, matrix);
        } else return matrix;
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$timingColor = F2(function(row, col) {
        return !A2($elm$core$Basics$modBy, 2, row + col) ? $elm$core$Maybe$Just(_Utils_Tuple2(true, true)) : $elm$core$Maybe$Just(_Utils_Tuple2(true, false));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming = F3(function(size, row, col) {
        return A2($elm$core$Array$set, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$getIndex, size, row, col), A2($pablohirafuji$elm_qrcode$QRCode$Matrix$timingColor, row, col));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$timingPattern = F2(function(size, matrix) {
        var range = A2($elm$core$List$range, 8, size - 9);
        return A3($elm$core$List$foldl, function(b) {
            return A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming, size, b, 6);
        }, A3($elm$core$List$foldl, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$setTiming, size, 6), matrix, range), range);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Matrix$apply = function(_v0) {
        var ecLevel = _v0.a.ecLevel;
        var groupInfo = _v0.a.groupInfo;
        var bytes = _v0.b;
        var version = groupInfo.version;
        var size = (version - 1) * 4 + 21;
        return A2($elm$core$Result$map, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$getBestMask, ecLevel, size), A2($elm$core$Result$map, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$addData, size, bytes), A3($pablohirafuji$elm_qrcode$QRCode$Matrix$alignmentPattern, version, size, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$timingPattern, size, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$darkModule, version, size, A3($pablohirafuji$elm_qrcode$QRCode$Matrix$setVersionInfo, version, size, A2($pablohirafuji$elm_qrcode$QRCode$Matrix$reserveFormatInfo, size, A4($pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern, size, -1, size - 8, A4($pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern, size, size - 8, -1, A4($pablohirafuji$elm_qrcode$QRCode$Matrix$finderPattern, size, -1, -1, A2($elm$core$Array$initialize, size * size, $elm$core$Basics$always($elm$core$Maybe$Nothing))))))))))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$ECLevel$H = {
        $: "H"
    };
    var $pablohirafuji$elm_qrcode$QRCode$ECLevel$L = {
        $: "L"
    };
    var $pablohirafuji$elm_qrcode$QRCode$ECLevel$M = {
        $: "M"
    };
    var $pablohirafuji$elm_qrcode$QRCode$ECLevel$Q = {
        $: "Q"
    };
    var $pablohirafuji$elm_qrcode$QRCode$convertEC = function(ec) {
        switch(ec.$){
            case "Low":
                return $pablohirafuji$elm_qrcode$QRCode$ECLevel$L;
            case "Medium":
                return $pablohirafuji$elm_qrcode$QRCode$ECLevel$M;
            case "Quartile":
                return $pablohirafuji$elm_qrcode$QRCode$ECLevel$Q;
            default:
                return $pablohirafuji$elm_qrcode$QRCode$ECLevel$H;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$AlignmentPatternNotFound = {
        $: "AlignmentPatternNotFound"
    };
    var $pablohirafuji$elm_qrcode$QRCode$InputLengthOverflow = {
        $: "InputLengthOverflow"
    };
    var $pablohirafuji$elm_qrcode$QRCode$InvalidAlphanumericChar = {
        $: "InvalidAlphanumericChar"
    };
    var $pablohirafuji$elm_qrcode$QRCode$InvalidNumericChar = {
        $: "InvalidNumericChar"
    };
    var $pablohirafuji$elm_qrcode$QRCode$InvalidUTF8Char = {
        $: "InvalidUTF8Char"
    };
    var $pablohirafuji$elm_qrcode$QRCode$LogTableException = function(a) {
        return {
            $: "LogTableException",
            a: a
        };
    };
    var $pablohirafuji$elm_qrcode$QRCode$PolynomialModException = {
        $: "PolynomialModException"
    };
    var $pablohirafuji$elm_qrcode$QRCode$PolynomialMultiplyException = {
        $: "PolynomialMultiplyException"
    };
    var $pablohirafuji$elm_qrcode$QRCode$convertError = function(e) {
        switch(e.$){
            case "AlignmentPatternNotFound":
                return $pablohirafuji$elm_qrcode$QRCode$AlignmentPatternNotFound;
            case "InvalidNumericChar":
                return $pablohirafuji$elm_qrcode$QRCode$InvalidNumericChar;
            case "InvalidAlphanumericChar":
                return $pablohirafuji$elm_qrcode$QRCode$InvalidAlphanumericChar;
            case "InvalidUTF8Char":
                return $pablohirafuji$elm_qrcode$QRCode$InvalidUTF8Char;
            case "LogTableException":
                var n = e.a;
                return $pablohirafuji$elm_qrcode$QRCode$LogTableException(n);
            case "PolynomialMultiplyException":
                return $pablohirafuji$elm_qrcode$QRCode$PolynomialMultiplyException;
            case "PolynomialModException":
                return $pablohirafuji$elm_qrcode$QRCode$PolynomialModException;
            default:
                return $pablohirafuji$elm_qrcode$QRCode$InputLengthOverflow;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte = 236;
    var $pablohirafuji$elm_qrcode$QRCode$Encode$secondFillerByte = 17;
    var $pablohirafuji$elm_qrcode$QRCode$Encode$addFiller = F2(function(capacity, bytes) {
        var fillerLength = (capacity / 8 | 0) - $elm$core$List$length(bytes);
        var ns = $elm$core$List$concat(A2($elm$core$List$repeat, fillerLength / 2 | 0, _List_fromArray([
            $pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte,
            $pablohirafuji$elm_qrcode$QRCode$Encode$secondFillerByte
        ])));
        return !A2($elm$core$Basics$modBy, 2, fillerLength) ? _Utils_ap(bytes, ns) : _Utils_ap(bytes, _Utils_ap(ns, _List_fromArray([
            $pablohirafuji$elm_qrcode$QRCode$Encode$firstFillerByte
        ])));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$addTerminator = F3(function(capacity, bitsCount, bits) {
        return _Utils_ap(bits, _List_fromArray([
            _Utils_Tuple2(0, A2($elm$core$Basics$min, 4, capacity - bitsCount))
        ]));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes3 = function(_v0) {
        bitsToBytes3: while(true){
            var _v1 = _v0.a;
            var bits = _v1.a;
            var length = _v1.b;
            var bytes = _v0.b;
            if (length >= 8) {
                var remLength = length - 8;
                var remBits = bits & (1 << remLength) - 1;
                var _byte = bits >> remLength;
                var $temp$_v0 = _Utils_Tuple2(_Utils_Tuple2(remBits, remLength), A2($elm$core$List$cons, _byte, bytes));
                _v0 = $temp$_v0;
                continue bitsToBytes3;
            } else return _Utils_Tuple2(_Utils_Tuple2(bits, length), bytes);
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes2 = F2(function(_v0, _v1) {
        var curBits = _v0.a;
        var curLength = _v0.b;
        var _v2 = _v1.a;
        var remBits = _v2.a;
        var remLength = _v2.b;
        var bytes = _v1.b;
        var lengthSum = curLength + remLength;
        var bitsSum = curBits | remBits << curLength;
        return $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes3(_Utils_Tuple2(_Utils_Tuple2(bitsSum, lengthSum), bytes));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes1 = F2(function(bits, _v0) {
        bitsToBytes1: while(true){
            var _v1 = _v0.a;
            var remBits = _v1.a;
            var remLength = _v1.b;
            var bytes = _v0.b;
            if (bits.b) {
                var head = bits.a;
                var tail = bits.b;
                var $temp$bits = tail, $temp$_v0 = A2($pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes2, head, _Utils_Tuple2(_Utils_Tuple2(remBits, remLength), bytes));
                bits = $temp$bits;
                _v0 = $temp$_v0;
                continue bitsToBytes1;
            } else return !remLength ? $elm$core$List$reverse(bytes) : $elm$core$List$reverse(A2($elm$core$List$cons, remBits << 8 - remLength, bytes));
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes = function(bits) {
        return A2($pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes1, bits, _Utils_Tuple2(_Utils_Tuple2(0, 0), _List_Nil));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8 = {
        $: "UTF8"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength = F2(function(mode, version) {
        if (version <= 9) switch(mode.$){
            case "Numeric":
                return 10;
            case "Alphanumeric":
                return 9;
            case "Byte":
                return 8;
            default:
                return 8;
        }
        else if (version <= 26) switch(mode.$){
            case "Numeric":
                return 12;
            case "Alphanumeric":
                return 11;
            case "Byte":
                return 16;
            default:
                return 16;
        }
        else switch(mode.$){
            case "Numeric":
                return 14;
            case "Alphanumeric":
                return 13;
            case "Byte":
                return 16;
            default:
                return 16;
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicator = F2(function(_v0, bits) {
        var groupInfo = _v0.groupInfo;
        var inputStr = _v0.inputStr;
        var mode = _v0.mode;
        var length = A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, groupInfo.version);
        var charCount = _Utils_eq(mode, $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8) ? $elm$core$List$length(bits) : $elm$core$String$length(inputStr);
        return _Utils_Tuple2(charCount, length);
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$modeIndicator = function(mode) {
        switch(mode.$){
            case "Numeric":
                return 1;
            case "Alphanumeric":
                return 2;
            case "Byte":
                return 4;
            default:
                return 4;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$addInfoAndFinalBits = function(_v0) {
        var bits = _v0.a;
        var model = _v0.b;
        return _Utils_Tuple2(model, A2($pablohirafuji$elm_qrcode$QRCode$Encode$addFiller, model.groupInfo.capacity, $pablohirafuji$elm_qrcode$QRCode$Encode$bitsToBytes(A3($pablohirafuji$elm_qrcode$QRCode$Encode$addTerminator, model.groupInfo.capacity, model.bitsCount, A2($elm$core$List$cons, _Utils_Tuple2($pablohirafuji$elm_qrcode$QRCode$Encode$modeIndicator(model.mode), 4), A2($elm$core$List$cons, A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicator, model, bits), bits))))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$concatTranspose = function(_v0) {
        var model = _v0.a;
        var dataBlocks = _v0.b;
        var ecBlocks = _v0.c;
        return _Utils_Tuple2(model, $elm$core$List$concat(_Utils_ap($pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(dataBlocks), $pablohirafuji$elm_qrcode$QRCode$Helpers$transpose(ecBlocks))));
    };
    var $elm_community$list_extra$List$Extra$greedyGroupsOfWithStep = F3(function(size, step, list) {
        if (size <= 0 || step <= 0) return _List_Nil;
        else {
            var go = F2(function(xs, acc) {
                go: while(true){
                    if ($elm$core$List$isEmpty(xs)) return $elm$core$List$reverse(acc);
                    else {
                        var $temp$xs = A2($elm$core$List$drop, step, xs), $temp$acc = A2($elm$core$List$cons, A2($elm$core$List$take, size, xs), acc);
                        xs = $temp$xs;
                        acc = $temp$acc;
                        continue go;
                    }
                }
            });
            return A2(go, list, _List_Nil);
        }
    });
    var $elm_community$list_extra$List$Extra$greedyGroupsOf = F2(function(size, xs) {
        return A3($elm_community$list_extra$List$Extra$greedyGroupsOfWithStep, size, size, xs);
    });
    var $elm$core$Result$map2 = F3(function(func, ra, rb) {
        if (ra.$ === "Err") {
            var x = ra.a;
            return $elm$core$Result$Err(x);
        } else {
            var a = ra.a;
            if (rb.$ === "Err") {
                var x = rb.a;
                return $elm$core$Result$Err(x);
            } else {
                var b = rb.a;
                return $elm$core$Result$Ok(A2(func, a, b));
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar = {
        $: "InvalidAlphanumericChar"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$alphanumericCodes = $elm$core$Dict$fromList(_List_fromArray([
        _Utils_Tuple2(_Utils_chr("0"), 0),
        _Utils_Tuple2(_Utils_chr("1"), 1),
        _Utils_Tuple2(_Utils_chr("2"), 2),
        _Utils_Tuple2(_Utils_chr("3"), 3),
        _Utils_Tuple2(_Utils_chr("4"), 4),
        _Utils_Tuple2(_Utils_chr("5"), 5),
        _Utils_Tuple2(_Utils_chr("6"), 6),
        _Utils_Tuple2(_Utils_chr("7"), 7),
        _Utils_Tuple2(_Utils_chr("8"), 8),
        _Utils_Tuple2(_Utils_chr("9"), 9),
        _Utils_Tuple2(_Utils_chr("A"), 10),
        _Utils_Tuple2(_Utils_chr("B"), 11),
        _Utils_Tuple2(_Utils_chr("C"), 12),
        _Utils_Tuple2(_Utils_chr("D"), 13),
        _Utils_Tuple2(_Utils_chr("E"), 14),
        _Utils_Tuple2(_Utils_chr("F"), 15),
        _Utils_Tuple2(_Utils_chr("G"), 16),
        _Utils_Tuple2(_Utils_chr("H"), 17),
        _Utils_Tuple2(_Utils_chr("I"), 18),
        _Utils_Tuple2(_Utils_chr("J"), 19),
        _Utils_Tuple2(_Utils_chr("K"), 20),
        _Utils_Tuple2(_Utils_chr("L"), 21),
        _Utils_Tuple2(_Utils_chr("M"), 22),
        _Utils_Tuple2(_Utils_chr("N"), 23),
        _Utils_Tuple2(_Utils_chr("O"), 24),
        _Utils_Tuple2(_Utils_chr("P"), 25),
        _Utils_Tuple2(_Utils_chr("Q"), 26),
        _Utils_Tuple2(_Utils_chr("R"), 27),
        _Utils_Tuple2(_Utils_chr("S"), 28),
        _Utils_Tuple2(_Utils_chr("T"), 29),
        _Utils_Tuple2(_Utils_chr("U"), 30),
        _Utils_Tuple2(_Utils_chr("V"), 31),
        _Utils_Tuple2(_Utils_chr("W"), 32),
        _Utils_Tuple2(_Utils_chr("X"), 33),
        _Utils_Tuple2(_Utils_chr("Y"), 34),
        _Utils_Tuple2(_Utils_chr("Z"), 35),
        _Utils_Tuple2(_Utils_chr(" "), 36),
        _Utils_Tuple2(_Utils_chr("$"), 37),
        _Utils_Tuple2(_Utils_chr("%"), 38),
        _Utils_Tuple2(_Utils_chr("*"), 39),
        _Utils_Tuple2(_Utils_chr("+"), 40),
        _Utils_Tuple2(_Utils_chr("-"), 41),
        _Utils_Tuple2(_Utils_chr("."), 42),
        _Utils_Tuple2(_Utils_chr("/"), 43),
        _Utils_Tuple2(_Utils_chr(":"), 44)
    ]));
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode = function(_char) {
        return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar, A2($elm$core$Dict$get, _char, $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$alphanumericCodes));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toBinary = function(chars) {
        _v0$2: while(true){
            if (chars.b) {
                if (chars.b.b) {
                    if (!chars.b.b.b) {
                        var firstChar = chars.a;
                        var _v1 = chars.b;
                        var secondChar = _v1.a;
                        return A3($elm$core$Result$map2, F2(function(firstCode, secondCode) {
                            return _Utils_Tuple2(firstCode * 45 + secondCode, 11);
                        }), $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(firstChar), $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(secondChar));
                    } else break _v0$2;
                } else {
                    var _char = chars.a;
                    return A2($elm$core$Result$map, function(a) {
                        return _Utils_Tuple2(a, 6);
                    }, $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toAlphanumericCode(_char));
                }
            } else break _v0$2;
        }
        return $elm$core$Result$Err($pablohirafuji$elm_qrcode$QRCode$Error$InvalidAlphanumericChar);
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$encode = function(str) {
        return A3($elm$core$List$foldr, $elm$core$Result$map2($elm$core$List$cons), $elm$core$Result$Ok(_List_Nil), A2($elm$core$List$map, $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$toBinary, A2($elm_community$list_extra$List$Extra$greedyGroupsOf, 2, $elm$core$String$toList(str))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$encode = function(str) {
        return $elm$core$Result$Ok(A2($elm$core$List$map, function(a) {
            return _Utils_Tuple2($elm$core$Char$toCode(a), 8);
        }, $elm$core$String$toList(str)));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidNumericChar = {
        $: "InvalidNumericChar"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$numericLength = function(str) {
        var _v0 = $elm$core$String$length(str);
        switch(_v0){
            case 1:
                return 4;
            case 2:
                return 7;
            default:
                return 10;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encodeHelp = function(chars) {
        var str = $elm$core$String$fromList(chars);
        return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$InvalidNumericChar, A2($elm$core$Maybe$map, function(a) {
            return _Utils_Tuple2(a, $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$numericLength(str));
        }, $elm$core$String$toInt(str)));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encode = function(str) {
        return A3($elm$core$List$foldr, $elm$core$Result$map2($elm$core$List$cons), $elm$core$Result$Ok(_List_Nil), A2($elm$core$List$map, $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encodeHelp, A2($elm_community$list_extra$List$Extra$greedyGroupsOf, 3, $elm$core$String$toList(str))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Error$InvalidUTF8Char = {
        $: "InvalidUTF8Char"
    };
    var $elm$bytes$Bytes$Encode$getWidth = function(builder) {
        switch(builder.$){
            case "I8":
                return 1;
            case "I16":
                return 2;
            case "I32":
                return 4;
            case "U8":
                return 1;
            case "U16":
                return 2;
            case "U32":
                return 4;
            case "F32":
                return 4;
            case "F64":
                return 8;
            case "Seq":
                var w = builder.a;
                return w;
            case "Utf8":
                var w = builder.a;
                return w;
            default:
                var bs = builder.a;
                return _Bytes_width(bs);
        }
    };
    var $elm$bytes$Bytes$LE = {
        $: "LE"
    };
    var $elm$bytes$Bytes$Encode$write = F3(function(builder, mb, offset) {
        switch(builder.$){
            case "I8":
                var n = builder.a;
                return A3(_Bytes_write_i8, mb, offset, n);
            case "I16":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_i16, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "I32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_i32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "U8":
                var n = builder.a;
                return A3(_Bytes_write_u8, mb, offset, n);
            case "U16":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_u16, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "U32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_u32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "F32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_f32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "F64":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_f64, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "Seq":
                var bs = builder.b;
                return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
            case "Utf8":
                var s = builder.b;
                return A3(_Bytes_write_string, mb, offset, s);
            default:
                var bs = builder.a;
                return A3(_Bytes_write_bytes, mb, offset, bs);
        }
    });
    var $elm$bytes$Bytes$Encode$writeSequence = F3(function(builders, mb, offset) {
        writeSequence: while(true){
            if (!builders.b) return offset;
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$builders = bs, $temp$mb = mb, $temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
                builders = $temp$builders;
                mb = $temp$mb;
                offset = $temp$offset;
                continue writeSequence;
            }
        }
    });
    var $elm$bytes$Bytes$Decode$decode = F2(function(_v0, bs) {
        var decoder = _v0.a;
        return A2(_Bytes_decode, decoder, bs);
    });
    var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
    var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
    var $elm$bytes$Bytes$Decode$Decoder = function(a) {
        return {
            $: "Decoder",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$loopHelp = F4(function(state, callback, bites, offset) {
        loopHelp: while(true){
            var _v0 = callback(state);
            var decoder = _v0.a;
            var _v1 = A2(decoder, bites, offset);
            var newOffset = _v1.a;
            var step = _v1.b;
            if (step.$ === "Loop") {
                var newState = step.a;
                var $temp$state = newState, $temp$callback = callback, $temp$bites = bites, $temp$offset = newOffset;
                state = $temp$state;
                callback = $temp$callback;
                bites = $temp$bites;
                offset = $temp$offset;
                continue loopHelp;
            } else {
                var result = step.a;
                return _Utils_Tuple2(newOffset, result);
            }
        }
    });
    var $elm$bytes$Bytes$Decode$loop = F2(function(state, callback) {
        return $elm$bytes$Bytes$Decode$Decoder(A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
    });
    var $elm$bytes$Bytes$Decode$Done = function(a) {
        return {
            $: "Done",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$Loop = function(a) {
        return {
            $: "Loop",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$map = F2(function(func, _v0) {
        var decodeA = _v0.a;
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var aOffset = _v1.a;
            var a = _v1.b;
            return _Utils_Tuple2(aOffset, func(a));
        }));
    });
    var $elm$bytes$Bytes$Decode$succeed = function(a) {
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(_v0, offset) {
            return _Utils_Tuple2(offset, a);
        }));
    };
    var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
    var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$step = function(_v0) {
        var n = _v0.a;
        var xs = _v0.b;
        return n <= 0 ? $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done($elm$core$List$reverse(xs))) : A2($elm$bytes$Bytes$Decode$map, function(x) {
            return $elm$bytes$Bytes$Decode$Loop(_Utils_Tuple2(n - 1, A2($elm$core$List$cons, _Utils_Tuple2(x, 8), xs)));
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    };
    var $elm$bytes$Bytes$Encode$Utf8 = F2(function(a, b) {
        return {
            $: "Utf8",
            a: a,
            b: b
        };
    });
    var $elm$bytes$Bytes$Encode$string = function(str) {
        return A2($elm$bytes$Bytes$Encode$Utf8, _Bytes_getStringWidth(str), str);
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$encode = function(str) {
        var utf8BytesWidth = $elm$bytes$Bytes$Encode$getStringWidth(str);
        var decoder = A2($elm$bytes$Bytes$Decode$loop, _Utils_Tuple2(utf8BytesWidth, _List_Nil), $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$step);
        return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$InvalidUTF8Char, A2($elm$bytes$Bytes$Decode$decode, decoder, $elm$bytes$Bytes$Encode$encode($elm$bytes$Bytes$Encode$string(str))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$encoder = function(mode) {
        switch(mode.$){
            case "Numeric":
                return $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$encode;
            case "Alphanumeric":
                return $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$encode;
            case "Byte":
                return $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$encode;
            default:
                return $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8$encode;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$expTable = $elm$core$Array$fromList(_List_fromArray([
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        29,
        58,
        116,
        232,
        205,
        135,
        19,
        38,
        76,
        152,
        45,
        90,
        180,
        117,
        234,
        201,
        143,
        3,
        6,
        12,
        24,
        48,
        96,
        192,
        157,
        39,
        78,
        156,
        37,
        74,
        148,
        53,
        106,
        212,
        181,
        119,
        238,
        193,
        159,
        35,
        70,
        140,
        5,
        10,
        20,
        40,
        80,
        160,
        93,
        186,
        105,
        210,
        185,
        111,
        222,
        161,
        95,
        190,
        97,
        194,
        153,
        47,
        94,
        188,
        101,
        202,
        137,
        15,
        30,
        60,
        120,
        240,
        253,
        231,
        211,
        187,
        107,
        214,
        177,
        127,
        254,
        225,
        223,
        163,
        91,
        182,
        113,
        226,
        217,
        175,
        67,
        134,
        17,
        34,
        68,
        136,
        13,
        26,
        52,
        104,
        208,
        189,
        103,
        206,
        129,
        31,
        62,
        124,
        248,
        237,
        199,
        147,
        59,
        118,
        236,
        197,
        151,
        51,
        102,
        204,
        133,
        23,
        46,
        92,
        184,
        109,
        218,
        169,
        79,
        158,
        33,
        66,
        132,
        21,
        42,
        84,
        168,
        77,
        154,
        41,
        82,
        164,
        85,
        170,
        73,
        146,
        57,
        114,
        228,
        213,
        183,
        115,
        230,
        209,
        191,
        99,
        198,
        145,
        63,
        126,
        252,
        229,
        215,
        179,
        123,
        246,
        241,
        255,
        227,
        219,
        171,
        75,
        150,
        49,
        98,
        196,
        149,
        55,
        110,
        220,
        165,
        87,
        174,
        65,
        130,
        25,
        50,
        100,
        200,
        141,
        7,
        14,
        28,
        56,
        112,
        224,
        221,
        167,
        83,
        166,
        81,
        162,
        89,
        178,
        121,
        242,
        249,
        239,
        195,
        155,
        43,
        86,
        172,
        69,
        138,
        9,
        18,
        36,
        72,
        144,
        61,
        122,
        244,
        245,
        247,
        243,
        251,
        235,
        203,
        139,
        11,
        22,
        44,
        88,
        176,
        125,
        250,
        233,
        207,
        131,
        27,
        54,
        108,
        216,
        173,
        71,
        142,
        1
    ]));
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp = function(index) {
        return A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Array$get, A2($elm$core$Basics$modBy, 255, index), $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$expTable));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialMultiplyException = {
        $: "PolynomialMultiplyException"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Error$LogTableException = function(a) {
        return {
            $: "LogTableException",
            a: a
        };
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$logTable = $elm$core$Array$fromList(_List_fromArray([
        0,
        1,
        25,
        2,
        50,
        26,
        198,
        3,
        223,
        51,
        238,
        27,
        104,
        199,
        75,
        4,
        100,
        224,
        14,
        52,
        141,
        239,
        129,
        28,
        193,
        105,
        248,
        200,
        8,
        76,
        113,
        5,
        138,
        101,
        47,
        225,
        36,
        15,
        33,
        53,
        147,
        142,
        218,
        240,
        18,
        130,
        69,
        29,
        181,
        194,
        125,
        106,
        39,
        249,
        185,
        201,
        154,
        9,
        120,
        77,
        228,
        114,
        166,
        6,
        191,
        139,
        98,
        102,
        221,
        48,
        253,
        226,
        152,
        37,
        179,
        16,
        145,
        34,
        136,
        54,
        208,
        148,
        206,
        143,
        150,
        219,
        189,
        241,
        210,
        19,
        92,
        131,
        56,
        70,
        64,
        30,
        66,
        182,
        163,
        195,
        72,
        126,
        110,
        107,
        58,
        40,
        84,
        250,
        133,
        186,
        61,
        202,
        94,
        155,
        159,
        10,
        21,
        121,
        43,
        78,
        212,
        229,
        172,
        115,
        243,
        167,
        87,
        7,
        112,
        192,
        247,
        140,
        128,
        99,
        13,
        103,
        74,
        222,
        237,
        49,
        197,
        254,
        24,
        227,
        165,
        153,
        119,
        38,
        184,
        180,
        124,
        17,
        68,
        146,
        217,
        35,
        32,
        137,
        46,
        55,
        63,
        209,
        91,
        149,
        188,
        207,
        205,
        144,
        135,
        151,
        178,
        220,
        252,
        190,
        97,
        242,
        86,
        211,
        171,
        20,
        42,
        93,
        158,
        132,
        60,
        57,
        83,
        71,
        109,
        65,
        162,
        31,
        45,
        67,
        216,
        183,
        123,
        164,
        118,
        196,
        23,
        73,
        236,
        127,
        12,
        111,
        246,
        108,
        161,
        59,
        82,
        41,
        157,
        85,
        170,
        251,
        96,
        134,
        177,
        187,
        204,
        62,
        90,
        203,
        89,
        95,
        176,
        156,
        169,
        160,
        81,
        11,
        245,
        22,
        235,
        122,
        117,
        44,
        215,
        79,
        174,
        213,
        233,
        230,
        231,
        173,
        232,
        116,
        214,
        244,
        234,
        168,
        80,
        88,
        175
    ]));
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog = function(index) {
        return index < 1 ? $elm$core$Result$Err($pablohirafuji$elm_qrcode$QRCode$Error$LogTableException(index)) : A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$LogTableException(index), A2($elm$core$Array$get, index - 1, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$logTable));
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getOffset = function(_v0) {
        getOffset: while(true){
            var num = _v0.a;
            var offset = _v0.b;
            if (num.b) {
                var head = num.a;
                var tail = num.b;
                if (!head) {
                    var $temp$_v0 = _Utils_Tuple2(tail, offset + 1);
                    _v0 = $temp$_v0;
                    continue getOffset;
                } else return offset;
            } else return offset;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial = F2(function(num, shift) {
        var offset = $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getOffset(_Utils_Tuple2(num, 0));
        var numArray = $elm$core$Array$fromList(num);
        return A2($elm$core$Array$initialize, $elm$core$List$length(num) - offset + shift, function(index) {
            return A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Array$get, index + offset, numArray));
        });
    });
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$multiply = F2(function(poly1, poly2) {
        var valuesArray = A2($elm$core$List$indexedMap, F2(function(index1, value1) {
            return A2($elm$core$List$indexedMap, F2(function(index2, value2) {
                return _Utils_Tuple3(index1 + index2, value1, value2);
            }), $elm$core$Array$toList(poly2));
        }), $elm$core$Array$toList(poly1));
        var process__ = F3(function(indexSum, num_, exp) {
            return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialMultiplyException, A2($elm$core$Maybe$map, $elm$core$Bitwise$xor(exp), A2($elm$core$Array$get, indexSum, num_)));
        });
        var process_ = F2(function(_v0, num_) {
            var indexSum = _v0.a;
            var value1 = _v0.b;
            var value2 = _v0.c;
            return A2($elm$core$Result$map, function(r) {
                return A3($elm$core$Array$set, indexSum, r, num_);
            }, A2($elm$core$Result$andThen, A2(process__, indexSum, num_), A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp, A3($elm$core$Result$map2, $elm$core$Basics$add, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value1), $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value2)))));
        });
        var process = F2(function(args, numResult) {
            return A2($elm$core$Result$andThen, process_(args), numResult);
        });
        var num = A2($elm$core$Array$initialize, $elm$core$Array$length(poly1) + $elm$core$Array$length(poly2) - 1, $elm$core$Basics$always(0));
        return A2($elm$core$Result$map, function(a) {
            return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, a, 0);
        }, A2($elm$core$Result$map, $elm$core$Array$toList, A3($elm$core$List$foldl, process, $elm$core$Result$Ok(num), $elm$core$List$concat(valuesArray))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getECPolynomial = function(ecLength) {
        var generate = F2(function(count, polyResult) {
            generate: while(true){
                if (_Utils_cmp(count, ecLength) < 0) {
                    var $temp$count = count + 1, $temp$polyResult = A2($elm$core$Result$andThen, function(a) {
                        return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$multiply, a, A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, _List_fromArray([
                            1,
                            $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp(count)
                        ]), 0));
                    }, polyResult);
                    count = $temp$count;
                    polyResult = $temp$polyResult;
                    continue generate;
                } else return polyResult;
            }
        });
        return A2(generate, 0, $elm$core$Result$Ok(A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, _List_fromArray([
            1
        ]), 0)));
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get___ = F2(function(ecLength, modPoly) {
        return $elm$core$Array$toList(A2($elm$core$Array$initialize, ecLength, function(index) {
            var modIndex = index + $elm$core$Array$length(modPoly) - ecLength;
            return modIndex >= 0 ? A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Array$get, modIndex, modPoly)) : 0;
        }));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException = {
        $: "PolynomialModException"
    };
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod = F2(function(poly1, poly2) {
        if ($elm$core$Array$length(poly1) - $elm$core$Array$length(poly2) < 0) return $elm$core$Result$Ok(poly1);
        else {
            var helper_ = F3(function(index2, poly1_, exp) {
                return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException, A2($elm$core$Maybe$map, $elm$core$Bitwise$xor(exp), A2($elm$core$Array$get, index2, poly1_)));
            });
            var getHead = function(poly) {
                return A2($elm$core$Result$andThen, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog, A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$PolynomialModException, A2($elm$core$Array$get, 0, poly)));
            };
            var ratio = A3($elm$core$Result$map2, $elm$core$Basics$sub, getHead(poly1), getHead(poly2));
            var helper = F2(function(_v0, poly1_) {
                var index2 = _v0.a;
                var value2 = _v0.b;
                return A2($elm$core$Result$map, function(r) {
                    return A3($elm$core$Array$set, index2, r, poly1_);
                }, A2($elm$core$Result$andThen, A2(helper_, index2, poly1_), A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getExp, A3($elm$core$Result$map2, $elm$core$Basics$add, ratio, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getLog(value2)))));
            });
            var numFold = F2(function(args, poly1Result) {
                return A2($elm$core$Result$andThen, helper(args), poly1Result);
            });
            var numResult = A3($elm$core$Array$foldl, numFold, $elm$core$Result$Ok(poly1), A2($elm$core$Array$indexedMap, F2(function(a, b) {
                return _Utils_Tuple2(a, b);
            }), poly2));
            return A2($elm$core$Result$andThen, function(a) {
                return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod, a, poly2);
            }, A2($elm$core$Result$map, function(a) {
                return A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, a, 0);
            }, A2($elm$core$Result$map, $elm$core$Array$toList, numResult)));
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get__ = F2(function(rsPoly, dataCodewords) {
        return A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get___($elm$core$Array$length(rsPoly) - 1), A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$mod, A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$newPolynomial, dataCodewords, $elm$core$Array$length(rsPoly) - 1), rsPoly));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Helpers$listResult = F3(function(fun, listb, lista) {
        if (lista.b) {
            var head = lista.a;
            var tail = lista.b;
            return A2($elm$core$Result$andThen, function(a) {
                return A3($pablohirafuji$elm_qrcode$QRCode$Helpers$listResult, fun, a, tail);
            }, A2($elm$core$Result$map, function(r) {
                return A2($elm$core$List$cons, r, listb);
            }, fun(head)));
        } else return $elm$core$Result$Ok($elm$core$List$reverse(listb));
    });
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get_ = F2(function(byteBlocks, rsPoly) {
        return A3($pablohirafuji$elm_qrcode$QRCode$Helpers$listResult, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get__(rsPoly), _List_Nil, byteBlocks);
    });
    var $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get = F2(function(ecPerBlock, byteBlocks) {
        return A2($elm$core$Result$andThen, $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get_(byteBlocks), $pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$getECPolynomial(ecPerBlock));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$getErrorCorrection = function(_v0) {
        var model = _v0.a;
        var dataBlocks = _v0.b;
        return A2($elm$core$Result$map, function(c) {
            return _Utils_Tuple3(model, dataBlocks, c);
        }, A2($pablohirafuji$elm_qrcode$QRCode$ErrorCorrection$get, model.groupInfo.ecPerBlock, dataBlocks));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric = {
        $: "Alphanumeric"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte = {
        $: "Byte"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric = {
        $: "Numeric"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$onlyAlphanumeric = A2($elm$regex$Regex$fromStringWith, {
        caseInsensitive: false,
        multiline: false
    }, "^[0-9A-Z $%*+\\-.\\/:]+$");
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$isValid = function(input) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function(r) {
            return A2($elm$regex$Regex$contains, r, input);
        }, $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$onlyAlphanumeric));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$only8Bit = A2($elm$regex$Regex$fromStringWith, {
        caseInsensitive: false,
        multiline: false
    }, "^[\\u0000-\\u00ff]+$");
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$isValid = function(input) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function(r) {
            return A2($elm$regex$Regex$contains, r, input);
        }, $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$only8Bit));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$onlyNumber = A2($elm$regex$Regex$fromStringWith, {
        caseInsensitive: false,
        multiline: false
    }, "^[0-9]+$");
    var $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$isValid = function(input) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function(r) {
            return A2($elm$regex$Regex$contains, r, input);
        }, $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$onlyNumber));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$selectMode = function(input) {
        return $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Numeric : $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Alphanumeric : $pablohirafuji$elm_qrcode$QRCode$Encode$Byte$isValid(input) ? $pablohirafuji$elm_qrcode$QRCode$Encode$Byte : $pablohirafuji$elm_qrcode$QRCode$Encode$UTF8;
    };
    var $pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow = {
        $: "InputLengthOverflow"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$filterCapacity = F3(function(mode, dataLength, _v0) {
        var version = _v0.version;
        var capacity = _v0.capacity;
        return _Utils_cmp(A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, version) + dataLength, capacity) < 1;
    });
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity = function(_v0) {
        var blockCount = _v0.a;
        var bytePerBlock = _v0.b;
        return blockCount * bytePerBlock;
    };
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$byteCapacity = F2(function(group1, maybeGroup2) {
        if (maybeGroup2.$ === "Just") {
            var block2 = maybeGroup2.a;
            return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(group1) + $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(block2);
        } else return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$blockByteCapacity(group1);
    });
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo = F4(function(version, ecPerBlock, group1, maybeGroup2) {
        return {
            capacity: A2($pablohirafuji$elm_qrcode$QRCode$GroupInfo$byteCapacity, group1, maybeGroup2) * 8,
            ecPerBlock: ecPerBlock,
            group1: group1,
            maybeGroup2: maybeGroup2,
            version: version
        };
    });
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataH = _List_fromArray([
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 1, 17, _Utils_Tuple2(1, 9), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 2, 28, _Utils_Tuple2(1, 16), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 3, 22, _Utils_Tuple2(2, 13), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 4, 16, _Utils_Tuple2(4, 9), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 5, 22, _Utils_Tuple2(2, 11), $elm$core$Maybe$Just(_Utils_Tuple2(2, 12))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 6, 28, _Utils_Tuple2(4, 15), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 7, 26, _Utils_Tuple2(4, 13), $elm$core$Maybe$Just(_Utils_Tuple2(1, 14))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 8, 26, _Utils_Tuple2(4, 14), $elm$core$Maybe$Just(_Utils_Tuple2(2, 15))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 9, 24, _Utils_Tuple2(4, 12), $elm$core$Maybe$Just(_Utils_Tuple2(4, 13))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 10, 28, _Utils_Tuple2(6, 15), $elm$core$Maybe$Just(_Utils_Tuple2(2, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 11, 24, _Utils_Tuple2(3, 12), $elm$core$Maybe$Just(_Utils_Tuple2(8, 13))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 12, 28, _Utils_Tuple2(7, 14), $elm$core$Maybe$Just(_Utils_Tuple2(4, 15))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 13, 22, _Utils_Tuple2(12, 11), $elm$core$Maybe$Just(_Utils_Tuple2(4, 12))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 14, 24, _Utils_Tuple2(11, 12), $elm$core$Maybe$Just(_Utils_Tuple2(5, 13))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 15, 24, _Utils_Tuple2(11, 12), $elm$core$Maybe$Just(_Utils_Tuple2(7, 13))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 16, 30, _Utils_Tuple2(3, 15), $elm$core$Maybe$Just(_Utils_Tuple2(13, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 17, 28, _Utils_Tuple2(2, 14), $elm$core$Maybe$Just(_Utils_Tuple2(17, 15))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 18, 28, _Utils_Tuple2(2, 14), $elm$core$Maybe$Just(_Utils_Tuple2(19, 15))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 19, 26, _Utils_Tuple2(9, 13), $elm$core$Maybe$Just(_Utils_Tuple2(16, 14))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 20, 28, _Utils_Tuple2(15, 15), $elm$core$Maybe$Just(_Utils_Tuple2(10, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 21, 30, _Utils_Tuple2(19, 16), $elm$core$Maybe$Just(_Utils_Tuple2(6, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 22, 24, _Utils_Tuple2(34, 13), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 23, 30, _Utils_Tuple2(16, 15), $elm$core$Maybe$Just(_Utils_Tuple2(14, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 24, 30, _Utils_Tuple2(30, 16), $elm$core$Maybe$Just(_Utils_Tuple2(2, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 25, 30, _Utils_Tuple2(22, 15), $elm$core$Maybe$Just(_Utils_Tuple2(13, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 26, 30, _Utils_Tuple2(33, 16), $elm$core$Maybe$Just(_Utils_Tuple2(4, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 27, 30, _Utils_Tuple2(12, 15), $elm$core$Maybe$Just(_Utils_Tuple2(28, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 28, 30, _Utils_Tuple2(11, 15), $elm$core$Maybe$Just(_Utils_Tuple2(31, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 29, 30, _Utils_Tuple2(19, 15), $elm$core$Maybe$Just(_Utils_Tuple2(26, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 30, 30, _Utils_Tuple2(23, 15), $elm$core$Maybe$Just(_Utils_Tuple2(25, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 31, 30, _Utils_Tuple2(23, 15), $elm$core$Maybe$Just(_Utils_Tuple2(28, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 32, 30, _Utils_Tuple2(19, 15), $elm$core$Maybe$Just(_Utils_Tuple2(35, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 33, 30, _Utils_Tuple2(11, 15), $elm$core$Maybe$Just(_Utils_Tuple2(46, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 34, 30, _Utils_Tuple2(59, 16), $elm$core$Maybe$Just(_Utils_Tuple2(1, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 35, 30, _Utils_Tuple2(22, 15), $elm$core$Maybe$Just(_Utils_Tuple2(41, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 36, 30, _Utils_Tuple2(2, 15), $elm$core$Maybe$Just(_Utils_Tuple2(64, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 37, 30, _Utils_Tuple2(24, 15), $elm$core$Maybe$Just(_Utils_Tuple2(46, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 38, 30, _Utils_Tuple2(42, 15), $elm$core$Maybe$Just(_Utils_Tuple2(32, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 39, 30, _Utils_Tuple2(10, 15), $elm$core$Maybe$Just(_Utils_Tuple2(67, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 40, 30, _Utils_Tuple2(20, 15), $elm$core$Maybe$Just(_Utils_Tuple2(61, 16)))
    ]);
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataL = _List_fromArray([
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 1, 7, _Utils_Tuple2(1, 19), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 2, 10, _Utils_Tuple2(1, 34), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 3, 15, _Utils_Tuple2(1, 55), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 4, 20, _Utils_Tuple2(1, 80), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 5, 26, _Utils_Tuple2(1, 108), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 6, 18, _Utils_Tuple2(2, 68), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 7, 20, _Utils_Tuple2(2, 78), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 8, 24, _Utils_Tuple2(2, 97), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 9, 30, _Utils_Tuple2(2, 116), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 10, 18, _Utils_Tuple2(2, 68), $elm$core$Maybe$Just(_Utils_Tuple2(2, 69))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 11, 20, _Utils_Tuple2(4, 81), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 12, 24, _Utils_Tuple2(2, 92), $elm$core$Maybe$Just(_Utils_Tuple2(2, 93))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 13, 26, _Utils_Tuple2(4, 107), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 14, 30, _Utils_Tuple2(3, 115), $elm$core$Maybe$Just(_Utils_Tuple2(1, 116))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 15, 22, _Utils_Tuple2(5, 87), $elm$core$Maybe$Just(_Utils_Tuple2(1, 88))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 16, 24, _Utils_Tuple2(5, 98), $elm$core$Maybe$Just(_Utils_Tuple2(1, 99))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 17, 28, _Utils_Tuple2(1, 107), $elm$core$Maybe$Just(_Utils_Tuple2(5, 108))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 18, 30, _Utils_Tuple2(5, 120), $elm$core$Maybe$Just(_Utils_Tuple2(1, 121))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 19, 28, _Utils_Tuple2(3, 113), $elm$core$Maybe$Just(_Utils_Tuple2(4, 114))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 20, 28, _Utils_Tuple2(3, 107), $elm$core$Maybe$Just(_Utils_Tuple2(5, 108))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 21, 28, _Utils_Tuple2(4, 116), $elm$core$Maybe$Just(_Utils_Tuple2(4, 117))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 22, 28, _Utils_Tuple2(2, 111), $elm$core$Maybe$Just(_Utils_Tuple2(7, 112))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 23, 30, _Utils_Tuple2(4, 121), $elm$core$Maybe$Just(_Utils_Tuple2(5, 122))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 24, 30, _Utils_Tuple2(6, 117), $elm$core$Maybe$Just(_Utils_Tuple2(4, 118))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 25, 26, _Utils_Tuple2(8, 106), $elm$core$Maybe$Just(_Utils_Tuple2(4, 107))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 26, 28, _Utils_Tuple2(10, 114), $elm$core$Maybe$Just(_Utils_Tuple2(2, 115))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 27, 30, _Utils_Tuple2(8, 122), $elm$core$Maybe$Just(_Utils_Tuple2(4, 123))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 28, 30, _Utils_Tuple2(3, 117), $elm$core$Maybe$Just(_Utils_Tuple2(10, 118))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 29, 30, _Utils_Tuple2(7, 116), $elm$core$Maybe$Just(_Utils_Tuple2(7, 117))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 30, 30, _Utils_Tuple2(5, 115), $elm$core$Maybe$Just(_Utils_Tuple2(10, 116))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 31, 30, _Utils_Tuple2(13, 115), $elm$core$Maybe$Just(_Utils_Tuple2(3, 116))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 32, 30, _Utils_Tuple2(17, 115), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 33, 30, _Utils_Tuple2(17, 115), $elm$core$Maybe$Just(_Utils_Tuple2(1, 116))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 34, 30, _Utils_Tuple2(13, 115), $elm$core$Maybe$Just(_Utils_Tuple2(6, 116))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 35, 30, _Utils_Tuple2(12, 121), $elm$core$Maybe$Just(_Utils_Tuple2(7, 122))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 36, 30, _Utils_Tuple2(6, 121), $elm$core$Maybe$Just(_Utils_Tuple2(14, 122))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 37, 30, _Utils_Tuple2(17, 122), $elm$core$Maybe$Just(_Utils_Tuple2(4, 123))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 38, 30, _Utils_Tuple2(4, 122), $elm$core$Maybe$Just(_Utils_Tuple2(18, 123))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 39, 30, _Utils_Tuple2(20, 117), $elm$core$Maybe$Just(_Utils_Tuple2(4, 118))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 40, 30, _Utils_Tuple2(19, 118), $elm$core$Maybe$Just(_Utils_Tuple2(6, 119)))
    ]);
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataM = _List_fromArray([
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 1, 10, _Utils_Tuple2(1, 16), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 2, 16, _Utils_Tuple2(1, 28), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 3, 26, _Utils_Tuple2(1, 44), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 4, 18, _Utils_Tuple2(2, 32), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 5, 24, _Utils_Tuple2(2, 43), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 6, 16, _Utils_Tuple2(4, 27), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 7, 18, _Utils_Tuple2(4, 31), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 8, 22, _Utils_Tuple2(2, 38), $elm$core$Maybe$Just(_Utils_Tuple2(2, 39))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 9, 22, _Utils_Tuple2(3, 36), $elm$core$Maybe$Just(_Utils_Tuple2(2, 37))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 10, 26, _Utils_Tuple2(4, 43), $elm$core$Maybe$Just(_Utils_Tuple2(1, 44))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 11, 30, _Utils_Tuple2(1, 50), $elm$core$Maybe$Just(_Utils_Tuple2(4, 51))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 12, 22, _Utils_Tuple2(6, 36), $elm$core$Maybe$Just(_Utils_Tuple2(2, 37))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 13, 22, _Utils_Tuple2(8, 37), $elm$core$Maybe$Just(_Utils_Tuple2(1, 38))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 14, 24, _Utils_Tuple2(4, 40), $elm$core$Maybe$Just(_Utils_Tuple2(5, 41))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 15, 24, _Utils_Tuple2(5, 41), $elm$core$Maybe$Just(_Utils_Tuple2(5, 42))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 16, 28, _Utils_Tuple2(7, 45), $elm$core$Maybe$Just(_Utils_Tuple2(3, 46))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 17, 28, _Utils_Tuple2(10, 46), $elm$core$Maybe$Just(_Utils_Tuple2(1, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 18, 26, _Utils_Tuple2(9, 43), $elm$core$Maybe$Just(_Utils_Tuple2(4, 44))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 19, 26, _Utils_Tuple2(3, 44), $elm$core$Maybe$Just(_Utils_Tuple2(11, 45))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 20, 26, _Utils_Tuple2(3, 41), $elm$core$Maybe$Just(_Utils_Tuple2(13, 42))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 21, 26, _Utils_Tuple2(17, 42), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 22, 28, _Utils_Tuple2(17, 46), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 23, 28, _Utils_Tuple2(4, 47), $elm$core$Maybe$Just(_Utils_Tuple2(14, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 24, 28, _Utils_Tuple2(6, 45), $elm$core$Maybe$Just(_Utils_Tuple2(14, 46))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 25, 28, _Utils_Tuple2(8, 47), $elm$core$Maybe$Just(_Utils_Tuple2(13, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 26, 28, _Utils_Tuple2(19, 46), $elm$core$Maybe$Just(_Utils_Tuple2(4, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 27, 28, _Utils_Tuple2(22, 45), $elm$core$Maybe$Just(_Utils_Tuple2(3, 46))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 28, 28, _Utils_Tuple2(3, 45), $elm$core$Maybe$Just(_Utils_Tuple2(23, 46))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 29, 28, _Utils_Tuple2(21, 45), $elm$core$Maybe$Just(_Utils_Tuple2(7, 46))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 30, 28, _Utils_Tuple2(19, 47), $elm$core$Maybe$Just(_Utils_Tuple2(10, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 31, 28, _Utils_Tuple2(2, 46), $elm$core$Maybe$Just(_Utils_Tuple2(29, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 32, 28, _Utils_Tuple2(10, 46), $elm$core$Maybe$Just(_Utils_Tuple2(23, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 33, 28, _Utils_Tuple2(14, 46), $elm$core$Maybe$Just(_Utils_Tuple2(21, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 34, 28, _Utils_Tuple2(14, 46), $elm$core$Maybe$Just(_Utils_Tuple2(23, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 35, 28, _Utils_Tuple2(12, 47), $elm$core$Maybe$Just(_Utils_Tuple2(26, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 36, 28, _Utils_Tuple2(6, 47), $elm$core$Maybe$Just(_Utils_Tuple2(34, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 37, 28, _Utils_Tuple2(29, 46), $elm$core$Maybe$Just(_Utils_Tuple2(14, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 38, 28, _Utils_Tuple2(13, 46), $elm$core$Maybe$Just(_Utils_Tuple2(32, 47))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 39, 28, _Utils_Tuple2(40, 47), $elm$core$Maybe$Just(_Utils_Tuple2(7, 48))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 40, 28, _Utils_Tuple2(18, 47), $elm$core$Maybe$Just(_Utils_Tuple2(31, 48)))
    ]);
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataQ = _List_fromArray([
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 1, 13, _Utils_Tuple2(1, 13), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 2, 22, _Utils_Tuple2(1, 22), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 3, 18, _Utils_Tuple2(2, 17), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 4, 26, _Utils_Tuple2(2, 24), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 5, 18, _Utils_Tuple2(2, 15), $elm$core$Maybe$Just(_Utils_Tuple2(2, 16))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 6, 24, _Utils_Tuple2(4, 19), $elm$core$Maybe$Nothing),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 7, 18, _Utils_Tuple2(2, 14), $elm$core$Maybe$Just(_Utils_Tuple2(4, 15))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 8, 22, _Utils_Tuple2(4, 18), $elm$core$Maybe$Just(_Utils_Tuple2(2, 19))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 9, 20, _Utils_Tuple2(4, 16), $elm$core$Maybe$Just(_Utils_Tuple2(4, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 10, 24, _Utils_Tuple2(6, 19), $elm$core$Maybe$Just(_Utils_Tuple2(2, 20))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 11, 28, _Utils_Tuple2(4, 22), $elm$core$Maybe$Just(_Utils_Tuple2(4, 23))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 12, 26, _Utils_Tuple2(4, 20), $elm$core$Maybe$Just(_Utils_Tuple2(6, 21))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 13, 24, _Utils_Tuple2(8, 20), $elm$core$Maybe$Just(_Utils_Tuple2(4, 21))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 14, 20, _Utils_Tuple2(11, 16), $elm$core$Maybe$Just(_Utils_Tuple2(5, 17))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 15, 30, _Utils_Tuple2(5, 24), $elm$core$Maybe$Just(_Utils_Tuple2(7, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 16, 24, _Utils_Tuple2(15, 19), $elm$core$Maybe$Just(_Utils_Tuple2(2, 20))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 17, 28, _Utils_Tuple2(1, 22), $elm$core$Maybe$Just(_Utils_Tuple2(15, 23))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 18, 28, _Utils_Tuple2(17, 22), $elm$core$Maybe$Just(_Utils_Tuple2(1, 23))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 19, 26, _Utils_Tuple2(17, 21), $elm$core$Maybe$Just(_Utils_Tuple2(4, 22))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 20, 30, _Utils_Tuple2(15, 24), $elm$core$Maybe$Just(_Utils_Tuple2(5, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 21, 28, _Utils_Tuple2(17, 22), $elm$core$Maybe$Just(_Utils_Tuple2(6, 23))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 22, 30, _Utils_Tuple2(7, 24), $elm$core$Maybe$Just(_Utils_Tuple2(16, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 23, 30, _Utils_Tuple2(11, 24), $elm$core$Maybe$Just(_Utils_Tuple2(14, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 24, 30, _Utils_Tuple2(11, 24), $elm$core$Maybe$Just(_Utils_Tuple2(16, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 25, 30, _Utils_Tuple2(7, 24), $elm$core$Maybe$Just(_Utils_Tuple2(22, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 26, 28, _Utils_Tuple2(28, 22), $elm$core$Maybe$Just(_Utils_Tuple2(6, 23))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 27, 30, _Utils_Tuple2(8, 23), $elm$core$Maybe$Just(_Utils_Tuple2(26, 24))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 28, 30, _Utils_Tuple2(4, 24), $elm$core$Maybe$Just(_Utils_Tuple2(31, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 29, 30, _Utils_Tuple2(1, 23), $elm$core$Maybe$Just(_Utils_Tuple2(37, 24))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 30, 30, _Utils_Tuple2(15, 24), $elm$core$Maybe$Just(_Utils_Tuple2(25, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 31, 30, _Utils_Tuple2(42, 24), $elm$core$Maybe$Just(_Utils_Tuple2(1, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 32, 30, _Utils_Tuple2(10, 24), $elm$core$Maybe$Just(_Utils_Tuple2(35, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 33, 30, _Utils_Tuple2(29, 24), $elm$core$Maybe$Just(_Utils_Tuple2(19, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 34, 30, _Utils_Tuple2(44, 24), $elm$core$Maybe$Just(_Utils_Tuple2(7, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 35, 30, _Utils_Tuple2(39, 24), $elm$core$Maybe$Just(_Utils_Tuple2(14, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 36, 30, _Utils_Tuple2(46, 24), $elm$core$Maybe$Just(_Utils_Tuple2(10, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 37, 30, _Utils_Tuple2(49, 24), $elm$core$Maybe$Just(_Utils_Tuple2(10, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 38, 30, _Utils_Tuple2(48, 24), $elm$core$Maybe$Just(_Utils_Tuple2(14, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 39, 30, _Utils_Tuple2(43, 24), $elm$core$Maybe$Just(_Utils_Tuple2(22, 25))),
        A4($pablohirafuji$elm_qrcode$QRCode$GroupInfo$newGroupInfo, 40, 30, _Utils_Tuple2(34, 24), $elm$core$Maybe$Just(_Utils_Tuple2(34, 25)))
    ]);
    var $pablohirafuji$elm_qrcode$QRCode$GroupInfo$getGroupData = function(ecLevel) {
        switch(ecLevel.$){
            case "L":
                return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataL;
            case "M":
                return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataM;
            case "Q":
                return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataQ;
            default:
                return $pablohirafuji$elm_qrcode$QRCode$GroupInfo$dataH;
        }
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$getVersion = F3(function(ecLevel, mode, dataLength) {
        return A2($elm$core$Result$fromMaybe, $pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow, $elm$core$List$head(A2($elm$core$List$sortBy, function($) {
            return $.capacity;
        }, A2($elm$core$List$filter, A2($pablohirafuji$elm_qrcode$QRCode$Encode$filterCapacity, mode, dataLength), $pablohirafuji$elm_qrcode$QRCode$GroupInfo$getGroupData(ecLevel)))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$versionToModel = F5(function(inputStr, ecLevel, mode, partialBitsCount, groupInfo) {
        return {
            bitsCount: partialBitsCount + A2($pablohirafuji$elm_qrcode$QRCode$Encode$charCountIndicatorLength, mode, groupInfo.version),
            ecLevel: ecLevel,
            groupInfo: groupInfo,
            inputStr: inputStr,
            mode: mode
        };
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$selectVersion = F4(function(inputStr, ecLevel, mode, encodedStr) {
        var partialBitsCount = 4 + A3($elm$core$List$foldl, F2(function(a, b) {
            return a.b + b;
        }), 0, encodedStr);
        return A2($elm$core$Result$map, function(b) {
            return _Utils_Tuple2(encodedStr, b);
        }, A2($elm$core$Result$map, A4($pablohirafuji$elm_qrcode$QRCode$Encode$versionToModel, inputStr, ecLevel, mode, partialBitsCount), A3($pablohirafuji$elm_qrcode$QRCode$Encode$getVersion, ecLevel, mode, partialBitsCount)));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$breakList = F3(function(checkFinish, _v0, _v1) {
        breakList: while(true){
            var times = _v0.a;
            var itemCount = _v0.b;
            var byteList = _v1.a;
            var progress = _v1.b;
            if (times > 0) {
                var remainList = A2($elm$core$List$drop, itemCount, byteList);
                var block = A2($elm$core$List$take, itemCount, byteList);
                var $temp$checkFinish = checkFinish, $temp$_v0 = _Utils_Tuple2(times - 1, itemCount), $temp$_v1 = _Utils_Tuple2(remainList, A2($elm$core$List$cons, block, progress));
                checkFinish = $temp$checkFinish;
                _v0 = $temp$_v0;
                _v1 = $temp$_v1;
                continue breakList;
            } else {
                if (checkFinish && $elm$core$List$length(byteList) > 0) return $elm$core$Result$Err($pablohirafuji$elm_qrcode$QRCode$Error$InputLengthOverflow);
                else return $elm$core$Result$Ok(_Utils_Tuple2(byteList, progress));
            }
        }
    });
    var $pablohirafuji$elm_qrcode$QRCode$Encode$toBlocks = function(_v0) {
        var model = _v0.a;
        var groupInfo = model.groupInfo;
        var byteList = _v0.b;
        var _v1 = groupInfo.maybeGroup2;
        if (_v1.$ === "Just") {
            var group2 = _v1.a;
            return A2($elm$core$Result$map, function(b) {
                return _Utils_Tuple2(model, b);
            }, A2($elm$core$Result$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$List$reverse), A2($elm$core$Result$andThen, A2($pablohirafuji$elm_qrcode$QRCode$Encode$breakList, true, group2), A3($pablohirafuji$elm_qrcode$QRCode$Encode$breakList, false, groupInfo.group1, _Utils_Tuple2(byteList, _List_Nil)))));
        } else return A2($elm$core$Result$map, function(b) {
            return _Utils_Tuple2(model, b);
        }, A2($elm$core$Result$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$List$reverse), A3($pablohirafuji$elm_qrcode$QRCode$Encode$breakList, true, groupInfo.group1, _Utils_Tuple2(byteList, _List_Nil))));
    };
    var $pablohirafuji$elm_qrcode$QRCode$Encode$encode = F2(function(inputStr, ecLevel) {
        var mode = $pablohirafuji$elm_qrcode$QRCode$Encode$selectMode(inputStr);
        return A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$Encode$concatTranspose, A2($elm$core$Result$andThen, $pablohirafuji$elm_qrcode$QRCode$Encode$getErrorCorrection, A2($elm$core$Result$andThen, $pablohirafuji$elm_qrcode$QRCode$Encode$toBlocks, A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$Encode$addInfoAndFinalBits, A2($elm$core$Result$andThen, A3($pablohirafuji$elm_qrcode$QRCode$Encode$selectVersion, inputStr, ecLevel, mode), A2($pablohirafuji$elm_qrcode$QRCode$Encode$encoder, mode, inputStr))))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$fromStringWith = F2(function(ecLevel, input) {
        return A2($elm$core$Result$mapError, $pablohirafuji$elm_qrcode$QRCode$convertError, A2($elm$core$Result$andThen, function(_v0) {
            var encodeModel = _v0.a;
            var encodedData = _v0.b;
            return A2($elm$core$Result$map, function(matrix) {
                return $pablohirafuji$elm_qrcode$QRCode$QRCode({
                    matrix: matrix,
                    version: encodeModel.groupInfo.version
                });
            }, $pablohirafuji$elm_qrcode$QRCode$Matrix$apply(_Utils_Tuple2(encodeModel, encodedData)));
        }, A2($pablohirafuji$elm_qrcode$QRCode$Encode$encode, input, $pablohirafuji$elm_qrcode$QRCode$convertEC(ecLevel))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$fromString = $pablohirafuji$elm_qrcode$QRCode$fromStringWith($pablohirafuji$elm_qrcode$QRCode$Quartile);
    var $elm_community$list_extra$List$Extra$getAt = F2(function(idx, xs) {
        return idx < 0 ? $elm$core$Maybe$Nothing : $elm$core$List$head(A2($elm$core$List$drop, idx, xs));
    });
    var $tesk9$accessible_html$Accessibility$Aria$invalid = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("invalid"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $author$project$Lia$Markdown$Inline$View$highlightPartialSolution = F2(function(attr, partiallyCorrect) {
        return partiallyCorrect ? A2($elm$core$List$cons, $elm$html$Html$Attributes$class("is-success"), A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Aria$invalid(false), attr)) : A2($elm$core$List$cons, $elm$html$Html$Attributes$class("is-failure"), A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Aria$invalid(true), attr));
    });
    var $elm$html$Html$iframe = _VirtualDom_node("iframe");
    var $author$project$Lia$Markdown$Inline$View$load = function(url) {
        return A2($elm$html$Html$Attributes$attribute, "onload", "window.LIA.img.load('" + (url + "',this.width,this.height)"));
    };
    var $author$project$Lia$Markdown$Inline$View$title = function(config) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$stringFrom(config), $elm$core$Maybe$map($elm$html$Html$Attributes$title));
    };
    var $author$project$Lia$Markdown$Inline$View$img = F6(function(config, attr, alt_, url_, title_, width) {
        return A2($elm$html$Html$img, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(width, $elm$core$Maybe$Nothing), $author$project$Lia$Markdown$Inline$View$load(url_), A2($elm$core$List$cons, $elm$html$Html$Attributes$src(url_), A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Inline$View$onError, "img", url_), $elm$core$List$isEmpty(attr) && config.image_zoom ? _List_fromArray([
            A2($elm$html$Html$Attributes$attribute, "onClick", 'window.LIA.img.click("' + (url_ + '")'))
        ]) : $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)))))), _List_Nil);
    });
    var $author$project$Lia$Markdown$Effect$View$number = function(i) {
        return " " + ($elm$core$String$fromInt(i) + " ");
    };
    var $author$project$Lia$Markdown$Effect$View$circle_ = A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$View$number, A2($elm$core$Basics$composeR, $elm$html$Html$text, A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$span(_List_fromArray([
        $elm$html$Html$Attributes$class("lia-effect__circle lia-effect__circle--inline")
    ])))));
    var $author$project$Lia$Markdown$Effect$Types$Animation = {
        $: "Animation"
    };
    var $author$project$Lia$Markdown$Effect$Types$PlayBack = {
        $: "PlayBack"
    };
    var $author$project$Lia$Markdown$Effect$Types$PlayBackAnimation = {
        $: "PlayBackAnimation"
    };
    var $author$project$Lia$Markdown$Effect$Types$class = function(effect) {
        return effect.playback ? effect.begin < 0 ? $author$project$Lia$Markdown$Effect$Types$PlayBack : $author$project$Lia$Markdown$Effect$Types$PlayBackAnimation : $author$project$Lia$Markdown$Effect$Types$Animation;
    };
    var $tesk9$accessible_html$Accessibility$Role$alert = $tesk9$accessible_html$Accessibility$Utils$role("alert");
    var $tesk9$accessible_html$Accessibility$Live$polite = A2($tesk9$accessible_html$Accessibility$Utils$aria, "live", "polite");
    var $author$project$Lia$Markdown$Effect$View$hiddenSpan = F2(function(hide, attr) {
        return $elm$html$Html$span(hide ? A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-effect--inline hide", attr) : A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Live$polite, A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Role$alert, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-effect--inline", attr))));
    });
    var $author$project$Lia$Voice$startsWith = function(voice) {
        return A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$core$String$startsWith(voice)), $elm$core$Maybe$withDefault(false));
    };
    var $author$project$Lia$Voice$ResponsiveVoice = F4(function(lang, female, male, _default) {
        return {
            _default: _default,
            female: female,
            lang: lang,
            male: male
        };
    });
    var $author$project$Lia$Voice$toVoice = F4(function(name, lang, female, male) {
        return A4($author$project$Lia$Voice$ResponsiveVoice, lang, female ? $elm$core$Maybe$Just(name + " Female") : $elm$core$Maybe$Nothing, male ? $elm$core$Maybe$Just(name + " Male") : $elm$core$Maybe$Nothing, !male && !female ? $elm$core$Maybe$Just(name) : $elm$core$Maybe$Nothing);
    });
    var $author$project$Lia$Voice$voices = _List_fromArray([
        A4($author$project$Lia$Voice$toVoice, "US English", "en", true, true),
        A4($author$project$Lia$Voice$toVoice, "UK English", "en", true, true),
        A4($author$project$Lia$Voice$toVoice, "Australian", "en", true, true),
        A4($author$project$Lia$Voice$toVoice, "Fallback UK", "en", true, false),
        A4($author$project$Lia$Voice$toVoice, "Afrikaans", "af", false, true),
        A4($author$project$Lia$Voice$toVoice, "Albanian", "sq", false, true),
        A4($author$project$Lia$Voice$toVoice, "Arabic", "ar", true, true),
        A4($author$project$Lia$Voice$toVoice, "Armenian", "hy", false, true),
        A4($author$project$Lia$Voice$toVoice, "Bangla Bangladesh", "bn", true, true),
        A4($author$project$Lia$Voice$toVoice, "Bangla India", "bn", true, true),
        A4($author$project$Lia$Voice$toVoice, "Bosnian", "bs", false, true),
        A4($author$project$Lia$Voice$toVoice, "Catalan", "ca", false, true),
        A4($author$project$Lia$Voice$toVoice, "Chinese", "zh", true, true),
        A4($author$project$Lia$Voice$toVoice, "Chinese (Hong Kong)", "zh", true, true),
        A4($author$project$Lia$Voice$toVoice, "Chinese Taiwan", "zh", true, true),
        A4($author$project$Lia$Voice$toVoice, "Croatian", "hr", false, true),
        A4($author$project$Lia$Voice$toVoice, "Czech", "cz", true, false),
        A4($author$project$Lia$Voice$toVoice, "Danish", "da", true, false),
        A4($author$project$Lia$Voice$toVoice, "Deutsch", "de", true, true),
        A4($author$project$Lia$Voice$toVoice, "German", "de", true, true),
        A4($author$project$Lia$Voice$toVoice, "Dutch", "nl", true, true),
        A4($author$project$Lia$Voice$toVoice, "Esperanto", "eo", false, true),
        A4($author$project$Lia$Voice$toVoice, "Estonian", "et", false, true),
        A4($author$project$Lia$Voice$toVoice, "Filipino", "ph", true, false),
        A4($author$project$Lia$Voice$toVoice, "Finnish", "fi", true, false),
        A4($author$project$Lia$Voice$toVoice, "French", "fr", true, true),
        A4($author$project$Lia$Voice$toVoice, "French Canadian", "fr", true, true),
        A4($author$project$Lia$Voice$toVoice, "Greek", "el", true, false),
        A4($author$project$Lia$Voice$toVoice, "Hindi", "hi", true, true),
        A4($author$project$Lia$Voice$toVoice, "Hungarian", "hu", true, false),
        A4($author$project$Lia$Voice$toVoice, "Icelandic", "is", false, true),
        A4($author$project$Lia$Voice$toVoice, "Indonesian", "id", true, true),
        A4($author$project$Lia$Voice$toVoice, "Italian", "it", true, true),
        A4($author$project$Lia$Voice$toVoice, "Japanese", "ja", true, true),
        A4($author$project$Lia$Voice$toVoice, "Korean", "ko", true, true),
        A4($author$project$Lia$Voice$toVoice, "Latin", "la", false, true),
        A4($author$project$Lia$Voice$toVoice, "Latvian", "lv", false, true),
        A4($author$project$Lia$Voice$toVoice, "Macedonian", "mk", false, true),
        A4($author$project$Lia$Voice$toVoice, "Moldavian", "mo", true, false),
        A4($author$project$Lia$Voice$toVoice, "Montenegrin", "me", false, true),
        A4($author$project$Lia$Voice$toVoice, "Nepali", "ne", false, false),
        A4($author$project$Lia$Voice$toVoice, "Norwegian", "no", true, true),
        A4($author$project$Lia$Voice$toVoice, "Polish", "pl", true, true),
        A4($author$project$Lia$Voice$toVoice, "Portuguese", "pt", true, true),
        A4($author$project$Lia$Voice$toVoice, "Brazilian Portuguese", "pt", false, true),
        A4($author$project$Lia$Voice$toVoice, "Romanian", "ro", true, false),
        A4($author$project$Lia$Voice$toVoice, "Russian", "ru", true, false),
        A4($author$project$Lia$Voice$toVoice, "Serbian", "sr", false, true),
        A4($author$project$Lia$Voice$toVoice, "Serbo-Croatian", "sh", false, true),
        A4($author$project$Lia$Voice$toVoice, "Sinhala", "si", false, false),
        A4($author$project$Lia$Voice$toVoice, "Slovak", "sk", true, false),
        A4($author$project$Lia$Voice$toVoice, "Spanish Latin American", "es", true, true),
        A4($author$project$Lia$Voice$toVoice, "Spanish", "es", true, false),
        A4($author$project$Lia$Voice$toVoice, "Swahili", "sw", false, true),
        A4($author$project$Lia$Voice$toVoice, "Swedish", "sv", true, true),
        A4($author$project$Lia$Voice$toVoice, "Tamil", "ta", true, true),
        A4($author$project$Lia$Voice$toVoice, "Thai", "th", true, true),
        A4($author$project$Lia$Voice$toVoice, "Turkish", "tr", true, true),
        A4($author$project$Lia$Voice$toVoice, "Ukrainian", "uk", true, false),
        A4($author$project$Lia$Voice$toVoice, "Vietnamese", "vi", true, true),
        A4($author$project$Lia$Voice$toVoice, "Welsh", "cy", false, true)
    ]);
    var $author$project$Lia$Voice$getLang = function(voice) {
        return A2($elm$core$Maybe$map, function($) {
            return $.lang;
        }, A2($elm_community$list_extra$List$Extra$find, function(v) {
            return A2($author$project$Lia$Voice$startsWith, voice, v.male) || A2($author$project$Lia$Voice$startsWith, voice, v.female);
        }, $author$project$Lia$Voice$voices));
    };
    var $author$project$Lia$Voice$Voice = F3(function(translated, lang, name) {
        return {
            lang: lang,
            name: name,
            translated: translated
        };
    });
    var $author$project$Lia$Voice$getVoice = F2(function(male, voice) {
        var _v0 = _Utils_Tuple3(male, voice.male, voice.female);
        _v0$6: while(true){
            if (_v0.a.$ === "Just") {
                if (_v0.a.a) {
                    if (_v0.b.$ === "Just") {
                        var maleVoice = _v0.b.a;
                        return $elm$core$Maybe$Just(maleVoice);
                    } else {
                        if (_v0.c.$ === "Just") {
                            var _v1 = _v0.b;
                            var femaleVoice = _v0.c.a;
                            return $elm$core$Maybe$Just(femaleVoice);
                        } else break _v0$6;
                    }
                } else if (_v0.c.$ === "Just") {
                    var femaleVoice = _v0.c.a;
                    return $elm$core$Maybe$Just(femaleVoice);
                } else {
                    if (_v0.b.$ === "Just") {
                        var maleVoice = _v0.b.a;
                        var _v2 = _v0.c;
                        return $elm$core$Maybe$Just(maleVoice);
                    } else break _v0$6;
                }
            } else if (_v0.b.$ === "Just") {
                var _v3 = _v0.a;
                var maleVoice = _v0.b.a;
                return $elm$core$Maybe$Just(maleVoice);
            } else {
                if (_v0.c.$ === "Just") {
                    var _v4 = _v0.a;
                    var femaleVoice = _v0.c.a;
                    return $elm$core$Maybe$Just(femaleVoice);
                } else break _v0$6;
            }
        }
        return voice._default;
    });
    var $author$project$Lia$Voice$getVoiceFromLang = F2(function(lang, male) {
        return A2($elm$core$Maybe$andThen, $author$project$Lia$Voice$getVoice(male), A2($elm_community$list_extra$List$Extra$find, function(v) {
            return _Utils_eq(v.lang, lang);
        }, $author$project$Lia$Voice$voices));
    });
    var $author$project$Lia$Voice$isMale = function(voice) {
        var _v0 = A2($elm$core$String$split, " ", voice);
        _v0$2: while(true){
            if (_v0.b && _v0.b.b && !_v0.b.b.b) switch(_v0.b.a){
                case "Male":
                    var _v1 = _v0.b;
                    return $elm$core$Maybe$Just(true);
                case "Female":
                    var _v2 = _v0.b;
                    return $elm$core$Maybe$Just(false);
                default:
                    break _v0$2;
            }
            else break _v0$2;
        }
        return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Voice$getVoiceFor = F2(function(voice, lang) {
        return _Utils_eq(lang.old, lang._new) ? $elm$core$Maybe$Just({
            lang: A2($elm$core$Maybe$withDefault, lang.old, $author$project$Lia$Voice$getLang(voice)),
            name: voice,
            translated: false
        }) : _Utils_eq($author$project$Lia$Voice$getLang(voice), $elm$core$Maybe$Just(lang.old)) ? A2($elm$core$Maybe$map, A2($author$project$Lia$Voice$Voice, true, lang._new), A2($author$project$Lia$Voice$getVoiceFromLang, lang._new, $author$project$Lia$Voice$isMale(voice))) : $elm$core$Maybe$Just({
            lang: A2($elm$core$Maybe$withDefault, lang._new, $author$project$Lia$Voice$getLang(voice)),
            name: voice,
            translated: false
        });
    });
    var $tesk9$accessible_html$Accessibility$Aria$label = $tesk9$accessible_html$Accessibility$Utils$aria("label");
    var $author$project$Service$TTS$playback = function(_v0) {
        var voice = _v0.voice;
        var lang = _v0.lang;
        var text = _v0.text;
        return A2($author$project$Service$TTS$event, "playback", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("voice", $elm$json$Json$Encode$string(voice)),
            _Utils_Tuple2("lang", $elm$json$Json$Encode$string(lang)),
            _Utils_Tuple2("text", $elm$json$Json$Encode$string(text))
        ])));
    };
    var $author$project$Lia$Markdown$Effect$View$playBackAttr = F5(function(id, voice, lang, section, command) {
        return A2($elm$html$Html$Attributes$attribute, "onclick", function(event) {
            return "window.LIA.playback(" + (event + ")");
        }(A3($elm$core$String$replace, '"XXX"', command, A2($elm$json$Json$Encode$encode, 0, $author$project$Service$Event$encode(A3($author$project$Service$Event$pushWithId, "effect", section, A3($author$project$Service$Event$pushWithId, "playback", id, $author$project$Service$TTS$playback({
            lang: lang,
            text: "XXX",
            voice: voice
        }))))))));
    });
    var $author$project$Lia$Markdown$Effect$View$inline_playback = F2(function(config, e) {
        if (_Utils_eq(config.speaking, $elm$core$Maybe$Just(e.id))) return A2($elm$html$Html$button, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent icon icon-stop-circle mx-1 py-0"),
            A2($elm$html$Html$Attributes$attribute, "onclick", function(event) {
                return "window.LIA.playback(" + (event + ")");
            }(A2($elm$json$Json$Encode$encode, 0, $author$project$Service$Event$encode(A3($author$project$Service$Event$pushWithId, "effect", config.slide, A3($author$project$Service$Event$pushWithId, "playback", e.id, $author$project$Service$TTS$cancel)))))),
            $tesk9$accessible_html$Accessibility$Key$tabbable(true),
            $tesk9$accessible_html$Accessibility$Aria$label("Stop playback of phrase")
        ]), _List_Nil);
        else {
            var _v0 = A2($elm$core$Maybe$andThen, $author$project$Lia$Voice$getVoiceFor(e.voice), config.translations);
            if (_v0.$ === "Nothing") return A2($elm$html$Html$button, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent icon icon-play-circle mx-1 py-0"),
                A5($author$project$Lia$Markdown$Effect$View$playBackAttr, e.id, e.voice, A2($elm$core$Maybe$withDefault, "en", $author$project$Lia$Voice$getLang(e.voice)), config.slide, "this.labels[0]"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(true),
                $tesk9$accessible_html$Accessibility$Aria$label("Start playback of phrase")
            ]), _List_Nil);
            else {
                var translated = _v0.a.translated;
                var lang = _v0.a.lang;
                var name = _v0.a.name;
                return A2($elm$html$Html$button, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent icon icon-play-circle mx-1 py-0"),
                    A5($author$project$Lia$Markdown$Effect$View$playBackAttr, e.id, name, lang, config.slide, "this.labels[0]"),
                    $tesk9$accessible_html$Accessibility$Key$tabbable(true),
                    $tesk9$accessible_html$Accessibility$Aria$label("Start playback of phrase")
                ]), _List_Nil);
            }
        }
    });
    var $elm$html$Html$label = _VirtualDom_node("label");
    var $author$project$Lia$Markdown$Effect$View$inline = F4(function(config, attr, e, body) {
        if (_Utils_eq(config.visible, $elm$core$Maybe$Nothing)) return A3($author$project$Lia$Markdown$Effect$View$hiddenSpan, false, attr, function() {
            var _v0 = $author$project$Lia$Markdown$Effect$Types$class(e);
            switch(_v0.$){
                case "Animation":
                    return A2($elm$core$List$cons, $author$project$Lia$Markdown$Effect$View$circle_(e.begin), A2($elm$core$List$cons, $elm$html$Html$text(" "), body));
                case "PlayBack":
                    return _List_fromArray([
                        A2($elm$html$Html$label, _List_Nil, A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e), body))
                    ]);
                default:
                    return _List_fromArray([
                        $author$project$Lia$Markdown$Effect$View$circle_(e.begin),
                        A2($elm$html$Html$label, _List_Nil, A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e), body))
                    ]);
            }
        }());
        else {
            var _v1 = $author$project$Lia$Markdown$Effect$Types$class(e);
            switch(_v1.$){
                case "Animation":
                    return A3($author$project$Lia$Markdown$Effect$View$hiddenSpan, !A2($author$project$Lia$Markdown$Effect$Types$isIn, config.visible, e), attr, A2($elm$core$List$cons, $author$project$Lia$Markdown$Effect$View$circle_(e.begin), A2($elm$core$List$cons, $elm$html$Html$text(" "), body)));
                case "PlayBack":
                    return A3($author$project$Lia$Markdown$Effect$View$hiddenSpan, false, attr, _List_fromArray([
                        A2($elm$html$Html$label, _List_Nil, A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e), body))
                    ]));
                default:
                    return A3($author$project$Lia$Markdown$Effect$View$hiddenSpan, !A2($author$project$Lia$Markdown$Effect$Types$isIn, config.visible, e), attr, _List_fromArray([
                        $author$project$Lia$Markdown$Effect$View$circle_(e.begin),
                        A2($elm$html$Html$label, _List_Nil, A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Effect$View$inline_playback, config, e), body))
                    ]));
            }
        }
    });
    var $author$project$Lia$Markdown$Footnote$View$braces = function(key) {
        return $elm$html$Html$text("[" + (key + "]"));
    };
    var $tesk9$accessible_html$Accessibility$Aria$describedBy = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("describedby"), $tesk9$accessible_html$Accessibility$Utils$toListString);
    var $elm$html$Html$sup = _VirtualDom_node("sup");
    var $author$project$Lia$Markdown$Footnote$View$inline = F2(function(key, attr) {
        return A2($elm$html$Html$sup, _List_Nil, _List_fromArray([
            A2($elm$html$Html$button, A2($elm$core$List$append, attr, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding", "2px"),
                $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent text-highlight"),
                A2($elm$html$Html$Attributes$attribute, "onclick", 'window.LIA.showFootnote("' + (key + '");')),
                $elm$html$Html$Attributes$id($author$project$Lia$Markdown$Footnote$View$byKey(key)),
                $tesk9$accessible_html$Accessibility$Aria$describedBy(_List_fromArray([
                    $author$project$Lia$Markdown$Footnote$View$by(key)
                ])),
                $tesk9$accessible_html$Accessibility$Key$tabbable(true)
            ])), _List_fromArray([
                $author$project$Lia$Markdown$Footnote$View$braces(key)
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Inline$View$keyDownEvent = function(msg) {
        return A2($elm$html$Html$Attributes$attribute, "onkeydown", "if(event.key===' '||event.key==='Enter')" + msg);
    };
    var $tesk9$accessible_html$Accessibility$Role$listItem = $tesk9$accessible_html$Accessibility$Utils$role("listitem");
    var $author$project$Lia$Utils$noTranslate = $elm$core$List$append(_List_fromArray([
        A2($elm$html$Html$Attributes$attribute, "class", "notranslate"),
        A2($elm$html$Html$Attributes$attribute, "translate", "no")
    ]));
    var $elm$virtual_dom$VirtualDom$property = F2(function(key, value) {
        return A2(_VirtualDom_property, _VirtualDom_noInnerHtmlOrFormAction(key), _VirtualDom_noJavaScriptOrHtmlJson(value));
    });
    var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
    var $author$project$Lia$Markdown$Inline$View$oembed = F3(function(option, attr, url) {
        return A3($elm$html$Html$node, "lia-embed", _List_fromArray([
            A2($elm$html$Html$Attributes$property, "url", $elm$json$Json$Encode$string(url)),
            A2($elm$html$Html$Attributes$style, "width", A2($elm$core$Maybe$withDefault, "100%", A2($elm$core$Maybe$map, function(o) {
                return o.maxwidth > 0 ? $elm$core$String$fromInt(o.maxwidth) + "px" : "100%";
            }, option))),
            A2($elm$html$Html$Attributes$style, "height", A2($elm$core$Maybe$withDefault, "auto", A2($elm$core$Maybe$map, function(o) {
                return o.maxheight > 0 ? $elm$core$String$fromInt(o.maxheight) + "px" : "auto";
            }, option))),
            A2($elm$html$Html$Attributes$style, "display", "inline-block"),
            A2($elm$html$Html$Attributes$style, "max-height", "100%"),
            A2($elm$html$Html$Attributes$property, "maxwidth", $elm$json$Json$Encode$int(A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, function($) {
                return $.maxwidth;
            }, option)))),
            A2($elm$html$Html$Attributes$property, "maxheight", $elm$json$Json$Encode$int(A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, function($) {
                return $.maxheight;
            }, option)))),
            A2($elm$html$Html$Attributes$property, "thumbnail", $elm$json$Json$Encode$bool(A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function($) {
                return $.thumbnail;
            }, option)))),
            A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$class(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
                return $.scale;
            }, A2($elm$core$Basics$composeR, $elm$core$String$fromFloat, $elm$html$Html$Attributes$attribute("scale"))), option)),
            A2($elm$html$Html$Attributes$attribute, "data-attributes", A2($elm$json$Json$Encode$encode, 0, $elm$json$Json$Encode$object(A2($elm$core$List$map, $elm$core$Tuple$mapSecond($elm$json$Json$Encode$string), attr))))
        ]), _List_Nil);
    });
    var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty("placeholder");
    var $author$project$I18n$Translations$qrCode = function(lang) {
        switch(lang.$){
            case "Am":
                return "QR ኮድ ለድረ ገጽ";
            case "Ar":
                return "رمز الاستجابة السريعة للموقع";
            case "Bg":
                return "QR код за уебсайт";
            case "Bn":
                return "ওয়েবসাইটের জন্য QR কোড";
            case "De":
                return "QR-Code f\xfcr Webseite";
            case "Es":
                return "C\xf3digo QR para sitio web";
            case "Fa":
                return "کد QR برای وب سایت";
            case "Fr":
                return "Code QR pour site web";
            case "Hi":
                return "वेबसाइट के लिए क्यूआर कोड";
            case "Hy":
                return "Վեբ կայքի QR կոդ";
            case "It":
                return "Codice QR del sito web";
            case "Ja":
                return "ウェブサイト用 QR コード";
            case "Ka":
                return "ვებგვერდისთვის QR კოდი";
            case "Ko":
                return "웹 사이트용 QR 코드";
            case "Nl":
                return "QR-code voor website";
            case "Pa":
                return "ਵੈੱਬਸਾਈਟ ਲਈ ਕੁਆਰ ਕੋਡ";
            case "Pt":
                return "C\xf3digo QR para site";
            case "Ru":
                return "QR-код для сайта";
            case "Sw":
                return "Msimbo wa QR wa tovuti";
            case "Tw":
                return "网站二维码";
            case "Uk":
                return "QR -код для веб -сайту";
            case "Ur":
                return "ویب سائٹ کے لیے QR کوڈ";
            case "Zh":
                return "网站二维码";
            default:
                return "QR code for website";
        }
    };
    var $author$project$I18n$Translations$qrErr = function(lang) {
        switch(lang.$){
            case "Am":
                return "ስህተት ያለባቸው በ QR ኮድ ወይም ትክክል አልተመለከተም";
            case "Ar":
                return "خطأ أثناء الترميز إلى رمز الاستجابة السريعة";
            case "Bg":
                return "Грешка при кодирането към QR код";
            case "Bn":
                return "QR কোডে এনকোডিং সমস্যা হয়েছে";
            case "De":
                return "Fehler beim Codieren in QR-Code";
            case "Es":
                return "Error al codificar en c\xf3digo QR";
            case "Fa":
                return "خطا هنگام رمزگذاری روی کد QR";
            case "Fr":
                return "Erreur lors de l'encodage en code QR";
            case "Hi":
                return "क्यूआर कोड को एनकोड करने में त्रुटि";
            case "Hy":
                return "Սխալ QR կոդի կոդավորման ժամանակ";
            case "It":
                return "Errore nel codificare come codice QR";
            case "Ja":
                return "QR コードのエンコード中にエラーが発生しました";
            case "Ka":
                return "შეცდომა QR კოდში კოდირებისას";
            case "Ko":
                return "QR 코드를 만드는 도중 오류가 발생했습니다.";
            case "Nl":
                return "Fout bij het coderen naar QR-code";
            case "Pa":
                return "ਕੁਆਰ ਕੋਡ ਨੂੰ ਏਨਕੋਡ ਕਰਨ ਦੌਰਾਨ ਗਲਤੀ ਆਈ ਹੈ";
            case "Pt":
                return "Erro durante a codifica\xe7\xe3o para o c\xf3digo QR";
            case "Ru":
                return "Ошибка при кодировании в QR-код";
            case "Sw":
                return "Hitilafu wakati wa kusimba msimbo wa QR";
            case "Tw":
                return "编码为二维码时出错";
            case "Uk":
                return "Помилка під час кодування в QR -код";
            case "Ur":
                return "QR کوڈ میں انکوڈ کرتے وقت خرابی";
            case "Zh":
                return "编码为二维码时出错";
            default:
                return "Error while encoding to QR code";
        }
    };
    var $author$project$I18n$Translations$quizSelection = function(lang) {
        switch(lang.$){
            case "Am":
                return "ምረጡ";
            case "Ar":
                return "اختيار";
            case "Bg":
                return "избор";
            case "Bn":
                return "নির্বাচন";
            case "De":
                return "Auswahl";
            case "Es":
                return "selecci\xf3n";
            case "Fa":
                return "انتخاب";
            case "Fr":
                return "S\xe9lection";
            case "Hi":
                return "चयन";
            case "Hy":
                return "ընտրություն";
            case "It":
                return "seleziona";
            case "Ja":
                return "選択";
            case "Ka":
                return "არჩევა";
            case "Ko":
                return "선택";
            case "Nl":
                return "selectie";
            case "Pa":
                return "ਚੋਣ";
            case "Pt":
                return "sele\xe7\xe3o";
            case "Ru":
                return "выбор";
            case "Sw":
                return "uteuzi";
            case "Tw":
                return "选择";
            case "Uk":
                return "вибір";
            case "Ur":
                return "انتخاب";
            case "Zh":
                return "选择";
            default:
                return "selection";
        }
    };
    var $elm$html$Html$s = _VirtualDom_node("s");
    var $author$project$Lia$Utils$shuffle = F2(function(randomize, rows) {
        if (randomize.$ === "Nothing") return rows;
        else {
            var order = randomize.a;
            return A2($elm$core$List$map, $elm$core$Tuple$second, A2($elm$core$List$sortBy, $elm$core$Tuple$first, A3($elm$core$List$map2, $elm$core$Tuple$pair, order, rows)));
        }
    });
    var $elm$html$Html$strong = _VirtualDom_node("strong");
    var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty("target");
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize = 5;
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$appendLastRect = function(_v0) {
        var lastRect = _v0.a;
        var rowLines = _v0.b;
        return A2($elm$core$List$cons, "h" + $elm$core$String$fromInt(lastRect.width * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize), rowLines);
    };
    var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute("d");
    var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS("http://www.w3.org/2000/svg");
    var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode("path");
    var $elm$svg$Svg$Attributes$shapeRendering = _VirtualDom_attribute("shape-rendering");
    var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute("stroke");
    var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute("stroke-width");
    var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode("svg");
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$toRowLines = F2(function(isDark, _v0) {
        var lastRect = _v0.a;
        var rowLines = _v0.b;
        return isDark ? !lastRect.space ? _Utils_Tuple2(_Utils_update(lastRect, {
            width: lastRect.width + 1
        }), rowLines) : _Utils_Tuple2({
            space: 0,
            width: 1
        }, A2($elm$core$List$cons, $elm$core$String$concat(_List_fromArray([
            lastRect.width > 0 ? "h" + $elm$core$String$fromInt(lastRect.width * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize) : "",
            "m",
            $elm$core$String$fromInt(lastRect.space * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize),
            " 0"
        ])), rowLines)) : _Utils_Tuple2(_Utils_update(lastRect, {
            space: lastRect.space + 1
        }), rowLines);
    });
    var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute("transform");
    var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute("viewBox");
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewRow = F3(function(quietZoneSize, rowIndex, rowLines) {
        return A2($elm$core$List$cons, "M0 ", A2($elm$core$List$cons, $elm$core$String$fromInt(rowIndex * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize), rowLines));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase = F3(function(quietZoneSize, extraAttrs, matrix) {
        var quietZonePx = quietZoneSize * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize;
        var sizePx = $elm$core$String$fromInt($elm$core$List$length(matrix) * $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize + 2 * quietZonePx);
        return A2($elm$svg$Svg$svg, _Utils_ap(_List_fromArray([
            $elm$svg$Svg$Attributes$viewBox("0 0 " + (sizePx + (" " + sizePx))),
            $elm$svg$Svg$Attributes$shapeRendering("crispEdges"),
            $elm$svg$Svg$Attributes$stroke("#000"),
            $elm$svg$Svg$Attributes$strokeWidth($elm$core$String$fromInt($pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize) + "px")
        ]), extraAttrs), function(d) {
            return _List_fromArray([
                A2($elm$svg$Svg$path, _List_fromArray([
                    d,
                    $elm$svg$Svg$Attributes$transform("translate(" + ($elm$core$String$fromInt(quietZonePx) + (", " + ($elm$core$String$fromFloat(quietZonePx + $pablohirafuji$elm_qrcode$QRCode$Render$Svg$moduleSize / 2) + ")")))),
                    $elm$svg$Svg$Attributes$strokeWidth("5px")
                ]), _List_Nil)
            ]);
        }($elm$svg$Svg$Attributes$d($elm$core$String$concat($elm$core$List$concat(A2($elm$core$List$indexedMap, $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewRow(quietZoneSize), A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$foldl, $pablohirafuji$elm_qrcode$QRCode$Render$Svg$toRowLines, _Utils_Tuple2({
            space: 0,
            width: 0
        }, _List_Nil)), A2($elm$core$Basics$composeR, $pablohirafuji$elm_qrcode$QRCode$Render$Svg$appendLastRect, $elm$core$List$reverse)), matrix)))))));
    });
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$view = $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase(4);
    var $pablohirafuji$elm_qrcode$QRCode$toSvg = F2(function(extraAttrs, _v0) {
        var matrix = _v0.a.matrix;
        return A2($pablohirafuji$elm_qrcode$QRCode$Render$Svg$view, extraAttrs, matrix);
    });
    var $elm$html$Html$u = _VirtualDom_node("u");
    var $elm$html$Html$video = _VirtualDom_node("video");
    var $author$project$Lia$Markdown$Effect$Script$Types$Edit = F2(function(a, b) {
        return {
            $: "Edit",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$EditCode = F2(function(a, b) {
        return {
            $: "EditCode",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$EditParam = F3(function(a, b, c) {
        return {
            $: "EditParam",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Code$Editor$editor = function(attr) {
        return A2($elm$html$Html$node, "lia-editor", A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "display", "block"), attr));
    };
    var $author$project$Lia$Markdown$Code$Editor$boolean = function(prop) {
        return A2($elm$core$Basics$composeR, $elm$json$Json$Encode$bool, $elm$html$Html$Attributes$property(prop));
    };
    var $author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion = $author$project$Lia$Markdown$Code$Editor$boolean("enableBasicAutocompletion");
    var $author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion = $author$project$Lia$Markdown$Code$Editor$boolean("enableLiveAutocompletion");
    var $author$project$Lia$Markdown$Code$Editor$enableSnippets = $author$project$Lia$Markdown$Code$Editor$boolean("enableSnippets");
    var $author$project$Lia$Markdown$Code$Editor$extensions = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$list($elm$json$Json$Encode$string), $elm$html$Html$Attributes$property("extensions"));
    var $author$project$Lia$Markdown$Code$Editor$focusing = A2($author$project$Lia$Markdown$Code$Editor$boolean, "focusing", true);
    var $author$project$Lia$Markdown$Code$Editor$maxLines = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$int, $elm$html$Html$Attributes$property("maxLines"));
    var $author$project$Lia$Markdown$Code$Editor$mode = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("mode"));
    var $author$project$Lia$Markdown$Code$Editor$onChange = function(msg) {
        return A2($elm$html$Html$Events$on, "editorUpdate", A2($elm$json$Json$Decode$map, msg, A2($elm$json$Json$Decode$at, _List_fromArray([
            "detail"
        ]), $elm$json$Json$Decode$string)));
    };
    var $author$project$Lia$Markdown$Code$Editor$showGutter = $author$project$Lia$Markdown$Code$Editor$boolean("showGutter");
    var $author$project$Lia$Markdown$Code$Editor$theme = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("theme"));
    var $author$project$Lia$Markdown$Code$Editor$useSoftTabs = $author$project$Lia$Markdown$Code$Editor$boolean("useSoftTabs");
    var $author$project$Lia$Markdown$Code$Editor$value = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("value"));
    var $author$project$Lia$Markdown$Effect$Script$View$editor = F5(function(theme, mode, id, subPattern, code) {
        var _v0 = function() {
            if (subPattern.$ === "Just") {
                var str = subPattern.a;
                return A2($elm$core$Maybe$withDefault, _Utils_Tuple2($author$project$Lia$Markdown$Effect$Script$Types$EditCode(id), code), A2($elm$core$Maybe$map, $elm$core$Tuple$pair(A2($author$project$Lia$Markdown$Effect$Script$Types$EditParam, id, str)), A2($elm_community$list_extra$List$Extra$getAt, 1, A2($elm$core$String$split, str, code))));
            } else return _Utils_Tuple2($author$project$Lia$Markdown$Effect$Script$Types$EditCode(id), code);
        }();
        var msg = _v0.a;
        var value = _v0.b;
        return A3($author$project$Lia$Utils$modal, A2($author$project$Lia$Markdown$Effect$Script$Types$Edit, false, id), $elm$core$Maybe$Nothing, _List_fromArray([
            A2($author$project$Lia$Markdown$Code$Editor$editor, _List_fromArray([
                $author$project$Lia$Markdown$Code$Editor$onChange(msg),
                $author$project$Lia$Markdown$Code$Editor$value(value),
                $author$project$Lia$Markdown$Code$Editor$theme(A2($elm$core$Maybe$withDefault, "crimson_editor", theme)),
                $author$project$Lia$Markdown$Code$Editor$focusing,
                $author$project$Lia$Markdown$Code$Editor$mode(mode),
                $author$project$Lia$Markdown$Code$Editor$maxLines(16),
                $author$project$Lia$Markdown$Code$Editor$showGutter(true),
                $author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
                $author$project$Lia$Markdown$Code$Editor$enableBasicAutocompletion(true),
                $author$project$Lia$Markdown$Code$Editor$enableLiveAutocompletion(true),
                $author$project$Lia$Markdown$Code$Editor$enableSnippets(true),
                $author$project$Lia$Markdown$Code$Editor$extensions(_List_fromArray([
                    "language_tools"
                ])),
                A2($elm$html$Html$Attributes$style, "width", "96%"),
                A2($elm$html$Html$Attributes$style, "max-width", "900px"),
                $elm$html$Html$Attributes$class("notranslate")
            ]), _List_Nil)
        ]));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Value = F3(function(a, b, c) {
        return {
            $: "Value",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Activate = F2(function(a, b) {
        return {
            $: "Activate",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Delay = F2(function(a, b) {
        return {
            $: "Delay",
            a: a,
            b: b
        };
    });
    var $elm$html$Html$Events$onBlur = function(msg) {
        return A2($elm$html$Html$Events$on, "blur", $elm$json$Json$Decode$succeed(msg));
    };
    var $author$project$Lia$Markdown$Effect$Script$View$onActivate = function(bool) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$Activate(bool), A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$Delay(200), bool ? $elm$html$Html$Events$onClick : $elm$html$Html$Events$onBlur));
    };
    var $author$project$Lia$Utils$isEnter = F2(function(msg, code) {
        return code === 13 ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail("not ENTER");
    });
    var $author$project$Lia$Utils$onEnter = function(msg) {
        return A2($elm$html$Html$Events$on, "keyup", A2($elm$json$Json$Decode$andThen, $author$project$Lia$Utils$isEnter(msg), $elm$html$Html$Events$keyCode));
    };
    var $author$project$Lia$Markdown$Effect$Script$Input$type_ = function(t) {
        switch(t.$){
            case "Button_":
                if (!t.a) return "button";
                else return "submit";
            case "Checkbox_":
                return "checkbox";
            case "Color_":
                return "color";
            case "Date_":
                return "date";
            case "DatetimeLocal_":
                return "datetime-local";
            case "Email_":
                return "email";
            case "File_":
                return "file";
            case "Hidden_":
                return "hidden";
            case "Image_":
                return "image";
            case "Month_":
                return "month";
            case "Number_":
                return "number";
            case "Password_":
                return "password";
            case "Radio_":
                return "radio";
            case "Range_":
                return "range";
            case "Search_":
                return "search";
            case "Select_":
                return "select";
            case "Tel_":
                return "tel";
            case "Text_":
                return "text";
            case "Textarea_":
                return "textarea";
            case "Time_":
                return "time";
            case "Url_":
                return "url";
            default:
                return "week";
        }
    };
    var $author$project$Lia$Markdown$Effect$Script$View$base = F4(function(input_, id, attr, value) {
        return A2($elm$html$Html$input, A2($elm$core$List$append, _List_fromArray([
            $elm$html$Html$Events$onInput(A2($author$project$Lia$Markdown$Effect$Script$Types$Value, id, input_.updateOnChange)),
            $elm$html$Html$Attributes$type_(A2($elm$core$Maybe$withDefault, "text", A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Effect$Script$Input$type_, input_.type_))),
            $elm$html$Html$Attributes$class(A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function(i) {
                var _v0 = $author$project$Lia$Markdown$Effect$Script$Input$type_(i);
                switch(_v0){
                    case "range":
                        return "lia-range";
                    case "radio":
                        return "lia-radio";
                    case "color":
                        return "";
                    default:
                        return "lia-input";
                }
            }, input_.type_))),
            $elm$html$Html$Attributes$value(value),
            A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
            $elm$html$Html$Attributes$id("lia-focus"),
            $author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Effect$Script$Types$NoOp),
            $author$project$Lia$Utils$onEnter(A2($author$project$Lia$Markdown$Effect$Script$Types$Activate, false, id))
        ]), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)), _List_Nil);
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Checkbox = F3(function(a, b, c) {
        return {
            $: "Checkbox",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$html$Html$Attributes$autofocus = $elm$html$Html$Attributes$boolProperty("autofocus");
    var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty("checked");
    var $elm$html$Html$Events$targetChecked = A2($elm$json$Json$Decode$at, _List_fromArray([
        "target",
        "checked"
    ]), $elm$json$Json$Decode$bool);
    var $elm$html$Html$Events$onCheck = function(tagger) {
        return A2($elm$html$Html$Events$on, "change", A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetChecked));
    };
    var $author$project$Lia$Markdown$Effect$Script$View$checkbox = F4(function(updateOnChange, id, value, _v0) {
        var list = A2($elm$core$Maybe$withDefault, _List_Nil, $author$project$Lia$Markdown$Effect$Script$Input$decodeList(value));
        return A2($elm$core$Basics$composeR, $elm$core$List$map(function(o) {
            return A2($elm$html$Html$label, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label mr-1")
            ]), _List_fromArray([
                A2($elm$html$Html$input, _List_fromArray([
                    $elm$html$Html$Attributes$value(o),
                    $elm$html$Html$Attributes$type_("checkbox"),
                    $elm$html$Html$Events$onCheck($elm$core$Basics$always(A3($author$project$Lia$Markdown$Effect$Script$Types$Checkbox, id, updateOnChange, o))),
                    $elm$html$Html$Attributes$checked(A2($elm$core$List$member, o, list)),
                    A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
                    $elm$html$Html$Attributes$autofocus(true),
                    $elm$html$Html$Attributes$class("lia-checkbox")
                ]), _List_Nil),
                $elm$html$Html$text(o)
            ]));
        }), $elm$html$Html$span(_List_fromArray([
            $elm$html$Html$Attributes$class("flex items-center")
        ])));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Radio = F3(function(a, b, c) {
        return {
            $: "Radio",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Effect$Script$View$radio = F4(function(updateOnChange, id, value, _v0) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map(function(o) {
            return A2($elm$html$Html$label, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label mr-1")
            ]), _List_fromArray([
                A2($elm$html$Html$input, _List_fromArray([
                    $elm$html$Html$Attributes$value(o),
                    $elm$html$Html$Attributes$type_("radio"),
                    $elm$html$Html$Events$onCheck($elm$core$Basics$always(A3($author$project$Lia$Markdown$Effect$Script$Types$Radio, id, updateOnChange, o))),
                    $elm$html$Html$Attributes$checked(_Utils_eq(o, value)),
                    A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
                    $elm$html$Html$Attributes$autofocus(true),
                    $elm$html$Html$Attributes$class("lia-radio")
                ]), _List_Nil),
                $elm$html$Html$text(o)
            ]));
        }), $elm$html$Html$span(_List_fromArray([
            $elm$html$Html$Attributes$class("flex items-center")
        ])));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Click = function(a) {
        return {
            $: "Click",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$View$class = function(node) {
        return !_Utils_eq(node.input.type_, $elm$core$Maybe$Nothing) && !_Utils_eq(node.modify, $author$project$Lia$Markdown$Effect$Script$Types$No) ? "lia-script lia-script--with-border" : !_Utils_eq(node.input.type_, $elm$core$Maybe$Nothing) ? "lia-script lia-script--border" : !_Utils_eq(node.modify, $author$project$Lia$Markdown$Effect$Script$Types$No) ? "lia-script" : "";
    };
    var $author$project$Lia$Markdown$Effect$Script$Types$isError = function(stdout) {
        if (stdout.$ === "Error") return true;
        else return false;
    };
    var $elm$html$Html$Events$onDoubleClick = function(msg) {
        return A2($elm$html$Html$Events$on, "dblclick", $elm$json$Json$Decode$succeed(msg));
    };
    var $author$project$Lia$Markdown$Effect$Script$View$onEdit = function(bool) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$Edit(bool), bool ? $elm$html$Html$Events$onDoubleClick : A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Effect$Script$Types$Delay(300), $elm$html$Html$Events$onBlur));
    };
    var $elm$html$Html$output = _VirtualDom_node("output");
    var $author$project$Lia$Markdown$Effect$Script$Intl$node = F2(function(attr, value) {
        return A3($elm$html$Html$node, "lia-format", A2($elm$core$List$cons, A2($elm$html$Html$Attributes$property, "value", $elm$json$Json$Encode$string(value)), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)), _List_fromArray([
            $elm$html$Html$text(value)
        ]));
    });
    var $author$project$Lia$Markdown$Effect$Script$Intl$view = function(intl) {
        if (intl.$ === "Nothing") return $elm$html$Html$text;
        else {
            var attr = intl.a;
            return $author$project$Lia$Markdown$Effect$Script$Intl$node(attr);
        }
    };
    var $author$project$Lia$Markdown$Effect$Script$View$script = F5(function(config, withStyling, attr, id, node) {
        var _v0 = node.result;
        if (_v0.$ === "Nothing") return $elm$html$Html$text("");
        else {
            var result = _v0.a;
            return A2($elm$html$Html$output, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, function() {
                var _v2 = node.input.type_;
                if (_v2.$ === "Nothing") return false;
                else {
                    if (_v2.a.$ === "Button_") return false;
                    else return true;
                }
            }(), A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, true, id), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, $author$project$Lia$Markdown$Effect$Script$Types$isError(result), A2($elm$html$Html$Attributes$style, "color", "red"), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, !_Utils_eq(node.modify, $author$project$Lia$Markdown$Effect$Script$Types$No), A2($author$project$Lia$Markdown$Effect$Script$View$onEdit, true, id), A2($elm$core$List$append, function() {
                var _v1 = node.input.type_;
                if (_v1.$ === "Just") {
                    if (_v1.a.$ === "Button_") return _List_fromArray([
                        $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Effect$Script$Types$Click(id))
                    ]);
                    else return _List_Nil;
                } else return _List_Nil;
            }(), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, withStyling ? $author$project$Lia$Markdown$Effect$Script$View$class(node) : "", attr))))), _List_fromArray([
                !withStyling ? A2($author$project$Lia$Utils$icon, "icon-chevron-double-right", _List_Nil) : $elm$html$Html$text(""),
                function() {
                    switch(result.$){
                        case "Text":
                            var str = result.a;
                            return A2($author$project$Lia$Markdown$Effect$Script$Intl$view, node.intl, str);
                        case "Error":
                            var str = result.a;
                            return $elm$html$Html$text(str);
                        case "HTML":
                            var str = result.a;
                            return A2($elm$html$Html$span, _List_fromArray([
                                A2($elm$html$Html$Attributes$property, "innerHTML", $elm$json$Json$Encode$string(str))
                            ]), _List_Nil);
                        default:
                            var lia = result.a;
                            var _v4 = config.view;
                            if (_v4.$ === "Just") {
                                var inline = _v4.a;
                                return A2($elm$html$Html$span, _List_Nil, A3(inline, config.slide, id, lia));
                            } else return $elm$html$Html$text("todo");
                    }
                }()
            ]));
        }
    });
    var $author$project$Lia$Markdown$Effect$Script$View$attributes = F3(function(updateOnChange, id, value) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$HTML$Attributes$annotation(""), $elm$core$List$append(_List_fromArray([
            $elm$html$Html$Events$onInput(A2($author$project$Lia$Markdown$Effect$Script$Types$Value, id, updateOnChange)),
            A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
            $elm$html$Html$Attributes$value(value),
            $elm$html$Html$Attributes$id("lia-focus"),
            $author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Effect$Script$Types$NoOp)
        ])));
    });
    var $elm$html$Html$option = _VirtualDom_node("option");
    var $elm$html$Html$select = _VirtualDom_node("select");
    var $author$project$Lia$Markdown$Effect$Script$View$select = F3(function(id, value, attr) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map(function(o) {
            return A2($elm$html$Html$option, _List_fromArray([
                $elm$html$Html$Attributes$value(o)
            ]), _List_fromArray([
                $elm$html$Html$text(o)
            ]));
        }), $elm$html$Html$select(A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-select"), A4($author$project$Lia$Markdown$Effect$Script$View$attributes, true, id, value, attr))));
    });
    var $author$project$Lia$Markdown$Effect$Script$Types$Reset = function(a) {
        return {
            $: "Reset",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$Script$View$reset = function(id) {
        return A2($elm$html$Html$button, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-script__refresh icon icon-refresh"),
            $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Effect$Script$Types$Reset(id))
        ]), _List_Nil);
    };
    var $author$project$Lia$Markdown$Effect$Script$View$span = F5(function(config, attr, id, node, control) {
        return A2($elm$html$Html$span, _List_fromArray([
            $elm$html$Html$Attributes$class($author$project$Lia$Markdown$Effect$Script$View$class(node))
        ]), _List_fromArray([
            $author$project$Lia$Markdown$Effect$Script$View$reset(id),
            control,
            A5($author$project$Lia$Markdown$Effect$Script$View$script, config, false, attr, id, node)
        ]));
    });
    var $elm$html$Html$textarea = _VirtualDom_node("textarea");
    var $author$project$Lia$Markdown$Effect$Script$View$textarea = F4(function(id, value, attr, updateOnChange) {
        return A2($elm$html$Html$textarea, A4($author$project$Lia$Markdown$Effect$Script$View$attributes, updateOnChange, id, value, attr), _List_Nil);
    });
    var $author$project$Lia$Markdown$Effect$Script$View$input = F4(function(config, attr, id, node) {
        var _v0 = node.input.type_;
        if (_v0.$ === "Just") switch(_v0.a.$){
            case "Button_":
                return A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node);
            case "Checkbox_":
                if (!_v0.a.a.b) return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A2($elm$html$Html$span, _List_fromArray([
                    $elm$html$Html$Attributes$class("flex items-center")
                ]), _List_fromArray([
                    A2($elm$html$Html$input, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-checkbox"),
                        $elm$html$Html$Attributes$checked(node.input.value === "true"),
                        $elm$html$Html$Attributes$type_("checkbox"),
                        A2($author$project$Lia$Markdown$Effect$Script$View$onActivate, false, id),
                        $elm$html$Html$Attributes$id("lia-focus"),
                        $elm$html$Html$Events$onCheck(function(b) {
                            return A3($author$project$Lia$Markdown$Effect$Script$Types$Value, id, node.input.updateOnChange, b ? "true" : "false");
                        })
                    ]), _List_Nil)
                ])));
                else {
                    var options = _v0.a.a;
                    return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A5($author$project$Lia$Markdown$Effect$Script$View$checkbox, node.input.updateOnChange, id, node.input.value, attr, options));
                }
            case "Radio_":
                var options = _v0.a.a;
                return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A5($author$project$Lia$Markdown$Effect$Script$View$radio, node.input.updateOnChange, id, node.input.value, attr, options));
            case "Select_":
                var options = _v0.a.a;
                return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A4($author$project$Lia$Markdown$Effect$Script$View$select, id, node.input.value, attr, options));
            case "Textarea_":
                var _v1 = _v0.a;
                return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A4($author$project$Lia$Markdown$Effect$Script$View$textarea, id, node.input.value, attr, node.input.updateOnChange));
            default:
                return A5($author$project$Lia$Markdown$Effect$Script$View$span, config, attr, id, node, A4($author$project$Lia$Markdown$Effect$Script$View$base, node.input, id, attr, node.input.value));
        }
        else return A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node);
    });
    var $author$project$Lia$Markdown$Effect$Script$Input$isHidden = A2($elm$core$Basics$composeR, function($) {
        return $.type_;
    }, $elm$core$Basics$eq($elm$core$Maybe$Just($author$project$Lia$Markdown$Effect$Script$Input$Hidden_)));
    var $author$project$Lia$Markdown$Effect$Script$View$view = F3(function(config, id, attr) {
        var _v0 = A2($elm$core$Array$get, id, config.scripts);
        if (_v0.$ === "Just") {
            var node = _v0.a;
            var _v1 = node.result;
            if (_v1.$ === "Just") return node.edit ? A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("flex items-center")
            ]), _List_fromArray([
                A5($author$project$Lia$Markdown$Effect$Script$View$editor, config.theme, node.highlighting, id, function() {
                    var _v2 = node.modify;
                    if (_v2.$ === "Partially") {
                        var pattern = _v2.a;
                        return $elm$core$Maybe$Just(pattern);
                    } else return $elm$core$Maybe$Nothing;
                }(), node.script),
                $author$project$Lia$Markdown$Effect$Script$Input$isHidden(node.input) ? $elm$html$Html$text("") : A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node)
            ])) : $author$project$Lia$Markdown$Effect$Script$Input$isHidden(node.input) ? $elm$html$Html$text("") : node.input.active ? A4($author$project$Lia$Markdown$Effect$Script$View$input, config, attr, id, node) : A5($author$project$Lia$Markdown$Effect$Script$View$script, config, true, attr, id, node);
            else return $elm$html$Html$text("");
        } else return $elm$html$Html$text("");
    });
    var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode("foreignObject");
    var $author$project$Lia$Markdown$HTML$View$view = F4(function(containerX, fn, attr, obj) {
        switch(obj.$){
            case "Node":
                var name = obj.a;
                var attrs = obj.b;
                var children = obj.c;
                return A3($elm$html$Html$node, name, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(A2($elm$core$List$append, attrs, attr)), A2($elm$core$List$map, fn, children));
            case "InnerHtml":
                var content = obj.a;
                return A2(containerX, _List_fromArray([
                    A2($elm$html$Html$Attributes$property, "innerHTML", $elm$json$Json$Encode$string(content))
                ]), _List_Nil);
            case "OuterHtml":
                var name = obj.a;
                var attrs = obj.b;
                var body = obj.c;
                return A3($elm$html$Html$node, name, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(A2($elm$core$List$append, attrs, attr)), _List_fromArray([
                    $elm$html$Html$text(body)
                ]));
            default:
                var attrs = obj.a;
                var body = obj.b;
                var foreignObjects = obj.c;
                return A3($elm$html$Html$Keyed$node, "div", _List_Nil, _List_fromArray([
                    _Utils_Tuple2(body, A2($elm$svg$Svg$svg, A2($elm$core$List$cons, A2($elm$html$Html$Attributes$property, "innerHTML", $elm$json$Json$Encode$string(body)), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attrs)), A2($elm$core$List$map, function(_v1) {
                        var foreignAttributes = _v1.a;
                        var foreignObject = _v1.b;
                        return A2($elm$svg$Svg$foreignObject, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(foreignAttributes), A2($elm$core$List$map, fn, foreignObject));
                    }, foreignObjects)))
                ]));
        }
    });
    var $elm$html$Html$Attributes$width = function(n) {
        return A2(_VirtualDom_attribute, "width", $elm$core$String$fromInt(n));
    };
    var $author$project$Lia$Markdown$Inline$View$figure = F5(function(config, title_, width, dataType, element) {
        return A2($elm$html$Html$figure, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($elm$core$Maybe$map, $elm$html$Html$Attributes$width, width), _List_fromArray([
            $elm$html$Html$Attributes$class("lia-figure")
        ])), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-figure__media"),
                A2($elm$html$Html$Attributes$attribute, "data-media-type", dataType)
            ]), _List_fromArray([
                element
            ])),
            A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$html$Html$figcaption(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-figure__caption")
            ]))), title_))
        ]));
    });
    var $author$project$Lia$Markdown$Inline$View$getOption = F3(function(config, id, list) {
        getOption: while(true){
            var _v22 = _Utils_Tuple2(id, list);
            if (_v22.b.b) {
                if (!_v22.a) {
                    var _v23 = _v22.b;
                    var x = _v23.a;
                    return A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$viewer, config, x));
                } else {
                    var i = _v22.a;
                    var _v24 = _v22.b;
                    var xs = _v24.b;
                    var $temp$config = config, $temp$id = i - 1, $temp$list = xs;
                    config = $temp$config;
                    id = $temp$id;
                    list = $temp$list;
                    continue getOption;
                }
            } else return A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$quizSelection(config.lang))
            ]));
        }
    });
    var $author$project$Lia$Markdown$Inline$View$htmlView = function(config) {
        return A2($author$project$Lia$Markdown$HTML$View$view, $elm$html$Html$span, $author$project$Lia$Markdown$Inline$View$view(config));
    };
    var $author$project$Lia$Markdown$Inline$View$link = F5(function(config, alt_, url_, title_, attr) {
        return function(a) {
            return a(A2($author$project$Lia$Markdown$Inline$View$viewer, config, alt_));
        }($elm$html$Html$a(A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($elm$core$List$cons, $elm$html$Html$Attributes$href(url_), A2($elm$core$List$cons, $elm$html$Html$Attributes$target(A2($elm$core$String$startsWith, "#", url_) ? "" : "_blank"), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-link", attr))))));
    });
    var $author$project$Lia$Markdown$Inline$View$printLink = F4(function(config, alt_, title_, url_) {
        return A2($elm$html$Html$a, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), _List_fromArray([
            $elm$html$Html$Attributes$class("lia-link lia-print-only"),
            $elm$html$Html$Attributes$href(url_)
        ])), A2($author$project$Lia$Markdown$Inline$View$viewer, config, alt_));
    });
    var $author$project$Lia$Markdown$Inline$View$reference = F3(function(config, ref, attr) {
        switch(ref.$){
            case "Link":
                var alt_ = ref.a;
                var url_ = ref.b;
                var title_ = ref.c;
                return A5($author$project$Lia$Markdown$Inline$View$view_url, _Utils_update(config, {
                    image_zoom: false
                }), alt_, url_, title_, attr);
            case "Mail":
                var alt_ = ref.a;
                var url_ = ref.b;
                var title_ = ref.c;
                return A5($author$project$Lia$Markdown$Inline$View$view_url, _Utils_update(config, {
                    image_zoom: false
                }), alt_, url_, title_, attr);
            case "Image":
                var alt_ = ref.a;
                var url_ = ref.b;
                var title_ = ref.c;
                var width = A2($elm$core$Maybe$map, $elm$core$Tuple$first, A2($elm$core$Dict$get, url_, config.media));
                return A5($author$project$Lia$Markdown$Inline$View$figure, config, title_, width, "image", A6($author$project$Lia$Markdown$Inline$View$img, config, attr, alt_, url_, title_, width));
            case "Audio":
                var alt_ = ref.a;
                var _v19 = ref.b;
                var tube = _v19.a;
                var url_ = _v19.b;
                var title_ = ref.c;
                return A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url_)
                ]), _List_fromArray([
                    A5($author$project$Lia$Markdown$Inline$View$figure, config, title_, $elm$core$Maybe$Nothing, "audio", tube ? A2($elm$html$Html$iframe, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($elm$core$List$cons, $elm$html$Html$Attributes$src(url_), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "allowfullscreen", ""), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "width", "100%"), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-audio", attr))))))), _List_Nil) : A2($author$project$Lia$Markdown$Inline$View$audio, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-audio", attr))), {
                        controls: true,
                        errorHandling: true,
                        preload: "none",
                        url: url_
                    }))
                ]));
            case "Movie":
                var alt_ = ref.a;
                var _v20 = ref.b;
                var tube = _v20.a;
                var url_ = _v20.b;
                var title_ = ref.c;
                return A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url_)
                ]), _List_fromArray([
                    tube ? A5($author$project$Lia$Markdown$Inline$View$figure, config, title_, $elm$core$Maybe$Nothing, "iframe", A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-iframe-wrapper")
                    ]), _List_fromArray([
                        A2($elm$html$Html$iframe, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($elm$core$List$cons, $elm$html$Html$Attributes$src(A2($author$project$Lia$Markdown$Inline$View$addTranslation, config, url_)), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "allowfullscreen", ""), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)))))), A2($author$project$Lia$Markdown$Inline$View$viewer, config, alt_))
                    ]))) : A5($author$project$Lia$Markdown$Inline$View$figure, config, title_, $elm$core$Maybe$Nothing, "movie", A3($elm$html$Html$Keyed$node, "div", _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-video-wrapper")
                    ]), _List_fromArray([
                        _Utils_Tuple2(url_, A2($elm$html$Html$video, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($elm$core$List$cons, $elm$html$Html$Attributes$controls(true), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "preload", "none"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr))))), _List_fromArray([
                            A2($elm$html$Html$source, _List_fromArray([
                                $elm$html$Html$Attributes$src(url_),
                                A2($author$project$Lia$Markdown$Inline$View$onError, "video", url_)
                            ]), _List_Nil)
                        ])))
                    ])))
                ]));
            case "Embed":
                var alt_ = ref.a;
                var url = ref.b;
                var title_ = ref.c;
                return A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url)
                ]), _List_fromArray([
                    A2($elm$html$Html$figure, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-figure"),
                        A2($elm$html$Html$Attributes$style, "height", "auto"),
                        A2($elm$html$Html$Attributes$style, "width", "100%")
                    ]), _List_fromArray([
                        A2($elm$html$Html$div, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-figure__media")
                        ]), _List_fromArray([
                            A4($author$project$Lia$Markdown$Inline$View$printLink, config, alt_, title_, url),
                            A3($author$project$Lia$Markdown$Inline$View$oembed, config.oEmbed, attr, url),
                            A2($elm$html$Html$figcaption, _List_fromArray([
                                $elm$html$Html$Attributes$class("lia-figure__caption")
                            ]), function() {
                                if (title_.$ === "Just") {
                                    var sub = title_.a;
                                    return A2($author$project$Lia$Markdown$Inline$View$viewer, config, sub);
                                } else return _List_fromArray([
                                    A2($elm$html$Html$a, _List_fromArray([
                                        $elm$html$Html$Attributes$href(url),
                                        $elm$html$Html$Attributes$target("blank_")
                                    ]), _List_fromArray([
                                        $elm$html$Html$text(url)
                                    ]))
                                ]);
                            }())
                        ]))
                    ]))
                ]));
            case "Preview_Lia":
                var url = ref.a;
                return A3($elm$html$Html$node, "preview-lia", A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "src", url), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "", attr)), _List_Nil);
            case "Preview_Link":
                var url = ref.a;
                return A3($elm$html$Html$Keyed$node, "preview-link", A2($elm$core$List$cons, A2($elm$html$Html$Attributes$attribute, "src", url), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "", attr)), _List_Nil);
            default:
                var url = ref.a;
                var title_ = ref.b;
                return A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url)
                ]), _List_fromArray([
                    A5($author$project$Lia$Markdown$Inline$View$figure, config, title_, $elm$core$Maybe$Just(300), "image", A2($elm$html$Html$a, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A2($elm$core$List$cons, $elm$html$Html$Attributes$href(url), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "width", "300px"), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "display", "inline-block"), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "background-color", "white"), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-link", attr)))))), _List_fromArray([
                        A2($elm$core$Result$withDefault, $elm$html$Html$text($author$project$I18n$Translations$qrErr(config.lang)), A2($elm$core$Result$map, $pablohirafuji$elm_qrcode$QRCode$toSvg(_List_fromArray([
                            $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$qrCode(config.lang) + (": " + url))
                        ])), $pablohirafuji$elm_qrcode$QRCode$fromString(url)))
                    ])))
                ]));
        }
    });
    var $author$project$Lia$Markdown$Inline$View$showOption = F3(function(config, id1, id2) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), A2($elm$core$Basics$composeR, $elm$html$Html$div(_List_Nil), A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$div(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-dropdown__option"),
            A2($elm$html$Html$Attributes$attribute, "onclick", A3(config.input.on, "choose", id1, $elm$core$String$fromInt(id2))),
            $tesk9$accessible_html$Accessibility$Role$listItem,
            $elm$html$Html$Attributes$tabindex(0),
            $author$project$Lia$Markdown$Inline$View$keyDownEvent(A3(config.input.on, "choose", id1, $elm$core$String$fromInt(id2)))
        ])))));
    });
    var $author$project$Lia$Markdown$Inline$View$view = F2(function(config, element) {
        view: while(true)switch(element.$){
            case "Chars":
                if (!element.b.b) {
                    var e = element.a;
                    return $elm$html$Html$text(e);
                } else {
                    var e = element.a;
                    var attr = element.b;
                    var $temp$config = config, $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$Types$Chars, e, _List_Nil)
                    ]), attr);
                    config = $temp$config;
                    element = $temp$element;
                    continue view;
                }
            case "Bold":
                if (element.a.$ === "Chars" && !element.a.b.b) {
                    var _v13 = element.a;
                    var e = _v13.a;
                    var attr = element.b;
                    return A2($elm$html$Html$strong, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-bold", attr), _List_fromArray([
                        $elm$html$Html$text(e)
                    ]));
                } else {
                    var e = element.a;
                    var attr = element.b;
                    return A2($elm$html$Html$strong, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-bold", attr), _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion(), config, e)
                    ]));
                }
            case "Italic":
                if (element.a.$ === "Chars" && !element.a.b.b) {
                    var _v14 = element.a;
                    var e = _v14.a;
                    var attr = element.b;
                    return A2($elm$html$Html$em, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-italic", attr), _List_fromArray([
                        $elm$html$Html$text(e)
                    ]));
                } else {
                    var e = element.a;
                    var attr = element.b;
                    return A2($elm$html$Html$em, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-italic", attr), _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion(), config, e)
                    ]));
                }
            case "Strike":
                if (element.a.$ === "Chars" && !element.a.b.b) {
                    var _v15 = element.a;
                    var e = _v15.a;
                    var attr = element.b;
                    return A2($elm$html$Html$s, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-strike", attr), _List_fromArray([
                        $elm$html$Html$text(e)
                    ]));
                } else {
                    var e = element.a;
                    var attr = element.b;
                    return A2($elm$html$Html$s, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-strike", attr), _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion(), config, e)
                    ]));
                }
            case "Underline":
                if (element.a.$ === "Chars" && !element.a.b.b) {
                    var _v16 = element.a;
                    var e = _v16.a;
                    var attr = element.b;
                    return A2($elm$html$Html$u, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-underline", attr), _List_fromArray([
                        $elm$html$Html$text(e)
                    ]));
                } else {
                    var e = element.a;
                    var attr = element.b;
                    return A2($elm$html$Html$u, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-underline", attr), _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion(), config, e)
                    ]));
                }
            case "Superscript":
                if (element.a.$ === "Chars" && !element.a.b.b) {
                    var _v17 = element.a;
                    var e = _v17.a;
                    var attr = element.b;
                    return A2($elm$html$Html$sup, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-superscript", attr), _List_fromArray([
                        $elm$html$Html$text(e)
                    ]));
                } else {
                    var e = element.a;
                    var attr = element.b;
                    return A2($elm$html$Html$sup, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-superscript", attr), _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion(), config, e)
                    ]));
                }
            case "Verbatim":
                var e = element.a;
                var attr = element.b;
                return A2($elm$html$Html$code, $author$project$Lia$Utils$noTranslate(A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-code lia-code--inline", attr)), _List_fromArray([
                    $elm$html$Html$text(e)
                ]));
            case "Ref":
                var e = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Inline$View$reference, config, e, attr);
            case "FootnoteMark":
                var e = element.a;
                var attr = element.b;
                return A2($author$project$Lia$Markdown$Footnote$View$inline, e, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr));
            case "Container":
                var list = element.a;
                var attr = element.b;
                return A2($elm$html$Html$span, A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "left", "initial"), A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "text-decoration", "inherit"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr))), A2($author$project$Lia$Markdown$Inline$View$viewer, config, list));
            case "IHTML":
                var node = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Inline$View$htmlView, config, attr, node);
            case "EInline":
                var e = element.a;
                var attr = element.b;
                return A4($author$project$Lia$Markdown$Effect$View$inline, config, attr, e, A2($author$project$Lia$Markdown$Inline$View$viewer, config, e.content));
            case "Script":
                var id = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Effect$Script$View$view, config, id, attr);
            case "Symbol":
                if (!element.b.b) {
                    var e = element.a;
                    return $elm$html$Html$text(e);
                } else {
                    var e = element.a;
                    var attr = element.b;
                    var $temp$config = config, $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, _List_fromArray([
                        A2($author$project$Lia$Markdown$Inline$Types$Symbol, e, _List_Nil)
                    ]), attr);
                    config = $temp$config;
                    element = $temp$element;
                    continue view;
                }
            case "Formula":
                if (!element.c.b) {
                    var mode_ = element.a;
                    var e = element.b;
                    return A3($elm$html$Html$node, "lia-formula", _List_fromArray([
                        A2($elm$html$Html$Attributes$attribute, "displayMode", mode_),
                        $elm$html$Html$Attributes$class("notranslate"),
                        A2($elm$html$Html$Attributes$attribute, "translate", "no"),
                        A2($elm$html$Html$Attributes$property, "formula", $elm$json$Json$Encode$string(e)),
                        A2($elm$html$Html$Attributes$property, "macros", A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, config.formulas))
                    ]), _List_Nil);
                } else {
                    var mode_ = element.a;
                    var e = element.b;
                    var attr = element.c;
                    var $temp$config = config, $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, _List_fromArray([
                        A3($author$project$Lia$Markdown$Inline$Types$Formula, mode_, e, _List_Nil)
                    ]), attr);
                    config = $temp$config;
                    element = $temp$element;
                    continue view;
                }
            default:
                var input = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Inline$View$viewQuiz, config, input, attr);
        }
    });
    var $author$project$Lia$Markdown$Inline$View$viewQuiz = F3(function(config, _v0, attr) {
        var length = _v0.a;
        var id = _v0.b;
        var randomize = A2($elm$core$Maybe$andThen, $elm$core$Array$get(id), config.input.randomize);
        var isPartiallyCorrect = config.input.active ? A2($elm$core$Array$get, id, config.input.partiallyCorrect) : $elm$core$Maybe$Nothing;
        var highlight = function(a) {
            return A2($elm$core$Maybe$withDefault, a, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$View$highlightPartialSolution(a), isPartiallyCorrect));
        };
        var _v1 = A2($elm$core$Array$get, id, config.input.state);
        _v1$4: while(true){
            if (_v1.$ === "Just") switch(_v1.a.$){
                case "Text":
                    var text = _v1.a.a;
                    return A2($elm$html$Html$input, A2($elm$core$List$append, _List_fromArray([
                        $elm$html$Html$Attributes$type_("text"),
                        $elm$html$Html$Attributes$class("lia-input lia-quiz__input"),
                        A2($elm$html$Html$Attributes$style, "padding", "0.2rem 0.5rem"),
                        A2($elm$html$Html$Attributes$style, "text-align", "center"),
                        $elm$html$Html$Attributes$placeholder("?"),
                        A2($elm$html$Html$Attributes$style, "width", length),
                        A2($elm$html$Html$Attributes$style, "font-weight", "inherit"),
                        A2($elm$html$Html$Attributes$style, "text-decoration", "inherit"),
                        A2($elm$html$Html$Attributes$style, "font-style", "inherit"),
                        A2($elm$html$Html$Attributes$style, "vertical-align", "middle"),
                        $elm$html$Html$Attributes$value(text),
                        config.input.active ? A2($elm$html$Html$Attributes$attribute, "oninput", A3(config.input.on, "input", id, "this.value")) : $elm$html$Html$Attributes$disabled(true),
                        $author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Effect$Script$Types$NoOp),
                        $tesk9$accessible_html$Accessibility$Aria$label("quiz answer"),
                        $elm$html$Html$Attributes$class(config.input.active ? "" : "lia-input--disabled is-disabled"),
                        $elm$html$Html$Attributes$disabled(!config.input.active)
                    ]), highlight($author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr))), _List_Nil);
                case "Select":
                    if (_v1.a.b.b && !_v1.a.b.b.b) {
                        var _v2 = _v1.a;
                        var open = _v2.a;
                        var _v3 = _v2.b;
                        var element = _v3.a;
                        var options = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Array$get, id, config.input.options));
                        var action = config.input.active ? _List_fromArray([
                            A2($elm$html$Html$Attributes$attribute, "onClick", A3(config.input.on, "toggle", id, "true")),
                            $author$project$Lia$Markdown$Inline$View$keyDownEvent(A3(config.input.on, "toggle", id, "true"))
                        ]) : _List_fromArray([
                            $elm$html$Html$Attributes$disabled(true),
                            $elm$html$Html$Attributes$class("is-disabled")
                        ]);
                        return A2($elm$html$Html$span, highlight(A2($elm$core$List$append, action, A2($elm$core$List$append, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-dropdown"),
                            A2($elm$html$Html$Attributes$style, "padding", "0 0.5rem"),
                            $elm$html$Html$Attributes$tabindex(0),
                            A2($elm$html$Html$Attributes$style, "vertical-align", open ? "text-top" : "middle")
                        ]), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)))), _List_fromArray([
                            A2($elm$html$Html$span, _List_fromArray([
                                $elm$html$Html$Attributes$class("lia-dropdown__selected"),
                                $tesk9$accessible_html$Accessibility$Aria$hidden(false),
                                $tesk9$accessible_html$Accessibility$Role$button,
                                $tesk9$accessible_html$Accessibility$Aria$expanded(open),
                                A2($elm$html$Html$Attributes$style, "font-weight", "inherit"),
                                A2($elm$html$Html$Attributes$style, "text-decoration", "inherit"),
                                A2($elm$html$Html$Attributes$style, "font-style", "inherit")
                            ]), _List_fromArray([
                                A3($author$project$Lia$Markdown$Inline$View$getOption, config, element, options),
                                A2($elm$html$Html$i, _List_fromArray([
                                    $elm$html$Html$Attributes$class("icon" + (open ? " icon-chevron-up" : " icon-chevron-down")),
                                    $tesk9$accessible_html$Accessibility$Role$button
                                ]), _List_Nil)
                            ])),
                            A2($elm$html$Html$div, _List_fromArray([
                                $elm$html$Html$Attributes$class("lia-dropdown__options"),
                                $elm$html$Html$Attributes$class(open ? "is-visible" : "is-hidden")
                            ]), A2($author$project$Lia$Utils$shuffle, randomize, A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Inline$View$showOption, config, id), options)))
                        ]));
                    } else break _v1$4;
                default:
                    if (_v1.a.c.b && !_v1.a.c.b.b) {
                        var _v4 = _v1.a;
                        var _v5 = _v4.c;
                        var i = _v5.a;
                        var option = A2($elm$core$Maybe$andThen, $elm_community$list_extra$List$Extra$getAt(i), A2($elm$core$Array$get, id, config.input.options));
                        return A2($elm$html$Html$span, A2($elm$core$List$append, highlight($author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)), _List_fromArray([
                            A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                            A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                            A2($elm$html$Html$Attributes$style, "position", "relative"),
                            A2($elm$html$Html$Attributes$style, "border", function() {
                                if (isPartiallyCorrect.$ === "Nothing") return "3px dotted #888";
                                else {
                                    if (isPartiallyCorrect.a) return "3px dotted green";
                                    else return "3px dotted red";
                                }
                            }()),
                            A2($elm$html$Html$Attributes$style, "border-radius", "5px"),
                            A2($elm$html$Html$Attributes$style, "display", "inline-block"),
                            A2($elm$html$Html$Attributes$style, "vertical-align", "middle")
                        ])), _List_fromArray([
                            A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Inline$View$dropHere(_List_Nil), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$html$Html$span(_List_Nil)), option))
                        ]));
                    } else {
                        var _v7 = _v1.a;
                        var highlighted = _v7.a;
                        var activated = _v7.b;
                        var state = _v7.c;
                        var _v8 = function() {
                            if (state.b && state.b.b && !state.b.b.b) {
                                var i = state.a;
                                var _v10 = state.b;
                                var j = _v10.a;
                                return _Utils_Tuple2(A2($elm$core$Maybe$andThen, $elm_community$list_extra$List$Extra$getAt(j), A2($elm$core$Array$get, i, config.input.options)), A2($elm$json$Json$Encode$encode, 0, A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
                                    i,
                                    j
                                ]))));
                            } else return _Utils_Tuple2($elm$core$Maybe$Nothing, "");
                        }();
                        var option = _v8.a;
                        var uri = _v8.b;
                        return A2($elm$html$Html$span, A2($elm$core$List$append, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), _List_fromArray([
                            A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                            A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                            A2($elm$html$Html$Attributes$style, "position", "relative"),
                            A2($elm$html$Html$Attributes$style, "border", (highlighted ? "5px" : "3px") + (" dotted " + function() {
                                if (isPartiallyCorrect.$ === "Nothing") return "#888";
                                else {
                                    if (isPartiallyCorrect.a) return "green";
                                    else return "red";
                                }
                            }())),
                            A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                            A2($elm$html$Html$Attributes$style, "display", "inline-block"),
                            A2($elm$html$Html$Attributes$style, "vertical-align", "middle"),
                            A2($elm$html$Html$Attributes$attribute, "ondragover", A3(config.input.on, "dragenter", id, "true")),
                            A2($elm$html$Html$Attributes$attribute, "ondragleave", "setTimeout(()=>" + (A3(config.input.on, "dragenter", id, "false") + ", 100)")),
                            $elm$html$Html$Attributes$tabindex(0),
                            $tesk9$accessible_html$Accessibility$Role$button,
                            A2($elm$html$Html$Attributes$attribute, "onclick", A3(config.input.on, "dragtarget", id, "null")),
                            $author$project$Lia$Markdown$Inline$View$keyDownEvent(A3(config.input.on, "dragtarget", id, "null"))
                        ])), _List_fromArray([
                            A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Inline$View$dropHere(_List_Nil), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$html$Html$span(_List_fromArray([
                                $elm$html$Html$Attributes$draggable("true"),
                                A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                                A2($elm$html$Html$Attributes$attribute, "ondragend", A3(config.input.on, "dragend", id, uri))
                            ]))), option))
                        ]));
                    }
            }
            else break _v1$4;
        }
        return $elm$html$Html$text("todo");
    });
    var $author$project$Lia$Markdown$Inline$View$view_url = F5(function(config, alt_, url_, title_, attr) {
        return !config.tooltips || A2($elm$core$String$startsWith, "#", url_) ? A5($author$project$Lia$Markdown$Inline$View$link, config, alt_, url_, title_, attr) : A3($elm$html$Html$Keyed$node, "span", _List_Nil, _List_fromArray([
            _Utils_Tuple2(url_, A3($elm$html$Html$node, "preview-link", _List_fromArray([
                A2($elm$html$Html$Attributes$attribute, "src", url_),
                A2($elm$html$Html$Attributes$property, "light", $elm$json$Json$Encode$bool(config.light))
            ]), _List_fromArray([
                A5($author$project$Lia$Markdown$Inline$View$link, config, alt_, url_, title_, attr)
            ])))
        ]));
    });
    var $author$project$Lia$Markdown$Inline$View$viewer = function(config) {
        return $elm$core$List$map($author$project$Lia$Markdown$Inline$View$view(config));
    };
    function $author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion() {
        return $author$project$Lia$Markdown$Inline$View$view;
    }
    try {
        var $author$project$Lia$Markdown$Inline$View$viewRecursion = $author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion();
        $author$project$Lia$Markdown$Inline$View$cyclic$viewRecursion = function() {
            return $author$project$Lia$Markdown$Inline$View$viewRecursion;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Inline.View` are causing infinite recursion:\n\n  ┌─────┐\n  │    figure\n  │     ↓\n  │    getOption\n  │     ↓\n  │    htmlView\n  │     ↓\n  │    link\n  │     ↓\n  │    printLink\n  │     ↓\n  │    reference\n  │     ↓\n  │    showOption\n  │     ↓\n  │    viewRecursion\n  │     ↓\n  │    view\n  │     ↓\n  │    viewQuiz\n  │     ↓\n  │    view_url\n  │     ↓\n  │    viewer\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Markdown$Inline$View$view_inf = F7(function(scripts, lang, light, tooltips, translations, formulas, media) {
        return $author$project$Lia$Markdown$Inline$View$view($author$project$Lia$Markdown$Inline$Config$init({
            formulas: formulas,
            hideVideoComments: true,
            lang: lang,
            light: light,
            media: A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, media),
            mode: $author$project$Lia$Settings$Types$Textbook,
            scripts: scripts,
            slide: -1,
            speaking: $elm$core$Maybe$Nothing,
            sync: $elm$core$Maybe$Nothing,
            theme: $elm$core$Maybe$Nothing,
            tooltips: tooltips,
            translations: translations,
            visible: $elm$core$Maybe$Nothing
        }));
    });
    var $author$project$Index$View$Card$inlines = $elm$core$List$map(A2($elm$core$Basics$composeR, A7($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, $author$project$I18n$Translations$En, false, false, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing), $elm$html$Html$map($elm$core$Basics$always($author$project$Index$Update$NoOp))));
    var $author$project$Index$View$Card$body = function(comment) {
        return A2($elm$html$Html$p, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__body")
        ]), $author$project$Index$View$Card$inlines(comment));
    };
    var $author$project$Index$Update$Delete = F2(function(a, b) {
        return {
            $: "Delete",
            a: a,
            b: b
        };
    });
    var $author$project$Index$Update$Reset = F3(function(a, b, c) {
        return {
            $: "Reset",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Index$Update$Restore = F2(function(a, b) {
        return {
            $: "Restore",
            a: a,
            b: b
        };
    });
    var $author$project$Index$Update$Share = function(a) {
        return {
            $: "Share",
            a: a
        };
    };
    var $elm$html$Html$Attributes$classList = function(classes) {
        return $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", A2($elm$core$List$map, $elm$core$Tuple$first, A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
    };
    var $author$project$Index$View$Base$href = A2($elm$core$Basics$composeR, $author$project$Lia$Parser$PatReplace$link, A2($elm$core$Basics$composeR, $elm$core$Basics$append("./?"), $elm$html$Html$Attributes$href));
    var $author$project$Index$Update$PopupClose = {
        $: "PopupClose"
    };
    var $author$project$Library$Group$maybeGroupId = F2(function(msg, change) {
        if (change.$ === "Just") {
            var a = change.a;
            return $elm$json$Json$Decode$succeed(msg(a));
        } else return $elm$json$Json$Decode$fail("no change");
    });
    var $author$project$Library$Group$decodeGroupIdChanged = function(msg) {
        return A2($elm$json$Json$Decode$andThen, $author$project$Library$Group$maybeGroupId(msg), $elm$json$Json$Decode$oneOf(_List_fromArray([
            A3($elm$json$Json$Decode$map2, F2(function(a, b) {
                return !_Utils_eq(a, b) ? $elm$core$Maybe$Just(a) : $elm$core$Maybe$Nothing;
            }), A2($elm$json$Json$Decode$at, _List_fromArray([
                "target",
                "dataset",
                "groupId"
            ]), $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$at, _List_fromArray([
                "relatedTarget",
                "dataset",
                "groupId"
            ]), $elm$json$Json$Decode$string)),
            A2($elm$json$Json$Decode$map, function(a) {
                return $elm$core$Maybe$Just(a);
            }, A2($elm$json$Json$Decode$at, _List_fromArray([
                "target",
                "dataset",
                "groupId"
            ]), $elm$json$Json$Decode$string))
        ])));
    };
    var $author$project$Library$Group$blur = function(msg) {
        return A2($elm$html$Html$Events$on, "blur", $author$project$Library$Group$decodeGroupIdChanged(msg));
    };
    var $tesk9$accessible_html$Accessibility$Key$enter = function(msg) {
        return {
            keyCode: 13,
            msg: msg,
            shiftKey: false
        };
    };
    var $author$project$Index$View$Popup$groupID = "lia-popup";
    var $author$project$Library$Group$id = function(groupId) {
        return A2($elm$html$Html$Attributes$attribute, "data-group-id", groupId);
    };
    var $author$project$Index$View$Popup$view = function(_v0) {
        var escape = _v0.escape;
        var text = _v0.text;
        var action = _v0.action;
        return A2($elm$html$Html$div, _List_fromArray([
            $tesk9$accessible_html$Accessibility$Role$dialog,
            A2($elm$html$Html$Attributes$style, "position", "absolute"),
            A2($elm$html$Html$Attributes$style, "min-width", "250px"),
            A2($elm$html$Html$Attributes$style, "background-color", "#fff"),
            A2($elm$html$Html$Attributes$style, "border", "1px solid #ddd"),
            A2($elm$html$Html$Attributes$style, "box-shadow", "0 4px 8px rgba(0,0,0,0.1)"),
            A2($elm$html$Html$Attributes$style, "padding", "16px"),
            A2($elm$html$Html$Attributes$style, "border-radius", "8px"),
            A2($elm$html$Html$Attributes$style, "z-index", "100"),
            A2($elm$html$Html$Attributes$style, "bottom", "1rem"),
            $elm$html$Html$Attributes$tabindex(0),
            $elm$html$Html$Attributes$id($author$project$Index$View$Popup$groupID),
            $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                $tesk9$accessible_html$Accessibility$Key$escape(escape),
                $tesk9$accessible_html$Accessibility$Key$enter(action.msg)
            ])),
            $author$project$Library$Group$id($author$project$Index$View$Popup$groupID),
            $author$project$Library$Group$blur($elm$core$Basics$always(escape))
        ]), _List_fromArray([
            A2($elm$html$Html$p, _List_fromArray([
                $author$project$Library$Group$id($author$project$Index$View$Popup$groupID),
                $author$project$Library$Group$blur($elm$core$Basics$always(escape)),
                A2($elm$html$Html$Attributes$style, "margin-bottom", "16px"),
                A2($elm$html$Html$Attributes$style, "font-size", "16px"),
                A2($elm$html$Html$Attributes$style, "color", "#333")
            ]), _List_fromArray([
                $elm$html$Html$text(text)
            ])),
            A2($elm$html$Html$button, _List_fromArray([
                $elm$html$Html$Events$onClick(action.msg),
                $elm$html$Html$Attributes$tabindex(0),
                $author$project$Library$Group$id($author$project$Index$View$Popup$groupID),
                $author$project$Library$Group$blur($elm$core$Basics$always(escape)),
                A2($elm$html$Html$Attributes$style, "padding", "10px 20px"),
                A2($elm$html$Html$Attributes$style, "background-color", "#d9534f"),
                A2($elm$html$Html$Attributes$style, "color", "#fff"),
                A2($elm$html$Html$Attributes$style, "border", "none"),
                A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                A2($elm$html$Html$Attributes$style, "cursor", "pointer")
            ]), _List_fromArray([
                $elm$html$Html$text(action.text)
            ])),
            A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-close",
                msg: $elm$core$Maybe$Just(escape),
                tabbable: true,
                title: "abort"
            }, _List_fromArray([
                $author$project$Library$Group$id($author$project$Index$View$Popup$groupID),
                $elm$html$Html$Attributes$class("lia-btn--transparent px-0 py-0"),
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "right", "2px"),
                A2($elm$html$Html$Attributes$style, "top", "-3px"),
                $author$project$Library$Group$blur($elm$core$Basics$always(escape))
            ]))
        ]));
    };
    var $author$project$Index$View$Card$popup = F3(function(action, open, msg) {
        var _v0 = _Utils_Tuple2(action, open);
        _v0$2: while(true)if (_v0.a.$ === "Popup_Delete") {
            if (_v0.b.$ === "Just" && _v0.b.a.$ === "Popup_Delete") {
                var _v1 = _v0.a;
                var _v2 = _v0.b.a;
                return $author$project$Index$View$Popup$view({
                    action: {
                        msg: msg,
                        text: "Delete"
                    },
                    escape: $author$project$Index$Update$PopupClose,
                    text: "Are you sure you want to permanently delete this course and all of its stored states? This action cannot be undone."
                });
            } else break _v0$2;
        } else {
            if (_v0.b.$ === "Just" && _v0.b.a.$ === "Popup_Reset") {
                var _v3 = _v0.a;
                var _v4 = _v0.b.a;
                return $author$project$Index$View$Popup$view({
                    action: {
                        msg: msg,
                        text: "Reset"
                    },
                    escape: $author$project$Index$Update$PopupClose,
                    text: "Are you sure you want to reset this course? This will permanently remove all stored states, including quizzes, tasks, surveys, and code entries. This action cannot be undone."
                });
            } else break _v0$2;
        }
        return $elm$html$Html$text("");
    });
    var $author$project$Index$View$Card$controls = F4(function(hasShareAPI, title, definition, course) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__controls")
        ]), _List_fromArray([
            A3($author$project$Index$View$Card$popup, $author$project$Index$Model$Popup_Delete, course.popup, A2($author$project$Index$Update$Delete, true, course.id)),
            A3($author$project$Index$View$Card$popup, $author$project$Index$Model$Popup_Reset, course.popup, A3($author$project$Index$Update$Reset, true, course.id, course.active)),
            A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-trash",
                msg: $elm$core$Maybe$Just(A2($author$project$Index$Update$Delete, false, course.id)),
                tabbable: true,
                title: "Delete this course"
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--tag lia-btn--transparent text-red-dark border-red-dark px-1")
            ])),
            A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-refresh",
                msg: $elm$core$Maybe$Just(A3($author$project$Index$Update$Reset, false, course.id, course.active)),
                tabbable: true,
                title: "Reset all stored states (quizzes, tasks, surveys, codes)"
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--tag lia-btn--transparent text-yellow-dark border-yellow-dark px-1")
            ])),
            hasShareAPI ? A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-social",
                msg: $elm$core$Maybe$Just($author$project$Index$Update$Share({
                    image: $elm$core$String$isEmpty(definition.logo) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(definition.logo),
                    text: $author$project$Lia$Markdown$Inline$Stringify$stringify(definition.comment),
                    title: $author$project$Lia$Markdown$Inline$Stringify$stringify(title),
                    url: _Utils_ap($author$project$Const$urlLiascriptCourse, course.id)
                })),
                tabbable: true,
                title: "Share course via"
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--transparent lia-btn--tag px-1 text-turquoise border-turquoise")
            ])) : A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-copy",
                msg: $elm$core$Maybe$Just($author$project$Index$Update$Share({
                    image: $elm$core$Maybe$Nothing,
                    text: $author$project$Lia$Markdown$Inline$Stringify$stringify(definition.comment),
                    title: $author$project$Lia$Markdown$Inline$Stringify$stringify(title),
                    url: _Utils_ap($author$project$Const$urlLiascriptCourse, course.id)
                })),
                tabbable: true,
                title: "Copy URL to clipboard"
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--transparent lia-btn--tag px-1 text-turquoise border-turquoise")
            ])),
            A2($elm$html$Html$a, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent lia-btn--tag px-1 text-turquoise border-turquoise"),
                $elm$html$Html$Attributes$href("mailto:" + definition.email),
                $elm$html$Html$Attributes$classList(_List_fromArray([
                    _Utils_Tuple2("hide", $elm$core$String$isEmpty(definition.email))
                ])),
                $elm$html$Html$Attributes$title("Send an email to: " + definition.email)
            ]), _List_fromArray([
                A2($elm$html$Html$i, _List_fromArray([
                    $elm$html$Html$Attributes$class("icon icon-mail")
                ]), _List_Nil)
            ])),
            function() {
                var _v0 = course.active;
                if (_v0.$ === "Nothing") return A2($elm$html$Html$a, _List_fromArray([
                    $author$project$Index$View$Base$href(course.id),
                    $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent lia-btn--tag px-1 border-turquoise"),
                    $elm$html$Html$Attributes$title("Open this course"),
                    A2($elm$html$Html$Attributes$style, "border", "2.5px solid")
                ]), _List_fromArray([
                    A2($elm$html$Html$i, _List_fromArray([
                        $elm$html$Html$Attributes$class("icon icon-login text-turquoise")
                    ]), _List_Nil)
                ]));
                else return A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-login",
                    msg: $elm$core$Maybe$Just(A2($author$project$Index$Update$Restore, course.id, course.active)),
                    tabbable: true,
                    title: "Open this course"
                }, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn--transparent lia-btn--tag px-1 text-turquoise border-turquoise"),
                    A2($elm$html$Html$Attributes$style, "border", "2.5px solid")
                ]));
            }()
        ]));
    });
    var $elm$html$Html$footer = _VirtualDom_node("footer");
    var $author$project$Index$View$Card$footer = function(author) {
        return $elm$core$String$isEmpty(author) ? $elm$html$Html$text("") : A2($elm$html$Html$footer, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__footer lia-card__author")
        ]), _List_fromArray([
            $elm$html$Html$text(author)
        ]));
    };
    var $author$project$Index$View$Card$getIcon = A2($elm$core$Basics$composeR, $elm$core$Dict$get("icon"), $elm$core$Maybe$withDefault($author$project$Const$icon));
    var $elm$html$Html$h2 = _VirtualDom_node("h2");
    var $elm$html$Html$h4 = _VirtualDom_node("h4");
    var $author$project$Index$View$Card$header = F2(function(title, macro) {
        return A2($elm$html$Html$header, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__header")
        ]), _List_fromArray([
            A2($elm$html$Html$h2, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-card__title")
            ]), $author$project$Index$View$Card$inlines(title)),
            A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, A2($elm$core$String$replace, ";", " | "), A2($elm$core$Basics$composeR, $elm$html$Html$text, A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$h4(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-card__subtitle")
            ]))))), A2($elm$core$Dict$get, "tags", macro)))
        ]));
    });
    var $author$project$Index$View$Card$icon = function(url) {
        return A2($elm$html$Html$img, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__icon"),
            $elm$html$Html$Attributes$src(url),
            $elm$html$Html$Attributes$alt("Logo"),
            A2($elm$html$Html$Attributes$attribute, "loading", "lazy")
        ]), _List_Nil);
    };
    var $author$project$Index$View$Card$logo = function(url) {
        return $elm$core$String$isEmpty(url) ? $elm$html$Html$text("") : A2($elm$html$Html$img, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__logo"),
            $elm$html$Html$Attributes$src(url),
            A2($elm$html$Html$Attributes$attribute, "loading", "lazy")
        ]), _List_Nil);
    };
    var $author$project$Index$Update$Activate = F2(function(a, b) {
        return {
            $: "Activate",
            a: a,
            b: b
        };
    });
    var $author$project$Index$View$Card$versions = function(course) {
        var last = $elm$core$Dict$size(course.versions) - 1;
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card__version")
        ]), A2($elm$core$List$indexedMap, F2(function(i, _v1) {
            var key = _v1.a;
            var value = _v1.b;
            return A3($author$project$Lia$Utils$btn, {
                msg: $elm$core$Maybe$Just(A2($author$project$Index$Update$Activate, course.id, _Utils_eq(last, i) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(value))),
                tabbable: true,
                title: "load version " + value
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn lia-btn--small-tag"),
                $elm$html$Html$Attributes$class(function() {
                    var _v2 = course.active;
                    if (_v2.$ === "Just") {
                        var id = _v2.a;
                        return _Utils_eq(id, key) ? "active" : "lia-btn--outline";
                    } else return _Utils_eq(last, i) ? "active" : "lia-btn--outline";
                }())
            ]), _List_fromArray([
                $elm$html$Html$text("V " + value)
            ]));
        }), A2($elm$core$List$sortBy, $elm$core$Tuple$first, A2($elm$core$List$map, function(_v0) {
            var key = _v0.a;
            var value = _v0.b;
            return _Utils_Tuple2(key, value.definition.version);
        }, $elm$core$Dict$toList(course.versions)))));
    };
    var $author$project$Index$View$Card$article = F3(function(hasShareAPI, course, _v0) {
        var title = _v0.title;
        var definition = _v0.definition;
        return A2($elm$html$Html$article, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-card")
        ]), _List_fromArray([
            $author$project$Index$View$Card$versions(course),
            $author$project$Index$View$Card$icon($author$project$Index$View$Card$getIcon(definition.macro)),
            $author$project$Index$View$Card$logo(definition.logo),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-card__content")
            ]), _List_fromArray([
                A2($author$project$Index$View$Card$header, title, definition.macro),
                $author$project$Index$View$Card$body(definition.comment),
                A4($author$project$Index$View$Card$controls, hasShareAPI, title, definition, course),
                $author$project$Index$View$Card$footer(definition.author)
            ]))
        ]));
    });
    var $author$project$Index$View$Card$get_active = function(course) {
        var _v0 = course.active;
        if (_v0.$ === "Nothing") return A2($elm$core$Maybe$map, $elm$core$Tuple$second, $elm$core$List$head($elm$core$List$reverse(A2($elm$core$List$sortBy, $elm$core$Tuple$first, $elm$core$Dict$toList(course.versions)))));
        else {
            var id = _v0.a;
            return A2($elm$core$Dict$get, id, course.versions);
        }
    };
    var $author$project$Index$View$Card$card = F2(function(hasShareAPI, course) {
        return A2($elm$core$Maybe$withDefault, $elm$html$Html$text("something went wrong"), A2($elm$core$Maybe$map, A2($author$project$Index$View$Card$article, hasShareAPI, course), $author$project$Index$View$Card$get_active(course)));
    });
    var $author$project$Index$View$itemView = F3(function(hasShareAPI, _v0, course) {
        return A2($author$project$Index$View$Card$card, hasShareAPI, course);
    });
    var $elm$html$Html$main_ = _VirtualDom_node("main");
    var $author$project$Lia$Settings$Types$ShowSettings = {
        $: "ShowSettings"
    };
    var $author$project$Lia$Settings$View$doAction = A2($elm$core$Basics$composeR, $author$project$Lia$Settings$Update$Action, $author$project$Lia$Settings$Update$Toggle);
    var $author$project$Lia$Settings$View$actionBtn = function(conf) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: conf.icon,
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$View$doAction(conf.action)),
            tabbable: true,
            title: conf.title
        }, conf.grouping(A2($elm$core$List$append, conf.attributes, _List_fromArray([
            $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp,
            $tesk9$accessible_html$Accessibility$Aria$expanded(conf.open),
            $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                $tesk9$accessible_html$Accessibility$Key$escape($author$project$Lia$Settings$View$doAction($author$project$Lia$Settings$Types$Close))
            ])),
            $elm$html$Html$Attributes$class("lia-btn--transparent hide-md-down")
        ]))));
    };
    var $author$project$Lia$Settings$Update$FocusLoss = function(a) {
        return {
            $: "FocusLoss",
            a: a
        };
    };
    var $author$project$Lia$Settings$Types$fromGroup = function(grp) {
        switch(grp.$){
            case "ShowSettings":
                return "setting";
            case "ShowTranslations":
                return "translation";
            case "ShowInformation":
                return "information";
            case "ShowModes":
                return "mode";
            case "ShowShare":
                return "share";
            default:
                return "close";
        }
    };
    var $author$project$Lia$Settings$Types$ShowInformation = {
        $: "ShowInformation"
    };
    var $author$project$Lia$Settings$Types$ShowModes = {
        $: "ShowModes"
    };
    var $author$project$Lia$Settings$Types$ShowShare = {
        $: "ShowShare"
    };
    var $author$project$Lia$Settings$Types$ShowTranslations = {
        $: "ShowTranslations"
    };
    var $author$project$Lia$Settings$Types$toGroup = function(str) {
        switch(str){
            case "information":
                return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowInformation);
            case "mode":
                return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowModes);
            case "setting":
                return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowSettings);
            case "translation":
                return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowTranslations);
            case "share":
                return $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowShare);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$Lia$Settings$View$group = function(groupID) {
        return A2($elm$core$Basics$composeR, $elm$core$List$cons($author$project$Library$Group$id($author$project$Lia$Settings$Types$fromGroup(groupID))), $elm$core$List$cons($author$project$Library$Group$blur(A2($elm$core$Basics$composeR, $author$project$Lia$Settings$Types$toGroup, $author$project$Lia$Settings$Update$FocusLoss))));
    };
    var $tesk9$accessible_html$Accessibility$Aria$labelledBy = $elm$html$Html$Attributes$attribute("aria-labelledby");
    var $tesk9$accessible_html$Accessibility$Aria$labeledBy = $tesk9$accessible_html$Accessibility$Aria$labelledBy;
    var $tesk9$accessible_html$Accessibility$Role$radioGroup = $tesk9$accessible_html$Accessibility$Utils$role("radiogroup");
    var $author$project$Lia$Settings$View$submenu = F2(function(grouping, isActive) {
        return $elm$html$Html$div(grouping(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-support-menu__submenu"),
            $elm$html$Html$Attributes$class(isActive ? "active" : ""),
            $tesk9$accessible_html$Accessibility$Role$radioGroup,
            $tesk9$accessible_html$Accessibility$Aria$labeledBy("lia-mode-menu-button"),
            $tesk9$accessible_html$Accessibility$Aria$label("select a presentation mode")
        ])));
    });
    var $elm$html$Html$hr = _VirtualDom_node("hr");
    var $author$project$Lia$Settings$View$divider = A2($elm$html$Html$hr, _List_fromArray([
        $elm$html$Html$Attributes$class("nav__divider")
    ]), _List_Nil);
    var $author$project$Lia$Settings$Update$ChangeEditor = function(a) {
        return {
            $: "ChangeEditor",
            a: a
        };
    };
    var $author$project$I18n$Translations$baseEditor = function(lang) {
        switch(lang.$){
            case "Am":
                return "ኤዲተር-ዘዴ";
            case "Ar":
                return "على غرار المحرر";
            case "Bg":
                return "редакторски стил";
            case "Bn":
                return "সম্পাদক-স্টাইল";
            case "De":
                return "Editor-Stil";
            case "Es":
                return "estilo editor";
            case "Fa":
                return "به سبک ویرایشگر";
            case "Fr":
                return "Style de l'\xe9diteur";
            case "Hi":
                return "संपादक शैली";
            case "Hy":
                return "խմբագիր ոճով";
            case "It":
                return "stile editor";
            case "Ja":
                return "エディター・スタイル";
            case "Ka":
                return "რედაქტორის სტილი";
            case "Ko":
                return "에디터 스타일";
            case "Nl":
                return "editor-stijl";
            case "Pa":
                return "ਸੰਪਾਦਕ ਸਟਾਈਲ";
            case "Pt":
                return "Estilo do editor";
            case "Ru":
                return "стиль редактора";
            case "Sw":
                return "Mtindo wa Mhariri";
            case "Tw":
                return "编辑风格";
            case "Uk":
                return "стиль редактора";
            case "Ur":
                return "ایڈیٹر اسٹائل";
            case "Zh":
                return "编辑风格";
            default:
                return "Editor-Style";
        }
    };
    var $author$project$I18n$Translations$cBright = function(lang) {
        switch(lang.$){
            case "Am":
                return "እንደዛሬ";
            case "Ar":
                return "وضع الإضاءة";
            case "Bg":
                return "светъл режим";
            case "Bn":
                return "লাইট মোড";
            case "De":
                return "Hellmodus";
            case "Es":
                return "modo claro";
            case "Fa":
                return "حالت روشن";
            case "Fr":
                return "Mode clair";
            case "Hi":
                return "लाइट मोड";
            case "Hy":
                return "թեթև ռեժիմ";
            case "It":
                return "modo chiaro";
            case "Ja":
                return "ライトモード";
            case "Ka":
                return "ნათელი რეჟიმი";
            case "Ko":
                return "라이트 모드";
            case "Nl":
                return "lichte modus";
            case "Pa":
                return "ਚਮਕੀਲਾ ਮੋਡ";
            case "Pt":
                return "Modo claro";
            case "Ru":
                return "светлый режим";
            case "Sw":
                return "Modi-Nuru";
            case "Tw":
                return "亮模式";
            case "Uk":
                return "світлий режим";
            case "Ur":
                return "روشن موڈ";
            case "Zh":
                return "亮模式";
            default:
                return "Light-Mode";
        }
    };
    var $author$project$I18n$Translations$cDark = function(lang) {
        switch(lang.$){
            case "Am":
                return "እንቅስቃሴ";
            case "Ar":
                return "الوضع المظلم";
            case "Bg":
                return "тъмен режим";
            case "Bn":
                return "ডার্ক মোড";
            case "De":
                return "Dunkelmodus";
            case "Es":
                return "modo oscuro";
            case "Fa":
                return "حالت تاریک";
            case "Fr":
                return "Mode sombre";
            case "Hi":
                return "डार्क मोड";
            case "Hy":
                return "մութ ռեժիմ";
            case "It":
                return "modo scuro";
            case "Ja":
                return "ダークモード";
            case "Ka":
                return "მუქი რეჟიმი";
            case "Ko":
                return "다크 모드";
            case "Nl":
                return "donkere modus";
            case "Pa":
                return "ਡਾਰਕ ਮੋਡ";
            case "Pt":
                return "Modo escuro";
            case "Ru":
                return "темный режим";
            case "Sw":
                return "Hali ya Giza";
            case "Tw":
                return "暗模式";
            case "Uk":
                return "темний режим";
            case "Ur":
                return "تاریک موڈ";
            case "Zh":
                return "暗模式";
            default:
                return "Dark-Mode";
        }
    };
    var $elm$html$Html$optgroup = _VirtualDom_node("optgroup");
    var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty("selected");
    var $author$project$Lia$Settings$View$option = F2(function(current, _v0) {
        var val = _v0.a;
        var text = _v0.b;
        return A2($elm$html$Html$option, _List_fromArray([
            $elm$html$Html$Attributes$value(val),
            $elm$html$Html$Attributes$selected(_Utils_eq(val, current))
        ]), _List_fromArray([
            $elm$html$Html$text(text)
        ]));
    });
    var $author$project$Lia$Settings$View$viewEditorTheme = F4(function(grouping, lang, tabbable, theme) {
        var op = $author$project$Lia$Settings$View$option(theme);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-settings-editor")
        ]), _List_fromArray([
            A2($elm$html$Html$label, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "margin-bottom", "0.4rem")
                ]), _List_fromArray([
                    $elm$html$Html$text($author$project$I18n$Translations$baseEditor(lang) + ":")
                ])),
                A2($elm$html$Html$select, grouping(_List_fromArray([
                    $elm$html$Html$Attributes$class("lia-select"),
                    $elm$html$Html$Events$onInput($author$project$Lia$Settings$Update$ChangeEditor),
                    $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable)
                ])), _List_fromArray([
                    A2($elm$html$Html$optgroup, _List_fromArray([
                        A2($elm$html$Html$Attributes$attribute, "label", $author$project$I18n$Translations$cBright(lang)),
                        $tesk9$accessible_html$Accessibility$Aria$hidden(true)
                    ]), A2($elm$core$List$map, op, _List_fromArray([
                        _Utils_Tuple2("chrome", "Chrome"),
                        _Utils_Tuple2("cloud9_day", "Cloud9 Day"),
                        _Utils_Tuple2("clouds", "Clouds"),
                        _Utils_Tuple2("crimson_editor", "Crimson Editor"),
                        _Utils_Tuple2("dawn", "Dawn"),
                        _Utils_Tuple2("dreamweaver", "Dreamweaver"),
                        _Utils_Tuple2("eclipse", "Eclipse"),
                        _Utils_Tuple2("github", "Github"),
                        _Utils_Tuple2("gruvbox_light_hard", "Gruvbox - Light Hard"),
                        _Utils_Tuple2("iplastic", "IPlastic"),
                        _Utils_Tuple2("katzenmilch", "KatzenMilch"),
                        _Utils_Tuple2("kuroir", "Kuroir"),
                        _Utils_Tuple2("solarized_light", "Solarized Light"),
                        _Utils_Tuple2("sqlserver", "SQL Server"),
                        _Utils_Tuple2("textmate", "TextMate"),
                        _Utils_Tuple2("tomorrow", "Tomorrow"),
                        _Utils_Tuple2("xcode", "XCode")
                    ]))),
                    A2($elm$html$Html$optgroup, _List_fromArray([
                        A2($elm$html$Html$Attributes$attribute, "label", $author$project$I18n$Translations$cDark(lang)),
                        $tesk9$accessible_html$Accessibility$Aria$hidden(true)
                    ]), A2($elm$core$List$map, op, _List_fromArray([
                        _Utils_Tuple2("ambiance", "Ambiance"),
                        _Utils_Tuple2("chaos", "Chaos"),
                        _Utils_Tuple2("cloud9_night", "Cloud9 Night"),
                        _Utils_Tuple2("cloud9_night_low_color", "Cloud9 Night - Low Color"),
                        _Utils_Tuple2("clouds_midnight", "Clouds Midnight"),
                        _Utils_Tuple2("cobalt", "Cobalt"),
                        _Utils_Tuple2("dracula", "Dracula"),
                        _Utils_Tuple2("github_dark", "Github Dark"),
                        _Utils_Tuple2("gob", "Green on Black"),
                        _Utils_Tuple2("gruvbox", "Gruvbox"),
                        _Utils_Tuple2("gruvbox_dark_hard", "Gruvbox - Dark Hard"),
                        _Utils_Tuple2("idle_fingers", "Idle Fingers"),
                        _Utils_Tuple2("kr_theme", "krTheme"),
                        _Utils_Tuple2("merbivore", "Merbivore"),
                        _Utils_Tuple2("merbivore_soft", "Merbivore Soft"),
                        _Utils_Tuple2("mono_industrial", "Mono Industrial"),
                        _Utils_Tuple2("monokai", "Monokai"),
                        _Utils_Tuple2("one_dark", "One Dark"),
                        _Utils_Tuple2("nord_dark", "Nord Dark"),
                        _Utils_Tuple2("pastel_on_dark", "Pastel on dark"),
                        _Utils_Tuple2("solarized_dark", "Solarized Dark"),
                        _Utils_Tuple2("terminal", "Terminal"),
                        _Utils_Tuple2("tomorrow_night", "Tomorrow Night"),
                        _Utils_Tuple2("tomorrow_night_blue", "Tomorrow Night Blue"),
                        _Utils_Tuple2("tomorrow_night_bright", "Tomorrow Night Bright"),
                        _Utils_Tuple2("tomorrow_night_eighties", "Tomorrow Night 80s"),
                        _Utils_Tuple2("twilight", "Twilight"),
                        _Utils_Tuple2("vibrant_ink", "Vibrant Ink")
                    ])))
                ]))
            ]))
        ]));
    });
    var $author$project$Lia$Settings$Update$Fullscreen = {
        $: "Fullscreen"
    };
    var $author$project$I18n$Translations$fullscreenEnter = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሙሉ ማስታወሻ";
            case "Ar":
                return "الدخول إلى وضع العرض الكامل";
            case "Bg":
                return "Влезте в цял екран";
            case "Bn":
                return "ফুলস্ক্রিনে ঢুকুন";
            case "De":
                return "Vollbildmodus aktivieren";
            case "Es":
                return "entrar en pantalla completa";
            case "Fa":
                return "ورود به حالت تمام صفحه";
            case "Fr":
                return "Passer en plein \xe9cran";
            case "Hi":
                return "पूर्ण स्क्रीन में जाएं";
            case "Hy":
                return "մոտեցնել լիավանդակային ռեժիմ";
            case "It":
                return "Entra a schermo intero";
            case "Ja":
                return "フルスクリーンに入る";
            case "Ka":
                return "სრულეკრანი";
            case "Ko":
                return "전체 화면으로";
            case "Nl":
                return "Volledig scherm";
            case "Pa":
                return "ਪੂਰੀ ਸਕ੍ਰੀਨ";
            case "Pt":
                return "Entrar em tela cheia";
            case "Ru":
                return "перейти в полноэкранный режим";
            case "Sw":
                return "Ingia kwenye skrini kamili";
            case "Tw":
                return "進入全屏模式";
            case "Uk":
                return "увімкнути повноекранний режим";
            case "Ur":
                return "پوری سکرین";
            case "Zh":
                return "進入全屏模式";
            default:
                return "Enter Fullscreen";
        }
    };
    var $author$project$I18n$Translations$fullscreenExit = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሙሉ ማስታወሻ ያድርጉz6";
            case "Ar":
                return "الخروج من وضع العرض الكامل";
            case "Bg":
                return "Излезте от цял екран";
            case "Bn":
                return "ফুলস্ক্রিন থেকে বের হোন";
            case "De":
                return "Vollbildmodus beenden";
            case "Es":
                return "salir de pantalla completa";
            case "Fa":
                return "خروج از حالت تمام صفحه";
            case "Fr":
                return "Quitter le plein \xe9cran";
            case "Hi":
                return "पूर्ण स्क्रीन से बाहर निकलें";
            case "Hy":
                return "դուրս գալ լիավանդակային ռեժիմից";
            case "It":
                return "Esci da schermo intero";
            case "Ja":
                return "フルスクリーンを終了する";
            case "Ka":
                return "გამოსვლა";
            case "Ko":
                return "전체 화면에서 나가기";
            case "Nl":
                return "Volledig scherm verlaten";
            case "Pa":
                return "ਪੂਰੀ ਸਕ੍ਰੀਨ ਤੋਂ ਬਾਹਰ";
            case "Pt":
                return "Sair da tela cheia";
            case "Ru":
                return "выйти из полноэкранного режима";
            case "Sw":
                return "Toka kwenye skrini kamili";
            case "Tw":
                return "退出全屏模式";
            case "Uk":
                return "вийти з повноекранного режиму";
            case "Ur":
                return "پوری سکرین سے باہر";
            case "Zh":
                return "退出全屏模式";
            default:
                return "Exit Fullscreen";
        }
    };
    var $author$project$Lia$Settings$View$viewFullscreen = F4(function(grouping, lang, tabbable, isFullscreen) {
        return A2($elm$html$Html$button, grouping(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent"),
            $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Fullscreen)),
            $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
            $elm$html$Html$Attributes$id("lia-btn-fullscreen"),
            A2($elm$html$Html$Attributes$style, "width", "100%")
        ])), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__text")
            ]), _List_fromArray([
                $elm$html$Html$text(isFullscreen ? $author$project$I18n$Translations$fullscreenExit(lang) : $author$project$I18n$Translations$fullscreenEnter(lang)),
                $elm$html$Html$text(" (F11)")
            ]))
        ]));
    });
    var $author$project$Lia$Settings$Update$Light = {
        $: "Light"
    };
    var $author$project$Lia$Settings$View$viewLightMode = F4(function(grouping, lang, tabbable, isLight) {
        return A2($elm$html$Html$button, grouping(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent"),
            $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Light)),
            $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
            $elm$html$Html$Attributes$id("lia-btn-light-mode"),
            A2($elm$html$Html$Attributes$style, "width", "100%")
        ])), _List_fromArray([
            A2($elm$html$Html$i, _List_fromArray([
                $tesk9$accessible_html$Accessibility$Aria$hidden(true),
                $elm$html$Html$Attributes$class("lia-btn__icon icon"),
                $elm$html$Html$Attributes$class(isLight ? "icon-darkmode" : "icon-lightmode")
            ]), _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__text")
            ]), _List_fromArray([
                $elm$html$Html$text(isLight ? $author$project$I18n$Translations$cDark(lang) : $author$project$I18n$Translations$cBright(lang))
            ]))
        ]));
    });
    var $author$project$I18n$Translations$baseFont = F2(function(lang, str0) {
        switch(lang.$){
            case "Am":
                return "ፎንት መጠን: " + (str0 + "");
            case "Ar":
                return " :حجم الخط " + (str0 + "");
            case "Bg":
                return "Размер на шрифта: " + (str0 + "");
            case "Bn":
                return "ফন্ট সাইজ: " + (str0 + "");
            case "De":
                return "Schriftgr\xf6\xdfe: " + (str0 + "");
            case "Es":
                return "Tama\xf1o de fuente: " + (str0 + "");
            case "Fa":
                return "اندازه قلم: " + (str0 + "");
            case "Fr":
                return "Taille de police : " + (str0 + "");
            case "Hi":
                return "फ़ॉन्ट आकार: " + (str0 + "");
            case "Hy":
                return "Տառատեսակի չափը ՝ " + (str0 + "");
            case "It":
                return "Dimensione carattere: " + (str0 + "");
            case "Ja":
                return "フォントサイズ: " + (str0 + "");
            case "Ka":
                return "შრიფტის ზომა: " + (str0 + "");
            case "Ko":
                return "글꼴 크기: " + (str0 + "");
            case "Nl":
                return "Lettergrootte: " + (str0 + "");
            case "Pa":
                return "ਫੋਂਟ ਆਕਾਰ: " + (str0 + "");
            case "Pt":
                return "tamanho da fonte: " + (str0 + "");
            case "Ru":
                return "Размер шрифта: " + (str0 + "");
            case "Sw":
                return "saizi ya fonti: " + (str0 + "");
            case "Tw":
                return "字体大小： " + (str0 + "");
            case "Uk":
                return "Розмір шрифту: " + (str0 + "");
            case "Ur":
                return "فونٹ کا سائز: " + (str0 + "");
            case "Zh":
                return "字体大小： " + (str0 + "");
            default:
                return "font size: " + (str0 + "");
        }
    });
    var $author$project$I18n$Translations$baseSize1 = function(lang) {
        switch(lang.$){
            case "Am":
                return "ትንሽ";
            case "Ar":
                return "صغير";
            case "Bg":
                return "малък";
            case "Bn":
                return "ছোট";
            case "De":
                return "klein";
            case "Es":
                return "peque\xf1o";
            case "Fa":
                return "کوچک";
            case "Fr":
                return "petit";
            case "Hi":
                return "छोटा";
            case "Hy":
                return "փոքր";
            case "It":
                return "piccolo";
            case "Ja":
                return "小";
            case "Ka":
                return "პატარა";
            case "Ko":
                return "작게";
            case "Nl":
                return "klein";
            case "Pa":
                return "ਛੋਟਾ";
            case "Pt":
                return "pequeno";
            case "Ru":
                return "мелкий";
            case "Sw":
                return "ndogo";
            case "Tw":
                return "小";
            case "Uk":
                return "маленький";
            case "Ur":
                return "چھوٹا";
            case "Zh":
                return "小";
            default:
                return "small";
        }
    };
    var $author$project$I18n$Translations$baseSize2 = function(lang) {
        switch(lang.$){
            case "Am":
                return "መልካም";
            case "Ar":
                return "متوسط";
            case "Bg":
                return "среден";
            case "Bn":
                return "মাঝারি";
            case "De":
                return "mittel";
            case "Es":
                return "mediano";
            case "Fa":
                return "متوسط";
            case "Fr":
                return "moyen";
            case "Hi":
                return "मध्यम";
            case "Hy":
                return "միջին";
            case "It":
                return "medio";
            case "Ja":
                return "中";
            case "Ka":
                return "საშუალო";
            case "Ko":
                return "보통";
            case "Nl":
                return "medium";
            case "Pa":
                return "ਦਰਮਿਆਨਾ";
            case "Pt":
                return "m\xe9dio";
            case "Ru":
                return "средний";
            case "Sw":
                return "kati";
            case "Tw":
                return "中";
            case "Uk":
                return "середній";
            case "Ur":
                return "درمیانہ";
            case "Zh":
                return "中";
            default:
                return "medium";
        }
    };
    var $author$project$I18n$Translations$baseSize3 = function(lang) {
        switch(lang.$){
            case "Am":
                return "በጣም ስምንት";
            case "Ar":
                return "كبير";
            case "Bg":
                return "голям";
            case "Bn":
                return "বড়";
            case "De":
                return "gro\xdf";
            case "Es":
                return "grande";
            case "Fa":
                return "بزرگ";
            case "Fr":
                return "grand";
            case "Hi":
                return "बड़ा";
            case "Hy":
                return "մեծ";
            case "It":
                return "grande";
            case "Ja":
                return "大";
            case "Ka":
                return "დიდი";
            case "Ko":
                return "크게";
            case "Nl":
                return "groot";
            case "Pa":
                return "ਵੱਡਾ";
            case "Pt":
                return "grande";
            case "Ru":
                return "большой";
            case "Sw":
                return "kubwa";
            case "Tw":
                return "大";
            case "Uk":
                return "великий";
            case "Ur":
                return "بڑا";
            case "Zh":
                return "大";
            default:
                return "large";
        }
    };
    var $author$project$Lia$Settings$Update$ChangeFontSize = function(a) {
        return {
            $: "ChangeFontSize",
            a: a
        };
    };
    var $author$project$I18n$Translations$baseAbc = function(lang) {
        switch(lang.$){
            case "Am":
                return "አማ";
            case "Bn":
                return "এবিসি";
            case "It":
                return "Aa";
            case "Ja":
                return "Aa";
            case "Ka":
                return "Aa";
            case "Ko":
                return "가";
            case "Pa":
                return "ਏਬੀਸੀ";
            case "Pt":
                return "Aa";
            case "Sw":
                return "Aa";
            case "Ur":
                return "Aa";
            default:
                return "Aa";
        }
    };
    var $tesk9$accessible_html$Accessibility$Utils$toTriStateString = A2($elm$core$Basics$composeL, $elm$core$Maybe$withDefault("mixed"), $elm$core$Maybe$map($tesk9$accessible_html$Accessibility$Utils$toBoolString));
    var $tesk9$accessible_html$Accessibility$Aria$checked = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("checked"), $tesk9$accessible_html$Accessibility$Utils$toTriStateString);
    var $author$project$Lia$Settings$View$fontButton = F6(function(grouping, lang, tabbable, size, i, title) {
        return A3($author$project$Lia$Utils$btn, {
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$ChangeFontSize(i)),
            tabbable: tabbable,
            title: title
        }, grouping(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--transparent lia-fontscale__lvl-" + $elm$core$String$fromInt(i)),
            $elm$html$Html$Attributes$class(_Utils_eq(size, i) ? "active" : ""),
            $tesk9$accessible_html$Accessibility$Aria$checked($elm$core$Maybe$Just(_Utils_eq(size, i)))
        ])), _List_fromArray([
            A2($elm$html$Html$span, $author$project$Lia$Utils$noTranslate(_List_Nil), _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$baseAbc(lang))
            ]))
        ]));
    });
    var $author$project$Lia$Settings$View$viewSizing = F4(function(grouping, lang, tabbable, size) {
        return A2($elm$html$Html$div, grouping(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-fontscale")
        ])), _List_fromArray([
            A6($author$project$Lia$Settings$View$fontButton, grouping, lang, tabbable, size, 1, A2($author$project$I18n$Translations$baseFont, lang, $author$project$I18n$Translations$baseSize1(lang))),
            A6($author$project$Lia$Settings$View$fontButton, grouping, lang, tabbable, size, 2, A2($author$project$I18n$Translations$baseFont, lang, $author$project$I18n$Translations$baseSize2(lang))),
            A6($author$project$Lia$Settings$View$fontButton, grouping, lang, tabbable, size, 3, A2($author$project$I18n$Translations$baseFont, lang, $author$project$I18n$Translations$baseSize3(lang)))
        ]));
    });
    var $author$project$Lia$Settings$Types$Pitch = function(a) {
        return {
            $: "Pitch",
            a: a
        };
    };
    var $author$project$Lia$Settings$Update$PreferBrowserTTS = {
        $: "PreferBrowserTTS"
    };
    var $author$project$Lia$Settings$Types$Rate = function(a) {
        return {
            $: "Rate",
            a: a
        };
    };
    var $author$project$I18n$Translations$commentPitch = function(lang) {
        switch(lang.$){
            case "Am":
                return "የድምጽ አንድ ቀይር";
            case "Ar":
                return "تعديل الارتفاع";
            case "Bg":
                return "Промяна на тон";
            case "Bn":
                return "টোন সংশোধন করুন";
            case "De":
                return "Anpassung der Tonh\xf6he";
            case "Es":
                return "ajustar tono";
            case "Fa":
                return "تنظیم تغییر صدا";
            case "Fr":
                return "Ajuster la hauteur du son";
            case "Hi":
                return "ध्वनि सेट करें";
            case "Hy":
                return "ձայնահատկությունը կարգավորել";
            case "It":
                return "Regola l'altezza del tono";
            case "Ja":
                return "音程を変更";
            case "Ka":
                return "ტონის რეგულირება";
            case "Ko":
                return "음높이 조절";
            case "Nl":
                return "Toonhoogte aanpassen";
            case "Pa":
                return "ਧੁਨ ਸੰਰਚਨਾ";
            case "Pt":
                return "Ajustar tom";
            case "Ru":
                return "настройка высоты тона";
            case "Sw":
                return "Badilisha sauti";
            case "Tw":
                return "调整音高";
            case "Uk":
                return "налаштування висоти тону";
            case "Ur":
                return "آواز کی پچ ایڈجسٹ کریں";
            case "Zh":
                return "调整音高";
            default:
                return "Adjust pitch";
        }
    };
    var $author$project$I18n$Translations$commentRate = function(lang) {
        switch(lang.$){
            case "Am":
                return "የድምጽ ፍጥነት ቀይር";
            case "Ar":
                return "تعديل سرعة التشغيل";
            case "Bg":
                return "Промяна на скоростта на възпроизвеждане";
            case "Bn":
                return "প্লেব্যাক গতি সংশোধন করুন";
            case "De":
                return "Anpassung der Abspielgeschwindigkeit";
            case "Es":
                return "ajustar velocidad de reproducci\xf3n";
            case "Fa":
                return "تنظیم سرعت پخش";
            case "Fr":
                return "Ajuster la vitesse de lecture";
            case "Hi":
                return "प्लेबैक गति सेट करें";
            case "Hy":
                return "ձայնագիրը կարգավորել";
            case "It":
                return "Regola la velocit\xe0 di riproduzione";
            case "Ja":
                return "再生速度を変更";
            case "Ka":
                return "ჩათამაშების სიჩქარის რეგულირება";
            case "Ko":
                return "재생 속도 조절";
            case "Nl":
                return "Afspeelsnelheid aanpassen";
            case "Pa":
                return "ਪਲੇਬੈਕ ਗਤੀ ਸੰਰਚਨਾ";
            case "Pt":
                return "Ajustar velocidade de reprodu\xe7\xe3o";
            case "Ru":
                return "настройка скорости воспроизведения";
            case "Sw":
                return "Badilisha kasi ya kucheza";
            case "Tw":
                return "调整播放速度";
            case "Uk":
                return "налаштування швидкості відтворення";
            case "Ur":
                return "پلے بیک کی رفتار ایڈجسٹ کریں";
            case "Zh":
                return "调整播放速度";
            default:
                return "Adjust playback speed";
        }
    };
    var $author$project$Lia$Settings$Update$Change = function(a) {
        return {
            $: "Change",
            a: a
        };
    };
    var $elm$html$Html$Attributes$step = function(n) {
        return A2($elm$html$Html$Attributes$stringProperty, "step", n);
    };
    var $author$project$Lia$Settings$View$slider = F7(function(name, title, message, maximum, grouping, tabbable, value) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "margin-bottom", "10px"),
            $elm$html$Html$Attributes$title(title)
        ]), _List_fromArray([
            A2($elm$html$Html$label, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
                A2($elm$html$Html$Attributes$style, "width", "50px"),
                A2($elm$html$Html$Attributes$style, "margin-right", "10px")
            ]), _List_fromArray([
                $elm$html$Html$text(name)
            ])),
            A2($elm$html$Html$input, grouping(_List_fromArray([
                $elm$html$Html$Attributes$type_("range"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
                $elm$html$Html$Attributes$min("0"),
                $elm$html$Html$Attributes$max(maximum),
                $elm$html$Html$Attributes$step("0.1"),
                $elm$html$Html$Attributes$value(value),
                $elm$html$Html$Events$onInput(A2($elm$core$Basics$composeR, message, $author$project$Lia$Settings$Update$Change)),
                A2($elm$html$Html$Attributes$style, "flex-grow", "1")
            ])), _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "margin-left", "10px"),
                A2($elm$html$Html$Attributes$style, "width", "40px"),
                A2($elm$html$Html$Attributes$style, "text-align", "right")
            ]), _List_fromArray([
                $elm$html$Html$text(value)
            ]))
        ]));
    });
    var $author$project$I18n$Translations$ttsPreferBrowser = function(lang) {
        switch(lang.$){
            case "Am":
                return "የብሮውን ቴክስት-ተምረው መቀመጥ";
            case "Bg":
                return "Предпочитам TTS на браузъра";
            case "Bn":
                return "ব্রাউজার TTS পছন্দ করুন";
            case "De":
                return "Browser-TTS bevorzugen";
            case "Es":
                return "Preferir TTS del navegador";
            case "Fr":
                return "Pr\xe9f\xe9rer le TTS du navigateur";
            case "Hi":
                return "ब्राउज़र TTS को प्राथमिकता दें";
            case "It":
                return "Preferisci la sintesi vocale del browser";
            case "Ja":
                return "ブラウザのTTSを優先する";
            case "Ka":
                return "აირჩიეთ ბრაუზერის TTS";
            case "Ko":
                return "브라우저 TTS 선호";
            case "Nl":
                return "Voorkeur browser TTS";
            case "Pa":
                return "ਬਰਾਊਜ਼ਰ TTS ਦਾ ਪਸੰਦ ਦਿਓ";
            case "Pt":
                return "Preferir TTS do navegador";
            case "Ru":
                return "Предпочитать браузерный TTS";
            case "Sw":
                return "Pendelea kivinjari TTS";
            case "Tw":
                return "首选浏览器 TTS";
            case "Uk":
                return "Надаю перевагу браузеру TTS";
            case "Ur":
                return "براؤزر TTS کو ترجیح دیں";
            case "Zh":
                return "首选浏览器 TTS";
            default:
                return "Prefer browser TTS";
        }
    };
    var $author$project$Lia$Settings$View$viewTTSSettings = F5(function(grouping, lang, tabbable, audio, tts) {
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            A2($elm$html$Html$label, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
            ]), _List_fromArray([
                A2($elm$html$Html$input, grouping(_List_fromArray([
                    $elm$html$Html$Attributes$class("lia-checkbox"),
                    $elm$html$Html$Attributes$type_("checkbox"),
                    $elm$html$Html$Attributes$checked(function() {
                        var _v0 = _Utils_Tuple2(tts.isBrowserSupported, tts.isResponsiveVoiceSupported);
                        _v0$2: while(true)if (_v0.a) {
                            if (!_v0.b) return true;
                            else break _v0$2;
                        } else {
                            if (_v0.b) return false;
                            else break _v0$2;
                        }
                        return tts.preferBrowser;
                    }()),
                    $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$PreferBrowserTTS)),
                    $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                    $elm$html$Html$Attributes$disabled(!(tts.isBrowserSupported && tts.isResponsiveVoiceSupported))
                ])), _List_Nil),
                $elm$html$Html$text($author$project$I18n$Translations$ttsPreferBrowser(lang))
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "flex-direction", "column")
            ]), _List_fromArray([
                A7($author$project$Lia$Settings$View$slider, "Rate", $author$project$I18n$Translations$commentRate(lang), $author$project$Lia$Settings$Types$Rate, "5", grouping, tabbable, audio.rate),
                A7($author$project$Lia$Settings$View$slider, "Pitch", $author$project$I18n$Translations$commentPitch(lang), $author$project$Lia$Settings$Types$Pitch, "2", grouping, tabbable, audio.pitch)
            ]))
        ]));
    });
    var $author$project$Lia$Settings$Update$ChangeTheme = function(a) {
        return {
            $: "ChangeTheme",
            a: a
        };
    };
    var $author$project$I18n$Translations$cBlue = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሰማያዊ";
            case "Ar":
                return "أزرق";
            case "Bg":
                return "Синьо";
            case "Bn":
                return "নীল";
            case "De":
                return "Blau";
            case "Es":
                return "azul";
            case "Fa":
                return "آبی";
            case "Fr":
                return "Bleu";
            case "Hi":
                return "नीला";
            case "Hy":
                return "կապույտ";
            case "It":
                return "blu";
            case "Ja":
                return "青";
            case "Ka":
                return "ლურჯი";
            case "Ko":
                return "파랑";
            case "Nl":
                return "blauw";
            case "Pa":
                return "ਨੀਲਾ";
            case "Pt":
                return "Azul";
            case "Ru":
                return "синий";
            case "Sw":
                return "Bluu";
            case "Tw":
                return "藍色";
            case "Uk":
                return "синій";
            case "Ur":
                return "نیلا";
            case "Zh":
                return "藍色";
            default:
                return "Blue";
        }
    };
    var $author$project$I18n$Translations$cDefault = function(lang) {
        switch(lang.$){
            case "Am":
                return "ነባሪ";
            case "Ar":
                return "المعيار الافتراضي";
            case "Bg":
                return "Подразбиране";
            case "Bn":
                return "ডিফল্ট";
            case "De":
                return "Standard";
            case "Es":
                return "defecto";
            case "Fa":
                return "پیشفرض";
            case "Fr":
                return "Standard";
            case "Hi":
                return "डिफ़ॉल्ट";
            case "Hy":
                return "կանխադրված";
            case "It":
                return "predefinito";
            case "Ja":
                return "デフォルト";
            case "Ka":
                return "ნაგულისხმევი";
            case "Ko":
                return "기본";
            case "Nl":
                return "standaard";
            case "Pa":
                return "ਮੂਲ";
            case "Pt":
                return "Padr\xe3o";
            case "Ru":
                return "стандарт по умолчанию";
            case "Sw":
                return "Chaguomsingi";
            case "Tw":
                return "預設";
            case "Uk":
                return "стандартний";
            case "Ur":
                return "پہلے سے طے شدہ";
            case "Zh":
                return "預設";
            default:
                return "Default";
        }
    };
    var $author$project$I18n$Translations$cRed = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቀይ";
            case "Ar":
                return "أحمر";
            case "Bg":
                return "червен";
            case "Bn":
                return "লাল";
            case "De":
                return "Rot";
            case "Es":
                return "rojo";
            case "Fa":
                return "قرمز";
            case "Fr":
                return "Rouge";
            case "Hi":
                return "लाल";
            case "Hy":
                return "կարմիր";
            case "It":
                return "rosso";
            case "Ja":
                return "赤";
            case "Ka":
                return "წითელი";
            case "Ko":
                return "빨강";
            case "Nl":
                return "rood";
            case "Pa":
                return "ਲਾਲ";
            case "Pt":
                return "Vermelho";
            case "Ru":
                return "красный";
            case "Sw":
                return "nyekundu";
            case "Tw":
                return "红色的";
            case "Uk":
                return "червоний";
            case "Ur":
                return "سرخ";
            case "Zh":
                return "红色的";
            default:
                return "Red";
        }
    };
    var $author$project$I18n$Translations$cSchema = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቀለም ሥነጽሑፍ";
            case "Ar":
                return "نظام الألوان";
            case "Bg":
                return "Цветова схема";
            case "Bn":
                return "রঙের স্কিম";
            case "De":
                return "Farbschema";
            case "Es":
                return "Esquema de colores";
            case "Fa":
                return "طرح رنگی";
            case "Fr":
                return "Sch\xe9ma de couleurs";
            case "Hi":
                return "रंग योजना";
            case "Hy":
                return "Գունային սխեման";
            case "It":
                return "Schema di colori";
            case "Ja":
                return "カラースキーム";
            case "Ka":
                return "ფერის გეგმა";
            case "Ko":
                return "색상 스키마";
            case "Nl":
                return "Kleurenschema";
            case "Pa":
                return "ਰੰਗ ਸਕੀਮ";
            case "Pt":
                return "Esquema de cores";
            case "Ru":
                return "Цветовая схема";
            case "Sw":
                return "Mpango wa rangi";
            case "Tw":
                return "配色方案";
            case "Uk":
                return "Кольорова схема";
            case "Ur":
                return "رنگ سکیم";
            case "Zh":
                return "配色方案";
            default:
                return "Color scheme";
        }
    };
    var $author$project$I18n$Translations$cTurquoise = function(lang) {
        switch(lang.$){
            case "Am":
                return "ዓሣደኝ";
            case "Ar":
                return "فيروزي";
            case "Bg":
                return "тюркоаз";
            case "Bn":
                return "টার্কোয়াজ";
            case "De":
                return "T\xfcrkis";
            case "Es":
                return "turquesa";
            case "Fa":
                return "فیروزه";
            case "Fr":
                return "Turquoise";
            case "Hi":
                return "फ़िरोज़ा";
            case "Hy":
                return "փիրուզագույն";
            case "It":
                return "turchese";
            case "Ja":
                return "ターコイズ";
            case "Ka":
                return "თურქიზი";
            case "Ko":
                return "청록";
            case "Nl":
                return "turkoois";
            case "Pa":
                return "ਫੀਰੋਜ਼ੀ";
            case "Pt":
                return "Turquesa";
            case "Ru":
                return "бирюзовый";
            case "Sw":
                return "Turquoise";
            case "Tw":
                return "绿松石";
            case "Uk":
                return "бірюзовий";
            case "Ur":
                return "فیروزی";
            case "Zh":
                return "绿松石";
            default:
                return "Turquoise";
        }
    };
    var $author$project$I18n$Translations$cYellow = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቢጫ";
            case "Ar":
                return "أصفر";
            case "Bg":
                return "жълт";
            case "Bn":
                return "হলুদ";
            case "De":
                return "Gelb";
            case "Es":
                return "amarillo";
            case "Fa":
                return "رنگ زرد";
            case "Fr":
                return "Jaune";
            case "Hi":
                return "पीला";
            case "Hy":
                return "դեղին";
            case "It":
                return "giallo";
            case "Ja":
                return "黄色";
            case "Ka":
                return "ყვითელი";
            case "Ko":
                return "노랑";
            case "Nl":
                return "geel";
            case "Pa":
                return "ਪੀਲਾ";
            case "Pt":
                return "Amarelo";
            case "Ru":
                return "желтый";
            case "Sw":
                return "Njano";
            case "Tw":
                return "黄色的";
            case "Uk":
                return "жовтий";
            case "Ur":
                return "پیلا";
            case "Zh":
                return "黄色的";
            default:
                return "Yellow";
        }
    };
    var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty("name");
    var $author$project$Lia$Settings$View$viewTheme = F5(function(grouping, lang, tabbable, theme, hasCustom) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-radio-group lia-settings-theme-colors"),
            $tesk9$accessible_html$Accessibility$Role$radioGroup,
            $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$cSchema(lang))
        ]), A2($elm$core$List$map, function(_v0) {
            var color = _v0.a;
            var name = _v0.b;
            var styleClass = _v0.c;
            return A2($elm$html$Html$input, grouping(_List_fromArray([
                $elm$html$Html$Attributes$type_("radio"),
                $elm$html$Html$Attributes$class("lia-radio " + styleClass),
                $elm$html$Html$Attributes$id("lia-theme-color-" + color),
                $elm$html$Html$Attributes$name("lia-theme-color"),
                $elm$html$Html$Attributes$checked(_Utils_eq(theme, color)),
                $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$ChangeTheme(color)),
                $elm$html$Html$Attributes$title(name),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
                $author$project$Lia$Utils$blockKeydown($author$project$Lia$Settings$Update$Ignore)
            ])), _List_Nil);
        }, A2($elm$core$List$append, _List_fromArray([
            _Utils_Tuple3("default", $author$project$I18n$Translations$cDefault(lang), "is-default"),
            _Utils_Tuple3("turquoise", $author$project$I18n$Translations$cTurquoise(lang), "is-turquoise"),
            _Utils_Tuple3("blue", $author$project$I18n$Translations$cBlue(lang), "is-blue"),
            _Utils_Tuple3("red", $author$project$I18n$Translations$cRed(lang), "is-red")
        ]), hasCustom ? _List_fromArray([
            _Utils_Tuple3("yellow", $author$project$I18n$Translations$cYellow(lang), "is-yellow"),
            _Utils_Tuple3("custom", $author$project$I18n$Translations$cDefault(lang), "is-custom")
        ]) : _List_fromArray([
            _Utils_Tuple3("yellow", $author$project$I18n$Translations$cYellow(lang), "is-yellow")
        ]))));
    });
    var $author$project$Lia$Settings$Update$Tooltips = {
        $: "Tooltips"
    };
    var $author$project$I18n$Translations$confTooltip = function(lang) {
        switch(lang.$){
            case "Am":
                return "የማጣሪያ ጥቅል";
            case "Ar":
                return "تلميحات";
            case "Bg":
                return "Подсказки";
            case "Bn":
                return "টুল";
            case "De":
                return "Tooltipps";
            case "Fa":
                return "راهنمای ابزار";
            case "Fr":
                return "Infobulles";
            case "Hi":
                return "टूलटिप्स";
            case "It":
                return "Suggerimento";
            case "Ja":
                return "ツールチップ";
            case "Ka":
                return "ინსტრუქციები";
            case "Ko":
                return "도구 설명";
            case "Pa":
                return "ਉਪਸਮਾਨ";
            case "Pt":
                return "Dicas de ferramentas";
            case "Ru":
                return "подсказки";
            case "Sw":
                return "Vidokezo vya zana";
            case "Tw":
                return "工具提示";
            case "Uk":
                return "підказки";
            case "Ur":
                return "ٹول ٹپس";
            case "Zh":
                return "工具提示";
            default:
                return "Tooltips";
        }
    };
    var $author$project$Const$tooltipBreakpoint = $author$project$Const$globalBreakpoints.sm;
    var $author$project$Lia$Settings$View$viewTooltips = F5(function(grouping, lang, tabbable, width, enabled) {
        return _Utils_cmp(width, $author$project$Const$tooltipBreakpoint) > -1 ? A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label"),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
        ]), _List_fromArray([
            A2($elm$html$Html$input, grouping(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-checkbox"),
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(enabled),
                $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Tooltips)),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable)
            ])), _List_Nil),
            $elm$html$Html$text($author$project$I18n$Translations$confTooltip(lang))
        ])) : $elm$html$Html$text("");
    });
    var $author$project$Lia$Settings$Update$VideoComments = {
        $: "VideoComments"
    };
    var $author$project$I18n$Translations$commentHide = function(lang) {
        switch(lang.$){
            case "Am":
                return "የቪዲዮ አስተካክል ደብቅ";
            case "Ar":
                return "إخفاء تعليقات الفيديو";
            case "Bg":
                return "Скриване на видео коментари";
            case "Bn":
                return "ভিডিও মন্তব্য লুকান";
            case "De":
                return "Videokommentare ausblenden";
            case "Es":
                return "Ocultar los comentarios del video";
            case "Fa":
                return "مخفی کردن نظرات ویدیو";
            case "Fr":
                return "Masquer les commentaires vid\xe9o";
            case "Hi":
                return "वीडियो टिप्पणियाँ छुपाएं";
            case "Hy":
                return "թաքցնել տեսանյութի մեջ մեկնաբանությունները";
            case "It":
                return "Nascondi i commenti video";
            case "Ja":
                return "動画のコメントを非表示にする";
            case "Ka":
                return "დამალე ვიდეო კომენტარები";
            case "Ko":
                return "비디오 댓글 숨기기";
            case "Nl":
                return "Hide video comments";
            case "Pa":
                return "ਵੀਡੀਓ ਟਿੱਪਣੀਆਂ ਛੁਪਾਓ";
            case "Pt":
                return "Ocultar coment\xe1rios do v\xeddeo";
            case "Ru":
                return "Скрыть комментарии к видео";
            case "Sw":
                return "Ficha maoni ya video";
            case "Tw":
                return "隱藏影片評論";
            case "Uk":
                return "Приховати коментарі до відео";
            case "Ur":
                return "ویڈیو تبصرے چھپائیں";
            case "Zh":
                return "隱藏影片評論";
            default:
                return "Hide video comments";
        }
    };
    var $author$project$Lia$Settings$View$viewVideoComment = F5(function(grouping, lang, tabbable, width, enabled) {
        return A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label"),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
        ]), _List_fromArray([
            A2($elm$html$Html$input, grouping(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-checkbox"),
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(enabled),
                $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$VideoComments)),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable)
            ])), _List_Nil),
            $elm$html$Html$text($author$project$I18n$Translations$commentHide(lang))
        ]));
    });
    var $author$project$Lia$Settings$View$viewSettings = F4(function(lang, tabbable, width, settings) {
        var grouping = $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowSettings);
        return _List_fromArray([
            A4($author$project$Lia$Settings$View$viewLightMode, grouping, lang, tabbable, settings.light),
            $author$project$Lia$Settings$View$divider,
            A5($author$project$Lia$Settings$View$viewTheme, grouping, lang, tabbable, settings.theme, !_Utils_eq(settings.customTheme, $elm$core$Maybe$Nothing)),
            $author$project$Lia$Settings$View$divider,
            A4($author$project$Lia$Settings$View$viewEditorTheme, grouping, lang, tabbable, settings.editor),
            $author$project$Lia$Settings$View$divider,
            A4($author$project$Lia$Settings$View$viewSizing, grouping, lang, tabbable, settings.font_size),
            $author$project$Lia$Settings$View$divider,
            A4($author$project$Lia$Settings$View$viewFullscreen, grouping, lang, tabbable, settings.fullscreen),
            $author$project$Lia$Settings$View$divider,
            A5($author$project$Lia$Settings$View$viewTooltips, grouping, lang, tabbable, width, settings.tooltips),
            $author$project$Lia$Settings$View$divider,
            A5($author$project$Lia$Settings$View$viewVideoComment, grouping, lang, tabbable, width, settings.hideVideoComments),
            $author$project$Lia$Settings$View$divider,
            A5($author$project$Lia$Settings$View$viewTTSSettings, grouping, lang, tabbable, settings.audio, settings.tts)
        ]);
    });
    var $author$project$Lia$Settings$View$menuSettings = F4(function(width, lang, tabbable, settings) {
        var grouping = $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowSettings);
        return _List_fromArray([
            $author$project$Lia$Settings$View$actionBtn({
                action: $author$project$Lia$Settings$Types$ShowSettings,
                attributes: _List_Nil,
                grouping: grouping,
                icon: "icon-settings",
                open: _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowSettings)),
                title: $author$project$I18n$Translations$confSettings(lang)
            }),
            A3($author$project$Lia$Settings$View$submenu, grouping, _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowSettings)), A4($author$project$Lia$Settings$View$viewSettings, lang, tabbable, width, settings))
        ]);
    });
    var $author$project$Index$Update$Input = function(a) {
        return {
            $: "Input",
            a: a
        };
    };
    var $author$project$Index$Update$LoadCourse = function(a) {
        return {
            $: "LoadCourse",
            a: a
        };
    };
    var $author$project$Index$Model$Files = {
        $: "Files"
    };
    var $author$project$Index$View$Modal$btn_files_import = A3($author$project$Lia$Utils$btn, {
        msg: $elm$core$Maybe$Just($author$project$Index$Update$Modal($elm$core$Maybe$Just($author$project$Index$Model$Files))),
        tabbable: true,
        title: "Import multiple file or a ZIP-archive"
    }, _List_fromArray([
        $elm$html$Html$Attributes$class("mr-1 mb-1")
    ]), _List_fromArray([
        $elm$html$Html$text("Import File(s) / Zip")
    ]));
    var $author$project$Index$View$searchBar = function(url) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "position", "relative")
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$type_("url"),
                $elm$html$Html$Events$onInput($author$project$Index$Update$Input),
                $elm$html$Html$Attributes$value(url),
                $elm$html$Html$Attributes$placeholder("course-url"),
                $elm$html$Html$Attributes$class("lia-input border-grey-light max-w-50 mr-1 mb-1"),
                $author$project$Lia$Utils$blockKeydown($author$project$Index$Update$NoOp)
            ]), _List_Nil),
            function() {
                var deactivated = url === "";
                return A3($author$project$Lia$Utils$btn, {
                    msg: deactivated ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Index$Update$LoadCourse("./?" + $author$project$Lia$Parser$PatReplace$link(url))),
                    tabbable: !deactivated,
                    title: "load"
                }, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("Load from URL")
                ]));
            }(),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("As an alternative you can upload courses from your device to the browser, either from separate files or from a directory.")
            ])),
            $author$project$Index$View$Modal$btn_files_import,
            $author$project$Index$View$Modal$btn_directory_import,
            A2($elm$html$Html$hr, _List_fromArray([
                $elm$html$Html$Attributes$class("border-grey-light max-w-50 mr-1 mb-1")
            ]), _List_Nil)
        ]));
    };
    var $author$project$Index$View$Base$view = A2($elm$html$Html$section, _List_Nil, _List_fromArray([
        A2($elm$html$Html$br, _List_Nil, _List_Nil),
        A2($elm$html$Html$p, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-paragraph")
        ]), _List_fromArray([
            $elm$html$Html$text("If you cannot see any courses in this list, try out one of the following links, to get more information about this project and to visit some examples and free interactive books.")
        ])),
        A2($elm$html$Html$u, _List_Nil, _List_fromArray([
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href($author$project$Const$urlLiascript),
                    $elm$html$Html$Attributes$target("_blank")
                ]), _List_fromArray([
                    $elm$html$Html$text("Project-Website")
                ]))
            ])),
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $author$project$Index$View$Base$href("https://raw.githubusercontent.com/liaScript/docs/master/README.md"),
                    $elm$html$Html$Attributes$target("_blank")
                ]), _List_fromArray([
                    $elm$html$Html$text("Project-Documentation")
                ]))
            ])),
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $author$project$Index$View$Base$href("https://raw.githubusercontent.com/liaScript/index/master/README.md"),
                    $elm$html$Html$Attributes$target("_blank")
                ]), _List_fromArray([
                    $elm$html$Html$text("Index")
                ]))
            ]))
        ])),
        A2($elm$html$Html$br, _List_Nil, _List_Nil),
        A2($elm$html$Html$p, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-paragraph")
        ]), _List_fromArray([
            $elm$html$Html$text("At the end, we hope to learn from your courses.")
        ])),
        A2($elm$html$Html$p, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-paragraph")
        ]), _List_fromArray([
            $elm$html$Html$text("Have a nice one ;-) ...")
        ]))
    ]));
    var $author$project$Library$Masonry$Item = F3(function(id, height, data) {
        return {
            data: data,
            height: height,
            id: id
        };
    });
    var $author$project$Library$Masonry$heightToFloat = function(height) {
        if (height.$ === "Known") {
            var h = height.a;
            return h;
        } else {
            var h = height.a;
            return h;
        }
    };
    var $author$project$Library$Masonry$pickColumn = function(dict) {
        var comp = F3(function(id, h1, acc) {
            var _v0 = A2($elm$core$Maybe$map, function(_v1) {
                var h2 = _v1.b;
                return _Utils_cmp(h1, h2) < 1;
            }, acc);
            if (_v0.$ === "Just" && !_v0.a) return acc;
            else return $elm$core$Maybe$Just(_Utils_Tuple2(id, h1));
        });
        return A2($elm$core$Maybe$map, $elm$core$Tuple$first, A3($elm$core$Dict$foldr, comp, $elm$core$Maybe$Nothing, dict));
    };
    var $author$project$Library$Masonry$upsert = F3(function(k, v, dict) {
        var _v0 = A2($elm$core$Dict$get, k, dict);
        if (_v0.$ === "Nothing") return A3($elm$core$Dict$insert, k, v, dict);
        else {
            var v2 = _v0.a;
            return A3($elm$core$Dict$insert, k, v + v2, dict);
        }
    });
    var $author$project$Library$Masonry$insert = F3(function(heights, _v0, acc) {
        var id = _v0.a;
        var id_ = id.a;
        var data = _v0.b;
        var columnHeights = acc.a;
        var columns = acc.b;
        var _v1 = A3($elm$core$Maybe$map2, $elm$core$Tuple$pair, A2($elm$core$Dict$get, id_, heights), $author$project$Library$Masonry$pickColumn(columnHeights));
        if (_v1.$ === "Just") {
            var _v2 = _v1.a;
            var height = _v2.a;
            var columnId = _v2.b;
            return _Utils_Tuple2(A3($author$project$Library$Masonry$upsert, columnId, $author$project$Library$Masonry$heightToFloat(height), columnHeights), A3($elm$core$Dict$update, columnId, $elm$core$Maybe$map($elm$core$List$cons(A3($author$project$Library$Masonry$Item, id, height, data))), columns));
        } else return acc;
    });
    var $author$project$Library$Masonry$toColumns = F2(function(columnCount, _v0) {
        var masonry = _v0.a;
        var initDict = function(v) {
            return $elm$core$Dict$fromList(A2($elm$core$List$map, function(columnId) {
                return _Utils_Tuple2(columnId, v);
            }, A2($elm$core$List$range, 0, columnCount - 1)));
        };
        var columns = initDict(_List_Nil);
        var columnHeights = initDict(0);
        return A3($elm$core$Dict$foldr, F3(function(_v1, v, acc) {
            return A2($elm$core$List$cons, $elm$core$List$reverse(v), acc);
        }), _List_Nil, A3($elm$core$List$foldl, $author$project$Library$Masonry$insert(masonry.heights), _Utils_Tuple2(columnHeights, columns), masonry.items).b);
    });
    var $author$project$Library$Masonry$heightToClass = function(height) {
        if (height.$ === "Known") return "elm-masonry-item-height-known";
        else return "elm-masonry-item-height-unknown";
    };
    var $author$project$Library$Masonry$viewItem = F3(function(toView, masonryId, item) {
        var _v0 = item.id;
        var idString = _v0.a;
        return _Utils_Tuple2(idString, A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id(idString),
            $elm$html$Html$Attributes$class("elm-masonry-item"),
            $elm$html$Html$Attributes$class($author$project$Library$Masonry$heightToClass(item.height))
        ]), _List_fromArray([
            A2(toView, item.id, item.data)
        ])));
    });
    var $author$project$Library$Masonry$viewColumn = F4(function(maxWidth, toView, id, column) {
        return A3($elm$html$Html$Keyed$node, "div", _List_fromArray([
            $elm$html$Html$Attributes$class("elm-masonry-column"),
            maxWidth
        ]), A2($elm$core$List$map, A2($author$project$Library$Masonry$viewItem, toView, id), column));
    });
    var $author$project$Library$Masonry$viewColumns = F5(function(num, attributes, toView, id, columns) {
        var maxColumnWidth = A2($elm$html$Html$Attributes$style, "max-width", $elm$core$String$fromFloat(100 / num) + "%");
        return A2($elm$html$Html$div, A2($elm$core$List$cons, A2($elm$html$Html$Attributes$style, "display", "flex"), A2($elm$core$List$cons, $elm$html$Html$Attributes$class("elm-masonry-columns"), attributes)), A2($elm$core$List$map, A3($author$project$Library$Masonry$viewColumn, maxColumnWidth, toView, id), columns));
    });
    var $author$project$Library$Masonry$view = F2(function(_v0, masonry) {
        var columns = _v0.columns;
        var toView = _v0.toView;
        var attributes = _v0.attributes;
        var id = masonry.a.id;
        return A5($author$project$Library$Masonry$viewColumns, columns, attributes, toView, id, A2($author$project$Library$Masonry$toColumns, columns, masonry));
    });
    var $author$project$Index$View$view = F3(function(session, settings, model) {
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            A2($elm$html$Html$map, $author$project$Index$Update$UpdateSettings, $author$project$Lia$Settings$View$header({
                active: _Utils_eq(model.modal, $elm$core$Maybe$Nothing),
                buttons: _List_fromArray([
                    _Utils_Tuple2(F3(function(_v0, _v1, _v2) {
                        return _List_Nil;
                    }), "ignore"),
                    _Utils_Tuple2($author$project$Lia$Settings$View$menuSettings(session.screen.width), "settings")
                ]),
                lang: $author$project$I18n$Translations$En,
                logo: $author$project$Const$icon,
                online: false,
                progress: "0px",
                screen: session.screen,
                settings: settings
            })),
            A2($elm$html$Html$div, A2($author$project$Lia$Utils$deactivate, !_Utils_eq(model.modal, $elm$core$Maybe$Nothing), _List_fromArray([
                $elm$html$Html$Attributes$class("lia-slide__container")
            ])), _List_fromArray([
                A2($elm$html$Html$main_, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-slide__content"),
                    session.screen.width < 240 ? A2($elm$html$Html$Attributes$style, "padding", "0 1rem") : A2($elm$html$Html$Attributes$style, "min-width", "100%")
                ]), _List_fromArray([
                    A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("LiaScript: Open-courSe")
                    ])),
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("( ... search a list of free LiaScript courses and related material on "),
                        A2($elm$html$Html$a, _List_fromArray([
                            $elm$html$Html$Attributes$href("https://github.com/topics/liascript"),
                            $elm$html$Html$Attributes$target("_blank")
                        ]), _List_fromArray([
                            $elm$html$Html$text("GitHub")
                        ])),
                        $elm$html$Html$text(" )")
                    ])),
                    $author$project$Index$View$searchBar(model.input),
                    function() {
                        if ($elm$core$List$isEmpty(model.courses) && model.initialized) return $author$project$Index$View$Base$view;
                        else {
                            if (model.initialized) {
                                var config = {
                                    attributes: _List_fromArray([
                                        A2($elm$html$Html$Attributes$style, "gap", "2rem"),
                                        A2($elm$html$Html$Attributes$style, "overflow", "hidden")
                                    ]),
                                    columns: (session.screen.width / 600 | 0) + 1,
                                    toView: $author$project$Index$View$itemView(session.share)
                                };
                                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                                    A2($elm$html$Html$p, _List_fromArray([
                                        A2($elm$html$Html$Attributes$style, "padding-top", "1rem")
                                    ]), _List_fromArray([
                                        $elm$html$Html$text("These courses are stored locally in your browser and are only visible to you. You can access them offline and safely remove or reset any of them at any time.")
                                    ])),
                                    A2($author$project$Library$Masonry$view, config, model.masonry)
                                ]));
                            } else return $elm$html$Html$text("");
                        }
                    }()
                ]))
            ])),
            function() {
                var _v3 = model.modal;
                if (_v3.$ === "Nothing") return $elm$html$Html$text("");
                else if (_v3.a.$ === "Files") {
                    var _v4 = _v3.a;
                    return $author$project$Index$View$Modal$files(model.error);
                } else {
                    var _v5 = _v3.a;
                    return $author$project$Index$View$Modal$directory(model.error);
                }
            }()
        ]));
    });
    var $author$project$Lia$Settings$View$design = function(model) {
        return _List_fromArray([
            $elm$html$Html$Attributes$class("lia-canvas"),
            $elm$html$Html$Attributes$class(model.table_of_contents ? "lia-toc--visible" : "lia-toc--hidden"),
            $elm$html$Html$Attributes$class(model.support_menu ? "lia-support--visible" : "lia-support--hidden"),
            $elm$html$Html$Attributes$class(function() {
                var _v0 = model.mode;
                switch(_v0.$){
                    case "Textbook":
                        return "lia-mode--textbook";
                    case "Presentation":
                        return "lia-mode--presentation";
                    default:
                        return "lia-mode--slides";
                }
            }())
        ]);
    };
    var $author$project$Lia$View$isHidden = function(model) {
        var _v0 = _Utils_Tuple3(model.settings.sync, model.modal, model.settings.showQRCode);
        if (_v0.a.$ === "Just" && _v0.a.a) return true;
        else {
            if (_v0.b.$ === "Just") return true;
            else {
                if (_v0.c) return true;
                else return false;
            }
        }
    };
    var $author$project$Lia$Update$Home = {
        $: "Home"
    };
    var $author$project$Lia$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$I18n$Translations$home = function(lang) {
        switch(lang.$){
            case "Am":
                return "ዋና ገጽ";
            case "Bn":
                return "হোম";
            case "De":
                return "\xdcbersicht";
            case "Fr":
                return "Vue d'ensemble";
            case "Hi":
                return "सिंहावलोकन";
            case "It":
                return "Home";
            case "Ja":
                return "ホーム";
            case "Ka":
                return "მთავარი";
            case "Ko":
                return "집";
            case "Pa":
                return "ਘਰ";
            case "Pt":
                return "In\xedcio";
            case "Ru":
                return "нет войне";
            case "Sw":
                return "Nyumbani";
            case "Ur":
                return "ہوم";
            default:
                return "Home";
        }
    };
    var $author$project$Lia$Index$View$bottom = F3(function(lang, active, msg) {
        return A3($author$project$Lia$Utils$btn, {
            msg: $elm$core$Maybe$Just(msg),
            tabbable: active,
            title: ""
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--transparent"),
            $elm$html$Html$Attributes$id("lia-btn-home"),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!active)
        ]), _List_fromArray([
            A2($author$project$Lia$Utils$icon, "icon-grid", _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__text")
            ]), _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$home(lang))
            ]))
        ]));
    });
    var $author$project$Lia$Settings$Update$TableOfContents = {
        $: "TableOfContents"
    };
    var $author$project$I18n$Translations$baseToc = function(lang) {
        switch(lang.$){
            case "Am":
                return "የዋጋ ዓረብ";
            case "Ar":
                return "جدول المحتويات";
            case "Bg":
                return "Съдържание";
            case "Bn":
                return "সূচী";
            case "De":
                return "Inhaltsverzeichnis";
            case "Es":
                return "\xedndice";
            case "Fa":
                return "فهرست مطالب";
            case "Fr":
                return "Table des mati\xe8res";
            case "Hi":
                return "सामग्री की तालिका";
            case "Hy":
                return "բովանդակություն";
            case "It":
                return "indice";
            case "Ja":
                return "目次";
            case "Ka":
                return "შინაარსის სია";
            case "Ko":
                return "목차";
            case "Nl":
                return "Inhoudsopgave";
            case "Pa":
                return "ਸਮੱਗਰੀ ਦੇ ਨਾਲ-ਨਾਲ";
            case "Pt":
                return "Sum\xe1rio";
            case "Ru":
                return "оглавление";
            case "Sw":
                return "Yaliyomo";
            case "Tw":
                return "目錄";
            case "Uk":
                return "зміст";
            case "Ur":
                return "فہرست مشمولات";
            case "Zh":
                return "目錄";
            default:
                return "Table of Contents";
        }
    };
    var $author$project$Lia$Settings$View$btnIndex = F2(function(lang, open) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: open ? "icon-close" : "icon-table",
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$TableOfContents)),
            tabbable: true,
            title: $author$project$I18n$Translations$baseToc(lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$id("lia-btn-toc"),
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent"),
            $tesk9$accessible_html$Accessibility$Aria$controls(_List_fromArray([
                "lia-toc"
            ])),
            $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp,
            $tesk9$accessible_html$Accessibility$Aria$expanded(open)
        ]));
    });
    var $andre_dietrich$elm_conditional$Conditional$List$appendIf = $andre_dietrich$elm_conditional$Conditional$apply2If($elm$core$List$append);
    var $andre_dietrich$elm_conditional$Conditional$String$attachIf = F3(function(conditionMet, a, b) {
        return conditionMet ? _Utils_ap(b, a) : b;
    });
    var $author$project$Lia$Index$View$itemLink = F3(function(active, sectionId, section) {
        return $elm$html$Html$a(A3($andre_dietrich$elm_conditional$Conditional$List$appendIf, _Utils_eq(sectionId, section.id), _List_fromArray([
            $elm$html$Html$Attributes$id("focusedToc"),
            $elm$html$Html$Attributes$class("lia-active")
        ]), _List_fromArray([
            $tesk9$accessible_html$Accessibility$Key$tabbable(active),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!active),
            $elm$html$Html$Attributes$class(A3($andre_dietrich$elm_conditional$Conditional$String$attachIf, !section.visible, " hide", "lia-toc__link lia-toc__link--is-lvl-" + $elm$core$String$fromInt(section.indentation))),
            $elm$html$Html$Attributes$href("#" + $elm$core$String$fromInt(section.id + 1))
        ])));
    });
    var $author$project$Lia$Index$View$item = F5(function(lang, active, sectionId, msg, section) {
        return A2($elm$html$Html$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$pair(section.id), msg), A4($author$project$Lia$Index$View$itemLink, active, sectionId, section, A2($elm$core$List$map, A7($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, lang, false, false, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing), section.title)));
    });
    var $author$project$Lia$Index$View$content = F4(function(lang, active, sectionId, msg) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$toList, $elm$core$List$map(A4($author$project$Lia$Index$View$item, lang, active, sectionId, msg)));
    });
    var $tesk9$accessible_html$Accessibility$Landmark$navigation = $tesk9$accessible_html$Accessibility$Utils$role("navigation");
    var $tesk9$accessible_html$Accessibility$Landmark$search = $tesk9$accessible_html$Accessibility$Utils$role("search");
    var $author$project$Lia$Index$Update$DeleteSearch = {
        $: "DeleteSearch"
    };
    var $author$project$Lia$Index$Update$ScanIndex = function(a) {
        return {
            $: "ScanIndex",
            a: a
        };
    };
    var $author$project$I18n$Translations$baseDelete = function(lang) {
        switch(lang.$){
            case "Am":
                return "ፈልግ ያድገት";
            case "Ar":
                return "إزالة البحث";
            case "Bg":
                return "търсене изтриване";
            case "Bn":
                return "অনুসন্ধান মুছে ফেলুন";
            case "De":
                return "Suche l\xf6schen";
            case "Es":
                return "eliminar b\xfasqueda";
            case "Fa":
                return "جستجو را حذف کنید";
            case "Fr":
                return "Effacer la recherche";
            case "Hi":
                return "खोज हटाएं";
            case "Hy":
                return "ջնջել որոնումը";
            case "It":
                return "cancella ricerca";
            case "Ja":
                return "検索をクリア";
            case "Ka":
                return "ძიების გასუფთავება";
            case "Ko":
                return "입력 내용 지우기";
            case "Nl":
                return "Duidelijke zoek";
            case "Pa":
                return "ਖੋਜ ਹਟਾਓ";
            case "Pt":
                return "limpar busca";
            case "Ru":
                return "удалить поиск";
            case "Sw":
                return "tafuta wazi";
            case "Tw":
                return "删除搜寻";
            case "Uk":
                return "видалити пошук";
            case "Ur":
                return "تلاش صاف کریں";
            case "Zh":
                return "删除搜寻";
            default:
                return "clear search";
        }
    };
    var $author$project$I18n$Translations$baseNoResult = function(lang) {
        switch(lang.$){
            case "Am":
                return "ምንም ውጤት የሉም";
            case "Ar":
                return "ولا أي نتيجة";
            case "Bg":
                return "няма резултати";
            case "Bn":
                return "কোন ফলাফল নেই";
            case "De":
                return "kein Ergebnis";
            case "Es":
                return "No hay resultados";
            case "Fa":
                return "هیچ نتیجه ای";
            case "Fr":
                return "aucun r\xe9sultat";
            case "Hi":
                return "कोई परिणाम नहीं";
            case "Hy":
                return "արդյունք չկա";
            case "It":
                return "non ci sono risultati";
            case "Ja":
                return "結果なし";
            case "Ka":
                return "შედეგები არ არის";
            case "Ko":
                return "결과 없음";
            case "Nl":
                return "Geen resultaten";
            case "Pa":
                return "ਕੋਈ ਨਤੀਜਾ ਨਹੀਂ";
            case "Pt":
                return "sem resultados";
            case "Ru":
                return "нет результатов";
            case "Sw":
                return "hakuna matokeo";
            case "Tw":
                return "没有结果";
            case "Uk":
                return "немає результатів";
            case "Ur":
                return "کوئی نتیجہ نہیں";
            case "Zh":
                return "没有结果";
            default:
                return "no results";
        }
    };
    var $author$project$I18n$Translations$baseOneResult = function(lang) {
        switch(lang.$){
            case "Am":
                return "አንድ ውጤት";
            case "Ar":
                return "نتيجة واحدة";
            case "Bg":
                return "един резултат";
            case "Bn":
                return "একটি ফলাফল";
            case "De":
                return "ein Ergebnis";
            case "Es":
                return "un resultado";
            case "Fa":
                return "یک نتیجه";
            case "Fr":
                return "un r\xe9sultat";
            case "Hi":
                return "एक परिणाम";
            case "Hy":
                return "մեկ արդյունք";
            case "It":
                return "un risultato";
            case "Ja":
                return "1件の結果";
            case "Ka":
                return "ერთი შედეგი";
            case "Ko":
                return "단일 결과";
            case "Nl":
                return "een resultaat";
            case "Pa":
                return "ਇੱਕ ਨਤੀਜਾ";
            case "Pt":
                return "um resultado";
            case "Ru":
                return "один результат";
            case "Sw":
                return "matokeo moja";
            case "Tw":
                return "一个结果";
            case "Uk":
                return "один результат";
            case "Ur":
                return "ایک نتیجہ";
            case "Zh":
                return "一个结果";
            default:
                return "one result";
        }
    };
    var $author$project$I18n$Translations$baseResults = function(lang) {
        switch(lang.$){
            case "Am":
                return "ውጤቶች";
            case "Ar":
                return "النتائج";
            case "Bg":
                return "Резултати";
            case "Bn":
                return "ফলাফল";
            case "De":
                return "Ergebnisse";
            case "Es":
                return "Resultados";
            case "Fa":
                return "نتایج";
            case "Fr":
                return "R\xe9sultats";
            case "Hi":
                return "परिणाम";
            case "Hy":
                return "արդյունքներ";
            case "It":
                return "risultati";
            case "Ja":
                return "結果";
            case "Ka":
                return "შედეგები";
            case "Ko":
                return "결과";
            case "Nl":
                return "Resultaten";
            case "Pa":
                return "ਨਤੀਜੇ";
            case "Pt":
                return "resultados";
            case "Ru":
                return "результаты";
            case "Sw":
                return "matokeo";
            case "Tw":
                return "结果";
            case "Uk":
                return "результати";
            case "Ur":
                return "نتائج";
            case "Zh":
                return "结果";
            default:
                return "results";
        }
    };
    var $author$project$I18n$Translations$baseSearch = function(lang) {
        switch(lang.$){
            case "Am":
                return "ፈልግ";
            case "Ar":
                return "بحث";
            case "Bg":
                return "Търсене";
            case "Bn":
                return "অনুসন্ধান";
            case "De":
                return "Suche";
            case "Es":
                return "buscar";
            case "Fa":
                return "جستجو";
            case "Fr":
                return "Recherche";
            case "Hi":
                return "खोजें";
            case "Hy":
                return "փնտրել";
            case "It":
                return "Cerca";
            case "Ja":
                return "検索";
            case "Ka":
                return "ძიება";
            case "Ko":
                return "찾기";
            case "Nl":
                return "zoek";
            case "Pa":
                return "ਖੋਜ";
            case "Pt":
                return "Buscar";
            case "Ru":
                return "поиск";
            case "Sw":
                return "Tafuta";
            case "Tw":
                return "搜尋";
            case "Uk":
                return "пошук";
            case "Ur":
                return "تلاش";
            case "Zh":
                return "搜尋";
            default:
                return "Search";
        }
    };
    var $tesk9$accessible_html$Accessibility$Live$assertive = A2($tesk9$accessible_html$Accessibility$Utils$aria, "live", "assertive");
    var $tesk9$accessible_html$Accessibility$Live$liveAssertive = $tesk9$accessible_html$Accessibility$Live$assertive;
    var $author$project$Lia$Index$View$search = F4(function(lang, active, results, model) {
        return _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$type_("search"),
                $elm$html$Html$Attributes$value(model),
                $elm$html$Html$Attributes$class("lia-input"),
                $elm$html$Html$Attributes$placeholder($author$project$I18n$Translations$baseSearch(lang)),
                $elm$html$Html$Events$onInput($author$project$Lia$Index$Update$ScanIndex),
                $author$project$Lia$Utils$blockKeydown($author$project$Lia$Index$Update$ScanIndex(model)),
                $elm$html$Html$Attributes$id("lia-input-search"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(active),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!active),
                $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                    $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Index$Update$ScanIndex(""))
                ]))
            ]), _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("icon icon-search")
            ]), _List_Nil),
            $elm$core$String$isEmpty(model) ? $elm$html$Html$text("") : A2($elm$html$Html$button, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-toc__clear-index"),
                $elm$html$Html$Events$onClick($author$project$Lia$Index$Update$DeleteSearch),
                $tesk9$accessible_html$Accessibility$Key$tabbable(active),
                $elm$html$Html$Attributes$title($author$project$I18n$Translations$baseDelete(lang))
            ]), _List_fromArray([
                A2($elm$html$Html$i, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn__icon icon icon-close")
                ]), _List_Nil)
            ])),
            function() {
                if ($elm$core$String$isEmpty(model)) return $elm$html$Html$text("");
                else {
                    var counts = A3($elm$core$Array$foldl, F2(function(s, c) {
                        return s.visible ? c + 1 : c;
                    }), 0, results);
                    return A2($elm$html$Html$span, _List_fromArray([
                        $tesk9$accessible_html$Accessibility$Live$liveAssertive,
                        $elm$html$Html$Attributes$class("hidden-visually")
                    ]), _List_fromArray([
                        $elm$html$Html$text(function() {
                            switch(counts){
                                case 0:
                                    return $author$project$I18n$Translations$baseNoResult(lang);
                                case 1:
                                    return $author$project$I18n$Translations$baseOneResult(lang);
                                default:
                                    return $elm$core$String$fromInt(counts) + (" " + $author$project$I18n$Translations$baseResults(lang));
                            }
                        }())
                    ]));
                }
            }()
        ]);
    });
    var $author$project$Lia$View$viewIndex = F3(function(modalIsActive, hasIndex, model) {
        return A2($elm$html$Html$div, A2($author$project$Lia$Utils$deactivate, modalIsActive, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-toc"),
            $elm$html$Html$Attributes$id("lia-toc"),
            $elm$html$Html$Attributes$class(model.settings.table_of_contents ? "lia-toc--open" : "lia-toc--closed"),
            $tesk9$accessible_html$Accessibility$Landmark$navigation
        ])), _List_fromArray([
            A2($elm$html$Html$map, $author$project$Lia$Update$UpdateSettings, A2($author$project$Lia$Settings$View$btnIndex, model.translation, model.settings.table_of_contents)),
            A2($elm$html$Html$map, $author$project$Lia$Update$UpdateIndex, A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-toc__search"),
                $tesk9$accessible_html$Accessibility$Landmark$search
            ]), A4($author$project$Lia$Index$View$search, model.translation, model.settings.table_of_contents, model.sections, model.index_model))),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-toc__content"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(false)
            ]), A5($author$project$Lia$Index$View$content, model.translation, model.settings.table_of_contents, model.section_active, $author$project$Lia$Update$Script, model.sections)),
            hasIndex ? A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-toc__bottom")
            ]), _List_fromArray([
                A3($author$project$Lia$Index$View$bottom, model.translation, model.settings.table_of_contents, $author$project$Lia$Update$Home)
            ])) : $elm$html$Html$text("")
        ]));
    });
    var $author$project$Lia$Definition$Types$merge = F2(function(main, sub) {
        if (sub.$ === "Nothing") return main;
        else {
            var def = sub.a;
            return _Utils_update(main, {
                author: $elm$core$String$isEmpty(def.author) ? main.author : def.author,
                date: $elm$core$String$isEmpty(def.date) ? main.date : def.date,
                email: $elm$core$String$isEmpty(def.email) ? main.email : def.email,
                macro: A2($elm$core$Dict$union, def.macro, main.macro)
            });
        }
    });
    var $author$project$Lia$Settings$Update$QRCode = {
        $: "QRCode"
    };
    var $author$project$Lia$Settings$Update$Sync = {
        $: "Sync"
    };
    var $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewWithoutQuietZone = $pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewBase(0);
    var $pablohirafuji$elm_qrcode$QRCode$toSvgWithoutQuietZone = F2(function(extraAttrs, _v0) {
        var matrix = _v0.a.matrix;
        return A2($pablohirafuji$elm_qrcode$QRCode$Render$Svg$viewWithoutQuietZone, extraAttrs, matrix);
    });
    var $author$project$Lia$Settings$View$qrCodeView = F5(function(lang, tabbable, marginBig, grouping, url) {
        return A2($elm$core$Result$withDefault, $elm$html$Html$text($author$project$I18n$Translations$qrErr(lang)), A2($elm$core$Result$map, A2($elm$core$Basics$composeR, $pablohirafuji$elm_qrcode$QRCode$toSvgWithoutQuietZone(_List_fromArray([
            A2($elm$html$Html$Attributes$style, "background-color", "#FFF"),
            A2($elm$html$Html$Attributes$style, "padding", marginBig ? "2.4rem" : "0.4rem"),
            $elm$html$Html$Attributes$alt($author$project$I18n$Translations$qrCode(lang) + (": " + url))
        ])), A2($elm$core$Basics$composeR, $elm$core$List$singleton, A2($author$project$Lia$Utils$btn, {
            msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$QRCode)),
            tabbable: tabbable,
            title: "enlarge qr-code"
        }, (function() {
            if (grouping.$ === "Nothing") return $elm$core$Basics$identity;
            else {
                var grouping_ = grouping.a;
                return grouping_;
            }
        })()(_List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "inherit"),
            $elm$html$Html$Attributes$id("lia-button-qr-code"),
            $elm$html$Html$Attributes$class("lia-btn--transparent"),
            A2($elm$html$Html$Attributes$style, "padding", "0  ")
        ]))))), $pablohirafuji$elm_qrcode$QRCode$fromString(url)));
    });
    var $author$project$Lia$Sync$Update$Backend = function(a) {
        return {
            $: "Backend",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$Config = function(a) {
        return {
            $: "Config",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$EnabledScript = function(a) {
        return {
            $: "EnabledScript",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$Password = function(a) {
        return {
            $: "Password",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$Random_Generate = {
        $: "Random_Generate"
    };
    var $author$project$Lia$Sync$Update$Room = function(a) {
        return {
            $: "Room",
            a: a
        };
    };
    var $author$project$Lia$Sync$Update$Connect = {
        $: "Connect"
    };
    var $author$project$Lia$Sync$Update$Disconnect = {
        $: "Disconnect"
    };
    var $author$project$Lia$Sync$View$button = function(settings) {
        var _v0 = settings.state;
        switch(_v0.$){
            case "Disconnected":
                return A3($author$project$Lia$Utils$btn, {
                    msg: $elm$core$String$isEmpty(settings.room) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Lia$Sync$Update$Connect),
                    tabbable: true,
                    title: "connect"
                }, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "margin-top", "2rem")
                ]), _List_fromArray([
                    $elm$html$Html$text("connect")
                ]));
            case "Connected":
                return A3($author$project$Lia$Utils$btn, {
                    msg: $elm$core$Maybe$Just($author$project$Lia$Sync$Update$Disconnect),
                    tabbable: true,
                    title: "disconnect"
                }, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "margin-top", "2rem")
                ]), _List_fromArray([
                    $elm$html$Html$text("disconnect")
                ]));
            default:
                return A3($author$project$Lia$Utils$btn, {
                    msg: $elm$core$Maybe$Nothing,
                    tabbable: false,
                    title: "pending"
                }, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "margin-top", "2rem")
                ]), _List_fromArray([
                    $elm$html$Html$text("pending")
                ]));
        }
    };
    var $author$project$Lia$Sync$Via$checkbox = function(_v0) {
        var active = _v0.active;
        var msg = _v0.msg;
        var label = _v0.label;
        var value = _v0.value;
        return A2($elm$html$Html$label, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin-top", "2rem"),
            $elm$html$Html$Attributes$class("lia-label")
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                active ? $elm$html$Html$Events$onClick(msg) : $elm$html$Html$Attributes$disabled(true),
                A2($elm$html$Html$Attributes$style, "color", "black"),
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(value),
                $elm$html$Html$Attributes$class("lia-checkbox")
            ]), _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label")
            ]), _List_fromArray([
                label
            ]))
        ]));
    };
    var $author$project$Lia$Sync$Via$icon = function(via) {
        return A2($author$project$Lia$Utils$icon, function() {
            switch(via.$){
                case "Edrys":
                    return "icon-edrys icon-xs";
                case "GUN":
                    return "icon-gundb icon-xs";
                case "NoStr":
                    return "icon-nostr icon-xs";
                case "MQTT":
                    return "icon-mqtt icon-xs";
                case "Torrent":
                    return "icon-torrent icon-xs";
                case "PubNub":
                    return "icon-pubnub icon-xs";
                default:
                    return "icon-p2pt icon-xs";
            }
        }(), _List_fromArray([
            A2($elm$html$Html$Attributes$style, "padding-right", "5px"),
            A2($elm$html$Html$Attributes$style, "vertical-align", "middle"),
            A2($elm$html$Html$Attributes$style, "font-size", "inherit")
        ]));
    };
    var $author$project$Lia$Sync$Via$box = $elm$html$Html$p(_List_fromArray([
        A2($elm$html$Html$Attributes$style, "padding", "5px 15px 5px 15px"),
        A2($elm$html$Html$Attributes$style, "border", "1px solid white"),
        A2($elm$html$Html$Attributes$style, "margin-top", "2rem")
    ]));
    var $author$project$Lia$Sync$Via$line = A2($elm$html$Html$hr, _List_fromArray([
        A2($elm$html$Html$Attributes$style, "margin", "5px 0px")
    ]), _List_Nil);
    var $author$project$Lia$Sync$Via$link = F2(function(title, url) {
        return A2($elm$html$Html$a, _List_fromArray([
            $elm$html$Html$Attributes$href(url),
            $elm$html$Html$Attributes$target("blank")
        ]), _List_fromArray([
            $elm$html$Html$text(title)
        ]));
    });
    var $elm$html$Html$ol = _VirtualDom_node("ol");
    var $author$project$Lia$Sync$Via$yjsLink = A2($author$project$Lia$Sync$Via$link, "Y-js", "https://github.com/yjs/yjs");
    var $author$project$Lia$Sync$Via$info = $author$project$Lia$Sync$Via$box(_List_fromArray([
        $elm$html$Html$text("The LiaScript classroom enables a lightweight collaboration between small groups of users. "),
        $elm$html$Html$text('"Lightweight" means that there is no chat (video-conferencing), no logging, and no user roles. '),
        $elm$html$Html$text("Instead, there is only one global state created and shared between the browsers of all users. "),
        $elm$html$Html$text("Thus, a user joins a room with her/his data and when she/he leaves, this data gets removed from the classroom. "),
        $elm$html$Html$text("No data is stored, and no data gets preserved, it is only shared among uses during a classroom session. "),
        $elm$html$Html$text("LiaScript enables the synchronization on the following elements:"),
        A2($elm$html$Html$ol, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "padding", "10px 25px 0px")
        ]), _List_fromArray([
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Global overview on quizzes")
            ])),
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Global overview on surveys")
            ])),
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Collaborative editing of executable code snippets (you have to switch to sync-mode, per editor)")
            ])),
            A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                $elm$html$Html$text("A chat that parses LiaScript, such that you can dynamically create quizzes, surveys, collaborative editors, but also to share videos, galleries, oEmbeds, etc...")
            ]))
        ])),
        $elm$html$Html$text("To synchronize the state between users, we apply "),
        A2($author$project$Lia$Sync$Via$link, "Conflict Free Replicated Datatypes (CRDTs)", "https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"),
        $elm$html$Html$text(" as implemented by "),
        $author$project$Lia$Sync$Via$yjsLink,
        $elm$html$Html$text(". Communication is realized with the help of different backends, which only provide a relay service. "),
        $elm$html$Html$text("The implementation can be found "),
        A2($author$project$Lia$Sync$Via$link, "here", "https://github.com/LiaScript/LiaScript/tree/development/src/typescript/sync"),
        $elm$html$Html$text(". Different browsers might support different backends, which require different settings. "),
        $elm$html$Html$text("You can help us with implementing other backend services. "),
        $author$project$Lia$Sync$Via$line,
        $elm$html$Html$text("Every room needs a unique name; you can click on the generator-button to do this randomly. "),
        $elm$html$Html$text("After a successful connection, you can either share your settings with your audience or the new URL, which contains the entire classroom configuration. "),
        $elm$html$Html$text("A combination of your course-URL and the room name are used to create a unique ID and to prevent collisions with other courses. "),
        $elm$html$Html$text("However, if you want to establish a connection between exported courses (see "),
        A2($author$project$Lia$Sync$Via$link, "LiaScript-Exporter", ""),
        $elm$html$Html$text(") on different platforms, such as "),
        A2($author$project$Lia$Sync$Via$link, "Moodle", "https://en.wikipedia.org/wiki/Moodle"),
        $elm$html$Html$text(", "),
        A2($author$project$Lia$Sync$Via$link, "ILIAS", "https://en.wikipedia.org/wiki/ILIAS"),
        $elm$html$Html$text(", "),
        A2($author$project$Lia$Sync$Via$link, "OPAL", "https://de.wikipedia.org/wiki/OPAL_(Lernplattform)"),
        $elm$html$Html$text(", etc., you can put your room name in single or double quotation marks. "),
        $elm$html$Html$text("This will instruct LiaScript to use the room name only (no course-URL), but you will have to make sure that all users are on the same course and version, to prevent collisions ..."),
        $author$project$Lia$Sync$Via$line,
        $elm$html$Html$text("Note, most backend services are free, and you can also host them by your own. "),
        $elm$html$Html$text("There might be cases where the synchronization is slow or there are collisions, but we are working in the background on optimizations and fixes ;-)")
    ]));
    var $author$project$Lia$Sync$Via$allowScripts = $elm$html$Html$text("If you want to allow scripts to be executed in the chat, you can check this box, allowing for dynamic content and interactivity. However, please be cautious as this may pose security risks if untrusted code is executed.");
    var $author$project$Lia$Sync$Via$infoOn = F2(function(supported, about) {
        return $author$project$Lia$Sync$Via$box(function() {
            var _v0 = _Utils_Tuple2(about, supported);
            switch(_v0.a.$){
                case "Edrys":
                    var _v1 = _v0.a;
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "Edrys", "https://edrys-labs.github.io"),
                        $elm$html$Html$text(" is an open and modular remote teaching platform (and the first live LMS). "),
                        $elm$html$Html$text("It is a great platform for building remote labs and share them by using only a browser locally. "),
                        $elm$html$Html$text("Thus, this synchronization will only work, if you are within an Edrys classroom, for more information try the following link: "),
                        A2($author$project$Lia$Sync$Via$link, "https://github.com/edrys-labsg", "https://github.com/edrys-labs"),
                        $elm$html$Html$text(". Additionally, your course has to be loaded via the "),
                        A2($author$project$Lia$Sync$Via$link, "module-liascript", "https://github.com/edrys-labs/module-liascript"),
                        $elm$html$Html$text("."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                case "GUN":
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "GunDB", "https://gun.eco"),
                        $elm$html$Html$text(" is a small, easy, and fast real-time database for syncing data across various users."),
                        $elm$html$Html$text(" You can use the default relay server hosted at "),
                        A2($author$project$Lia$Sync$Via$link, $author$project$Const$gunDB_ServerURL, $author$project$Const$gunDB_ServerURL),
                        $elm$html$Html$text(". Or, if you don't trust us ;-) you can also use one of the free hosted relay servers listed "),
                        A2($author$project$Lia$Sync$Via$link, "here", "https://github.com/amark/gun/wiki/volunteer.dht"),
                        $elm$html$Html$text(". Multiple peers have to be separated by commas."),
                        $elm$html$Html$text(" The implementation of this classroom can be found "),
                        A2($author$project$Lia$Sync$Via$link, "here", "https://github.com/LiaScript/LiaScript/tree/development/src/typescript/sync/Gun"),
                        $elm$html$Html$text('. By checking "persistent storage" you can ensure that the chat messages and the modified code will be accessible over a longer time period, otherwise the state is deleted.'),
                        $elm$html$Html$text(" However, since this is a free service, we cannot give guarantees that your messages will be stored forever and that the GunDB server might be offline."),
                        $elm$html$Html$text(" If you want to be certain, you can host your own instance of a GunDB server and change the URL appropriately."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                case "NoStr":
                    var _v2 = _v0.a;
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "NoStr", "https://nostr.com"),
                        $elm$html$Html$text(" is a decentralized protocol designed for creating a censorship-resistant global social network."),
                        $elm$html$Html$text('The acronym stands for "Notes and Other Stuff Transmitted by Relays"'),
                        $elm$html$Html$text("It operates through a network of clients and relays, where clients are interfaces for users to interact with the network, and relays act as databases storing and transmitting data. "),
                        $elm$html$Html$text("Users are identified by public keys, and all events (like messages or updates) are signed for verification. "),
                        $elm$html$Html$text("NoStr's decentralization ensures resilience against censorship and single points of failure, as data is distributed across multiple nodes. "),
                        $elm$html$Html$text("It's an open standard, allowing anyone to build upon it, and its design promotes freedom of speech and global accessibility."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                case "MQTT":
                    var _v3 = _v0.a;
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "MQTT (Message Queuing Telemetry Transport)", "https://mqtt.org"),
                        $elm$html$Html$text(" is a lightweight, publish-subscribe messaging protocol designed for machine-to-machine (M2M) communication, particularly in the Internet of Things (IoT) and industrial IoT (IIoT) contexts. "),
                        $elm$html$Html$text("It enables devices to efficiently publish and subscribe to data over the Internet, facilitating communication between embedded devices, sensors, and industrial PLCs. "),
                        $elm$html$Html$text("MQTT operates over a transport protocol like TCP/IP, ensuring ordered, lossless, bi-directional connections."),
                        $elm$html$Html$text("The protocol is event-driven, with a broker managing the distribution of messages between publishers and subscribers based on topics. "),
                        $elm$html$Html$text("This decoupling allows for scalable and reliable data exchange, making MQTT a standard for IoT data transmission."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                case "Torrent":
                    var _v4 = _v0.a;
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "Torrent", "https://www.beautifulcode.co/blog/58-understanding-bittorrent-protocol"),
                        $elm$html$Html$text(" is a peer-to-peer file-sharing protocol used for distributing large files across a network of computers. "),
                        $elm$html$Html$text("In the context of browser-based Pub/Sub (Publish/Subscribe) messaging, Torrent can facilitate the distribution of messages or data across a network of peers, enabling efficient, decentralized communication without a central server. "),
                        $elm$html$Html$text("This approach is particularly useful for real-time applications like chat or live streaming, ensuring data is quickly and reliably distributed to all interested peers."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                case "PubNub":
                    return _List_fromArray([
                        A2($author$project$Lia$Sync$Via$link, "PubNub", "https://www.pubnub.com"),
                        $elm$html$Html$text(" is a real-time communication platform. "),
                        $elm$html$Html$text("To create a classroom that uses this service, you will only require an account, which is free for testing. "),
                        $elm$html$Html$text("After that, you simply have to create a new App with a new Keyset within their dashboard. "),
                        $elm$html$Html$text("These are the keys you will have to provide for this room. "),
                        $elm$html$Html$text("After this, you can simply generate a new set of keys. "),
                        $elm$html$Html$text("The basic steps that are required, are described in more detail "),
                        A2($author$project$Lia$Sync$Via$link, "here", "https://www.appypie.com/faqs/how-to-get-pubnub-publish-key-and-subscribe-key"),
                        $elm$html$Html$text("."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
                default:
                    return _List_fromArray([
                        $elm$html$Html$text("The "),
                        A2($author$project$Lia$Sync$Via$link, "P2PT", "https://github.com/subins2000/p2pt"),
                        $elm$html$Html$text(" project utilizes "),
                        A2($author$project$Lia$Sync$Via$link, "WebTorrent", "https://webtorrent.io"),
                        $elm$html$Html$text(" trackers as signaling servers for establishing peer-to-peer (P2P) connections via "),
                        A2($author$project$Lia$Sync$Via$link, "WebRTC", "https://en.wikipedia.org/wiki/WebRTC"),
                        $elm$html$Html$text(". Therefor P2PT uses magnet-URIs as an app identifier to communicate with the WebTorrent trackers, which provide a list of web peers using the app."),
                        $elm$html$Html$text("With this information, P2PT enables an browser applications to share real-time data and send messages interaction between connected peers."),
                        $elm$html$Html$text("Thus, you have to provide WebSocket-URLs, which start with "),
                        A2($elm$html$Html$code, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-code lia-code--inline")
                        ]), _List_fromArray([
                            $elm$html$Html$text("wss://")
                        ])),
                        $elm$html$Html$text("."),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        A2($elm$html$Html$br, _List_Nil, _List_Nil),
                        $author$project$Lia$Sync$Via$allowScripts
                    ]);
            }
        }());
    });
    var $author$project$Lia$Sync$Via$input = function(_v0) {
        var active = _v0.active;
        var msg = _v0.msg;
        var label = _v0.label;
        var type_ = _v0.type_;
        var value = _v0.value;
        var placeholder = _v0.placeholder;
        var autocomplete = _v0.autocomplete;
        return A2($elm$html$Html$label, _List_Nil, _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label"),
                A2($elm$html$Html$Attributes$style, "margin-top", "2rem")
            ]), _List_fromArray([
                label
            ])),
            A2($elm$html$Html$input, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($elm$core$Maybe$map, $elm$html$Html$Attributes$attribute("autocomplete"), autocomplete), _List_fromArray([
                active ? $elm$html$Html$Events$onInput(msg) : $elm$html$Html$Attributes$disabled(true),
                $elm$html$Html$Attributes$value(value),
                A2($elm$html$Html$Attributes$style, "color", "black"),
                $elm$html$Html$Attributes$type_(type_),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                $elm$html$Html$Attributes$placeholder(placeholder)
            ])), _List_Nil)
        ]));
    };
    var $author$project$Lia$Sync$Update$Open = function(a) {
        return {
            $: "Open",
            a: a
        };
    };
    var $author$project$Lia$Sync$View$selectString = function(via) {
        return A2($elm$html$Html$span, _List_Nil, _List_fromArray([
            $author$project$Lia$Sync$Via$icon(via),
            $elm$html$Html$text(A2($author$project$Lia$Sync$Via$toString, false, via))
        ]));
    };
    var $author$project$Lia$Sync$View$maybeSelect = A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Lia$Sync$View$selectString)), $elm$core$Maybe$withDefault($elm$html$Html$text("None")));
    var $author$project$Lia$Sync$Update$Select = function(a) {
        return {
            $: "Select",
            a: a
        };
    };
    var $author$project$Lia$Sync$View$option = function(via) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Events$onClick($author$project$Lia$Sync$Update$Select(via))
        ]), _List_fromArray([
            $author$project$Lia$Sync$View$maybeSelect(via)
        ]));
    };
    var $author$project$Lia$Sync$View$select = F2(function(editable, sync) {
        return A2($elm$html$Html$map, $author$project$Lia$Sync$Update$Backend, A2($elm$html$Html$label, _List_Nil, _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-label")
            ]), _List_fromArray([
                $elm$html$Html$text("via Backend")
            ])),
            A2($elm$html$Html$br, _List_Nil, _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-dropdown"),
                editable ? $elm$html$Html$Events$onClick($author$project$Lia$Sync$Update$Open(!sync.open)) : $elm$html$Html$Attributes$disabled(true)
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-dropdown__selected"),
                    $tesk9$accessible_html$Accessibility$Aria$hidden(false),
                    $tesk9$accessible_html$Accessibility$Role$button,
                    $tesk9$accessible_html$Accessibility$Aria$expanded(sync.open)
                ]), _List_fromArray([
                    $author$project$Lia$Sync$View$maybeSelect(sync.select),
                    A2($elm$html$Html$i, _List_fromArray([
                        $elm$html$Html$Attributes$class("icon" + (sync.open ? " icon-chevron-up" : " icon-chevron-down")),
                        $tesk9$accessible_html$Accessibility$Role$button
                    ]), _List_Nil)
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-dropdown__options"),
                    $elm$html$Html$Attributes$class(sync.open ? "is-visible" : "is-hidden")
                ]), A2($elm$core$List$cons, $author$project$Lia$Sync$View$option($elm$core$Maybe$Nothing), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$Maybe$Just, $author$project$Lia$Sync$View$option), sync.support)))
            ]))
        ])));
    });
    var $author$project$Lia$Sync$Via$CheckboxGun = {
        $: "CheckboxGun"
    };
    var $author$project$Lia$Sync$Via$InputGun = function(a) {
        return {
            $: "InputGun",
            a: a
        };
    };
    var $author$project$Lia$Sync$Via$InputP2PT = function(a) {
        return {
            $: "InputP2PT",
            a: a
        };
    };
    var $author$project$Lia$Sync$Via$InputPubNub = F2(function(a, b) {
        return {
            $: "InputPubNub",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Sync$Via$view = F2(function(editable, backend) {
        switch(backend.$){
            case "GUN":
                var urls = backend.a.urls;
                var persistent = backend.a.persistent;
                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                    $author$project$Lia$Sync$Via$input({
                        active: editable,
                        autocomplete: $elm$core$Maybe$Just("gun-server"),
                        label: $elm$html$Html$text("relay server"),
                        msg: $author$project$Lia$Sync$Via$InputGun,
                        placeholder: "https://gun1.server, https://gun2.server, ...",
                        type_: "text",
                        value: urls
                    }),
                    $author$project$Lia$Sync$Via$checkbox({
                        active: editable,
                        label: $elm$html$Html$text("persistent storage"),
                        msg: $author$project$Lia$Sync$Via$CheckboxGun,
                        value: persistent
                    })
                ]));
            case "PubNub":
                var pubKey = backend.a.pubKey;
                var subKey = backend.a.subKey;
                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                    $author$project$Lia$Sync$Via$input({
                        active: editable,
                        autocomplete: $elm$core$Maybe$Just("pubnup-publishKey"),
                        label: $elm$html$Html$text("publishKey"),
                        msg: $author$project$Lia$Sync$Via$InputPubNub("pub"),
                        placeholder: "pub-c-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
                        type_: "password",
                        value: pubKey
                    }),
                    $author$project$Lia$Sync$Via$input({
                        active: editable,
                        autocomplete: $elm$core$Maybe$Just("pubnup-subscribeKey"),
                        label: $elm$html$Html$text("subscribeKey"),
                        msg: $author$project$Lia$Sync$Via$InputPubNub("sub"),
                        placeholder: "sub-c-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
                        type_: "password",
                        value: subKey
                    })
                ]));
            case "P2PT":
                var urls = backend.a;
                return $author$project$Lia$Sync$Via$input({
                    active: editable,
                    autocomplete: $elm$core$Maybe$Just("websocket-urls"),
                    label: $elm$html$Html$text("WebTorrent tracker URLs"),
                    msg: $author$project$Lia$Sync$Via$InputP2PT,
                    placeholder: "wss://tracker.torrent",
                    type_: "text",
                    value: urls
                });
            default:
                return $elm$html$Html$text("");
        }
    });
    var $author$project$Lia$Sync$View$viewError = function(message) {
        if (message.$ === "Nothing") return $elm$html$Html$text("");
        else {
            var msg = message.a;
            return A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "margin-top", "2rem"),
                A2($elm$html$Html$Attributes$style, "font-weight", "bold")
            ]), _List_fromArray([
                $elm$html$Html$text("Error: " + msg)
            ]));
        }
    };
    var $author$project$Lia$Sync$View$view = function(settings) {
        var open = function() {
            var _v2 = settings.state;
            if (_v2.$ === "Disconnected") return true;
            else return false;
        }();
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "80%"),
            A2($elm$html$Html$Attributes$style, "max-width", "600px"),
            A2($elm$html$Html$Attributes$style, "overflow", "auto")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "text-align", "center"),
                $elm$html$Html$Attributes$id("lia-modal-focus"),
                $elm$html$Html$Attributes$tabindex(0)
            ]), _List_fromArray([
                $elm$html$Html$text("Classroom "),
                A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, A2($elm$core$Basics$composeR, $author$project$Lia$Sync$Via$icon, A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$span(_List_fromArray([
                    A2($elm$html$Html$Attributes$style, "font-size", "xxx-large"),
                    A2($elm$html$Html$Attributes$style, "vertical-align", "middle")
                ]))))), settings.sync.select))
            ])),
            A2($author$project$Lia$Sync$View$select, open, settings.sync),
            function() {
                var _v0 = settings.sync.select;
                if (_v0.$ === "Nothing") return $author$project$Lia$Sync$Via$info;
                else {
                    var _v1 = _v0.a;
                    var support = _v1.a;
                    var via = _v1.b;
                    return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                        $author$project$Lia$Sync$Via$input({
                            active: open && support,
                            autocomplete: $elm$core$Maybe$Nothing,
                            label: A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                                $elm$html$Html$text("room "),
                                A2($author$project$Lia$Utils$btnIcon, {
                                    icon: "icon-refresh",
                                    msg: open && support ? $elm$core$Maybe$Just($author$project$Lia$Sync$Update$Random_Generate) : $elm$core$Maybe$Nothing,
                                    tabbable: open && support,
                                    title: "generate random"
                                }, _List_fromArray([
                                    $elm$html$Html$Attributes$class("lia-btn--transparent icon-sm"),
                                    A2($elm$html$Html$Attributes$style, "padding", "0")
                                ]))
                            ])),
                            msg: $author$project$Lia$Sync$Update$Room,
                            placeholder: "Just any kind of typeable name",
                            type_: "text",
                            value: settings.room
                        }),
                        $author$project$Lia$Sync$Via$input({
                            active: open && support,
                            autocomplete: $elm$core$Maybe$Nothing,
                            label: $elm$html$Html$text("maybe password"),
                            msg: $author$project$Lia$Sync$Update$Password,
                            placeholder: "",
                            type_: "password",
                            value: settings.password
                        }),
                        A2($elm$html$Html$map, $author$project$Lia$Sync$Update$Backend, A2($elm$html$Html$map, $author$project$Lia$Sync$Update$Config, A2($author$project$Lia$Sync$Via$view, open && support, via))),
                        A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                            $author$project$Lia$Sync$Via$checkbox({
                                active: true,
                                label: $elm$html$Html$text("Allow scripts to be executed in the chat"),
                                msg: $author$project$Lia$Sync$Update$EnabledScript(settings.scriptsEnabled),
                                value: settings.scriptsEnabled
                            })
                        ])),
                        $author$project$Lia$Sync$View$button(settings),
                        $author$project$Lia$Sync$View$viewError(settings.error),
                        A2($author$project$Lia$Sync$Via$infoOn, support, via)
                    ]));
                }
            }()
        ]));
    };
    var $author$project$Lia$View$showModal = function(model) {
        var _v0 = _Utils_Tuple3(model.settings.sync, model.modal, model.settings.showQRCode);
        if (_v0.a.$ === "Just" && _v0.a.a) return A3($author$project$Lia$Utils$modal, $author$project$Lia$Update$UpdateSettings($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Sync)), $elm$core$Maybe$Nothing, $elm$core$List$singleton(A2($elm$html$Html$map, $author$project$Lia$Update$UpdateSync, $author$project$Lia$Sync$View$view(model.sync))));
        else if (_v0.b.$ === "Just") {
            var url = _v0.b.a;
            return A3($author$project$Lia$Utils$modal, $author$project$Lia$Update$Media(_Utils_Tuple3("", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)), $elm$core$Maybe$Nothing, _List_fromArray([
                A2($elm$html$Html$figure, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-figure")
                ]), _List_fromArray([
                    A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-figure__media"),
                        A2($elm$html$Html$Attributes$attribute, "data-media-image", "image"),
                        A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$class(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$html$Html$Attributes$width), A2($elm$core$Dict$get, url, model.media))),
                        A2($elm$html$Html$Attributes$style, "background-image", "url('" + (url + "')")),
                        $elm$html$Html$Attributes$class("lia-figure__zoom"),
                        A2($elm$html$Html$Attributes$attribute, "onmousemove", "window.LIA.img.zoom(event)")
                    ]), _List_fromArray([
                        A2($elm$html$Html$img, _List_fromArray([
                            $elm$html$Html$Attributes$src(url)
                        ]), _List_Nil)
                    ]))
                ]))
            ]));
        } else {
            if (_v0.c) return A3($author$project$Lia$Utils$modal, $author$project$Lia$Update$UpdateSettings($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$QRCode)), $elm$core$Maybe$Nothing, _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "height", "80%"),
                    A2($elm$html$Html$Attributes$style, "max-height", "800px"),
                    A2($elm$html$Html$Attributes$style, "width", "80%"),
                    A2($elm$html$Html$Attributes$style, "max-width", "800px"),
                    A2($elm$html$Html$Attributes$style, "margin-top", "calc(100vh * 0.08)")
                ]), _List_fromArray([
                    A2($elm$html$Html$map, $author$project$Lia$Update$UpdateSettings, A5($author$project$Lia$Settings$View$qrCodeView, model.translation, true, true, $elm$core$Maybe$Nothing, model.url))
                ]))
            ]));
            else return $elm$html$Html$text("");
        }
    };
    var $author$project$Lia$Update$JumpToFragment = function(a) {
        return {
            $: "JumpToFragment",
            a: a
        };
    };
    var $author$project$Lia$Markdown$View$checkTranslation = function(translations) {
        if (translations.$ === "Just") {
            var lang = translations.a;
            return _Utils_eq(lang.old, lang._new);
        } else return false;
    };
    var $author$project$Lia$Markdown$View$addTranslation = function(_v0) {
        var hidden = _v0.hidden;
        var translations = _v0.translations;
        var id = _v0.id;
        var narrator = _v0.narrator;
        var audio = _v0.audio;
        var _v1 = A2($elm$core$Maybe$andThen, $author$project$Lia$Voice$getVoiceFor(narrator), translations);
        if (_v1.$ === "Nothing") {
            if (translations.$ === "Nothing") return _List_Nil;
            else {
                var old = translations.a.old;
                var _new = translations.a._new;
                var name = translations.a.name;
                if (name.$ === "Nothing") return _List_Nil;
                else {
                    var language_name = name.a;
                    return A3($andre_dietrich$elm_conditional$Conditional$List$addIf, $author$project$Lia$Markdown$View$checkTranslation(translations) && !$elm$core$Array$isEmpty(audio), _Utils_Tuple2("data-file", A2($elm$core$String$join, ",", $elm$core$Array$toList(audio))), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, hidden, _Utils_Tuple2("aria-hidden", "true"), _List_fromArray([
                        _Utils_Tuple2("class", hidden ? "translate hidden-visually" : "translate"),
                        _Utils_Tuple2("class", "lia-tts-" + $elm$core$String$fromInt(id)),
                        _Utils_Tuple2("data-voice", language_name),
                        _Utils_Tuple2("data-lang", _new),
                        _Utils_Tuple2("translate", "yes")
                    ])));
                }
            }
        } else {
            var translated = _v1.a.translated;
            var lang = _v1.a.lang;
            var name = _v1.a.name;
            return A3($andre_dietrich$elm_conditional$Conditional$List$addIf, $author$project$Lia$Markdown$View$checkTranslation(translations) && !$elm$core$Array$isEmpty(audio), _Utils_Tuple2("data-file", A2($elm$core$String$join, ",", $elm$core$Array$toList(audio))), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, hidden, _Utils_Tuple2("aria-hidden", "true"), _List_fromArray([
                _Utils_Tuple2("class", function() {
                    var _v4 = _Utils_Tuple2(translated, hidden);
                    if (_v4.a) {
                        if (_v4.b) return "translate hidden-visually";
                        else return "translate";
                    } else {
                        if (_v4.b) return "notranslate hide";
                        else return "notranslate";
                    }
                }()),
                _Utils_Tuple2("class", "lia-tts-" + $elm$core$String$fromInt(id)),
                _Utils_Tuple2("data-voice", name),
                _Utils_Tuple2("data-lang", lang),
                _Utils_Tuple2("translate", translated ? "yes" : "no")
            ])));
        }
    };
    var $author$project$Lia$Markdown$Effect$Model$current_paragraphs = function(model) {
        return A2($elm$core$List$map, function(key) {
            return _Utils_Tuple3(_Utils_eq(key, model.visible), key, A2($elm$core$Maybe$map, function(element) {
                return _Utils_Tuple2(element.narrator, $elm$core$Array$toList(element.content));
            }, A2($elm$core$Dict$get, key, model.comments)));
        }, A2($elm$core$List$range, 0, model.effects));
    };
    var $elm$html$Html$small = _VirtualDom_node("small");
    var $author$project$Lia$View$slideA11y = function(_v0) {
        var lang = _v0.lang;
        var light = _v0.light;
        var tooltips = _v0.tooltips;
        var translations = _v0.translations;
        var mode = _v0.mode;
        var formulas = _v0.formulas;
        var media = _v0.media;
        var effect = _v0.effect;
        var id = _v0.id;
        var modalIsActive = _v0.modalIsActive;
        if (mode.$ === "Slides") return A3($elm$html$Html$Keyed$node, "aside", A2($author$project$Lia$Utils$deactivate, modalIsActive, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-notes")
        ])), A2($elm$core$List$map, function(_v2) {
            var active = _v2.a;
            var counter = _v2.b;
            var comment = _v2.c;
            return A2($elm$core$Tuple$pair, $elm$core$String$fromInt(id) + ("-/-" + $elm$core$String$fromInt(counter)), A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-notes__content" + (active ? " active" : " hide-lg-down")),
                $elm$html$Html$Attributes$id(active ? "lia-notes-active" : "")
            ]), A2($elm$core$List$cons, A2($elm$html$Html$a, _List_fromArray([
                $elm$html$Html$Attributes$class("hide-lg-down"),
                $elm$html$Html$Events$onClick($author$project$Lia$Update$JumpToFragment(counter)),
                $elm$html$Html$Attributes$href("#")
            ]), _List_fromArray([
                A2($elm$html$Html$small, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-notes__counter")
                ]), _List_fromArray([
                    $elm$html$Html$text($elm$core$String$fromInt(counter) + ("/" + $elm$core$String$fromInt(effect.effects)))
                ]))
            ])), A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(_v3) {
                var narrator = _v3.a;
                var content = _v3.b;
                return A2($elm$core$List$map, function(c) {
                    return A2($elm$html$Html$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$pair(id), $author$project$Lia$Update$Script), A2($elm$html$Html$p, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(A2($elm$core$List$append, c.attr, $author$project$Lia$Markdown$View$addTranslation({
                        audio: c.audio,
                        hidden: false,
                        id: counter,
                        narrator: narrator,
                        translations: $elm$core$Maybe$Just(translations)
                    }))), A2($elm$core$List$map, A7($author$project$Lia$Markdown$Inline$View$view_inf, effect.javascript, lang, light, tooltips, $elm$core$Maybe$Just(translations), $elm$core$Maybe$Just(formulas), $elm$core$Maybe$Just(media)), c.content)));
                }, content);
            }, comment)))));
        }, $author$project$Lia$Markdown$Effect$Model$current_paragraphs(effect)));
        else return $elm$html$Html$text("");
    };
    var $author$project$Lia$Update$TTSReplay = function(a) {
        return {
            $: "TTSReplay",
            a: a
        };
    };
    var $author$project$I18n$Translations$basePlay = function(lang) {
        switch(lang.$){
            case "Am":
                return "ጨርሰን";
            case "Ar":
                return "العب";
            case "Bg":
                return "играйте";
            case "Bn":
                return "প্লে";
            case "De":
                return "Wiedergabe";
            case "Es":
                return "jugar";
            case "Fa":
                return "بازی کن";
            case "Fr":
                return "Lecture";
            case "Hi":
                return "प्लेबैक";
            case "Hy":
                return "Խաղացեք";
            case "It":
                return "avvia";
            case "Ja":
                return "再生";
            case "Ka":
                return "დაწყება";
            case "Ko":
                return "재생";
            case "Nl":
                return "afspelen";
            case "Pa":
                return "ਚਲਾਓ";
            case "Pt":
                return "reproduzir";
            case "Ru":
                return "играй";
            case "Sw":
                return "kucheza";
            case "Tw":
                return "播放";
            case "Uk":
                return "грати";
            case "Ur":
                return "چلائیں";
            case "Zh":
                return "播放";
            default:
                return "play";
        }
    };
    var $author$project$I18n$Translations$baseStop = function(lang) {
        switch(lang.$){
            case "Am":
                return "አቆጣጠር";
            case "Ar":
                return "توقف";
            case "Bg":
                return "спрете";
            case "Bn":
                return "স্টপ";
            case "De":
                return "Stopp";
            case "Es":
                return "parar";
            case "Fa":
                return "بس کن";
            case "Fr":
                return "Arr\xeat";
            case "Hi":
                return "बंद करो";
            case "Hy":
                return "դադարեցրեք";
            case "It":
                return "ferma";
            case "Ja":
                return "停止";
            case "Ka":
                return "გაჩერება";
            case "Ko":
                return "정지";
            case "Nl":
                return "stoppen";
            case "Pa":
                return "ਬੰਦ ਕਰੋ";
            case "Pt":
                return "parar";
            case "Ru":
                return "остановись";
            case "Sw":
                return "kuacha";
            case "Tw":
                return "停止";
            case "Uk":
                return "зупинятися";
            case "Ur":
                return "روکیں";
            case "Zh":
                return "停止";
            default:
                return "stop";
        }
    };
    var $author$project$Lia$View$btnReplay = F3(function(lang, soundEnabled, settings) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: settings.speaking ? "icon-stop-circle" : "icon-play-circle",
            msg: soundEnabled && settings.sound ? $elm$core$Maybe$Just($author$project$Lia$Update$TTSReplay(!settings.speaking)) : $elm$core$Maybe$Nothing,
            tabbable: settings.sound,
            title: settings.speaking ? $author$project$I18n$Translations$baseStop(lang) : $author$project$I18n$Translations$basePlay(lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$id("lia-btn-sound"),
            $elm$html$Html$Attributes$class("lia-btn--transparent lia-responsive-voice__play")
        ]));
    });
    var $author$project$I18n$Translations$soundOff = function(lang) {
        switch(lang.$){
            case "Am":
                return "ድምጽ ያልተጫኑ";
            case "Ar":
                return "الصوت مقفل";
            case "Bg":
                return "Звук вкл.";
            case "Bn":
                return "শব্দ বন্ধ";
            case "De":
                return "Sprecher aus";
            case "Es":
                return "Sonido apagado";
            case "Fa":
                return "صدا خاموش";
            case "Fr":
                return "Haut-parleur d\xe9sactiv\xe9";
            case "Hi":
                return "स्पीकर बंद";
            case "Hy":
                return "առանց ձայն";
            case "It":
                return "Suono disattivato";
            case "Ja":
                return "音声オフ";
            case "Ka":
                return "ხმა გამორთული";
            case "Ko":
                return "소리 끔";
            case "Nl":
                return "Luidspreker uit";
            case "Pa":
                return "ਸਾਊਂਡ ਬੰਦ";
            case "Pt":
                return "Som desligado";
            case "Ru":
                return "звук выключен";
            case "Sw":
                return "Sauti imezimwa";
            case "Tw":
                return "聲音關閉";
            case "Uk":
                return "вимкнений";
            case "Ur":
                return "آواز بند";
            case "Zh":
                return "聲音關閉";
            default:
                return "Sound off";
        }
    };
    var $author$project$I18n$Translations$soundOn = function(lang) {
        switch(lang.$){
            case "Am":
                return "ድምጽ አብራ";
            case "Ar":
                return "الصوت مفعل";
            case "Bg":
                return "Звук изкл.";
            case "Bn":
                return "শব্দ চালু";
            case "De":
                return "Sprecher an";
            case "Es":
                return "Sonido encendido";
            case "Fa":
                return "صدا روشن";
            case "Fr":
                return "Haut-parleur activ\xe9";
            case "Hi":
                return "स्पीकर ऑन";
            case "Hy":
                return "ձայնով";
            case "It":
                return "Suono attivo";
            case "Ja":
                return "音声オン";
            case "Ka":
                return "ხმა ჩართული";
            case "Ko":
                return "소리 켬";
            case "Nl":
                return "Luidspreker aan";
            case "Pa":
                return "ਸਾਊਂਡ ਚਾਲੂ";
            case "Pt":
                return "Som ligado";
            case "Ru":
                return "звук включён";
            case "Sw":
                return "Sauti imewashwa";
            case "Tw":
                return "聲音開啟";
            case "Uk":
                return "увімкнений";
            case "Ur":
                return "آواز آن";
            case "Zh":
                return "聲音開啟";
            default:
                return "Sound on";
        }
    };
    var $author$project$Lia$Settings$Update$Sound = {
        $: "Sound"
    };
    var $author$project$Lia$Settings$Update$toggle_sound = $author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Sound);
    var $author$project$Lia$View$btnStop = F2(function(lang, settings) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: settings.sound ? "icon-sound-on" : "icon-sound-off",
            msg: $elm$core$Maybe$Just($author$project$Lia$Update$UpdateSettings($author$project$Lia$Settings$Update$toggle_sound)),
            tabbable: true,
            title: settings.sound ? $author$project$I18n$Translations$soundOn(lang) : $author$project$I18n$Translations$soundOff(lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$id("lia-btn-sound"),
            $elm$html$Html$Attributes$class("lia-btn--transparent")
        ]));
    });
    var $author$project$Lia$Markdown$Effect$Model$getRecordings = F2(function(fn, model) {
        return A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
            return $.content;
        }, A2($elm$core$Basics$composeR, $elm$core$Array$map(A2($elm$core$Basics$composeR, fn, $elm$core$Array$toList)), A2($elm$core$Basics$composeR, $elm$core$Array$toList, $elm$core$List$concat))), A2($elm$core$Dict$get, model.visible, model.comments)));
    });
    var $author$project$Lia$Markdown$Effect$Model$getAudioRecordings = $author$project$Lia$Markdown$Effect$Model$getRecordings(function($) {
        return $.audio;
    });
    var $author$project$Lia$Markdown$Effect$Model$hasComments = function(model) {
        return !_Utils_eq($elm$core$Maybe$Nothing, A2($elm$core$Dict$get, model.visible, model.comments));
    };
    var $author$project$Lia$View$audioRecordings = function(src) {
        return A2($author$project$Lia$Markdown$Inline$View$audio, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-tts-recordings")
        ]), {
            controls: false,
            errorHandling: false,
            preload: "auto",
            url: src
        });
    };
    var $author$project$Lia$View$appendAudioFragments = F2(function(audio, info) {
        return $elm$core$List$isEmpty(audio) ? info : A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "visibility", "hidden")
        ]), info), A2($elm$core$List$map, $author$project$Lia$View$audioRecordings, audio));
    });
    var $author$project$I18n$Translations$ttsUsingBrowser = function(lang) {
        switch(lang.$){
            case "Am":
                return "በብሮው ቴክስት-ተምረው መጫን ነው።";
            case "Bg":
                return "Използване на вътрешната машина за синтезиран говор на браузъра.";
            case "Bn":
                return "ব্রাউজারের অভ্যন্তরীণ পাঠকন ইঞ্জিন ব্যবহার করা হচ্ছে।";
            case "De":
                return "Verwendung der internen Text-zu-Speech-Engine des Browsers.";
            case "Es":
                return "Usando el motor interno de conversi\xf3n de texto a voz del navegador.";
            case "Fr":
                return "Utilisation du moteur de synth\xe8se vocale int\xe9gr\xe9 du navigateur.";
            case "Hi":
                return "ब्राउज़र के आंतरिक टेक्स्ट-टू-स्पीच इंजन का उपयोग करना।";
            case "It":
                return "Sto utilizzando il motore interno di conversione del testo a voce del browser.";
            case "Ja":
                return "ブラウザの内蔵テキスト読み上げエンジンを使用中";
            case "Ka":
                return "გამოიყენება ბრაუზერის შიდა ტექსტ-დან-ხმამდე სისტემა.";
            case "Ko":
                return "브라우저의 내부 텍스트 음성 변환 엔진을 사용합니다.";
            case "Nl":
                return "De interne tekst-naar-spraak-engine van de browser gebruiken.";
            case "Pa":
                return "ਬਰਾਊਜ਼ਰ ਦੇ ਅੰਦਰੂਨੀ ਟੈਕਸਟ-ਟੁ-ਸਪੀਚ ਇੰਜਨ ਦੀ ਵਰਤੋਂ ਕੀਤੀ ਜਾ ਰਹੀ ਹੈ।";
            case "Pt":
                return "Usando o motor interno de Texto-para-Fala do navegador.";
            case "Ru":
                return "Используя внутренний механизм преобразования текста в речь браузера.";
            case "Sw":
                return "Kwa kutumia injini ya ndani ya kivinjari ya Maandishi-hadi-Hotuba.";
            case "Tw":
                return "使用浏览器的内部文本转语音引擎。";
            case "Uk":
                return "Використання внутрішньої системи синтезу мовлення у браузері.";
            case "Ur":
                return "براؤزر کے اندرونی ٹیکسٹ ٹو اسپیچ انجن کا استعمال ہو رہا ہے۔";
            case "Zh":
                return "使用浏览器的内部文本转语音引擎。";
            default:
                return "Using the browser's internal Text-to-Speech engine.";
        }
    };
    var $author$project$Lia$View$browserTTSText = A2($elm$core$Basics$composeR, $author$project$I18n$Translations$ttsUsingBrowser, $elm$html$Html$text);
    var $author$project$I18n$Translations$ttsUnsupported = function(lang) {
        switch(lang.$){
            case "Am":
                return "የምንጠቀመው ብሮዎች ሊያውቅ አይችልም፣ በሌላ ቦታ ያሳያል።";
            case "Bg":
                return "Вашият браузър не поддържа Text-to-Speech, опитайте друг.";
            case "Bn":
                return "আপনার ব্রাউজার টেক্সট-টু-স্পিচ সমর্থন করে না, অন্য কোন ব্রাউজার চেষ্টা করুন।";
            case "De":
                return "Ihr Browser unterst\xfctzt kein Text-to-Speech, versuchen Sie es mit einem anderen.";
            case "Es":
                return "Tu navegador no es compatible con Text-to-Speech, prueba con otro.";
            case "Fr":
                return "Votre navigateur ne prend pas en charge le texte en discours, essayez-en un autre.";
            case "Hi":
                return "आपका ब्राउज़र टेक्स्ट-टू-स्पीच का समर्थन नहीं करता है, एक अलग प्रयास करें।";
            case "It":
                return "Il tuo browser non \xe8 compatibile con Text-to-Speech, provane un altro.";
            case "Ja":
                return "このブラウザはテキスト読み上げに対応していません。他のブラウザをお試しください。";
            case "Ka":
                return "თქვენი ბრაუზერი არ მხარს უჭერს ტექსტ-დან-ხმამდე ფუნქციას, სცადეთ სხვა.";
            case "Ko":
                return "당신의 브라우저는 Text-to-Speech를 지원하지 않습니다. 다른 것을 시도해 보세요.";
            case "Nl":
                return "Uw browser ondersteunt tekst-naar-spraak niet, probeer een andere.";
            case "Pa":
                return "ਤੁਸੀਂ ਟੈਕਸਟ-ਟੁ-ਸਪੀਚ ਦਾ ਸਮਰਥਨ ਨਹੀਂ ਕਰਦੇ, ਕੋਈ ਹੋਰ ਸਫ਼ਾਰੀ ਵਰਤੋ।";
            case "Pt":
                return "Seu navegador n\xe3o suporta Texto-para-Fala, tente outro.";
            case "Ru":
                return "Ваш браузер не поддерживает преобразование текста в речь, попробуйте другой.";
            case "Sw":
                return "Kivinjari chako hakitumii Maandishi-hadi-Hotuba, jaribu nyingine.";
            case "Tw":
                return "您的浏览器不支持文本转语音，请换一个浏览器。";
            case "Uk":
                return "Ваш браузер не підтримує синтез мовлення з тексту, спробуйте інший.";
            case "Ur":
                return "آپ کا براؤزر ٹیکسٹ ٹو اسپیچ کی حمایت نہیں کرتا، کوئی دوسرا آزمائیں۔";
            case "Zh":
                return "您的浏览器不支持文本转语音，请换一个浏览器。";
            default:
                return "Your browser does not support Text-to-Speech, try another one.";
        }
    };
    var $author$project$Lia$View$noTTSText = A2($elm$core$Basics$composeR, $author$project$I18n$Translations$ttsUnsupported, $elm$html$Html$text);
    var $elm$html$Html$Attributes$height = function(n) {
        return A2(_VirtualDom_attribute, "height", $elm$core$String$fromInt(n));
    };
    var $author$project$Lia$View$responsiveVoiceTTSText = _List_fromArray([
        A2($elm$html$Html$a, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-link"),
            $elm$html$Html$Attributes$href("https://responsivevoice.org"),
            $elm$html$Html$Attributes$target("_blank")
        ]), _List_fromArray([
            $elm$html$Html$text("ResponsiveVoice-NonCommercial")
        ])),
        $elm$html$Html$text(" licensed under "),
        A2($elm$html$Html$a, _List_fromArray([
            $elm$html$Html$Attributes$href("https://creativecommons.org/licenses/by-nc-nd/4.0/"),
            $elm$html$Html$Attributes$target("_blank")
        ]), _List_fromArray([
            A2($elm$html$Html$img, _List_fromArray([
                $elm$html$Html$Attributes$title("ResponsiveVoice Text To Speech"),
                $elm$html$Html$Attributes$src("https://responsivevoice.org/wp-content/uploads/2014/08/95x15.png"),
                $elm$html$Html$Attributes$alt("95x15"),
                $elm$html$Html$Attributes$width(95),
                $elm$html$Html$Attributes$height(15)
            ]), _List_Nil)
        ]))
    ]);
    var $author$project$Lia$View$responsiveVoice = function(_v0) {
        var lang = _v0.lang;
        var tiny = _v0.tiny;
        var show = _v0.show;
        var tts = _v0.tts;
        var audio = _v0.audio;
        return A2($elm$html$Html$small, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-responsive-voice__info notranslate"),
            A2($elm$html$Html$Attributes$attribute, "translate", "no"),
            A2($elm$html$Html$Attributes$style, "visibility", show ? "visible" : "hidden"),
            A2($elm$html$Html$Attributes$style, "font-size", tiny ? "65%" : "80%")
        ]), A2($author$project$Lia$View$appendAudioFragments, audio, function() {
            var _v1 = _Utils_Tuple3(tts.isBrowserSupported, tts.isResponsiveVoiceSupported, tts.preferBrowser);
            if (_v1.a) {
                if (!_v1.b) return _List_fromArray([
                    $author$project$Lia$View$browserTTSText(lang)
                ]);
                else {
                    if (_v1.c) return _List_fromArray([
                        $author$project$Lia$View$browserTTSText(lang)
                    ]);
                    else return $author$project$Lia$View$responsiveVoiceTTSText;
                }
            } else {
                if (_v1.b) return $author$project$Lia$View$responsiveVoiceTTSText;
                else return _List_fromArray([
                    $author$project$Lia$View$noTTSText(lang)
                ]);
            }
        }()));
    };
    var $author$project$I18n$Translations$baseNext = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቀጣይ";
            case "Ar":
                return "التالي";
            case "Bg":
                return "Следващ";
            case "Bn":
                return "পরবর্তী";
            case "De":
                return "weiter";
            case "Es":
                return "siguente";
            case "Fa":
                return "بعدی";
            case "Fr":
                return "suivant";
            case "Hi":
                return "जारी रखें";
            case "Hy":
                return "հաջորդը";
            case "It":
                return "prossimo";
            case "Ja":
                return "次へ";
            case "Ka":
                return "შემდეგი";
            case "Ko":
                return "다음";
            case "Nl":
                return "verder";
            case "Pa":
                return "ਅੱਗੇ";
            case "Pt":
                return "pr\xf3ximo";
            case "Ru":
                return "вперёд";
            case "Sw":
                return "ijayo";
            case "Tw":
                return "繼續";
            case "Uk":
                return "далі";
            case "Ur":
                return "اگلا";
            case "Zh":
                return "繼續";
            default:
                return "next";
        }
    };
    var $author$project$I18n$Translations$basePrev = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተመለስ";
            case "Ar":
                return "السابق";
            case "Bg":
                return "Предишен";
            case "Bn":
                return "পূর্ববর্তী";
            case "De":
                return "zur\xfcck";
            case "Es":
                return "anterior";
            case "Fa":
                return "قبلی";
            case "Fr":
                return "pr\xe9c\xe9dent";
            case "Hi":
                return "वापस";
            case "Hy":
                return "նախորդը";
            case "It":
                return "precedente";
            case "Ja":
                return "前へ";
            case "Ka":
                return "წინა";
            case "Ko":
                return "이전";
            case "Nl":
                return "terug";
            case "Pa":
                return "ਪਿੱਛੇ";
            case "Pt":
                return "anterior";
            case "Ru":
                return "назад";
            case "Sw":
                return "iliyopita";
            case "Tw":
                return "返回";
            case "Uk":
                return "назад";
            case "Ur":
                return "پچھلا";
            case "Zh":
                return "返回";
            default:
                return "previous";
        }
    };
    var $author$project$Lia$View$navButton = F4(function(title, id, _class, msg) {
        return A2($elm$html$Html$button, _List_fromArray([
            $elm$html$Html$Events$onClick(msg),
            $elm$html$Html$Attributes$title(title),
            $elm$html$Html$Attributes$class("lia-btn lia-btn--icon lia-btn--transparent"),
            $elm$html$Html$Attributes$id(id),
            $tesk9$accessible_html$Accessibility$Key$tabbable(true)
        ]), _List_fromArray([
            A2($elm$html$Html$i, _List_fromArray([
                $tesk9$accessible_html$Accessibility$Aria$hidden(true),
                $elm$html$Html$Attributes$class("lia-btn__icon icon " + _class)
            ]), _List_Nil)
        ]));
    });
    var $author$project$Lia$Markdown$Effect$View$state = function(model) {
        return !model.effects ? "" : " (" + ($elm$core$String$fromInt(model.visible) + ("/" + ($elm$core$String$fromInt(model.effects) + ")")));
    };
    var $author$project$Lia$View$slideNavigation = F4(function(lang, mode, slide, effect) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-pagination")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-pagination__content")
            ]), _List_fromArray([
                A4($author$project$Lia$View$navButton, $author$project$I18n$Translations$baseNext(lang), "lia-btn-next", "icon-arrow-right", $author$project$Lia$Update$NextSection),
                A2($elm$html$Html$span, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-pagination__current")
                ]), _List_fromArray([
                    $elm$html$Html$text($elm$core$String$fromInt(slide + 1)),
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$html$Html$Attributes$class("font-400")
                    ]), _List_fromArray([
                        $elm$html$Html$text(function() {
                            if (mode.$ === "Textbook") return "";
                            else return $author$project$Lia$Markdown$Effect$View$state(effect);
                        }())
                    ]))
                ])),
                A4($author$project$Lia$View$navButton, $author$project$I18n$Translations$basePrev(lang), "lia-btn-prev", "icon-arrow-left", $author$project$Lia$Update$PrevSection)
            ]))
        ]));
    });
    var $author$project$Lia$View$slideBottom = function(_v0) {
        var lang = _v0.lang;
        var tiny = _v0.tiny;
        var settings = _v0.settings;
        var slide = _v0.slide;
        var effects = _v0.effects;
        return A2($elm$html$Html$footer, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-slide__footer")
        ]), _List_fromArray([
            A4($author$project$Lia$View$slideNavigation, lang, settings.mode, slide, effects),
            function() {
                var _v1 = settings.mode;
                if (_v1.$ === "Textbook") return $elm$html$Html$text("");
                else {
                    var sound = settings.sound && $author$project$Lia$Markdown$Effect$Model$hasComments(effects);
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-responsive-voice"),
                        tiny ? A2($elm$html$Html$Attributes$style, "padding", "0px") : $elm$html$Html$Attributes$class("")
                    ]), _List_fromArray([
                        A2($elm$html$Html$div, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-responsive-voice__control")
                        ]), _List_fromArray([
                            A3($author$project$Lia$View$btnReplay, lang, sound, settings),
                            $author$project$Lia$View$responsiveVoice({
                                audio: $author$project$Lia$Markdown$Effect$Model$getAudioRecordings(effects),
                                lang: lang,
                                show: sound,
                                tiny: tiny,
                                tts: settings.tts
                            }),
                            A2($author$project$Lia$View$btnStop, lang, settings)
                        ]))
                    ]));
                }
            }()
        ]));
    };
    var $author$project$Lia$Definition$Types$getIcon = A2($elm$core$Basics$composeR, function($) {
        return $.macro;
    }, A2($elm$core$Basics$composeR, $elm$core$Dict$get("icon"), $elm$core$Maybe$withDefault($author$project$Const$icon)));
    var $author$project$Lia$Settings$View$menuChat = F3(function(lang, tabbable, settings) {
        return _List_fromArray([
            $author$project$Lia$Settings$View$btnChat({
                chat: settings.chat,
                hide: false,
                lang: lang,
                tabbable: tabbable
            })
        ]);
    });
    var $author$project$I18n$Translations$confEdit = function(lang) {
        switch(lang.$){
            case "Am":
                return "ኤዲተር ክፈት";
            case "Ar":
                return "فتح المحرر";
            case "Bg":
                return "Отвори редактор";
            case "Bn":
                return "সম্পাদক খুলুন";
            case "De":
                return "Editor \xf6ffnen";
            case "Es":
                return "Abrir editor";
            case "Fa":
                return "باز کردن ویرایشگر";
            case "Fr":
                return "Ouvrir l'\xe9diteur";
            case "Hi":
                return "संपादक खोलें";
            case "Hy":
                return "Բացել խմբագրիչը";
            case "It":
                return "Apri l'editor";
            case "Ja":
                return "エディターを開く";
            case "Ka":
                return "რედაქტორის გახსნა";
            case "Ko":
                return "편집기 열기";
            case "Nl":
                return "Editor openen";
            case "Pa":
                return "ਸੰਪਾਦਕ ਖੋਲ੍ਹੋ";
            case "Pt":
                return "Abrir editor";
            case "Ru":
                return "открыть редактор";
            case "Sw":
                return "Fungua Kihariri";
            case "Tw":
                return "開啟編輯器";
            case "Uk":
                return "відкрити редактор";
            case "Ur":
                return "ایڈیٹر کھولیں";
            case "Zh":
                return "打開編輯器";
            default:
                return "Open editor";
        }
    };
    var $author$project$Lia$Settings$View$menuEdit = F4(function(url, lang, tabbable, _v0) {
        return _List_fromArray([
            A2($elm$html$Html$a, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent lia-btn--tag "),
                $elm$html$Html$Attributes$href(url),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
                $elm$html$Html$Attributes$target("_blank"),
                $elm$html$Html$Attributes$title($author$project$I18n$Translations$confEdit(lang))
            ]), _List_fromArray([
                A2($author$project$Lia$Utils$icon, "icon-edit", _List_Nil),
                A2($elm$html$Html$span, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "margin-left", "1rem"),
                    $elm$html$Html$Attributes$class(" hide-md-up")
                ]), _List_fromArray([
                    $elm$html$Html$text($author$project$I18n$Translations$confEdit(lang))
                ]))
            ]))
        ]);
    });
    var $author$project$I18n$Translations$confInformation = function(lang) {
        switch(lang.$){
            case "Am":
                return "መረጃ";
            case "Ar":
                return "معلومات";
            case "Bg":
                return "Информация";
            case "Bn":
                return "তথ্য";
            case "De":
                return "Informationen";
            case "Es":
                return "informaciones";
            case "Fa":
                return "اطلاعات";
            case "Fr":
                return "Informations";
            case "Hi":
                return "सूचना";
            case "Hy":
                return "ինֆորմացիա";
            case "It":
                return "Informazioni";
            case "Ja":
                return "情報";
            case "Ka":
                return "ინფორმაცია";
            case "Ko":
                return "정보";
            case "Nl":
                return "Informatie";
            case "Pa":
                return "ਜਾਣਕਾਰੀ";
            case "Pt":
                return "Informa\xe7\xe3o";
            case "Ru":
                return "информация";
            case "Sw":
                return "Taarifa";
            case "Tw":
                return "關於";
            case "Uk":
                return "інформація";
            case "Ur":
                return "معلومات";
            case "Zh":
                return "關於";
            default:
                return "Information";
        }
    };
    var $author$project$Lia$Settings$View$bold = A2($elm$core$Basics$composeR, $elm$html$Html$text, A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$strong(_List_Nil)));
    var $author$project$I18n$Translations$infoAuthor = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሰላም ያለፈ: ";
            case "Ar":
                return "مؤلف";
            case "Bg":
                return "Автор: ";
            case "Bn":
                return "লেখক: ";
            case "De":
                return "Autor: ";
            case "Es":
                return "Autor";
            case "Fa":
                return "نویسنده: ";
            case "Fr":
                return "Auteur : ";
            case "Hi":
                return "लेखक:";
            case "Hy":
                return "հեղինակ: ";
            case "It":
                return "Autore: ";
            case "Ja":
                return "著者：";
            case "Ka":
                return "ავტორი: ";
            case "Ko":
                return "저자: ";
            case "Nl":
                return "Auteur: ";
            case "Pa":
                return "ਲੇਖਕ: ";
            case "Pt":
                return "Autor: ";
            case "Ru":
                return "автор: ";
            case "Sw":
                return "Mwandishi: ";
            case "Tw":
                return "作者: ";
            case "Uk":
                return "автор: ";
            case "Ur":
                return "مصنف: ";
            case "Zh":
                return "作者: ";
            default:
                return "Author: ";
        }
    };
    var $author$project$I18n$Translations$infoAuthors = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሰላም ያለፈውን: ";
            case "Ar":
                return "المؤلفون";
            case "Bg":
                return "Автори: ";
            case "Bn":
                return "লেখকবৃন্দ: ";
            case "De":
                return "Autoren: ";
            case "Es":
                return "Autores";
            case "Fa":
                return "نویسندگان: ";
            case "Fr":
                return "Auteurs : ";
            case "Hi":
                return "लेखकों:";
            case "Hy":
                return "հեղինակներ: ";
            case "It":
                return "Autori: ";
            case "Ja":
                return "著者：";
            case "Ka":
                return "ავტორები: ";
            case "Ko":
                return "저자: ";
            case "Nl":
                return "Auteurs: ";
            case "Pa":
                return "ਲੇਖਕ: ";
            case "Pt":
                return "Autores: ";
            case "Ru":
                return "авторы: ";
            case "Sw":
                return "Waandishi: ";
            case "Tw":
                return "作者: ";
            case "Uk":
                return "автори: ";
            case "Ur":
                return "مصنفین: ";
            case "Zh":
                return "作者: ";
            default:
                return "Authors: ";
        }
    };
    var $author$project$I18n$Translations$infoDate = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቀን: ";
            case "Ar":
                return "التاريخ";
            case "Bg":
                return "Дата: ";
            case "Bn":
                return "তারিখ: ";
            case "De":
                return "Datum: ";
            case "Es":
                return "fecha";
            case "Fa":
                return "تاریخ: ";
            case "Fr":
                return "Date : ";
            case "Hi":
                return "तारीख:";
            case "Hy":
                return "ամսաթիվ: ";
            case "It":
                return "Data: ";
            case "Ja":
                return "日付：";
            case "Ka":
                return "თარიღი: ";
            case "Ko":
                return "날짜: ";
            case "Nl":
                return "Datum: ";
            case "Pa":
                return "ਮਿਤੀ: ";
            case "Pt":
                return "Data: ";
            case "Ru":
                return "дата: ";
            case "Sw":
                return "Tarehe: ";
            case "Tw":
                return "日期: ";
            case "Uk":
                return "дата: ";
            case "Ur":
                return "تاریخ: ";
            case "Zh":
                return "日期: ";
            default:
                return "Date: ";
        }
    };
    var $author$project$I18n$Translations$infoEmail = function(lang) {
        switch(lang.$){
            case "Am":
                return "ኢሜል: ";
            case "Ar":
                return "البريد الإلكتروني";
            case "Bg":
                return "Имейл: ";
            case "Bn":
                return "ইমেইল: ";
            case "De":
                return "E-Mail: ";
            case "Es":
                return "email";
            case "Fa":
                return "ایمیل: ";
            case "Fr":
                return "Email : ";
            case "Hi":
                return "ईमेल:";
            case "Hy":
                return "էլ. փոստ: ";
            case "It":
                return "Email: ";
            case "Ja":
                return "メール：";
            case "Ka":
                return "იმეილი: ";
            case "Ko":
                return "이메일: ";
            case "Nl":
                return "E-mail: ";
            case "Pa":
                return "ਈਮੇਲ: ";
            case "Pt":
                return "Email: ";
            case "Ru":
                return "эл. почта: ";
            case "Sw":
                return "Barua pepe: ";
            case "Tw":
                return "電郵: ";
            case "Uk":
                return "електронна пошта: ";
            case "Ur":
                return "ای میل: ";
            case "Zh":
                return "電郵: ";
            default:
                return "Email: ";
        }
    };
    var $author$project$I18n$Translations$infoVersion = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቅድሚያ: ";
            case "Ar":
                return "الإصدار: ";
            case "Bg":
                return "Версия: ";
            case "Bn":
                return "সংস্করণ: ";
            case "De":
                return "Version: ";
            case "Es":
                return "versi\xf3n";
            case "Fa":
                return "نسخه: ";
            case "Fr":
                return "Version : ";
            case "Hi":
                return "संस्करण:";
            case "Hy":
                return "տարբերակ: ";
            case "It":
                return "Versione:  ";
            case "Ja":
                return "バージョン：";
            case "Ka":
                return "ვერსია: ";
            case "Ko":
                return "버전: ";
            case "Nl":
                return "Versie: ";
            case "Pa":
                return "ਵਰਜਨ";
            case "Pt":
                return "Vers\xe3o: ";
            case "Ru":
                return "версия: ";
            case "Sw":
                return "Toleo: ";
            case "Tw":
                return "版本: ";
            case "Uk":
                return "версія: ";
            case "Ur":
                return "ورژن: ";
            case "Zh":
                return "版本: ";
            default:
                return "Version: ";
        }
    };
    var $author$project$Lia$Settings$View$inlines = function(lang) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map(A7($author$project$Lia$Markdown$Inline$View$view_inf, $elm$core$Array$empty, lang, false, false, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)), A2($elm$core$Basics$composeR, $elm$html$Html$div(_List_Nil), $elm$html$Html$map($elm$core$Basics$always($author$project$Lia$Settings$Update$Ignore))));
    };
    var $author$project$Lia$Settings$View$thanks = F2(function(lang, to) {
        return A2($elm$html$Html$map, function(_v0) {
            return $author$project$Lia$Settings$Update$Ignore;
        }, A2($elm$html$Html$span, _List_Nil, _List_fromArray([
            $author$project$Lia$Settings$View$divider,
            A2($author$project$Lia$Settings$View$inlines, lang, to)
        ])));
    });
    var $author$project$Lia$Settings$View$viewAttributes = function(lang) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Settings$View$thanks(lang)), $elm$html$Html$div(_List_Nil));
    };
    var $author$project$Lia$Settings$View$viewRepository = function(url) {
        return _List_fromArray([
            $author$project$Lia$Settings$View$bold("Repository: "),
            A2($elm$html$Html$a, _List_fromArray([
                $elm$html$Html$Attributes$href(url),
                $elm$html$Html$Attributes$target("_blank"),
                A2($elm$html$Html$Attributes$attribute, "data-group-id", "information"),
                $elm$html$Html$Attributes$tabindex(0)
            ]), _List_fromArray([
                $elm$html$Html$text(url)
            ]))
        ]);
    };
    var $author$project$Lia$Settings$View$viewInformation = F5(function(grouping, lang, tabbable, repositoryURL, definition) {
        return A2($elm$core$List$map, $elm$html$Html$div(grouping(_List_fromArray([
            $elm$html$Html$Attributes$tabindex(-1),
            A2($elm$html$Html$Attributes$style, "user-select", "text")
        ]))), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, !_Utils_eq(definition.comment, _List_Nil), _List_fromArray([
            tabbable ? A2($author$project$Lia$Settings$View$inlines, lang, definition.comment) : $elm$html$Html$text("")
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, definition.author !== "", _List_fromArray([
            $author$project$Lia$Settings$View$bold(A2($elm$core$String$contains, ";", definition.author) ? $author$project$I18n$Translations$infoAuthors(lang) : $author$project$I18n$Translations$infoAuthor(lang)),
            $elm$html$Html$text(definition.author)
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, definition.email !== "", _List_fromArray([
            $author$project$Lia$Settings$View$bold($author$project$I18n$Translations$infoEmail(lang)),
            A2($elm$html$Html$a, _List_fromArray([
                $elm$html$Html$Attributes$href("mailto:" + definition.email),
                $elm$html$Html$Attributes$class("lia-link"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
                A2($elm$html$Html$Attributes$attribute, "data-group-id", "information")
            ]), _List_fromArray([
                $elm$html$Html$text(definition.email)
            ]))
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, definition.version !== "", _List_fromArray([
            $author$project$Lia$Settings$View$bold($author$project$I18n$Translations$infoVersion(lang)),
            $elm$html$Html$text(definition.version)
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, definition.date !== "", _List_fromArray([
            $author$project$Lia$Settings$View$bold($author$project$I18n$Translations$infoDate(lang)),
            $elm$html$Html$text(definition.date)
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, !_Utils_eq(definition.attributes, _List_Nil), _List_fromArray([
            $author$project$Lia$Settings$View$bold("Attributes:"),
            A2($elm$html$Html$br, _List_Nil, _List_Nil),
            tabbable ? A2($author$project$Lia$Settings$View$viewAttributes, lang, definition.attributes) : $elm$html$Html$text("")
        ]), _List_fromArray([
            function() {
                var _v0 = _Utils_Tuple2(A2($elm$core$Dict$get, "repository", definition.macro), repositoryURL);
                if (_v0.a.$ === "Just") {
                    var url = _v0.a.a;
                    return $author$project$Lia$Settings$View$viewRepository(url);
                } else {
                    if (_v0.b.$ === "Just") {
                        var url = _v0.b.a;
                        return $author$project$Lia$Settings$View$viewRepository(url);
                    } else return _List_Nil;
                }
            }()
        ]))))))));
    });
    var $author$project$Lia$Settings$View$menuInformation = F5(function(repositoryURL, definition, lang, tabbable, settings) {
        var grouping = $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowInformation);
        return _List_fromArray([
            A2($elm$html$Html$i, grouping(_List_fromArray([
                $elm$html$Html$Attributes$class("icon icon-info hide-md-up"),
                $elm$html$Html$Attributes$title($author$project$I18n$Translations$confInformation(lang))
            ])), _List_Nil),
            $author$project$Lia$Settings$View$actionBtn({
                action: $author$project$Lia$Settings$Types$ShowInformation,
                attributes: _List_Nil,
                grouping: grouping,
                icon: "icon-info",
                open: _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowInformation)),
                title: $author$project$I18n$Translations$confInformation(lang)
            }),
            A3($author$project$Lia$Settings$View$submenu, grouping, _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowInformation)), A5($author$project$Lia$Settings$View$viewInformation, grouping, lang, tabbable, repositoryURL, definition))
        ]);
    });
    var $author$project$I18n$Translations$modeMode = function(lang) {
        switch(lang.$){
            case "Am":
                return "ዘመን ተዘጋጅ";
            case "Ar":
                return "وضع العرض";
            case "Bg":
                return "Режим на презентация";
            case "Bn":
                return "প্রস্তুতির মোড";
            case "De":
                return "Pr\xe4sentationsmodus";
            case "Es":
                return "Modo presentaci\xf3n";
            case "Fa":
                return "حالت ارائه";
            case "Fr":
                return "Mode de pr\xe9sentation";
            case "Hi":
                return "प्रेजेंटेशन मोड";
            case "Hy":
                return "Ներկայացման ռեժիմ";
            case "It":
                return "Modo presentazione";
            case "Ja":
                return "プレゼンテーションモード";
            case "Ka":
                return "პრეზენტაციის რეჟიმი";
            case "Ko":
                return "프레젠테이션 모드";
            case "Nl":
                return "Presentatiemodus";
            case "Pa":
                return "ਪ੍ਰਸਤੁਤੀ ਮੋਡ";
            case "Pt":
                return "Modo apresenta\xe7\xe3o";
            case "Ru":
                return "режим презентации";
            case "Sw":
                return "Hali ya uwasilishaji";
            case "Tw":
                return "简报模式";
            case "Uk":
                return "режим презентації";
            case "Ur":
                return "پریزنٹیشن موڈ";
            case "Zh":
                return "简报模式";
            default:
                return "Presentation mode";
        }
    };
    var $author$project$I18n$Translations$modePresentation = function(lang) {
        switch(lang.$){
            case "Am":
                return "እንቅስቃሴ";
            case "Ar":
                return "العرض";
            case "Bg":
                return "Презентация";
            case "Bn":
                return "প্রেজেন্টেশন";
            case "De":
                return "Pr\xe4sentation";
            case "Es":
                return "Presentaci\xf3n";
            case "Fa":
                return "ارائه";
            case "Fr":
                return "Pr\xe9sentation";
            case "Hi":
                return "प्रस्तुति";
            case "Hy":
                return "ներկայացում";
            case "It":
                return "Presentazione";
            case "Ja":
                return "プレゼンテーション";
            case "Ka":
                return "პრეზენტაცია";
            case "Ko":
                return "프레젠테이션";
            case "Nl":
                return "Presentatie";
            case "Pa":
                return "ਪ੍ਰਸਤੁਤੀ";
            case "Pt":
                return "Apresenta\xe7\xe3o";
            case "Ru":
                return "презентации";
            case "Sw":
                return "Uwasilishaji";
            case "Tw":
                return "報告";
            case "Uk":
                return "презентація";
            case "Ur":
                return "پریزنٹیشن";
            case "Zh":
                return "報告";
            default:
                return "Presentation";
        }
    };
    var $author$project$I18n$Translations$modeSlides = function(lang) {
        switch(lang.$){
            case "Am":
                return "ስላይድስ";
            case "Ar":
                return "الشرائح";
            case "Bg":
                return "Слайдове";
            case "Bn":
                return "স্লাইড";
            case "De":
                return "Folien";
            case "Es":
                return "Imagen";
            case "Fa":
                return "اسلایدها";
            case "Fr":
                return "Diapositives";
            case "Hi":
                return "स्लाइड्स";
            case "Hy":
                return "սլայդներ";
            case "It":
                return "Diapositive";
            case "Ja":
                return "スライド";
            case "Ka":
                return "სლაიდები";
            case "Ko":
                return "슬라이드";
            case "Nl":
                return "Folies";
            case "Pa":
                return "ਸਲਾਈਡ";
            case "Pt":
                return "Slides";
            case "Ru":
                return "слайды";
            case "Sw":
                return "Slaidi";
            case "Tw":
                return "幻燈片";
            case "Uk":
                return "слайди";
            case "Ur":
                return "سلائیڈز";
            case "Zh":
                return "幻燈片";
            default:
                return "Slides";
        }
    };
    var $author$project$I18n$Translations$modeTextbook = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተማሪ መስመር";
            case "Ar":
                return "المقرر";
            case "Bg":
                return "Текст";
            case "Bn":
                return "টেক্সটবুক";
            case "De":
                return "Lehrbuch";
            case "Es":
                return "Manual";
            case "Fa":
                return "کتاب";
            case "Fr":
                return "Manuel";
            case "Hi":
                return "पाठ्यपुस्तक";
            case "Hy":
                return "գիրք";
            case "It":
                return "Manuale";
            case "Ja":
                return "教科書";
            case "Ka":
                return "ტექსტური";
            case "Ko":
                return "텍스트 북";
            case "Nl":
                return "Studieboek";
            case "Pa":
                return "ਟੈਕਸਟਬੁੱਕ";
            case "Pt":
                return "Livro-texto";
            case "Ru":
                return "чтения";
            case "Sw":
                return "Kitabu cha maandishi";
            case "Tw":
                return "教科書";
            case "Uk":
                return "навчальна книга";
            case "Ur":
                return "ٹیکسٹ بک";
            case "Zh":
                return "教科書";
            default:
                return "Textbook";
        }
    };
    var $author$project$Lia$Settings$Update$SwitchMode = function(a) {
        return {
            $: "SwitchMode",
            a: a
        };
    };
    var $author$project$Lia$Settings$View$modeToString = function(show) {
        switch(show.$){
            case "Presentation":
                return $author$project$I18n$Translations$modePresentation;
            case "Slides":
                return $author$project$I18n$Translations$modeSlides;
            default:
                return $author$project$I18n$Translations$modeTextbook;
        }
    };
    var $tesk9$accessible_html$Accessibility$Role$radio = $tesk9$accessible_html$Accessibility$Utils$role("radio");
    var $author$project$Lia$Settings$View$viewMode = F8(function(grouping, lang, tabbable, mode, activeMode, id, iconName, additionalCSSClass) {
        return A2($elm$html$Html$button, grouping(_List_fromArray([
            $elm$html$Html$Attributes$id(id),
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent " + additionalCSSClass),
            $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$SwitchMode(mode)),
            $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Settings$Update$SwitchMode(mode))
            ])),
            $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
            $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable),
            $tesk9$accessible_html$Accessibility$Role$radio,
            $tesk9$accessible_html$Accessibility$Aria$checked($elm$core$Maybe$Just(_Utils_eq(mode, activeMode)))
        ])), _List_fromArray([
            A2($elm$html$Html$i, _List_fromArray([
                $tesk9$accessible_html$Accessibility$Aria$hidden(true),
                $elm$html$Html$Attributes$class("lia-btn__icon icon " + iconName)
            ]), _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__text")
            ]), _List_fromArray([
                $elm$html$Html$text(A2($author$project$Lia$Settings$View$modeToString, mode, lang))
            ]))
        ]));
    });
    var $author$project$Lia$Settings$View$viewModes = F4(function(grouping, lang, tabbable, settings) {
        return _List_fromArray([
            A8($author$project$Lia$Settings$View$viewMode, grouping, lang, tabbable, $author$project$Lia$Settings$Types$Textbook, settings.mode, "lia-mode-textbook", "icon-book", "mb-1"),
            A8($author$project$Lia$Settings$View$viewMode, grouping, lang, tabbable, $author$project$Lia$Settings$Types$Presentation, settings.mode, "lia-mode-presentation", "icon-presentation", "mb-1"),
            A8($author$project$Lia$Settings$View$viewMode, grouping, lang, tabbable, $author$project$Lia$Settings$Types$Slides, settings.mode, "lia-mode-slides", "icon-slides", "")
        ]);
    });
    var $author$project$Lia$Settings$View$menuMode = F3(function(lang, tabbable, settings) {
        var grouping = $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowModes);
        var _v0 = function() {
            var _v1 = settings.mode;
            switch(_v1.$){
                case "Presentation":
                    return _Utils_Tuple2("icon-presentation", $author$project$I18n$Translations$modePresentation(lang));
                case "Slides":
                    return _Utils_Tuple2("icon-slides", $author$project$I18n$Translations$modeSlides(lang));
                default:
                    return _Utils_Tuple2("icon-book", $author$project$I18n$Translations$modeTextbook(lang));
            }
        }();
        var icon = _v0.a;
        var mode = _v0.b;
        return _List_fromArray([
            $author$project$Lia$Settings$View$actionBtn({
                action: $author$project$Lia$Settings$Types$ShowModes,
                attributes: _List_fromArray([
                    $elm$html$Html$Attributes$id("lia-mode-menu-button")
                ]),
                grouping: grouping,
                icon: icon,
                open: _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowModes)),
                title: $author$project$I18n$Translations$modeMode(lang) + (": " + mode)
            }),
            A3($author$project$Lia$Settings$View$submenu, grouping, _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowModes)), A4($author$project$Lia$Settings$View$viewModes, grouping, lang, tabbable, settings))
        ]);
    });
    var $author$project$Lia$Settings$Update$ShareCourse = function(a) {
        return {
            $: "ShareCourse",
            a: a
        };
    };
    var $author$project$I18n$Translations$confShare = function(lang) {
        switch(lang.$){
            case "Am":
                return "አገልግሎት";
            case "Ar":
                return "مشاركة";
            case "Bg":
                return "Споделяне";
            case "Bn":
                return "ভাগ করুন";
            case "De":
                return "Teilen";
            case "Es":
                return "compartir";
            case "Fa":
                return "اشتراک";
            case "Fr":
                return "Partager";
            case "Hi":
                return "शेयर करें";
            case "Hy":
                return "կիսվել";
            case "It":
                return "Condividi";
            case "Ja":
                return "共有";
            case "Ka":
                return "გაზიარება";
            case "Ko":
                return "공유";
            case "Nl":
                return "Delen";
            case "Pa":
                return "ਸਾਂਝਾ ਕਰੋ";
            case "Pt":
                return "Compartilhar";
            case "Ru":
                return "поделиться";
            case "Sw":
                return "Shiriki";
            case "Tw":
                return "分享";
            case "Uk":
                return "поділитися";
            case "Ur":
                return "شیئر کریں";
            case "Zh":
                return "分享";
            default:
                return "Share";
        }
    };
    var $author$project$I18n$Translations$confShareVia = function(lang) {
        switch(lang.$){
            case "Am":
                return "ከተጨማሪ ያግኙ ...";
            case "Ar":
                return "شارك عبر ...";
            case "Bg":
                return "споделете чрез ...";
            case "Bn":
                return "এর মাধ্যমে ভাগ করুন ...";
            case "De":
                return "Teilen per ...";
            case "Es":
                return "compartir via ...";
            case "Fa":
                return "اشتراک گذاری از طریق ...";
            case "Fr":
                return "Partager via ...";
            case "Hi":
                return "के माध्यम से साझा करें ...";
            case "Hy":
                return "տարածել միջոցով ...";
            case "It":
                return "Condividi via ...";
            case "Ja":
                return "共有方法...";
            case "Ka":
                return "გაზიარება მეშვეობით ...";
            case "Ko":
                return "공유하기";
            case "Nl":
                return "deel via ...";
            case "Pa":
                return "ਸਾਂਝਾ ਕਰੋ ਵਿਆ ...";
            case "Pt":
                return "compartilhar via ...";
            case "Ru":
                return "Отправить по ...";
            case "Sw":
                return "shiriki kupitia ...";
            case "Tw":
                return "通过...分享";
            case "Uk":
                return "поділитися через ...";
            case "Ur":
                return "ذریعے شیئر کریں ...";
            case "Zh":
                return "通过...分享";
            default:
                return "share via ...";
        }
    };
    var $author$project$Lia$Sync$Types$isSupported = A2($elm$core$Basics$composeR, function($) {
        return $.sync;
    }, A2($elm$core$Basics$composeR, function($) {
        return $.support;
    }, A2($elm$core$Basics$composeR, $elm$core$List$isEmpty, $elm$core$Basics$not)));
    var $author$project$Lia$Sync$Types$title = function(sync) {
        var _v0 = sync.state;
        switch(_v0.$){
            case "Disconnected":
                return $elm$html$Html$text("Classroom");
            case "Connected":
                return A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("Classroom ("),
                    A2($author$project$Lia$Utils$icon, "icon-person icon-sm", _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "padding-right", "4px")
                    ])),
                    $elm$html$Html$text($elm$core$String$fromInt($elm$core$Set$size(sync.peers))),
                    $elm$html$Html$text(")")
                ]));
            default:
                return $elm$html$Html$text("Classroom (pending)");
        }
    };
    var $author$project$Lia$Settings$View$menuShare = F5(function(url, sync, lang, tabbable, settings) {
        var grouping = $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowShare);
        return _List_fromArray([
            function() {
                var _v0 = _Utils_Tuple2(settings.sync, settings.hasShareApi);
                if (_v0.a.$ === "Nothing" && _v0.b.$ === "Nothing") {
                    var _v1 = _v0.a;
                    var _v2 = _v0.b;
                    return A2($author$project$Lia$Utils$btnIcon, {
                        icon: "icon-social",
                        msg: $elm$core$Maybe$Nothing,
                        tabbable: false,
                        title: $author$project$I18n$Translations$confShare(lang)
                    }, grouping(_List_fromArray([
                        $elm$html$Html$Attributes$class("lia-btn--transparent hide-md-down")
                    ])));
                } else return $author$project$Lia$Settings$View$actionBtn({
                    action: $author$project$Lia$Settings$Types$ShowShare,
                    attributes: _List_Nil,
                    grouping: grouping,
                    icon: "icon-social",
                    open: _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowShare)),
                    title: $author$project$I18n$Translations$confShare(lang)
                });
            }(),
            A2($elm$html$Html$i, _List_fromArray([
                $elm$html$Html$Attributes$class("icon icon-social hide-md-up"),
                $elm$html$Html$Attributes$title($author$project$I18n$Translations$confInformation(lang))
            ]), _List_Nil),
            A3($author$project$Lia$Settings$View$submenu, grouping, _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowShare)), _List_fromArray([
                !_Utils_eq(settings.hasShareApi, $elm$core$Maybe$Nothing) ? A5($author$project$Lia$Settings$View$qrCodeView, lang, tabbable, false, $elm$core$Maybe$Just(grouping), url) : $elm$html$Html$text(""),
                _Utils_eq(settings.hasShareApi, $elm$core$Maybe$Just(true)) ? A3($author$project$Lia$Utils$btn, {
                    msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$ShareCourse(url)),
                    tabbable: tabbable,
                    title: ""
                }, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "width", "100%"),
                    A2($elm$html$Html$Attributes$style, "justify-content", "center")
                ]), _List_fromArray([
                    A2($elm$html$Html$label, _List_Nil, _List_fromArray([
                        $elm$html$Html$text($author$project$I18n$Translations$confShareVia(lang))
                    ]))
                ])) : $elm$html$Html$text(""),
                $author$project$Lia$Settings$View$divider,
                $author$project$Lia$Sync$Types$isSupported(sync) && !_Utils_eq(settings.sync, $elm$core$Maybe$Nothing) ? A3($author$project$Lia$Utils$btn, {
                    msg: $elm$core$Maybe$Just($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$Sync)),
                    tabbable: tabbable,
                    title: "Classroom"
                }, grouping(_List_Nil), _List_fromArray([
                    $author$project$Lia$Sync$Types$title(sync)
                ])) : $elm$html$Html$text("")
            ]))
        ]);
    });
    var $tesk9$accessible_html$Accessibility$Key$down = function(msg) {
        return {
            keyCode: 40,
            msg: msg,
            shiftKey: false
        };
    };
    var $author$project$Lia$Settings$View$action = F2(function(msg, open) {
        return $elm$core$List$append(A2($author$project$Lia$Settings$View$group, msg, _List_fromArray([
            $elm$html$Html$Events$onClick($author$project$Lia$Settings$View$doAction(msg)),
            $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                $tesk9$accessible_html$Accessibility$Key$escape($author$project$Lia$Settings$View$doAction($author$project$Lia$Settings$Types$Close)),
                $tesk9$accessible_html$Accessibility$Key$down($author$project$Lia$Settings$View$doAction(msg))
            ])),
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent hide-md-down"),
            $tesk9$accessible_html$Accessibility$Aria$hasMenuPopUp,
            $tesk9$accessible_html$Accessibility$Aria$expanded(open)
        ])));
    });
    var $author$project$I18n$Translations$confTranslations = function(lang) {
        switch(lang.$){
            case "Am":
                return "ትርጉም";
            case "Ar":
                return "ترجمة";
            case "Bg":
                return "Транслации";
            case "Bn":
                return "অনুবাদ";
            case "De":
                return "\xdcbersetzungen";
            case "Es":
                return "traducciones";
            case "Fa":
                return "ترجمه ها";
            case "Fr":
                return "Traductions";
            case "Hi":
                return "अनुवाद";
            case "Hy":
                return "թարգմանություններ";
            case "It":
                return "Traduzioni";
            case "Ja":
                return "翻訳";
            case "Ka":
                return "თარგმნები";
            case "Ko":
                return "번역";
            case "Nl":
                return "Vertalingen";
            case "Pa":
                return "ਅਨੁਵਾਦ";
            case "Pt":
                return "Tradu\xe7\xf5es";
            case "Ru":
                return "на других языках";
            case "Sw":
                return "Tafsiri";
            case "Tw":
                return "翻譯";
            case "Uk":
                return "переклади";
            case "Ur":
                return "ترجمے";
            case "Zh":
                return "翻譯";
            default:
                return "Translations";
        }
    };
    var $elm$core$String$toUpper = _String_toUpper;
    var $author$project$Lia$Settings$Update$TranslateWithGoogle = {
        $: "TranslateWithGoogle"
    };
    var $author$project$I18n$Translations$translateWithGoogle = function(lang) {
        switch(lang.$){
            case "Am":
                return "በ Google ትርጉም (ምርጥ) ተመርጧል";
            case "Ar":
                return "ترجمة من جوجل (تجريبي)";
            case "Bg":
                return "Превод с Google (експериментално)";
            case "Bn":
                return "Google দিয়ে অনুবাদ করুন (প্রায়োগিক)";
            case "De":
                return "Mit Google \xfcbersetzen (experimentell)";
            case "Es":
                return "Traducir con Google (experimental)";
            case "Fa":
                return "ترجمه با Google (آزمایشی)";
            case "Fr":
                return "Traduire avec Google (exp\xe9rimental)";
            case "Hi":
                return "Google के साथ अनुवाद करें (प्रायोगिक)";
            case "Hy":
                return "Թարգմանեք Google- ի միջոցով (փորձնական)";
            case "It":
                return "Tradurre con Google (sperimentale)";
            case "Ja":
                return "Google翻訳で翻訳する（実験的）";
            case "Ka":
                return "თარგმნა Google-ის დახმარებით (ექსპერიმენტული)";
            case "Ko":
                return "Google Translate로 번역하기 (실험적 기능)";
            case "Nl":
                return "Vertalen met Google (experimenteel)";
            case "Pa":
                return "ਗੂਗਲ ਵਿੱਚ ਅਨੁਵਾਦ ਕਰੋ (ਪ੍ਰਯੋਗਾਤਮਕ)";
            case "Pt":
                return "Traduzir com Google (experimental)";
            case "Ru":
                return "Перевести с Google (экспериментально)";
            case "Sw":
                return "Tafsiri na Google (majaribio)";
            case "Tw":
                return "与Google进行翻译（实验性）";
            case "Uk":
                return "Перекласти за допомогою Google (експериментально)";
            case "Ur":
                return "گوگل کے ساتھ ترجمہ کریں (تجربی)";
            case "Zh":
                return "与Google进行翻译（实验性）";
            default:
                return "Translate with Google (experimental)";
        }
    };
    var $author$project$Lia$Settings$View$translateWithGoogle = F3(function(lang, tabbable, bool) {
        if (bool.$ === "Just") {
            if (bool.a) return _List_fromArray([
                A2($elm$html$Html$div, A2($author$project$Lia$Settings$View$group, $author$project$Lia$Settings$Types$ShowTranslations, _List_fromArray([
                    $elm$html$Html$Attributes$id("google_translate_element"),
                    $elm$html$Html$Attributes$tabindex(-1)
                ])), _List_Nil),
                $author$project$Lia$Settings$View$divider
            ]);
            else return _List_fromArray([
                A2($elm$html$Html$label, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-label"),
                    $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
                ]), _List_fromArray([
                    A2($elm$html$Html$input, A2($author$project$Lia$Settings$View$group, $author$project$Lia$Settings$Types$ShowTranslations, _List_fromArray([
                        $elm$html$Html$Attributes$type_("checkbox"),
                        $elm$html$Html$Attributes$class("lia-checkbox"),
                        $elm$html$Html$Attributes$checked(false),
                        $elm$html$Html$Events$onClick($author$project$Lia$Settings$Update$Toggle($author$project$Lia$Settings$Update$TranslateWithGoogle)),
                        $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                        $elm$html$Html$Attributes$id("lia-checkbox-google_translate")
                    ])), _List_Nil),
                    $elm$html$Html$text($author$project$I18n$Translations$translateWithGoogle(lang))
                ])),
                $author$project$Lia$Settings$View$divider
            ]);
        } else return _List_Nil;
    });
    var $author$project$Lia$Settings$View$viewTranslations = F2(function(lang, tabbable) {
        return A2($elm$core$Basics$composeR, $elm$core$Dict$toList, A2($elm$core$Basics$composeR, $elm$core$List$map(function(_v0) {
            var title = _v0.a;
            var url = _v0.b;
            return A2($elm$html$Html$a, A2($author$project$Lia$Settings$View$group, $author$project$Lia$Settings$Types$ShowTranslations, _List_fromArray([
                $elm$html$Html$Attributes$href("./?" + url),
                $elm$html$Html$Attributes$class("lia-link"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(tabbable),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!tabbable)
            ])), _List_fromArray([
                $elm$html$Html$text(title),
                A2($elm$html$Html$br, _List_Nil, _List_Nil)
            ]));
        }), $elm$core$List$cons(A2($elm$html$Html$span, A2($author$project$Lia$Settings$View$group, $author$project$Lia$Settings$Types$ShowTranslations, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-link active")
        ])), _List_fromArray([
            $elm$html$Html$text($author$project$I18n$Translations$baseLang(lang))
        ])))));
    });
    var $author$project$Lia$Settings$View$menuTranslations = F5(function(languageCode, defintion, lang, tabbable, settings) {
        return _List_fromArray([
            A2($elm$html$Html$button, A3($author$project$Lia$Settings$View$action, $author$project$Lia$Settings$Types$ShowTranslations, _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowTranslations)), _List_fromArray([
                $elm$html$Html$Attributes$title($author$project$I18n$Translations$confTranslations(lang)),
                $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$confTranslations(lang))
            ])), _List_fromArray([
                A2($elm$html$Html$span, _List_fromArray([
                    $elm$html$Html$Attributes$class("notranslate"),
                    A2($elm$html$Html$Attributes$attribute, "translate", "no")
                ]), _List_fromArray([
                    $elm$html$Html$text($elm$core$String$toUpper(languageCode))
                ]))
            ])),
            A3($author$project$Lia$Settings$View$submenu, $author$project$Lia$Settings$View$group($author$project$Lia$Settings$Types$ShowTranslations), _Utils_eq(settings.action, $elm$core$Maybe$Just($author$project$Lia$Settings$Types$ShowTranslations)), A3($elm$core$Basics$apR, A3($author$project$Lia$Settings$View$translateWithGoogle, lang, tabbable, settings.translateWithGoogle), $elm$core$List$append, A3($author$project$Lia$Settings$View$viewTranslations, lang, tabbable, defintion.translation)))
        ]);
    });
    var $author$project$Lia$View$slideTopBar = F9(function(languageCode, lang, screen1, url, repositoryURL, settings, def, progress, sync) {
        return A2($elm$html$Html$map, $author$project$Lia$Update$UpdateSettings, $author$project$Lia$Settings$View$header({
            active: true,
            buttons: $elm$core$List$concat(_List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2($author$project$Lia$Settings$View$menuChat, "chat"),
                    _Utils_Tuple2($author$project$Lia$Settings$View$menuMode, "mode"),
                    _Utils_Tuple2($author$project$Lia$Settings$View$menuSettings(screen1.width), "settings"),
                    _Utils_Tuple2(A2($author$project$Lia$Settings$View$menuTranslations, languageCode, def), "lang")
                ]),
                function() {
                    var _v0 = settings.edit;
                    if (_v0.$ === "Nothing") return _List_Nil;
                    else {
                        var editURL = _v0.a;
                        return _List_fromArray([
                            _Utils_Tuple2($author$project$Lia$Settings$View$menuEdit(editURL), "edit")
                        ]);
                    }
                }(),
                _List_fromArray([
                    _Utils_Tuple2(A2($author$project$Lia$Settings$View$menuShare, url, sync), "share"),
                    _Utils_Tuple2(A2($author$project$Lia$Settings$View$menuInformation, repositoryURL, def), "info")
                ])
            ])),
            lang: lang,
            logo: $author$project$Lia$Definition$Types$getIcon(def),
            online: $author$project$Lia$Sync$Types$isConnected(sync.state),
            progress: progress,
            screen: screen1,
            settings: settings
        }));
    });
    var $author$project$Library$SplitPane$Both = {
        $: "Both"
    };
    var $author$project$Library$SplitPane$OnlyFirst = {
        $: "OnlyFirst"
    };
    var $author$project$Library$SplitPane$OnlySecond = {
        $: "OnlySecond"
    };
    var $author$project$Lia$Markdown$Config$Config = F7(function(mode, view, section, ace_theme, light, screen1, main) {
        return {
            ace_theme: ace_theme,
            light: light,
            main: main,
            mode: mode,
            screen: screen1,
            section: section,
            view: view
        };
    });
    var $author$project$Lia$Markdown$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Config$inline = F9(function(lang, translations, settings, screen1, effect, id, formulas, media, sync) {
        return $author$project$Lia$Markdown$Inline$Config$init({
            formulas: formulas,
            hideVideoComments: settings.hideVideoComments,
            lang: lang,
            light: settings.light,
            media: media,
            mode: settings.mode,
            scripts: effect.javascript,
            slide: id,
            speaking: effect.speaking,
            sync: $elm$core$Maybe$Just(sync),
            theme: $elm$core$Maybe$Just(settings.editor),
            tooltips: settings.tooltips && _Utils_cmp(screen1.width, $author$project$Const$tooltipBreakpoint) > -1,
            translations: $elm$core$Maybe$Just(translations),
            visible: $elm$core$Maybe$Just(effect.visible)
        });
    });
    var $author$project$Lia$Markdown$Config$mergeFormulas = F2(function(main, sec) {
        var _v0 = _Utils_Tuple2(main, sec);
        if (_v0.a.$ === "Just") {
            if (_v0.b.$ === "Nothing") {
                var _v1 = _v0.b;
                return main;
            } else {
                var m = _v0.a.a;
                var s = _v0.b.a;
                return $elm$core$Maybe$Just(A2($elm$core$Dict$union, m, s));
            }
        } else {
            if (_v0.b.$ === "Just") {
                var _v2 = _v0.a;
                return sec;
            } else return $elm$core$Maybe$Nothing;
        }
    });
    var $author$project$Lia$Markdown$Config$init = F9(function(lang, translations, settings, sync, screen1, id, formula, media, section) {
        var main = A9($author$project$Lia$Markdown$Config$inline, lang, translations, settings, screen1, section.effect_model, id, A2($author$project$Lia$Markdown$Config$mergeFormulas, formula, A2($elm$core$Maybe$map, function($) {
            return $.formulas;
        }, section.definition)), media, sync);
        return A7($author$project$Lia$Markdown$Config$Config, $author$project$Lia$Settings$Types$Textbook, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(main), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Update$Script))), section, settings.editor, settings.light, settings.table_of_contents ? _Utils_update(screen1, {
            width: screen1.width - 260
        }) : screen1, main);
    });
    var $author$project$Lia$View$initConfig = F2(function(screen1, model) {
        return A8($author$project$Lia$Markdown$Config$init, model.translation, {
            name: model.langName,
            _new: model.langCode,
            old: model.langCodeOriginal
        }, model.settings, model.sync, screen1, model.section_active, $elm$core$Maybe$Just(model.definition.formulas), model.media);
    });
    var $author$project$Lia$Markdown$Inline$Config$setViewer = F2(function(fn, config) {
        return _Utils_update(config, {
            view: $elm$core$Maybe$Just(fn)
        });
    });
    var $author$project$Lia$Markdown$Config$setSubViewer = F2(function(_function, config) {
        var main = config.main;
        var input = main.input;
        return _Utils_update(config, {
            view: A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(A2($author$project$Lia$Markdown$Inline$Config$setViewer, _function, _Utils_update(main, {
                input: _Utils_update(input, {
                    path: A2($elm$core$List$cons, _Utils_Tuple2("effect", 0), A2($elm$core$List$cons, _Utils_Tuple2("sub", 1), input.path))
                })
            }))), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Update$Script)))
        });
    });
    var $author$project$Lia$Markdown$Effect$Update$Mute = function(a) {
        return {
            $: "Mute",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Effect$View$block_playback = F2(function(config, e) {
        if (_Utils_eq(config.speaking, $elm$core$Maybe$Just(e.id))) return A2($elm$html$Html$button, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent text-highlight icon icon-stop-circle"),
            $tesk9$accessible_html$Accessibility$Key$tabbable(true),
            $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Update$UpdateEffect, true, $author$project$Lia$Markdown$Effect$Update$Mute(e.id))),
            $tesk9$accessible_html$Accessibility$Aria$label("Stop playback")
        ]), _List_Nil);
        else {
            var _v0 = A2($elm$core$Maybe$andThen, $author$project$Lia$Voice$getVoiceFor(e.voice), config.translations);
            if (_v0.$ === "Nothing") return A2($elm$html$Html$button, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent text-highlight icon icon-play-circle"),
                $tesk9$accessible_html$Accessibility$Key$tabbable(true),
                A5($author$project$Lia$Markdown$Effect$View$playBackAttr, e.id, e.voice, A2($elm$core$Maybe$withDefault, "en", $author$project$Lia$Voice$getLang(e.voice)), config.slide, "this.parentNode.childNodes[1]"),
                $tesk9$accessible_html$Accessibility$Aria$label("Start playback")
            ]), _List_Nil);
            else {
                var translated = _v0.a.translated;
                var lang = _v0.a.lang;
                var name = _v0.a.name;
                return A2($elm$html$Html$button, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn lia-btn--transparent text-highlight icon icon-play-circle"),
                    $tesk9$accessible_html$Accessibility$Key$tabbable(true),
                    A5($author$project$Lia$Markdown$Effect$View$playBackAttr, e.id, name, lang, config.slide, "this.parentNode.childNodes[1]"),
                    $tesk9$accessible_html$Accessibility$Aria$label("Start playback")
                ]), _List_Nil);
            }
        }
    });
    var $author$project$Lia$Markdown$Effect$View$circle = function(id) {
        return A2($elm$html$Html$span, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-effect__circle")
        ]), _List_fromArray([
            $elm$html$Html$text($author$project$Lia$Markdown$Effect$View$number(id))
        ]));
    };
    var $elm$html$Html$Attributes$hidden = $elm$html$Html$Attributes$boolProperty("hidden");
    var $author$project$Lia$Markdown$Effect$View$block = F5(function(config, model, attr, e, body) {
        if (_Utils_eq(config.visible, $elm$core$Maybe$Nothing)) {
            var _v0 = $author$project$Lia$Markdown$Effect$Types$class(e);
            switch(_v0.$){
                case "Animation":
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-effect")
                    ]), _List_fromArray([
                        $author$project$Lia$Markdown$Effect$View$circle(e.begin),
                        A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), body)
                    ]));
                case "PlayBack":
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-effect")
                    ]), _List_fromArray([
                        A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
                        A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), body)
                    ]));
                default:
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-effect")
                    ]), _List_fromArray([
                        A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
                        A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                            $author$project$Lia$Markdown$Effect$View$circle(e.begin),
                            A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), body)
                        ]))
                    ]));
            }
        } else {
            var visible = A2($author$project$Lia$Markdown$Effect$Types$isIn, $elm$core$Maybe$Just(model.visible), e);
            var _v1 = $author$project$Lia$Markdown$Effect$Types$class(e);
            switch(_v1.$){
                case "Animation":
                    return !visible ? $elm$html$Html$text("") : A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-effect"),
                        $tesk9$accessible_html$Accessibility$Live$polite,
                        $tesk9$accessible_html$Accessibility$Role$alert
                    ]), _List_fromArray([
                        $author$project$Lia$Markdown$Effect$View$circle(e.begin),
                        A2($elm$html$Html$div, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(e.begin, model.visible), $elm$html$Html$Attributes$id("focused"), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-effect__content", attr)), body)
                    ]));
                case "PlayBack":
                    return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                        A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
                        A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), body)
                    ]));
                default:
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$hidden(!visible)
                    ]), _List_fromArray([
                        A2($author$project$Lia$Markdown$Effect$View$block_playback, config, e),
                        A2($elm$html$Html$div, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-effect"),
                            $tesk9$accessible_html$Accessibility$Live$polite,
                            $tesk9$accessible_html$Accessibility$Role$alert
                        ]), _List_fromArray([
                            $author$project$Lia$Markdown$Effect$View$circle(e.begin),
                            A2($elm$html$Html$div, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(e.begin, model.visible), $elm$html$Html$Attributes$id("focused"), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-effect__content", attr)), body)
                        ]))
                    ]));
            }
        }
    });
    var $elm$html$Html$blockquote = _VirtualDom_node("blockquote");
    var $elm$html$Html$cite = _VirtualDom_node("cite");
    var $elm$html$Html$Attributes$cite = $elm$html$Html$Attributes$stringProperty("cite");
    var $author$project$Lia$Markdown$Quiz$Block$Types$getClass = function(state) {
        switch(state.$){
            case "Text":
                return "text";
            case "Select":
                return "select";
            default:
                return "drop";
        }
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Types$getClass = function(_v0) {
        return "matrix";
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Types$getClass = function(_v0) {
        return "multi";
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Types$getClass = function(state) {
        if (state.$ === "SingleChoice") return "single-choice";
        else return "multiple-choice";
    };
    var $author$project$Lia$Markdown$Quiz$Types$getClass = function(state) {
        switch(state.$){
            case "Block_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Block$Types$getClass(s);
            case "Multi_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Multi$Types$getClass(s);
            case "Vector_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Vector$Types$getClass(s);
            case "Matrix_State":
                var s = state.a;
                return $author$project$Lia$Markdown$Quiz$Matrix$Types$getClass(s);
            default:
                return "generic";
        }
    };
    var $author$project$Lia$Markdown$Quiz$Solution$toString = function(s) {
        switch(s.$){
            case "Solved":
                return "solved";
            case "ReSolved":
                return "resolved";
            default:
                return "open";
        }
    };
    var $author$project$Lia$Markdown$Quiz$View$class = function(id) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$get(id), A2($elm$core$Basics$composeR, $elm$core$Maybe$map(function(s) {
            return "lia-quiz-" + ($author$project$Lia$Markdown$Quiz$Types$getClass(s.state) + (" " + $author$project$Lia$Markdown$Quiz$Solution$toString(s.solved)));
        }), A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(""), $elm$core$Basics$append("lia-quiz "))));
    };
    var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode("circle");
    var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute("cx");
    var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute("cy");
    var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute("fill");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt = F2(function(n, dir) {
        switch(dir.$){
            case "Center":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$Center;
            case "South":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n);
            case "South_":
                var m = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n * m);
            case "North":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n);
            case "North_":
                var m = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n * m);
            case "East":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n);
            case "East_":
                var m = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n * m);
            case "West":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n);
            case "West_":
                var m = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n * m);
            case "Ext":
                var dir1 = dir.a;
                var dir2 = dir.b;
                var next = A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir1), A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir2));
                return next;
            default:
                var m = dir.a;
                var dir1 = dir.b;
                var dir2 = dir.c;
                var next = A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n * m, dir1), A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n * m, dir2));
                return next;
        }
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$move = F2(function(dir, pt) {
        switch(dir.$){
            case "South":
                return _Utils_update(pt, {
                    y: pt.y + $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2
                });
            case "South_":
                var n = dir.a;
                return _Utils_update(pt, {
                    y: pt.y + $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2 * n
                });
            case "North":
                return _Utils_update(pt, {
                    y: pt.y - $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2
                });
            case "North_":
                var n = dir.a;
                return _Utils_update(pt, {
                    y: pt.y - $andre_dietrich$elm_svgbob$SvgBob$Grid$textHeight / 2 * n
                });
            case "East":
                return _Utils_update(pt, {
                    x: pt.x + $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2
                });
            case "East_":
                var n = dir.a;
                return _Utils_update(pt, {
                    x: pt.x + $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2 * n
                });
            case "West":
                return _Utils_update(pt, {
                    x: pt.x - $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2
                });
            case "West_":
                var n = dir.a;
                return _Utils_update(pt, {
                    x: pt.x - $andre_dietrich$elm_svgbob$SvgBob$Grid$textWidth / 2 * n
                });
            case "Center":
                return pt;
            case "Ext":
                var dir1 = dir.a;
                var dir2 = dir.b;
                var next = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir2, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir1, pt));
                return next;
            default:
                var n = dir.a;
                var dir1 = dir.b;
                var dir2 = dir.c;
                var next = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir2), A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$moveExt, n, dir1), pt));
                return next;
        }
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect = A2($elm$html$Html$Attributes$attribute, "vector-effect", "none");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc = F4(function(s, factor, pos, dir) {
        var radius = s.arcRadius * factor;
        var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos);
        return A2($elm$svg$Svg$path, _List_fromArray([
            $elm$svg$Svg$Attributes$d(A2($elm$core$String$join, " ", _List_fromArray([
                "M",
                $elm$core$String$fromFloat(pos.x),
                $elm$core$String$fromFloat(pos.y),
                "A",
                $elm$core$String$fromFloat(radius),
                $elm$core$String$fromFloat(radius),
                "0",
                "0",
                "0",
                $elm$core$String$fromFloat(pos2.x),
                $elm$core$String$fromFloat(pos2.y)
            ]))),
            $elm$svg$Svg$Attributes$fill("transparent"),
            $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
        ]), _List_Nil);
    });
    var $elm$svg$Svg$Attributes$markerEnd = _VirtualDom_attribute("marker-end");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite = function(dir) {
        switch(dir.$){
            case "Center":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$Center;
            case "East":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$West;
            case "East_":
                var n = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$West_(n);
            case "West":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$East;
            case "West_":
                var n = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$East_(n);
            case "North":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$South;
            case "North_":
                var n = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$South_(n);
            case "South":
                return $andre_dietrich$elm_svgbob$SvgBob$Types$North;
            case "South_":
                var n = dir.a;
                return $andre_dietrich$elm_svgbob$SvgBob$Types$North_(n);
            case "Ext":
                var dir1 = dir.a;
                var dir2 = dir.b;
                var oppositeDir = A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir1), $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir2));
                return oppositeDir;
            default:
                var n = dir.a;
                var dir1 = dir.b;
                var dir2 = dir.c;
                var oppositeDir = A3($andre_dietrich$elm_svgbob$SvgBob$Types$Ext_, n, $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir1), $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir2));
                return oppositeDir;
        }
    };
    var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode("line");
    var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute("x1");
    var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute("x2");
    var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute("y1");
    var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute("y2");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$toLine = F3(function(misc, pos, dir) {
        var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos);
        return A2($elm$svg$Svg$line, A2($elm$core$List$append, misc, _List_fromArray([
            $elm$svg$Svg$Attributes$x1($elm$core$String$fromFloat(pos.x)),
            $elm$svg$Svg$Attributes$x2($elm$core$String$fromFloat(pos2.x)),
            $elm$svg$Svg$Attributes$y1($elm$core$String$fromFloat(pos.y)),
            $elm$svg$Svg$Attributes$y2($elm$core$String$fromFloat(pos2.y))
        ])), _List_Nil);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrow = F2(function(pos, dir) {
        return A3($andre_dietrich$elm_svgbob$SvgBob$Grid$toLine, _List_fromArray([
            $elm$svg$Svg$Attributes$markerEnd("url(#triangle)"),
            $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
        ]), A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, dir, pos), $andre_dietrich$elm_svgbob$SvgBob$Grid$opposite(dir));
    });
    var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute("height");
    var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute("width");
    var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute("x");
    var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute("y");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject = F5(function(verbatim, s, pos, _v0, obj) {
        var rows = _v0.a;
        var columns = _v0.b;
        var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$North_(1.1), $andre_dietrich$elm_svgbob$SvgBob$Types$West), pos);
        return A2($elm$svg$Svg$foreignObject, _List_fromArray([
            $elm$svg$Svg$Attributes$x($elm$core$String$fromFloat(pos2.x)),
            $elm$svg$Svg$Attributes$y($elm$core$String$fromFloat(pos2.y)),
            $elm$svg$Svg$Attributes$width(A2($elm$core$Maybe$withDefault, $elm$core$String$fromFloat(1 + $andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(columns)), s.verbatim.width)),
            $elm$svg$Svg$Attributes$height(A2($elm$core$Maybe$withDefault, $elm$core$String$fromFloat($andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(rows)), s.verbatim.height))
        ]), _List_fromArray([
            verbatim(obj)
        ]));
    });
    var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS("http://www.w3.org/2000/svg");
    var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawForeignObject = F5(function(withVerbatim, s, pos, _v0, str) {
        var rows = _v0.a;
        var columns = _v0.b;
        if (withVerbatim.$ === "Nothing") {
            var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West), pos);
            return A3($elm$svg$Svg$node, "text", _List_fromArray([
                $elm$svg$Svg$Attributes$x($elm$core$String$fromFloat(pos2.x)),
                $elm$svg$Svg$Attributes$y($elm$core$String$fromFloat(pos2.y))
            ]), _List_fromArray([
                $elm$svg$Svg$text(str)
            ]));
        } else {
            var verbatim = withVerbatim.a;
            return A5($andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject, verbatim, s, pos, _Utils_Tuple2(rows, columns), str);
        }
    });
    var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute("stroke-linecap");
    var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute("stroke-linejoin");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine = $andre_dietrich$elm_svgbob$SvgBob$Grid$toLine(_List_fromArray([
        $elm$svg$Svg$Attributes$strokeLinecap("round"),
        $elm$svg$Svg$Attributes$strokeLinejoin("mitter"),
        $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
    ]));
    var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode("rect");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawSquare = F3(function(big, settings, pos) {
        var _v0 = big ? _Utils_Tuple2(settings.textWidth, settings.textHeight + 1) : _Utils_Tuple2(settings.textWidth, settings.textWidth);
        var width = _v0.a;
        var height = _v0.b;
        return A2($elm$svg$Svg$rect, _List_fromArray([
            $elm$svg$Svg$Attributes$x($elm$core$String$fromFloat(pos.x - width / 2)),
            $elm$svg$Svg$Attributes$y($elm$core$String$fromFloat(pos.y - height / 2)),
            $elm$svg$Svg$Attributes$width($elm$core$String$fromFloat(width)),
            $elm$svg$Svg$Attributes$height($elm$core$String$fromFloat(height))
        ]), _List_Nil);
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawText = F2(function(pos, str) {
        var pos2 = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, A2($andre_dietrich$elm_svgbob$SvgBob$Types$Ext, $andre_dietrich$elm_svgbob$SvgBob$Types$South_(0.5), $andre_dietrich$elm_svgbob$SvgBob$Types$West), pos);
        return A3($elm$svg$Svg$node, "text", _List_fromArray([
            $elm$svg$Svg$Attributes$x($elm$core$String$fromFloat(pos2.x)),
            $elm$svg$Svg$Attributes$y($elm$core$String$fromFloat(pos2.y))
        ]), _List_fromArray([
            $elm$svg$Svg$text(str)
        ]));
    });
    var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute("r");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$draw = F3(function(withVerbatim, settings, _v0) {
        var pos = _v0.a;
        var element = _v0.b;
        switch(element.$){
            case "Triangle":
                var dir = element.a;
                return _List_fromArray([
                    A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawArrow, pos, dir)
                ]);
            case "Text":
                var _char = element.a;
                return _List_fromArray([
                    A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawText, pos, _char)
                ]);
            case "TextEmoji":
                var _char = element.a;
                return _List_fromArray([
                    A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawText, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, $andre_dietrich$elm_svgbob$SvgBob$Types$East_(0.25), pos), _char)
                ]);
            case "Line":
                var start = element.a;
                var stop = element.b;
                return _List_fromArray([
                    A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawLine, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, start, pos), stop)
                ]);
            case "Curve":
                var factor = element.a;
                var start = element.b;
                var stop = element.c;
                return _List_fromArray([
                    A4($andre_dietrich$elm_svgbob$SvgBob$Grid$drawArc, settings, factor, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$move, start, pos), stop)
                ]);
            case "Sequence":
                var elements = element.a;
                var fn = A2($elm$core$Basics$composeR, $elm$core$Tuple$pair(pos), A2($andre_dietrich$elm_svgbob$SvgBob$Grid$draw, withVerbatim, settings));
                return A2($elm$core$List$concatMap, fn, elements);
            case "Box":
                return _List_fromArray([
                    A3($andre_dietrich$elm_svgbob$SvgBob$Grid$drawSquare, false, settings, pos)
                ]);
            case "BigBox":
                return _List_fromArray([
                    A3($andre_dietrich$elm_svgbob$SvgBob$Grid$drawSquare, true, settings, pos)
                ]);
            case "Circle":
                var filled = element.a;
                return _List_fromArray([
                    A2($elm$svg$Svg$circle, _List_fromArray([
                        $elm$svg$Svg$Attributes$cx($elm$core$String$fromFloat(pos.x)),
                        $elm$svg$Svg$Attributes$cy($elm$core$String$fromFloat(pos.y)),
                        $elm$svg$Svg$Attributes$r($elm$core$String$fromFloat(settings.arcRadius)),
                        $elm$svg$Svg$Attributes$strokeWidth($elm$core$String$fromFloat(settings.lineWidth)),
                        $elm$svg$Svg$Attributes$fill(filled ? "inherit" : "currentColor")
                    ]), _List_Nil)
                ]);
            default:
                var str = element.a;
                var dim = element.b;
                return _List_fromArray([
                    A5($andre_dietrich$elm_svgbob$SvgBob$Grid$drawForeignObject, withVerbatim, settings, pos, dim, str)
                ]);
        }
    });
    var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute("id");
    var $elm$svg$Svg$marker = $elm$svg$Svg$trustedNode("marker");
    var $elm$svg$Svg$Attributes$markerHeight = _VirtualDom_attribute("markerHeight");
    var $elm$svg$Svg$Attributes$markerUnits = _VirtualDom_attribute("markerUnits");
    var $elm$svg$Svg$Attributes$markerWidth = _VirtualDom_attribute("markerWidth");
    var $elm$svg$Svg$Attributes$orient = _VirtualDom_attribute("orient");
    var $elm$svg$Svg$Attributes$refX = _VirtualDom_attribute("refX");
    var $elm$svg$Svg$Attributes$refY = _VirtualDom_attribute("refY");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker = function(color) {
        return A2($elm$svg$Svg$marker, _List_fromArray([
            $elm$svg$Svg$Attributes$id("triangle"),
            $elm$svg$Svg$Attributes$viewBox("0 0 14 14"),
            $elm$svg$Svg$Attributes$refX("0"),
            $elm$svg$Svg$Attributes$refY("5"),
            $elm$svg$Svg$Attributes$markerUnits("strokeWidth"),
            $elm$svg$Svg$Attributes$markerWidth("10"),
            $elm$svg$Svg$Attributes$markerHeight("10"),
            $elm$svg$Svg$Attributes$orient("auto"),
            $elm$svg$Svg$Attributes$stroke(color),
            $elm$svg$Svg$Attributes$fill(color)
        ]), _List_fromArray([
            A2($elm$svg$Svg$path, _List_fromArray([
                $elm$svg$Svg$Attributes$d("M 0 0 L 10 5 L 0 10 z"),
                $andre_dietrich$elm_svgbob$SvgBob$Grid$vectorEffect
            ]), _List_Nil)
        ]));
    };
    var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute("style");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$bgColor = F2(function(background, fill) {
        return $elm$svg$Svg$Attributes$style("background-color:" + (background + ("; fill:" + (fill + ";"))));
    });
    var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode("defs");
    var $elm$svg$Svg$style = $elm$svg$Svg$trustedNode("style");
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$viewBox = F2(function(rows, columns) {
        return $elm$svg$Svg$Attributes$viewBox("0 0 " + ($elm$core$String$fromFloat($andre_dietrich$elm_svgbob$SvgBob$Grid$measureX(columns) + 10) + (" " + $elm$core$String$fromFloat($andre_dietrich$elm_svgbob$SvgBob$Grid$measureY(rows) + 10))));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawSvg = F3(function(attributes, model, body) {
        var color = model.settings.color;
        return A2($elm$svg$Svg$svg, A2($elm$core$List$cons, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$viewBox, model.rows, model.columns), A2($elm$core$List$cons, A2($andre_dietrich$elm_svgbob$SvgBob$Grid$bgColor, color.background, color.stroke), A2($elm$core$List$cons, $elm$svg$Svg$Attributes$stroke(color.stroke), A2($elm$core$List$cons, $elm$svg$Svg$Attributes$fill(color.stroke), attributes)))), A2($elm$core$List$cons, A2($elm$svg$Svg$style, _List_Nil, _List_fromArray([
            $elm$svg$Svg$text("text { fill: " + (color.text + ("; font-size:" + ($elm$core$String$fromFloat(model.settings.fontSize) + "px; font-family: monospace; stroke-width: 0px; }")))),
            $elm$svg$Svg$text("circle { color: " + (color.background + "; }"))
        ])), A2($elm$core$List$cons, A2($elm$svg$Svg$defs, _List_Nil, _List_fromArray([
            $andre_dietrich$elm_svgbob$SvgBob$Grid$arrowMarker(color.stroke)
        ])), body)));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$Grid$drawElements = F3(function(attributes, verbatim, config) {
        var fnSVG = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$draw, $elm$core$Maybe$Nothing, config.settings);
        var fnCustom = A2($andre_dietrich$elm_svgbob$SvgBob$Grid$drawCustomObject, verbatim, config.settings);
        return A3($andre_dietrich$elm_svgbob$SvgBob$Grid$drawSvg, attributes, config, A2($elm$core$List$append, A2($elm$core$List$map, function(_v0) {
            var a = _v0.a;
            var _v1 = _v0.b;
            var point = _v1.a;
            var dim = _v1.b;
            return A3(fnCustom, point, dim, a);
        }, config.foreign), A2($elm$core$List$concatMap, fnSVG, config.svg)));
    });
    var $andre_dietrich$elm_svgbob$SvgBob$drawElements = $andre_dietrich$elm_svgbob$SvgBob$Grid$drawElements;
    var $author$project$Lia$Markdown$Effect$Model$getComment_Helper = F3(function(from, id, result) {
        getComment_Helper: while(true){
            var _v0 = A2($elm$core$Array$get, id, from);
            if (_v0.$ === "Nothing") return result;
            else {
                var next = _v0.a;
                if (next.visible) return result;
                else {
                    var $temp$from = from, $temp$id = id + 1, $temp$result = _Utils_update(result, {
                        content: A2($elm$core$List$append, result.content, next.content)
                    });
                    from = $temp$from;
                    id = $temp$id;
                    result = $temp$result;
                    continue getComment_Helper;
                }
            }
        }
    });
    var $author$project$Lia$Markdown$Effect$Model$get_paragraph = F4(function(attachHidden, id1, id2, model) {
        var _v0 = A2($elm$core$Dict$get, id1, model.comments);
        if (_v0.$ === "Just") {
            var element = _v0.a;
            var _v1 = A2($elm$core$Array$get, id2, element.content);
            if (_v1.$ === "Just") {
                var content = _v1.a;
                return $elm$core$Maybe$Just(_Utils_Tuple2(element.narrator, attachHidden ? A3($author$project$Lia$Markdown$Effect$Model$getComment_Helper, element.content, id2 + 1, content) : content));
            } else return $elm$core$Maybe$Nothing;
        } else return $elm$core$Maybe$Nothing;
    });
    var $elm$html$Html$h5 = _VirtualDom_node("h5");
    var $elm$html$Html$h6 = _VirtualDom_node("h6");
    var $author$project$Lia$Markdown$View$headerStyle = function(i) {
        return $author$project$Lia$Markdown$HTML$Attributes$annotation("h" + $elm$core$String$fromInt(i + 1 > 5 ? 5 : i + 1));
    };
    var $author$project$Lia$Markdown$View$header = F4(function(config, main, sub, attr) {
        return A2($elm$core$Basics$composeR, config.view, function() {
            var _v0 = main + sub;
            switch(_v0){
                case 1:
                    return $elm$html$Html$h1(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
                case 2:
                    return $elm$html$Html$h2(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
                case 3:
                    return $elm$html$Html$h3(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
                case 4:
                    return $elm$html$Html$h4(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
                case 5:
                    return $elm$html$Html$h5(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
                default:
                    return $elm$html$Html$h6(A2($author$project$Lia$Markdown$View$headerStyle, sub, attr));
            }
        }());
    });
    var $author$project$Lia$Markdown$Inline$Types$htmlBlock = function(inline) {
        if (inline.$ === "IHTML" && inline.a.$ === "Node") {
            var _v1 = inline.a;
            var name = _v1.a;
            var attributes = _v1.b;
            var content = _v1.c;
            var attr = inline.b;
            return $elm$core$Maybe$Just(_Utils_Tuple3(name, attributes, _List_fromArray([
                A2($author$project$Lia$Markdown$Inline$Types$Container, content, attr)
            ])));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2;
    var $elm$html$Html$Lazy$lazy2 = $elm$virtual_dom$VirtualDom$lazy2;
    var $author$project$Lia$Markdown$Quiz$Multi$View$onInput = F4(function(path, cmd, id2, param) {
        return "window.LIA.send({reply: true, track: " + (A2($elm$json$Json$Encode$encode, 0, A2($elm$json$Json$Encode$list, function(_v0) {
            var s = _v0.a;
            var i = _v0.b;
            return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_fromArray([
                $elm$json$Json$Encode$string(s),
                $elm$json$Json$Encode$int(i)
            ]));
        }, path)) + (", service: 'input', message: { cmd: '" + (cmd + ("', param: {id: " + ($elm$core$String$fromInt(id2) + (", value: " + (param + "}}})")))))));
    });
    var $author$project$Lia$Markdown$Quiz$Multi$View$view = function(_v0) {
        var config = _v0.config;
        var id = _v0.id;
        var active = _v0.active;
        var partiallyCorrect = _v0.partiallyCorrect;
        var quiz = _v0.quiz;
        var state = _v0.state;
        var randomize = _v0.randomize;
        var input = config.input;
        var path = A2($elm$core$List$append, input.path, _List_fromArray([
            _Utils_Tuple2("quiz", config.slide),
            _Utils_Tuple2("input", id)
        ]));
        return _Utils_Tuple2(_Utils_update(config, {
            input: {
                active: active,
                on: $author$project$Lia$Markdown$Quiz$Multi$View$onInput(path),
                options: quiz.options,
                partiallyCorrect: partiallyCorrect,
                path: path,
                randomize: function() {
                    if (randomize.$ === "Just") {
                        var list = randomize.a;
                        return $elm$core$Maybe$Just(A3($elm$core$Array$foldl, F2(function(opt, _v2) {
                            var start = _v2.a;
                            var array = _v2.b;
                            return _Utils_Tuple2(start + $elm$core$List$length(opt), A2($elm$core$Array$push, A2($elm_community$list_extra$List$Extra$splitAt, $elm$core$List$length(opt), A2($elm_community$list_extra$List$Extra$splitAt, start, list).b).a, array));
                        }), _Utils_Tuple2(0, $elm$core$Array$empty), quiz.options).b);
                    } else return $elm$core$Maybe$Nothing;
                }(),
                state: state
            }
        }), $elm$core$List$head(quiz.elements));
    };
    var $author$project$Lia$Markdown$Quiz$View$maybeConfig = F3(function(config, quiz, vector) {
        var _v0 = _Utils_Tuple2(A2($elm$core$Array$get, quiz.id, vector), quiz.quiz);
        if (_v0.a.$ === "Just" && _v0.b.$ === "Multi_Type") {
            var elem = _v0.a.a;
            var q = _v0.b.a;
            var _v1 = elem.state;
            if (_v1.$ === "Multi_State") {
                var state = _v1.a;
                var _v2 = $author$project$Lia$Markdown$Quiz$Multi$View$view({
                    active: _Utils_eq(elem.solved, $author$project$Lia$Markdown$Quiz$Solution$Open),
                    config: config,
                    id: quiz.id,
                    partiallyCorrect: elem.partiallySolved,
                    quiz: q,
                    randomize: elem.opt.randomize,
                    state: state
                });
                if (_v2.b.$ === "Just") {
                    var newConfig = _v2.a;
                    var block = _v2.b.a;
                    return $elm$core$Maybe$Just(_Utils_Tuple3(newConfig, block, elem.opt.randomize));
                } else return $elm$core$Maybe$Nothing;
            } else return $elm$core$Maybe$Nothing;
        } else return $elm$core$Maybe$Nothing;
    });
    var $author$project$Lia$Markdown$Inline$Types$mediaBlock = function(inline) {
        if (inline.$ === "Ref") {
            var ref = inline.a;
            switch(ref.$){
                case "Image":
                    return true;
                case "Movie":
                    return true;
                case "Audio":
                    return true;
                case "QR_Link":
                    return true;
                case "Embed":
                    return true;
                default:
                    return false;
            }
        } else return false;
    };
    var $author$project$Lia$Markdown$Inline$View$reduce_ = function(element) {
        reduce_: while(true)switch(element.$){
            case "Chars":
                var e = element.a;
                return A2($author$project$Lia$Markdown$Inline$Types$Chars, e, _List_Nil);
            case "Bold":
                var e = element.a;
                var $temp$element = e;
                element = $temp$element;
                continue reduce_;
            case "Italic":
                var e = element.a;
                var $temp$element = e;
                element = $temp$element;
                continue reduce_;
            case "Strike":
                var e = element.a;
                var $temp$element = e;
                element = $temp$element;
                continue reduce_;
            case "Underline":
                var e = element.a;
                var $temp$element = e;
                element = $temp$element;
                continue reduce_;
            case "Superscript":
                var e = element.a;
                var $temp$element = e;
                element = $temp$element;
                continue reduce_;
            case "Ref":
                var e = element.a;
                switch(e.$){
                    case "Link":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Mail":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Image":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Audio":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Movie":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Embed":
                        var alt_ = e.a;
                        var $temp$element = A2($author$project$Lia$Markdown$Inline$Types$Container, alt_, _List_Nil);
                        element = $temp$element;
                        continue reduce_;
                    case "Preview_Lia":
                        return A2($author$project$Lia$Markdown$Inline$Types$Chars, "preview-lia", _List_Nil);
                    case "Preview_Link":
                        return A2($author$project$Lia$Markdown$Inline$Types$Chars, "preview-link", _List_Nil);
                    default:
                        return A2($author$project$Lia$Markdown$Inline$Types$Chars, "qrcode", _List_Nil);
                }
            case "FootnoteMark":
                var e = element.a;
                return A2($author$project$Lia$Markdown$Inline$Types$Chars, "[" + (e + "]"), _List_Nil);
            case "Container":
                if (element.a.b && !element.a.b.b) {
                    var _v2 = element.a;
                    var e = _v2.a;
                    var $temp$element = e;
                    element = $temp$element;
                    continue reduce_;
                } else {
                    var list = element.a;
                    return $author$project$Lia$Markdown$Inline$View$reduce_List(list);
                }
            default:
                return element;
        }
    };
    var $author$project$Lia$Markdown$Inline$View$reduce_List = function(list) {
        return A2($author$project$Lia$Markdown$Inline$Types$Container, A2($elm$core$List$map, $author$project$Lia$Markdown$Inline$View$reduce_, list), _List_Nil);
    };
    var $author$project$Lia$Markdown$Inline$View$toHtmlText = function(config) {
        return A2($author$project$Lia$Markdown$HTML$View$view, $elm$html$Html$span, $author$project$Lia$Markdown$Inline$View$toText(config));
    };
    var $author$project$Lia$Markdown$Inline$View$toText = F2(function(config, element) {
        toText: while(true)switch(element.$){
            case "Chars":
                var e = element.a;
                return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$map, function(s) {
                    return A2($elm$html$Html$p, _List_Nil, $elm$core$List$singleton($elm$html$Html$text(s + ".")));
                }, A2($elm$core$String$split, ". ", e)));
            case "Verbatim":
                var e = element.a;
                var attr = element.b;
                return A2($elm$html$Html$span, $author$project$Lia$Utils$noTranslate($author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)), _List_fromArray([
                    $elm$html$Html$text(e)
                ]));
            case "Formula":
                var mode_ = element.a;
                var e = element.b;
                return A3($elm$html$Html$node, "lia-formula", _List_fromArray([
                    A2($elm$html$Html$Attributes$attribute, "displayMode", mode_),
                    $elm$html$Html$Attributes$class("notranslate"),
                    A2($elm$html$Html$Attributes$attribute, "translate", "no"),
                    A2($elm$html$Html$Attributes$property, "formula", $elm$json$Json$Encode$string(e))
                ]), _List_Nil);
            case "Symbol":
                var e = element.a;
                return $elm$html$Html$text(e);
            case "Container":
                if (element.a.b && !element.a.b.b) {
                    var _v1 = element.a;
                    var e = _v1.a;
                    var $temp$config = config, $temp$element = e;
                    config = $temp$config;
                    element = $temp$element;
                    continue toText;
                } else {
                    var list = element.a;
                    return A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$toTextList, config, list));
                }
            case "IHTML":
                var node = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Inline$View$toHtmlText, config, attr, node);
            case "EInline":
                var e = element.a;
                return A4($author$project$Lia$Markdown$Effect$View$inline, config, _List_Nil, e, A2($author$project$Lia$Markdown$Inline$View$toTextList, config, e.content));
            case "Script":
                var id = element.a;
                var attr = element.b;
                return A3($author$project$Lia$Markdown$Effect$Script$View$view, config, id, attr);
            default:
                return $elm$html$Html$text("");
        }
    });
    var $author$project$Lia$Markdown$Inline$View$toTextList = function(config) {
        return $elm$core$List$map($author$project$Lia$Markdown$Inline$View$toText(config));
    };
    var $author$project$Lia$Markdown$Inline$View$reduce = function(config) {
        return A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Markdown$Inline$View$reduce_), A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$Types$combine, $elm$core$List$map($author$project$Lia$Markdown$Inline$View$toText(config))));
    };
    var $author$project$Lia$Markdown$Inline$View$toScript = $author$project$Lia$Markdown$Inline$Types$Script;
    var $author$project$Lia$Markdown$View$scriptView = F2(function(viewer, content) {
        if (content.a.$ === "Nothing") {
            var _v1 = content.a;
            var sub = content.b;
            return sub;
        } else {
            var id = content.a.a;
            var sub = content.b;
            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                sub,
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-paragraph")
                ]), viewer(_List_fromArray([
                    A2($author$project$Lia$Markdown$Inline$View$toScript, id, _List_fromArray([
                        _Utils_Tuple2("display", "inline-block")
                    ]))
                ])))
            ]));
        }
    });
    var $andre_dietrich$elm_svgbob$SvgBob$setColors = F2(function(color, settings) {
        return _Utils_update(settings, {
            color: color
        });
    });
    var $andre_dietrich$elm_svgbob$SvgBob$setColorsIn = F2(function(color, config) {
        return _Utils_update(config, {
            settings: A2($andre_dietrich$elm_svgbob$SvgBob$setColors, color, config.settings)
        });
    });
    var $author$project$Lia$Markdown$Config$setMain = F2(function(main, config) {
        var path = A2($elm$core$List$append, config.main.input.path, main.input.path);
        var input = main.input;
        return _Utils_update(config, {
            main: _Utils_update(main, {
                input: _Utils_update(input, {
                    path: path
                })
            }),
            view: A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(main), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Update$Script)))
        });
    });
    var $author$project$Lia$Markdown$Quiz$Types$isSolved = function(e) {
        return !_Utils_eq(e.solved, $author$project$Lia$Markdown$Quiz$Solution$Open);
    };
    var $author$project$Lia$Markdown$Quiz$View$showSolution = function(quiz) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$get(quiz.id), A2($elm$core$Basics$composeR, $elm$core$Maybe$map($author$project$Lia$Markdown$Quiz$Types$isSolved), $elm$core$Maybe$withDefault(false)));
    };
    var $author$project$Lia$Markdown$View$svgFigure = F3(function(config, caption, svg) {
        return A2($elm$html$Html$figure, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-figure")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-figure__media")
            ]), _List_fromArray([
                svg
            ])),
            function() {
                if (caption.$ === "Nothing") return $elm$html$Html$text("");
                else {
                    var content = caption.a;
                    return A2($elm$html$Html$figcaption, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-figure__caption")
                    ]), config.view(content));
                }
            }()
        ]));
    });
    var $author$project$Lia$Markdown$Chart$View$eCharts = F3(function(_v0, json, option) {
        var lang = _v0.lang;
        var attr = _v0.attr;
        var light = _v0.light;
        return A3($elm$html$Html$node, "lia-chart", A2($elm$core$List$append, _List_fromArray([
            A2($elm$html$Html$Attributes$attribute, "mode", light ? "" : "dark"),
            A2($elm$html$Html$Attributes$attribute, "locale", $author$project$I18n$Translations$getCodeFromLn(lang)),
            A2($elm$html$Html$Attributes$property, "option", option),
            A2($elm$html$Html$Attributes$attribute, "json", A2($elm$core$Maybe$withDefault, "", json))
        ]), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-chart", attr)), _List_Nil);
    });
    var $author$project$Lia$Markdown$Chart$Types$Vertical = {
        $: "Vertical"
    };
    var $author$project$Lia$Markdown$Chart$Types$swapXY = function(point) {
        return {
            x: point.y,
            y: point.x
        };
    };
    var $author$project$Lia$Markdown$Chart$Types$invertDiagram = function(diagram) {
        if (diagram.$ === "Lines") {
            var points = diagram.a;
            var color = diagram.b;
            return A2($author$project$Lia$Markdown$Chart$Types$Lines, A2($elm$core$List$map, $author$project$Lia$Markdown$Chart$Types$swapXY, points), color);
        } else {
            var points = diagram.a;
            var color = diagram.b;
            return A2($author$project$Lia$Markdown$Chart$Types$Dots, A2($elm$core$List$map, $author$project$Lia$Markdown$Chart$Types$swapXY, points), color);
        }
    };
    var $elm$core$Tuple$mapBoth = F3(function(funcA, funcB, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(funcA(x), funcB(y));
    });
    var $author$project$Lia$Markdown$Chart$View$minMax = function(list) {
        if (!list.b) return $elm$core$Maybe$Nothing;
        else {
            var l = list.a;
            var ls = list.b;
            return $elm$core$Maybe$Just(A3($elm$core$List$foldl, F2(function(value, _v1) {
                var min = _v1.a;
                var max = _v1.b;
                return _Utils_Tuple2(_Utils_cmp(value, min) < 0 ? value : min, _Utils_cmp(value, max) > 0 ? value : max);
            }), _Utils_Tuple2(l, l), ls));
        }
    };
    var $author$project$Lia$Markdown$Chart$View$colors = $elm$core$Dict$fromList(_List_fromArray([
        _Utils_Tuple2(_Utils_chr("*"), "#000000"),
        _Utils_Tuple2(_Utils_chr("+"), "#000000"),
        _Utils_Tuple2(_Utils_chr("x"), "#000000"),
        _Utils_Tuple2(_Utils_chr("a"), "#FFBF00"),
        _Utils_Tuple2(_Utils_chr("b"), "#0000FF"),
        _Utils_Tuple2(_Utils_chr("c"), "#00FFFF"),
        _Utils_Tuple2(_Utils_chr("d"), "#8B0000"),
        _Utils_Tuple2(_Utils_chr("e"), "#555D50"),
        _Utils_Tuple2(_Utils_chr("f"), "#014421"),
        _Utils_Tuple2(_Utils_chr("g"), "#008000"),
        _Utils_Tuple2(_Utils_chr("h"), "#DF73FF"),
        _Utils_Tuple2(_Utils_chr("i"), "#4B0082"),
        _Utils_Tuple2(_Utils_chr("j"), "#00A86B"),
        _Utils_Tuple2(_Utils_chr("k"), "#C3B091"),
        _Utils_Tuple2(_Utils_chr("l"), "#00FF00"),
        _Utils_Tuple2(_Utils_chr("m"), "#3EB489"),
        _Utils_Tuple2(_Utils_chr("n"), "#88540B"),
        _Utils_Tuple2(_Utils_chr("o"), "#FF7F00"),
        _Utils_Tuple2(_Utils_chr("p"), "#FFC0CB"),
        _Utils_Tuple2(_Utils_chr("q"), "#436B95"),
        _Utils_Tuple2(_Utils_chr("r"), "#FF0000"),
        _Utils_Tuple2(_Utils_chr("s"), "#C0C0C0"),
        _Utils_Tuple2(_Utils_chr("t"), "#008080"),
        _Utils_Tuple2(_Utils_chr("u"), "#3F00FF"),
        _Utils_Tuple2(_Utils_chr("v"), "#EE82EE"),
        _Utils_Tuple2(_Utils_chr("w"), "#FFFFFF"),
        _Utils_Tuple2(_Utils_chr("y"), "#FFFF00"),
        _Utils_Tuple2(_Utils_chr("z"), "#39A78E")
    ]));
    var $elm$core$Char$toLower = _Char_toLower;
    var $author$project$Lia$Markdown$Chart$View$color = function(_char) {
        return _Utils_Tuple2("itemStyle", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("color", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "#000000", A2($elm$core$Dict$get, $elm$core$Char$toLower(_char), $author$project$Lia$Markdown$Chart$View$colors))))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$label = _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("normal", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("show", $elm$json$Json$Encode$bool(false)),
            _Utils_Tuple2("position", $elm$json$Json$Encode$string("top"))
        ])))
    ])));
    var $author$project$Lia$Markdown$Chart$View$name = function(label_) {
        if (label_.$ === "Nothing") return _List_Nil;
        else {
            var str = label_.a;
            return _List_fromArray([
                _Utils_Tuple2("name", $elm$json$Json$Encode$string(str))
            ]);
        }
    };
    var $author$project$Lia$Markdown$Chart$View$smooth = F2(function(withColor, _char) {
        return _Utils_Tuple2("smooth", withColor ? $elm$json$Json$Encode$bool(!A2($elm$core$Basics$modBy, 2, $elm$core$Char$toCode(_char))) : $elm$json$Json$Encode$bool(false));
    });
    var $author$project$Lia$Markdown$Chart$View$style = F2(function(withColor, _char) {
        return _Utils_Tuple2("lineStyle", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("type", $elm$json$Json$Encode$string(withColor ? !A2($elm$core$Basics$modBy, 7, $elm$core$Char$toCode(_char)) ? "dashed" : !A2($elm$core$Basics$modBy, 5, $elm$core$Char$toCode(_char)) ? "dotted" : "solid" : "solid"))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$symbol = function(c) {
        return _Utils_Tuple2("symbol", $elm$json$Json$Encode$string(function() {
            switch(c.valueOf()){
                case "d":
                    return "diamond";
                case "D":
                    return "diamond";
                case "t":
                    return "triangle";
                case "T":
                    return "triangle";
                case "A":
                    return "arrow";
                case "v":
                    return "triangle";
                case "V":
                    return "triangle";
                case "#":
                    return "rect";
                case "H":
                    return "rect";
                case "B":
                    return "roundRect";
                case "N":
                    return "roundRect";
                case "p":
                    return "pin";
                case "P":
                    return "pin";
                case "+":
                    return "diamond";
                case "x":
                    return "rect";
                case "X":
                    return "rect";
                default:
                    return "circle";
            }
        }()));
    };
    var $author$project$Lia$Markdown$Chart$View$symbolSize = function(c) {
        return _Utils_Tuple2("symbolSize", $elm$json$Json$Encode$int($elm$core$Char$isLower(c) ? 5 : 10));
    };
    var $author$project$Lia$Markdown$Chart$View$series = F2(function(withColor, _v0) {
        var _char = _v0.a;
        var diagram = _v0.b;
        return $elm$json$Json$Encode$object(A2($elm$core$List$append, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, withColor, $author$project$Lia$Markdown$Chart$View$color(_char), _List_fromArray([
            $author$project$Lia$Markdown$Chart$View$symbol(_char),
            $author$project$Lia$Markdown$Chart$View$symbolSize(_char),
            $author$project$Lia$Markdown$Chart$View$label
        ])), function() {
            if (diagram.$ === "Lines") {
                var list = diagram.a;
                var label_ = diagram.b;
                return A2($elm$core$List$append, _List_fromArray([
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(point) {
                        return A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$float, _List_fromArray([
                            point.x,
                            point.y
                        ]));
                    }, list)),
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("line")),
                    _Utils_Tuple2("barGap", $elm$json$Json$Encode$int(0)),
                    A2($author$project$Lia$Markdown$Chart$View$style, withColor, _char),
                    A2($author$project$Lia$Markdown$Chart$View$smooth, withColor, _char)
                ]), $author$project$Lia$Markdown$Chart$View$name(label_));
            } else {
                var list = diagram.a;
                var label_ = diagram.b;
                return A2($elm$core$List$append, _List_fromArray([
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$list($elm$json$Json$Encode$float), A2($elm$core$List$map, function(point) {
                        return _List_fromArray([
                            point.x,
                            point.y
                        ]);
                    }, list))),
                    _Utils_Tuple2("barGap", $elm$json$Json$Encode$int(0)),
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("scatter"))
                ]), $author$project$Lia$Markdown$Chart$View$name(label_));
            }
        }()));
    });
    var $author$project$Lia$Markdown$Chart$View$toolbox = F2(function(position, config) {
        return _Utils_Tuple2("toolbox", $elm$json$Json$Encode$null);
    });
    var $author$project$Lia$Markdown$Chart$View$add = F3(function(transform, to, list) {
        if (to.$ === "Just") {
            var data = to.a;
            return A2($elm$core$List$cons, transform(data), list);
        } else return list;
    });
    var $author$project$Lia$Markdown$Chart$View$addAxisLimits = function(_v0) {
        var min = _v0.min;
        var max = _v0.max;
        return A2($elm$core$Basics$composeR, $andre_dietrich$elm_conditional$Conditional$List$addWhen(A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$Tuple$pair("min")), min)), $andre_dietrich$elm_conditional$Conditional$List$addWhen(A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$Tuple$pair("max")), max)));
    };
    var $author$project$Lia$Markdown$Chart$View$axis = F5(function(x, limits, type_, title, data) {
        return _Utils_Tuple2(x ? "xAxis" : "yAxis", $elm$json$Json$Encode$object(A2($elm$core$List$append, _Utils_eq(data, _List_Nil) ? _List_Nil : _List_fromArray([
            _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, data)),
            _Utils_Tuple2("splitArea", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true))
            ])))
        ]), A3($author$project$Lia$Markdown$Chart$View$add, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$Tuple$pair("name")), title, A2($author$project$Lia$Markdown$Chart$View$addAxisLimits, limits, _List_fromArray([
            _Utils_Tuple2("type", $elm$json$Json$Encode$string(type_))
        ]))))));
    });
    var $author$project$Lia$Markdown$Chart$View$xAxis = $author$project$Lia$Markdown$Chart$View$axis(true);
    var $author$project$Lia$Markdown$Chart$View$yAxis = $author$project$Lia$Markdown$Chart$View$axis(false);
    var $author$project$Lia$Markdown$Chart$View$encode = F2(function(withColor, chart) {
        var _v0 = A3($elm$core$Tuple$mapBoth, $elm$core$String$fromFloat, $elm$core$String$fromFloat, A2($elm$core$Maybe$withDefault, _Utils_Tuple2(0, 0), $author$project$Lia$Markdown$Chart$View$minMax(A2($elm$core$List$concatMap, function(diagram) {
            return A2($elm$core$List$map, function($) {
                return $.x;
            }, function() {
                if (diagram.$ === "Lines") {
                    var points = diagram.a;
                    return points;
                } else {
                    var points = diagram.a;
                    return points;
                }
            }());
        }, $elm$core$Dict$values(chart.diagrams)))));
        var min = _v0.a;
        var max = _v0.b;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("textStyle", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("fontFamily", $elm$json$Json$Encode$string("Roboto"))
            ]))),
            A4(_Utils_eq(chart.orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical)) ? $author$project$Lia$Markdown$Chart$View$yAxis : $author$project$Lia$Markdown$Chart$View$xAxis, {
                max: $elm$core$Maybe$Just(A2($elm$core$Maybe$withDefault, max, chart.xLimits.max)),
                min: $elm$core$Maybe$Just(A2($elm$core$Maybe$withDefault, min, chart.xLimits.min))
            }, "value", $elm$core$Maybe$Just(chart.xLabel), _List_Nil),
            A4(_Utils_eq(chart.orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical)) ? $author$project$Lia$Markdown$Chart$View$xAxis : $author$project$Lia$Markdown$Chart$View$yAxis, chart.yLimits, "value", $elm$core$Maybe$Just(chart.yLabel), _List_Nil),
            _Utils_Tuple2("title", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("text", $elm$json$Json$Encode$string(chart.title))
            ]))),
            _Utils_Tuple2("legend", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, chart.legend)),
                _Utils_Tuple2("top", $elm$json$Json$Encode$int(28))
            ]))),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: true,
                magicType: true,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Chart$View$series(withColor), (_Utils_eq(chart.orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical)) ? $elm$core$List$map($elm$core$Tuple$mapSecond($author$project$Lia$Markdown$Chart$Types$invertDiagram)) : $elm$core$Basics$identity)($elm$core$Dict$toList(chart.diagrams))))
        ]));
    });
    var $author$project$Lia$Markdown$Chart$View$view = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encode(true), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Code$Update$UpdateTerminal = F2(function(a, b) {
        return {
            $: "UpdateTerminal",
            a: a,
            b: b
        };
    });
    var $andre_dietrich$elm_conditional$Conditional$List$attachIf = F3(function(conditionMet, value, list) {
        return conditionMet ? A2($elm$core$List$append, list, _List_fromArray([
            value
        ])) : list;
    });
    var $author$project$I18n$Translations$codeTerminal = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቴርማው";
            case "Ar":
                return "طرفية";
            case "Bg":
                return "терминал";
            case "Bn":
                return "টার্মিনাল";
            case "De":
                return "Terminal";
            case "Fa":
                return "پایانه";
            case "Fr":
                return "Terminal";
            case "Hi":
                return "टर्मिनल";
            case "Hy":
                return "տերմինալ";
            case "Ja":
                return "ターミナル";
            case "Ka":
                return "ტერმინალი";
            case "Ko":
                return "단말기";
            case "Pa":
                return "ਟਰਮੀਨਲ";
            case "Pt":
                return "terminal";
            case "Ru":
                return "термина́л";
            case "Sw":
                return "terminal";
            case "Tw":
                return "终端";
            case "Uk":
                return "термінал";
            case "Ur":
                return "ٹرمینل";
            case "Zh":
                return "终端";
            default:
                return "terminal";
        }
    };
    var $author$project$Lia$Markdown$Code$View$list_get = F2(function(idx, list) {
        list_get: while(true){
            if (!list.b) return $elm$core$Maybe$Nothing;
            else {
                var x = list.a;
                var xs = list.b;
                if (!idx) return $elm$core$Maybe$Just(x);
                else {
                    var $temp$idx = idx - 1, $temp$list = xs;
                    idx = $temp$idx;
                    list = $temp$list;
                    continue list_get;
                }
            }
        }
    });
    var $author$project$Lia$Markdown$Code$View$get_annotations = F2(function(log, file_id) {
        return A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($author$project$Lia$Markdown$Code$View$list_get, file_id, log.details));
    });
    var $author$project$Lia$Markdown$Code$Log$isEmpty = A2($elm$core$Basics$composeR, function($) {
        return $.messages;
    }, $elm$core$Array$isEmpty);
    var $tesk9$accessible_html$Accessibility$Live$livePolite = $tesk9$accessible_html$Accessibility$Live$polite;
    var $tesk9$accessible_html$Accessibility$Role$log = $tesk9$accessible_html$Accessibility$Utils$role("log");
    var $author$project$Lia$Markdown$Code$Terminal$Input = function(a) {
        return {
            $: "Input",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Terminal$KeyDown = function(a) {
        return {
            $: "KeyDown",
            a: a
        };
    };
    var $author$project$Lia$Utils$onKeyDown = function(tagger) {
        return A2($elm$html$Html$Events$stopPropagationOn, "keydown", A2($elm$json$Json$Decode$map, function(x) {
            return _Utils_Tuple2(x, true);
        }, A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$keyCode)));
    };
    var $author$project$Lia$Markdown$Code$Terminal$view = function(terminal) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-code-terminal__input")
        ]), _List_fromArray([
            A2($elm$html$Html$i, _List_fromArray([
                $elm$html$Html$Attributes$class("icon icon-chevron-double-right")
            ]), _List_Nil),
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Events$onInput($author$project$Lia$Markdown$Code$Terminal$Input),
                $author$project$Lia$Utils$onKeyDown($author$project$Lia$Markdown$Code$Terminal$KeyDown),
                $elm$html$Html$Attributes$value(terminal.input)
            ]), _List_Nil)
        ]));
    };
    var $author$project$Lia$Markdown$Code$Update$FlipFullscreen = F2(function(a, b) {
        return {
            $: "FlipFullscreen",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Code$Update$FlipView = F2(function(a, b) {
        return {
            $: "FlipView",
            a: a,
            b: b
        };
    });
    var $author$project$I18n$Translations$codeMaximize = function(lang) {
        switch(lang.$){
            case "Am":
                return "ማግኘት ያድርጉ";
            case "Ar":
                return "إظهار بالكامل";
            case "Bg":
                return "Максимизиране";
            case "Bn":
                return "সামঞ্জস্য বাড়ান";
            case "De":
                return "Darstellung maximieren";
            case "Es":
                return "maximinzar vista";
            case "Fa":
                return "بزرگ کردن پنجره";
            case "Fr":
                return "Maximiser l'affichage";
            case "Hi":
                return "प्रदर्शन को अधिकतम करें";
            case "Hy":
                return "բարձրագունել տեսքը";
            case "It":
                return "massimizzare la vista";
            case "Ja":
                return "最大化";
            case "Ka":
                return "მაქსიმიზაცია";
            case "Ko":
                return "뷰 최대화";
            case "Nl":
                return "weergave maximaliseren";
            case "Pa":
                return "ਵੱਧ ਕਰੋ ਝਲਕ";
            case "Pt":
                return "maximizar visualiza\xe7\xe3o";
            case "Ru":
                return "показать полностью";
            case "Sw":
                return "kuongeza mtazamo";
            case "Tw":
                return "極大視窗";
            case "Uk":
                return "зображення збільшити";
            case "Ur":
                return "منظر کو زیادہ کریں";
            case "Zh":
                return "極大視窗";
            default:
                return "maximize view";
        }
    };
    var $author$project$I18n$Translations$codeMinimize = function(lang) {
        switch(lang.$){
            case "Am":
                return "ማሳወቅ ያድርጉ";
            case "Ar":
                return "تصغير";
            case "Bg":
                return "Минимизиране";
            case "Bn":
                return "সামঞ্জস্য কমান";
            case "De":
                return "Darstellung minimieren";
            case "Es":
                return "minimizar vista";
            case "Fa":
                return "کوچک کردن پنجره";
            case "Fr":
                return "R\xe9duire l'affichage";
            case "Hi":
                return "प्रदर्शन को छोटा करें";
            case "Hy":
                return "նվազեցնել տեսքը";
            case "It":
                return "minimizzare la vista";
            case "Ja":
                return "最小化";
            case "Ka":
                return "მინიმიზაცია";
            case "Ko":
                return "뷰 최소화";
            case "Nl":
                return "weergave verkleinen";
            case "Pa":
                return "ਨਿੱਚੇ ਕਰੋ ਝਲਕ";
            case "Pt":
                return "minimizar visualiza\xe7\xe3o";
            case "Ru":
                return "свернуть";
            case "Sw":
                return "punguza mtazamo";
            case "Tw":
                return "極小視窗";
            case "Uk":
                return "зображення зменшити";
            case "Ur":
                return "منظر کو کم کریں";
            case "Zh":
                return "極小視窗";
            default:
                return "minimize view";
        }
    };
    var $author$project$Lia$Markdown$Code$Update$CopyToClipboard = F2(function(a, b) {
        return {
            $: "CopyToClipboard",
            a: a,
            b: b
        };
    });
    var $author$project$I18n$Translations$codeCopy = function(lang) {
        switch(lang.$){
            case "Am":
                return "ወደ ቅንጥብ ሰሌዳ ቅዳ";
            case "Ar":
                return "نسخ إلى الحافظة";
            case "Bg":
                return "Копирай в клипборда";
            case "Bn":
                return "ক্লিপবোর্ডে কপি করুন";
            case "De":
                return "in die Zwischenablage kopieren";
            case "Es":
                return "copiar al portapapeles";
            case "Fa":
                return "کپی در کلیپ بورد";
            case "Fr":
                return "Copier dans le presse-papiers";
            case "Hi":
                return "क्लिपबोर्ड पर कॉपी करें";
            case "Hy":
                return "Պատճենել սեղմատախտակին";
            case "It":
                return "copia negli appunti";
            case "Ja":
                return "クリップボードにコピー";
            case "Ka":
                return "დაკოპირე კლიპბორდზე";
            case "Ko":
                return "클립보드에 복사";
            case "Nl":
                return "kopi\xebren naar klembord";
            case "Pa":
                return "ਕਲਿੱਪਬੋਰਡ 'ਤੇ ਕਾਪੀ";
            case "Pt":
                return "copiar para a \xe1rea de transfer\xeancia";
            case "Ru":
                return "скопировать в буфер обмена";
            case "Sw":
                return "nakili kwenye ubao wa kunakili";
            case "Tw":
                return "复制到剪贴板";
            case "Uk":
                return "копіювати в буфер обміну";
            case "Ur":
                return "کلپ بورڈ پر کاپی کریں";
            case "Zh":
                return "复制到剪贴板";
            default:
                return "copy to clipboard";
        }
    };
    var $author$project$Lia$Markdown$Code$View$copyToClipboard = F4(function(lang, inverted, project, fileID) {
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: "icon-copy",
            msg: $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Code$Update$CopyToClipboard, project, fileID)),
            tabbable: true,
            title: $author$project$I18n$Translations$codeCopy(lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--transparent"),
            $elm$html$Html$Attributes$class(inverted ? "lia-code__copy--inverted" : "lia-code__copy")
        ]));
    });
    var $author$project$Lia$Markdown$Code$Update$Eval = function(a) {
        return {
            $: "Eval",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$Synchronize = F3(function(a, b, c) {
        return {
            $: "Synchronize",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Code$Update$SynchronizeCursor = F3(function(a, b, c) {
        return {
            $: "SynchronizeCursor",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Code$Update$Update = F3(function(a, b, c) {
        return {
            $: "Update",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Code$Editor$annotations = $elm$html$Html$Attributes$property("annotations");
    var $author$project$Lia$Markdown$Code$Editor$catchCursorUpdates = $author$project$Lia$Markdown$Code$Editor$boolean("catchCursorUpdates");
    var $author$project$Lia$Markdown$Code$Editor$firstLineNumber = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$int, $elm$html$Html$Attributes$property("firstLineNumber"));
    var $author$project$Lia$Markdown$Code$Editor$fontSize = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("fontSize"));
    var $author$project$Lia$Markdown$Code$Editor$highlightActiveLine = $author$project$Lia$Markdown$Code$Editor$boolean("highlightActiveLine");
    var $author$project$Lia$Markdown$Code$View$lines = function(code) {
        return $elm$core$List$length($elm$core$String$lines(code));
    };
    var $author$project$Lia$Markdown$Code$Editor$marker = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("marker"));
    var $author$project$Lia$Markdown$Code$Editor$onChangeCursor2 = function(msg) {
        return A2($elm$html$Html$Events$on, "editorUpdateCursor", A2($elm$json$Json$Decode$map, msg, A2($elm$json$Json$Decode$at, _List_fromArray([
            "detail"
        ]), $elm$json$Json$Decode$value)));
    };
    var $author$project$Lia$Markdown$Code$Editor$onChangeEvent2 = function(msg) {
        return A2($elm$html$Html$Events$on, "editorUpdateEvent", A2($elm$json$Json$Decode$map, msg, A2($elm$json$Json$Decode$at, _List_fromArray([
            "detail"
        ]), $elm$json$Json$Decode$value)));
    };
    var $author$project$Lia$Markdown$Code$Editor$onCtrlEnter = function(msg) {
        return A2($elm$html$Html$Events$on, "editorCtrlEnter", $elm$json$Json$Decode$succeed(msg));
    };
    var $author$project$Lia$Markdown$Code$Editor$readOnly = $author$project$Lia$Markdown$Code$Editor$boolean("readOnly");
    var $author$project$Lia$Markdown$Code$Editor$setCursors = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$list(function(cursor) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$string(cursor.id)),
            _Utils_Tuple2("color", $elm$json$Json$Encode$string(cursor.color)),
            _Utils_Tuple2("position", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("row", $elm$json$Json$Encode$int(cursor.state.position.row)),
                _Utils_Tuple2("column", $elm$json$Json$Encode$int(cursor.state.position.column))
            ]))),
            _Utils_Tuple2("selection", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, cursor.state.selection))
        ]));
    }), $elm$html$Html$Attributes$property("cursors"));
    var $author$project$Lia$Markdown$Code$Editor$tabSize = A2($elm$core$Basics$composeR, $elm$json$Json$Encode$int, $elm$html$Html$Attributes$property("tabSize"));
    var $author$project$Lia$Markdown$Code$View$toStyle = F2(function(visible, pix) {
        return _List_fromArray([
            A2($elm$html$Html$Attributes$style, "min-height", visible ? "calc( " + ($elm$core$String$fromInt(pix) + " * var(--global-font-size, 1.5rem) * var(--font-size-multiplier) * 1.3333 + 1.47rem)") : "0px"),
            A2($elm$html$Html$Attributes$style, "transition", "min-height 0.25s ease-out"),
            A2($elm$html$Html$Attributes$style, "break-inside", "avoid")
        ]);
    });
    var $author$project$Lia$Markdown$Code$Editor$useWrapMode = $author$project$Lia$Markdown$Code$Editor$boolean("useWrapMode");
    var $author$project$Lia$Markdown$Code$View$evaluate = function(_v0) {
        var isExecutable = _v0.isExecutable;
        var theme = _v0.theme;
        var attr = _v0.attr;
        var isRunning = _v0.isRunning;
        var id_1 = _v0.id_1;
        var id_2 = _v0.id_2;
        var file = _v0.file;
        var errors = _v0.errors;
        var sync = _v0.sync;
        var cursors = _v0.cursors;
        var readOnly = isExecutable ? isRunning ? isRunning : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-readonly", attr) : _Utils_eq(A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-readonly", attr), $elm$core$Maybe$Nothing) ? true : A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-readonly", attr);
        var code = A2($elm$core$Maybe$withDefault, file.code, sync);
        var total_lines = $author$project$Lia$Markdown$Code$View$lines(code);
        var max_lines = total_lines;
        return A2($author$project$Lia$Markdown$Code$Editor$editor, A2($elm$core$List$append, _List_fromArray([
            $author$project$Lia$Markdown$Code$Editor$value(code),
            $author$project$Lia$Markdown$Code$Editor$setCursors(cursors),
            $author$project$Lia$Markdown$Code$Editor$mode(file.lang),
            $author$project$Lia$Markdown$Code$Editor$theme(A2($elm$core$Maybe$withDefault, theme, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-theme", attr))),
            $author$project$Lia$Markdown$Code$Editor$readOnly(true),
            $author$project$Lia$Markdown$Code$Editor$highlightActiveLine(false),
            $author$project$Lia$Markdown$Code$Editor$tabSize(A2($elm$core$Maybe$withDefault, 2, A2($elm$core$Maybe$andThen, $elm$core$String$toInt, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-tabSize", attr)))),
            $author$project$Lia$Markdown$Code$Editor$fontSize(A2($elm$core$Maybe$withDefault, "1.5rem", A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-fontSize", attr))),
            $author$project$Lia$Markdown$Code$Editor$marker(A2($elm$core$Maybe$withDefault, "", A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-marker", attr))),
            $author$project$Lia$Markdown$Code$Editor$firstLineNumber(A2($elm$core$Maybe$withDefault, 1, A2($elm$core$Maybe$andThen, $elm$core$String$toInt, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-firstLineNumber", attr)))),
            $author$project$Lia$Markdown$Code$Editor$showGutter(!_Utils_eq(A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-showGutter", attr), $elm$core$Maybe$Nothing) ? A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-showGutter", attr) : isExecutable),
            $author$project$Lia$Markdown$Code$Editor$useSoftTabs(false),
            $author$project$Lia$Markdown$Code$Editor$annotations(errors),
            $author$project$Lia$Markdown$Code$Editor$extensions(_List_fromArray([
                "language_tools"
            ])),
            $author$project$Lia$Markdown$Code$Editor$useWrapMode(true),
            $author$project$Lia$Markdown$Code$Editor$onCtrlEnter($author$project$Lia$Markdown$Code$Update$Eval(id_1))
        ]), A3($andre_dietrich$elm_conditional$Conditional$List$appendIf, !readOnly, _Utils_eq(sync, $elm$core$Maybe$Nothing) ? _List_fromArray([
            $author$project$Lia$Markdown$Code$Editor$catchCursorUpdates(false),
            $author$project$Lia$Markdown$Code$Editor$onChange(A2($author$project$Lia$Markdown$Code$Update$Update, id_1, id_2))
        ]) : _List_fromArray([
            $author$project$Lia$Markdown$Code$Editor$catchCursorUpdates(true),
            $author$project$Lia$Markdown$Code$Editor$onChangeEvent2(A2($author$project$Lia$Markdown$Code$Update$Synchronize, id_1, id_2)),
            $author$project$Lia$Markdown$Code$Editor$onChangeCursor2(A2($author$project$Lia$Markdown$Code$Update$SynchronizeCursor, id_1, id_2))
        ]), A2($elm$core$List$append, A2($author$project$Lia$Markdown$Code$View$toStyle, file.visible, max_lines), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)))), _List_Nil);
    };
    var $author$project$Lia$Markdown$Code$View$viewCode = F4(function(_v0, id_2, file, attr) {
        var isExecutable = _v0.isExecutable;
        var lang = _v0.lang;
        var theme = _v0.theme;
        var isRunning = _v0.isRunning;
        var errors = _v0.errors;
        var sync = _v0.sync;
        var id_1 = _v0.id_1;
        var cursors = _v0.cursors;
        return file.name === "" ? A2($elm$html$Html$div, $author$project$Lia$Utils$noTranslate(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-code__input")
        ])), _List_fromArray([
            $author$project$Lia$Markdown$Code$View$evaluate({
                attr: attr,
                cursors: A2($elm$core$List$filter, function(cursor) {
                    return _Utils_eq(cursor.project, id_1) && _Utils_eq(cursor.file, id_2);
                }, cursors),
                errors: errors(id_2),
                file: file,
                id_1: id_1,
                id_2: id_2,
                isExecutable: isExecutable,
                isRunning: isRunning,
                sync: A2($elm$core$Maybe$andThen, $elm$core$Array$get(id_2), sync),
                theme: theme
            }),
            A4($author$project$Lia$Markdown$Code$View$copyToClipboard, lang, false, isExecutable ? $author$project$Lia$Markdown$Code$Types$Evaluate(id_1) : $author$project$Lia$Markdown$Code$Types$Highlight(id_1), id_2)
        ])) : A2($elm$html$Html$div, $author$project$Lia$Utils$noTranslate(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-accordion")
        ])), _List_fromArray([
            A2($elm$html$Html$div, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-accordion__item"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)), _List_fromArray([
                A2($elm$html$Html$label, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-accordion__header"),
                    $tesk9$accessible_html$Accessibility$Aria$label(file.name + (" " + $author$project$I18n$Translations$codeMinimize(lang)))
                ]), _List_fromArray([
                    A2($author$project$Lia$Utils$btnIcon, {
                        icon: "icon-plus",
                        msg: $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Code$Update$FlipView, isExecutable ? $author$project$Lia$Markdown$Code$Types$Evaluate(id_1) : $author$project$Lia$Markdown$Code$Types$Highlight(id_1), id_2)),
                        tabbable: true,
                        title: $author$project$I18n$Translations$codeMinimize(lang)
                    }, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-accordion__toggle")
                    ])),
                    A2($elm$html$Html$h3, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-accordion__headline h4")
                    ]), _List_fromArray([
                        $elm$html$Html$text(file.name)
                    ])),
                    A4($author$project$Lia$Markdown$Code$View$copyToClipboard, lang, true, isExecutable ? $author$project$Lia$Markdown$Code$Types$Evaluate(id_1) : $author$project$Lia$Markdown$Code$Types$Highlight(id_1), id_2)
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$classList(_List_fromArray([
                        _Utils_Tuple2("lia-accordion__content", true),
                        _Utils_Tuple2("active", true)
                    ]))
                ]), _List_fromArray([
                    A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-code__input")
                    ]), _List_fromArray([
                        isExecutable ? A2($author$project$Lia$Utils$btnIcon, {
                            icon: file.fullscreen ? "icon-chevron-up" : "icon-chevron-down",
                            msg: $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Code$Update$FlipFullscreen, $author$project$Lia$Markdown$Code$Types$Evaluate(id_1), id_2)),
                            tabbable: true,
                            title: file.fullscreen ? $author$project$I18n$Translations$codeMinimize(lang) : $author$project$I18n$Translations$codeMaximize(lang)
                        }, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-code__min-max lia-btn--transparent")
                        ])) : $elm$html$Html$text(""),
                        $author$project$Lia$Markdown$Code$View$evaluate({
                            attr: attr,
                            cursors: A2($elm$core$List$filter, function(cursor) {
                                return _Utils_eq(cursor.project, id_1) && _Utils_eq(cursor.file, id_2);
                            }, cursors),
                            errors: errors(id_2),
                            file: file,
                            id_1: id_1,
                            id_2: id_2,
                            isExecutable: isExecutable,
                            isRunning: isRunning,
                            sync: A2($elm$core$Maybe$andThen, $elm$core$Array$get(id_2), sync),
                            theme: theme
                        })
                    ]))
                ]))
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Code$Update$First = function(a) {
        return {
            $: "First",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$Last = function(a) {
        return {
            $: "Last",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$Load = F2(function(a, b) {
        return {
            $: "Load",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Code$Update$Stop = function(a) {
        return {
            $: "Stop",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Code$Update$ToggleSync = function(a) {
        return {
            $: "ToggleSync",
            a: a
        };
    };
    var $author$project$I18n$Translations$codeExecute = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተጠቃሚ ስጥ";
            case "Ar":
                return "تنفيذ";
            case "Bg":
                return "Изпълни";
            case "Bn":
                return "সম্পাদনা করুন";
            case "De":
                return "Ausf\xfchren";
            case "Es":
                return "ejecutar";
            case "Fa":
                return "اجرا";
            case "Fr":
                return "Ex\xe9cuter";
            case "Hi":
                return "भागो";
            case "Hy":
                return "իրականացնել";
            case "It":
                return "Esegui";
            case "Ja":
                return "実行";
            case "Ka":
                return "შესრულება";
            case "Ko":
                return "실행";
            case "Nl":
                return "uitvoeren";
            case "Pa":
                return "ਚਲਾਓ";
            case "Pt":
                return "Executar";
            case "Ru":
                return "выполнить";
            case "Sw":
                return "Tekeleza";
            case "Tw":
                return "開始執行";
            case "Uk":
                return "запустити";
            case "Ur":
                return "عملدرآمد کریں";
            case "Zh":
                return "開始執行";
            default:
                return "Execute";
        }
    };
    var $author$project$I18n$Translations$codeFirst = function(lang) {
        switch(lang.$){
            case "Am":
                return "የመጀመሪያ ክፍል";
            case "Ar":
                return "الإصدار الأول";
            case "Bg":
                return "Първа версия";
            case "Bn":
                return "প্রথম সংস্করণ";
            case "De":
                return "erste Version";
            case "Es":
                return "primera versi\xf3n";
            case "Fa":
                return "نسخه اولیه";
            case "Fr":
                return "premi\xe8re version";
            case "Hi":
                return "पहली रिलीज";
            case "Hy":
                return "առաջին տարբերակը";
            case "It":
                return "prima versione";
            case "Ja":
                return "最初のバージョン";
            case "Ka":
                return "პირველი ვერსია";
            case "Ko":
                return "첫 버전";
            case "Nl":
                return "eerste versie";
            case "Pa":
                return "ਪਹਿਲਾਂ ਦਾ ਵਰਜਨ";
            case "Pt":
                return "primeira vers\xe3o";
            case "Ru":
                return "первая версия";
            case "Sw":
                return "toleo la kwanza";
            case "Tw":
                return "最初版";
            case "Uk":
                return "перша версія";
            case "Ur":
                return "پہلا ورژن";
            case "Zh":
                return "最初版";
            default:
                return "first version";
        }
    };
    var $author$project$I18n$Translations$codeLast = function(lang) {
        switch(lang.$){
            case "Am":
                return "የመጨረሻ ክፍል";
            case "Ar":
                return "أحدث إصدار";
            case "Bg":
                return "Последна версия";
            case "Bn":
                return "শেষ সংস্করণ";
            case "De":
                return "letzte Version";
            case "Es":
                return "\xfaltima versi\xf3n";
            case "Fa":
                return "آخرین نسخه";
            case "Fr":
                return "derni\xe8re version";
            case "Hi":
                return "अंतिम संस्करण";
            case "Hy":
                return "վերջին տարբերակը";
            case "It":
                return "ultima versione";
            case "Ja":
                return "最新のバージョン";
            case "Ka":
                return "ბოლო ვერსია";
            case "Ko":
                return "최신 버전";
            case "Nl":
                return "laatste versie";
            case "Pa":
                return "ਆਖੀਰੀ ਵਰਜਨ";
            case "Pt":
                return "\xfaltima vers\xe3o";
            case "Ru":
                return "последняя версия";
            case "Sw":
                return "toleo la mwisho";
            case "Tw":
                return "最終版";
            case "Uk":
                return "остання версія";
            case "Ur":
                return "آخری ورژن";
            case "Zh":
                return "最終版";
            default:
                return "last version";
        }
    };
    var $author$project$I18n$Translations$codeNext = function(lang) {
        switch(lang.$){
            case "Am":
                return "የቀጣይ ክፍሎች";
            case "Ar":
                return "الإصدار التالي";
            case "Bg":
                return "следваща версия";
            case "Bn":
                return "পরবর্তী সংস্করণ";
            case "De":
                return "eine Version vor";
            case "Es":
                return "versi\xf3n siguiente";
            case "Fa":
                return "نسخه بعدی";
            case "Fr":
                return "version suivante";
            case "Hi":
                return "एक संस्करण पहले";
            case "Hy":
                return "հաջորդ տարբերակը";
            case "It":
                return "versione seguente";
            case "Ja":
                return "次のバージョン";
            case "Ka":
                return "შემდეგი ვერსია";
            case "Ko":
                return "다음 버전";
            case "Nl":
                return "een versie vooruit";
            case "Pa":
                return "ਅਗਲਾ ਵਰਜਨ";
            case "Pt":
                return "pr\xf3xima vers\xe3o";
            case "Ru":
                return "следующая версия";
            case "Sw":
                return "toleo linalofuata";
            case "Tw":
                return "下一版";
            case "Uk":
                return "наступна версія";
            case "Ur":
                return "اگلا ورژن";
            case "Zh":
                return "下一版";
            default:
                return "next version";
        }
    };
    var $author$project$I18n$Translations$codePrev = function(lang) {
        switch(lang.$){
            case "Am":
                return "የመጀመሪያ ክፍሎች";
            case "Ar":
                return "الإصدار السابق";
            case "Bg":
                return "Предишна версия";
            case "Bn":
                return "পূর্ববর্তী সংস্করণ";
            case "De":
                return "eine Version zur\xfcck";
            case "Es":
                return "versi\xf3n anterior";
            case "Fa":
                return "نسخه قبلی";
            case "Fr":
                return "version pr\xe9c\xe9dente";
            case "Hi":
                return "एक संस्करण वापस";
            case "Hy":
                return "նախորդ տարբերակը";
            case "It":
                return "versione precedente";
            case "Ja":
                return "前のバージョン";
            case "Ka":
                return "წინა ვერსია";
            case "Ko":
                return "이전 버전";
            case "Nl":
                return "een versie terug";
            case "Pa":
                return "ਪਿਛਲਾ ਵਰਜਨ";
            case "Pt":
                return "vers\xe3o anterior";
            case "Ru":
                return "предыдущая версия";
            case "Sw":
                return "toleo la awali";
            case "Tw":
                return "上一版";
            case "Uk":
                return "попередня версія";
            case "Ur":
                return "پچھلا ورژن";
            case "Zh":
                return "上一版";
            default:
                return "previous version";
        }
    };
    var $author$project$I18n$Translations$codeRunning = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተጠቃሚ ላይ ነው";
            case "Ar":
                return "إجراء";
            case "Bg":
                return "Работещ";
            case "Bn":
                return "চলছে";
            case "De":
                return "wird ausgef\xfchrt";
            case "Es":
                return "en funcionamiento";
            case "Fa":
                return "در حال اجرا";
            case "Fr":
                return "en cours d'ex\xe9cution";
            case "Hi":
                return "चल रहा है";
            case "Hy":
                return "ընթանում է";
            case "It":
                return "in funzione";
            case "Ja":
                return "実行中";
            case "Ka":
                return "მიმდინარეობს";
            case "Ko":
                return "실행 중";
            case "Nl":
                return "wordt uitgevoerd";
            case "Pa":
                return "ਚੱਲ ਰਿਹਾ ਹੈ";
            case "Pt":
                return "est\xe1 sendo executado";
            case "Ru":
                return "выполняется";
            case "Sw":
                return "inakimbia";
            case "Tw":
                return "執行中";
            case "Uk":
                return "виконується";
            case "Ur":
                return "چل رہا ہے";
            case "Zh":
                return "執行中";
            default:
                return "is running";
        }
    };
    var $tesk9$accessible_html$Accessibility$Aria$keyShortcuts = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("keyshortcuts"), $tesk9$accessible_html$Accessibility$Utils$toListString);
    var $author$project$Lia$Markdown$Code$View$view_control = function(_v0) {
        var lang = _v0.lang;
        var id = _v0.id;
        var version_active = _v0.version_active;
        var version_count = _v0.version_count;
        var running = _v0.running;
        var terminal = _v0.terminal;
        var sync = _v0.sync;
        var forward = running || !version_active;
        var deactivate_control = _Utils_eq(sync, $elm$core$Maybe$Just(true));
        var backward = running || _Utils_eq(version_active, version_count - 1);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-code-control")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-code-control__action")
            ]), _List_fromArray([
                function() {
                    var _v1 = _Utils_Tuple2(running, terminal);
                    if (_v1.a) {
                        if (!_v1.b) return A2($author$project$Lia$Utils$btnIcon, {
                            icon: "icon-refresh rotating",
                            msg: $elm$core$Maybe$Nothing,
                            tabbable: false,
                            title: $author$project$I18n$Translations$codeRunning(lang)
                        }, _List_fromArray([
                            $elm$html$Html$Attributes$class("is-disabled lia-btn--transparent")
                        ]));
                        else return A2($author$project$Lia$Utils$btnIcon, {
                            icon: "icon-stop-circle",
                            msg: $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$Stop(id)),
                            tabbable: true,
                            title: $author$project$I18n$Translations$codeRunning(lang)
                        }, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-btn--transparent")
                        ]));
                    } else return A2($author$project$Lia$Utils$btnIcon, {
                        icon: "icon-compile-circle",
                        msg: $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$Eval(id)),
                        tabbable: true,
                        title: $author$project$I18n$Translations$codeExecute(lang)
                    }, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-btn--transparent"),
                        $tesk9$accessible_html$Accessibility$Aria$keyShortcuts(_List_fromArray([
                            "Ctrl-Enter",
                            "Command-Enter"
                        ]))
                    ]));
                }(),
                function() {
                    if (sync.$ === "Nothing") return $elm$html$Html$text("");
                    else {
                        if (sync.a) return A2($author$project$Lia$Utils$btnIcon, {
                            icon: "icon-class-on",
                            msg: running ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$ToggleSync(id)),
                            tabbable: !running,
                            title: "switch to base editor"
                        }, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-btn--transparent")
                        ]));
                        else return A2($author$project$Lia$Utils$btnIcon, {
                            icon: "icon-class-off",
                            msg: running ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$ToggleSync(id)),
                            tabbable: !running,
                            title: "switch to collaborative editor"
                        }, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-btn--transparent")
                        ]));
                    }
                }()
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-code-control__version"),
                deactivate_control ? A2($elm$html$Html$Attributes$style, "filter", "blur(1.2px)") : $elm$html$Html$Attributes$class("")
            ]), _List_fromArray([
                A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-end-left",
                    msg: forward || deactivate_control ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$First(id)),
                    tabbable: !(forward || deactivate_control),
                    title: $author$project$I18n$Translations$codeFirst(lang)
                }, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn--transparent")
                ])),
                A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-chevron-left",
                    msg: forward || deactivate_control ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Code$Update$Load, id, version_active - 1)),
                    tabbable: !(forward || deactivate_control),
                    title: $author$project$I18n$Translations$codePrev(lang)
                }, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn--transparent")
                ])),
                A2($elm$html$Html$span, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-label")
                ]), _List_fromArray([
                    $elm$html$Html$text($elm$core$String$fromInt(version_active))
                ])),
                A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-chevron-right",
                    msg: backward || deactivate_control ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Code$Update$Load, id, version_active + 1)),
                    tabbable: !(backward || deactivate_control),
                    title: $author$project$I18n$Translations$codeNext(lang)
                }, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn--transparent")
                ])),
                A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-end-right",
                    msg: backward || deactivate_control ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Lia$Markdown$Code$Update$Last(id)),
                    tabbable: !(backward || deactivate_control),
                    title: $author$project$I18n$Translations$codeLast(lang)
                }, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-btn--transparent")
                ]))
            ]))
        ]));
    };
    var $author$project$Lia$Markdown$Code$Update$Resize = F2(function(a, b) {
        return {
            $: "Resize",
            a: a,
            b: b
        };
    });
    var $tesk9$accessible_html$Accessibility$Live$atomic = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("atomic"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $author$project$Lia$Markdown$Code$Log$len = A2($elm$core$Basics$composeR, function($) {
        return $.text;
    }, A2($elm$core$Basics$composeR, $elm$core$String$indexes("\n"), $elm$core$List$length));
    var $author$project$Lia$Markdown$Code$Log$length = A2($elm$core$Basics$composeR, $elm$core$Array$map($author$project$Lia$Markdown$Code$Log$len), A2($elm$core$Array$foldl, $elm$core$Basics$add, 0));
    var $author$project$Lia$Markdown$Code$View$onChangeHeight = function(msg) {
        return A2($elm$html$Html$Events$on, "onchangeheight", A2($elm$json$Json$Decode$map, msg, A2($elm$json$Json$Decode$at, _List_fromArray([
            "target",
            "height"
        ]), $elm$json$Json$Decode$string)));
    };
    var $author$project$Lia$Markdown$Code$View$scroll_to_end = function(lines_) {
        return A2($elm$html$Html$Attributes$property, "scrollTop", $elm$json$Json$Encode$string($elm$core$String$fromInt(14 + 14 * lines_)));
    };
    var $author$project$Lia$Markdown$Code$Log$viewLog = function(_v0) {
        var _class = _v0._class;
        var str = _v0.str;
        var label = _v0.label;
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class(_class),
            $tesk9$accessible_html$Accessibility$Aria$label(label)
        ]), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $author$project$Lia$Markdown$Code$Log$view_message = function(_v0) {
        var level = _v0.level;
        var text = _v0.text;
        return _Utils_Tuple2(text, function() {
            switch(level.$){
                case "Debug":
                    return $author$project$Lia$Markdown$Code$Log$viewLog({
                        _class: "text-debug",
                        label: "debug",
                        str: text
                    });
                case "Info":
                    return $author$project$Lia$Markdown$Code$Log$viewLog({
                        _class: "text-info",
                        label: "info",
                        str: text
                    });
                case "Warn":
                    return $author$project$Lia$Markdown$Code$Log$viewLog({
                        _class: "text-warning",
                        label: "warning",
                        str: text
                    });
                case "Error":
                    return $author$project$Lia$Markdown$Code$Log$viewLog({
                        _class: "text-error",
                        label: "error",
                        str: text
                    });
                case "HTML":
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("text-info"),
                        A2($elm$html$Html$Attributes$property, "innerHTML", $elm$json$Json$Encode$string(text))
                    ]), _List_Nil);
                default:
                    return $author$project$Lia$Markdown$Code$Log$viewLog({
                        _class: "text-info",
                        label: "info",
                        str: text
                    });
            }
        }());
    };
    var $author$project$Lia$Markdown$Code$Log$view = function(log) {
        return A2($elm$core$List$map, $author$project$Lia$Markdown$Code$Log$view_message, $elm$core$Array$toList(log.messages));
    };
    var $author$project$Lia$Markdown$Code$View$view_result = F3(function(code, height, log) {
        return $elm$core$Array$isEmpty(log.messages) ? $elm$html$Html$text("") : A3($elm$html$Html$Keyed$node, "lia-terminal", _List_fromArray([
            $elm$html$Html$Attributes$class("lia-code-terminal__output"),
            $tesk9$accessible_html$Accessibility$Role$log,
            $tesk9$accessible_html$Accessibility$Live$polite,
            $tesk9$accessible_html$Accessibility$Live$atomic(false),
            $author$project$Lia$Markdown$Code$View$onChangeHeight($author$project$Lia$Markdown$Code$Update$Resize(code)),
            A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$class(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$html$Html$Attributes$property("height")), height)),
            $author$project$Lia$Markdown$Code$View$scroll_to_end(2 * $author$project$Lia$Markdown$Code$Log$length(log.messages))
        ]), $author$project$Lia$Markdown$Code$Log$view(log));
    });
    var $author$project$Lia$Markdown$Code$View$view = function(_v0) {
        var lang = _v0.lang;
        var theme = _v0.theme;
        var model = _v0.model;
        var code = _v0.code;
        var sync = _v0.sync;
        var cursors = _v0.cursors;
        if (code.$ === "Highlight") {
            var id_1 = code.a;
            return A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-code lia-code--block")
            ]), A2($elm$core$Maybe$withDefault, _List_fromArray([
                $elm$html$Html$text("")
            ]), A2($elm$core$Maybe$map, function(pro) {
                return A3($andre_dietrich$elm_conditional$Conditional$List$attachIf, !$author$project$Lia$Markdown$Code$Log$isEmpty(pro.log), A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-code-terminal"),
                    $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$codeTerminal(lang))
                ]), _List_fromArray([
                    A3($author$project$Lia$Markdown$Code$View$view_result, $author$project$Lia$Markdown$Code$Types$Highlight(id_1), pro.logSize, pro.syncMode ? pro.syncLog : pro.log)
                ])), A3($elm$core$List$map2, F2(function(a, e) {
                    return e(a);
                }), pro.attr, A2($elm$core$List$indexedMap, $author$project$Lia$Markdown$Code$View$viewCode({
                    cursors: _List_Nil,
                    errors: $elm$core$Basics$always($elm$json$Json$Encode$null),
                    id_1: id_1,
                    isExecutable: false,
                    isRunning: true,
                    lang: lang,
                    sync: $elm$core$Maybe$Nothing,
                    theme: theme
                }), $elm$core$Array$toList(pro.file))));
            }, A2($elm$core$Array$get, id_1, model.highlight))));
        } else {
            var id_1 = code.a;
            var _v2 = A2($elm$core$Array$get, id_1, model.evaluate);
            if (_v2.$ === "Just") {
                var project = _v2.a;
                var errors = $author$project$Lia$Markdown$Code$View$get_annotations(project.syncMode && !$elm$core$Array$isEmpty(sync) ? project.syncLog : project.log);
                return A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-code lia-code--block")
                ]), A2($elm$core$List$append, A3($elm$core$List$map2, F2(function(a, e) {
                    return e(a);
                }), project.attr, A2($elm$core$List$indexedMap, $author$project$Lia$Markdown$Code$View$viewCode({
                    cursors: cursors,
                    errors: errors,
                    id_1: id_1,
                    isExecutable: true,
                    isRunning: project.running,
                    lang: lang,
                    sync: project.syncMode && !$elm$core$Array$isEmpty(sync) ? A2($elm$core$Array$get, id_1, sync) : $elm$core$Maybe$Nothing,
                    theme: theme
                }), $elm$core$Array$toList(project.file))), _List_fromArray([
                    $author$project$Lia$Markdown$Code$View$view_control({
                        id: id_1,
                        lang: lang,
                        running: project.running,
                        sync: $elm$core$Array$isEmpty(sync) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(project.syncMode),
                        terminal: !_Utils_eq(project.terminal, $elm$core$Maybe$Nothing),
                        version_active: project.version_active,
                        version_count: $elm$core$Array$length(project.version)
                    }),
                    A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-code-terminal"),
                        $tesk9$accessible_html$Accessibility$Role$log,
                        $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$codeTerminal(lang)),
                        project.running ? $tesk9$accessible_html$Accessibility$Live$livePolite : $elm$html$Html$Attributes$class("")
                    ]), _List_fromArray([
                        A3($author$project$Lia$Markdown$Code$View$view_result, $author$project$Lia$Markdown$Code$Types$Evaluate(id_1), project.logSize, project.syncMode ? project.syncLog : project.log),
                        function() {
                            var _v3 = project.terminal;
                            if (_v3.$ === "Nothing") return $elm$html$Html$text("");
                            else {
                                var term = _v3.a;
                                return A2($elm$html$Html$map, $author$project$Lia$Markdown$Code$Update$UpdateTerminal(id_1), $author$project$Lia$Markdown$Code$Terminal$view(term));
                            }
                        }()
                    ]))
                ])));
            } else return $elm$html$Html$text("");
        }
    };
    var $author$project$Lia$Markdown$Gallery$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Gallery$Update$Show = F2(function(a, b) {
        return {
            $: "Show",
            a: a,
            b: b
        };
    });
    var $tesk9$accessible_html$Accessibility$Key$space = function(msg) {
        return {
            keyCode: 32,
            msg: msg,
            shiftKey: false
        };
    };
    var $author$project$Lia$Markdown$Gallery$Update$Close = function(a) {
        return {
            $: "Close",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Gallery$View$viewControls = F4(function(lang, id, mediaID, size) {
        return $elm$core$Maybe$Just(_List_fromArray([
            A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-arrow-right",
                msg: _Utils_cmp(mediaID + 1, size) < 0 ? $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Gallery$Update$Show, id, mediaID + 1)) : $elm$core$Maybe$Nothing,
                tabbable: true,
                title: $author$project$I18n$Translations$baseNext(lang)
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-modal__ctrl-next lia-btn--transparent")
            ])),
            A2($author$project$Lia$Utils$btnIcon, {
                icon: "icon-arrow-left",
                msg: mediaID > 0 ? $elm$core$Maybe$Just(A2($author$project$Lia$Markdown$Gallery$Update$Show, id, mediaID - 1)) : $elm$core$Maybe$Nothing,
                tabbable: true,
                title: $author$project$I18n$Translations$basePrev(lang)
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-modal__ctrl-prev lia-btn--transparent")
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Inline$View$viewMedia = F2(function(config, inline) {
        if (inline.$ === "Ref" && inline.a.$ === "Image") {
            var _v1 = inline.a;
            var alt_ = _v1.a;
            var url_ = _v1.b;
            var title_ = _v1.c;
            var attr = inline.b;
            return A2($elm$html$Html$figure, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-figure")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-figure__media"),
                    A2($elm$html$Html$Attributes$attribute, "data-media-image", "image"),
                    A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$class(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$html$Html$Attributes$width), A2($elm$core$Dict$get, url_, config.media))),
                    A2($elm$html$Html$Attributes$style, "background-image", "url('" + (url_ + "')")),
                    $elm$html$Html$Attributes$class("lia-figure__zoom"),
                    A2($elm$html$Html$Attributes$attribute, "onmousemove", "window.LIA.img.zoom(event)")
                ]), _List_fromArray([
                    A2($elm$html$Html$img, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$alt, config, alt_), A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($author$project$Lia$Markdown$Inline$View$title, config, title_), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq($elm$core$Maybe$Nothing, A2($elm$core$Maybe$map, $elm$core$Tuple$first, A2($elm$core$Dict$get, url_, config.media))), $author$project$Lia$Markdown$Inline$View$load(url_), A2($elm$core$List$cons, $elm$html$Html$Attributes$src(url_), A2($elm$core$List$cons, A2($author$project$Lia$Markdown$Inline$View$onError, "img", url_), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr)))))), _List_Nil)
                ])),
                A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$html$Html$figcaption(_List_fromArray([
                    $elm$html$Html$Attributes$class("lia-figure__caption")
                ]))), title_))
            ]));
        } else return A2($author$project$Lia$Markdown$Inline$View$view, config, inline);
    });
    var $author$project$Lia$Markdown$Gallery$View$viewOverlay = F4(function(config, id, mediaID, size) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewMedia(_Utils_update(config, {
            oEmbed: $elm$core$Maybe$Just({
                maxheight: 0,
                maxwidth: 0,
                scale: 0.76,
                thumbnail: false
            })
        })), A2($elm$core$Basics$composeR, $elm$html$Html$map($author$project$Lia$Markdown$Gallery$Update$Script), A2($elm$core$Basics$composeR, $elm$core$List$singleton, A2($author$project$Lia$Utils$modal, $author$project$Lia$Markdown$Gallery$Update$Close(id), A4($author$project$Lia$Markdown$Gallery$View$viewControls, config.lang, id, mediaID, size)))));
    });
    var $author$project$Lia$Markdown$Gallery$View$viewMedia = F4(function(config, vector, gallery, div) {
        var mediaID = A2($elm$core$Maybe$withDefault, -1, A2($elm$core$Array$get, gallery.id, vector));
        return A2($elm$html$Html$div, _List_Nil, mediaID < 0 ? _List_fromArray([
            $elm$html$Html$text(""),
            div
        ]) : _List_fromArray([
            A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A4($author$project$Lia$Markdown$Gallery$View$viewOverlay, config, gallery.id, mediaID, $elm$core$List$length(gallery.media)), A2($author$project$Lia$Utils$get, mediaID, gallery.media))),
            div
        ]));
    });
    var $author$project$Lia$Markdown$Gallery$View$view = F4(function(config, vector, attr, gallery) {
        return A4($author$project$Lia$Markdown$Gallery$View$viewMedia, config, vector, gallery, A2($elm$html$Html$div, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-gallery", attr), A2($elm$core$List$indexedMap, F2(function(i, media) {
            return A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-lightbox")
            ]), _List_fromArray([
                A2($elm$html$Html$map, $author$project$Lia$Markdown$Gallery$Update$Script, A2($author$project$Lia$Markdown$Inline$View$view, _Utils_update(config, {
                    oEmbed: $elm$core$Maybe$Just({
                        maxheight: 250,
                        maxwidth: 250,
                        scale: 1.0,
                        thumbnail: true
                    })
                }), media)),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Gallery$Update$Show, gallery.id, i)),
                    $elm$html$Html$Attributes$class("lia-lightbox__clickarea"),
                    $tesk9$accessible_html$Accessibility$Key$tabbable(true),
                    $tesk9$accessible_html$Accessibility$Role$button,
                    $tesk9$accessible_html$Accessibility$Aria$label("zoom media"),
                    $tesk9$accessible_html$Accessibility$Key$onKeyDown(_List_fromArray([
                        $tesk9$accessible_html$Accessibility$Key$enter(A2($author$project$Lia$Markdown$Gallery$Update$Show, gallery.id, i)),
                        $tesk9$accessible_html$Accessibility$Key$space(A2($author$project$Lia$Markdown$Gallery$Update$Show, gallery.id, i))
                    ]))
                ]), _List_fromArray([
                    A2($author$project$Lia$Utils$icon, "icon-zoom", _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-lightbox__icon")
                    ]))
                ]))
            ]));
        }), gallery.media)));
    });
    var $elm$core$Dict$member = F2(function(key, dict) {
        var _v0 = A2($elm$core$Dict$get, key, dict);
        if (_v0.$ === "Just") return true;
        else return false;
    });
    var $elm$core$Set$member = F2(function(key, _v0) {
        var dict = _v0.a;
        return A2($elm$core$Dict$member, key, dict);
    });
    var $author$project$Lia$Sync$Types$filter_ = F3(function(ids, key, _v0) {
        return A2($elm$core$Set$member, key, ids);
    });
    var $author$project$Lia$Sync$Types$filter = F2(function(settings, container) {
        var _v0 = $author$project$Lia$Sync$Types$id(settings.state);
        if (_v0.$ === "Just") {
            var main = _v0.a;
            return A2($elm$core$List$member, main, $elm$core$Dict$keys(container)) ? $elm$core$Maybe$Just($elm$core$Dict$values(A2($elm$core$Dict$filter, $author$project$Lia$Sync$Types$filter_(A2($elm$core$Set$insert, main, settings.peers)), container))) : $elm$core$Maybe$Nothing;
        } else return $elm$core$Maybe$Nothing;
    });
    var $author$project$Lia$Sync$Container$get = F2(function(i, _v0) {
        var bag = _v0.a;
        return A2($elm$core$Array$get, i, bag);
    });
    var $author$project$Lia$Sync$Types$get = F4(function(settings, selector, id1, id2) {
        return A2($elm$core$Maybe$withDefault, $elm$core$Maybe$Nothing, A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, $author$project$Lia$Sync$Container$get(id2), A2($elm$core$Maybe$map2, $author$project$Lia$Sync$Types$filter, settings)), A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, function($) {
            return $.data;
        }, A2($elm$core$Basics$composeR, selector, $elm$core$Dict$get(id1))), settings)));
    });
    var $author$project$Lia$Markdown$Quiz$Update$Check = F2(function(a, b) {
        return {
            $: "Check",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Quiz$Update$ShowSolution = F2(function(a, b) {
        return {
            $: "ShowSolution",
            a: a,
            b: b
        };
    });
    var $author$project$I18n$Translations$quizHint = function(lang) {
        switch(lang.$){
            case "Am":
                return "አስታዋሽ";
            case "Ar":
                return "تلميح";
            case "Bg":
                return "Подсказване";
            case "Bn":
                return "হিন্ট দেখান";
            case "De":
                return "Hinweis anzeigen";
            case "Es":
                return "mostrar indicio";
            case "Fa":
                return "نمایش یادآوری";
            case "Fr":
                return "Afficher l'indice";
            case "Hi":
                return "संकेत दिखाएं";
            case "Hy":
                return "ցուցադրել ակնարկ";
            case "It":
                return "mostra un indizio";
            case "Ja":
                return "ヒントを表示";
            case "Ka":
                return "რჩევა გაჩვენე";
            case "Ko":
                return "힌트 보기";
            case "Nl":
                return "toon hint";
            case "Pa":
                return "ਇੱਕ ਇੰਗਿਤ ਦਿਖਾਓ";
            case "Pt":
                return "mostrar dica";
            case "Ru":
                return "подсказка";
            case "Sw":
                return "onyesha kidokezo";
            case "Tw":
                return "暗示";
            case "Uk":
                return "показати підказку";
            case "Ur":
                return "اشارہ دکھائیں";
            case "Zh":
                return "暗示";
            default:
                return "show hint";
        }
    };
    var $author$project$I18n$Translations$quizAnswerError = function(lang) {
        switch(lang.$){
            case "Am":
                return "የሚነካ መለያ መገለጫ በድጋሚ ነው";
            case "Ar":
                return "لم يتم إعطاء الإجابة الصحيحة بعد";
            case "Bg":
                return "Все още не е даден правилният отговор";
            case "Bn":
                return "সঠিক উত্তরটি এখনও দেওয়া হয়নি";
            case "De":
                return "Die richtige Antwort wurde noch nicht gegeben";
            case "Es":
                return "La respuesta correcta a\xfan no ha sido dada";
            case "Fa":
                return "بله، این ترجمه فارسی است";
            case "Fr":
                return "La r\xe9ponse correcte n'a pas encore \xe9t\xe9 donn\xe9e";
            case "Hi":
                return "अभी तक सही उत्तर नहीं दिया गया है";
            case "Hy":
                return "Ճիշտ պատասխանը դեռևս չի տրվել";
            case "It":
                return "La risposta corretta non \xe8 stata ancora fornita";
            case "Ja":
                return "正解がまだ与えられていません";
            case "Ka":
                return "სწორი პასუხი ჯერ არ არის მოწოდებული";
            case "Ko":
                return "정답이 아직 제시되지 않았습니다";
            case "Nl":
                return "Het juiste antwoord is nog niet gegeven";
            case "Pa":
                return "ਸਹੀ ਜਵਾਬ ਹਾਲੇ ਨਹੀਂ ਦਿੱਤਾ ਗਿਆ ਹੈ।";
            case "Pt":
                return "A resposta correta ainda n\xe3o foi dada.";
            case "Ru":
                return "Правильный ответ еще не дан";
            case "Sw":
                return "Jibu sahihi bado halijatolewa";
            case "Tw":
                return "正確的答案還沒有被給出";
            case "Uk":
                return "Правильна відповідь ще не надана";
            case "Ur":
                return "صحیح جواب ابھی تک نہیں دیا گیا";
            case "Zh":
                return "正确的答案尚未给出";
            default:
                return "The correct answer has not yet been given";
        }
    };
    var $author$project$I18n$Translations$quizAnswerResolved = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተመርጧል";
            case "Ar":
                return "إجابة تم حلها";
            case "Bg":
                return "Решен отговор";
            case "Bn":
                return "সমাধানিত উত্তর";
            case "De":
                return "Aufgel\xf6ste Antwort";
            case "Es":
                return "Respuesta resuelta";
            case "Fa":
                return "پاسخ حل شده";
            case "Fr":
                return "R\xe9ponse r\xe9solue";
            case "Hi":
                return "हल की गई प्रतिक्रिया";
            case "Hy":
                return "Լուծված պատասխան";
            case "It":
                return "Risposta decisiva";
            case "Ja":
                return "解決済みの回答";
            case "Ka":
                return "გადაჭრული პასუხი";
            case "Ko":
                return "이미 푼 퀴즈입니다";
            case "Nl":
                return "Opgelost antwoord";
            case "Pa":
                return "ਹੱਲ ਕੀਤਾ ਗਿਆ ਜਵਾਬ";
            case "Pt":
                return "Resposta resolvida.";
            case "Ru":
                return "Решенный ответ";
            case "Sw":
                return "Jibu lililotatuliwa";
            case "Tw":
                return "解决的答案";
            case "Uk":
                return "Вирішена відповідь";
            case "Ur":
                return "حل شدہ جواب";
            case "Zh":
                return "解决的答案";
            default:
                return "Resolved answer";
        }
    };
    var $author$project$I18n$Translations$quizAnswerSuccess = function(lang) {
        switch(lang.$){
            case "Am":
                return "እንኳን ደስ አለዎት! ይህ ማሳወቅ ተመልከቱ";
            case "Ar":
                return "مبروك هذه كانت الإجابة الصحيحة";
            case "Bg":
                return "Поздравления, това беше правилният отговор";
            case "Bn":
                return "অভিনন্দন, সেটা সঠিক উত্তর ছিল";
            case "De":
                return "Herzlichen Gl\xfcckwunsch, das war die richtige Antwort";
            case "Es":
                return "Felicitaciones, esa fue la respuesta correcta";
            case "Fa":
                return "تبریک می گویم ، جواب صحیحی بود";
            case "Fr":
                return "F\xe9licitations, c'\xe9tait la bonne r\xe9ponse";
            case "Hi":
                return "बधाई हो, यह सही उत्तर था";
            case "Hy":
                return "Շնորհավորում եմ, դա ճիշտ պատասխանն էր";
            case "It":
                return "Congratulazioni, questa era la risposta corretta";
            case "Ja":
                return "おめでとうございます、正解です";
            case "Ka":
                return "გილოცავთ, ეს იყო სწორი პასუხი";
            case "Ko":
                return "축하합니다. 올바른 답을 선택했습니다";
            case "Nl":
                return "Gefeliciteerd, dat was het juiste antwoord";
            case "Pa":
                return "ਬਧਾਈ ਹੋ, ਜਿਹਨਾਂ ਜਵਾਬ ਸਹੀ ਸੀ।";
            case "Pt":
                return "Parab\xe9ns, essa foi a resposta certa.";
            case "Ru":
                return "Поздравляю, это был правильный ответ";
            case "Sw":
                return "Hongera, hilo lilikuwa jibu sahihi";
            case "Tw":
                return "恭喜，那是正确的答案";
            case "Uk":
                return "Вітаю, це була правильна відповідь";
            case "Ur":
                return "مبارک ہو، یہ درست جواب تھا";
            case "Zh":
                return "恭喜，那是正确的答案";
            default:
                return "Congratulations, that was the right answer";
        }
    };
    var $author$project$Lia$Markdown$Quiz$View$viewFeedback = F2(function(lang, state) {
        if (state.error_msg !== "") return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-quiz__feedback text-error"),
            $tesk9$accessible_html$Accessibility$Live$polite
        ]), _List_fromArray([
            $elm$html$Html$text(state.error_msg)
        ]));
        else {
            var _v0 = state.solved;
            switch(_v0.$){
                case "Solved":
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-quiz__feedback text-success"),
                        $tesk9$accessible_html$Accessibility$Live$polite
                    ]), _List_fromArray([
                        $elm$html$Html$text($author$project$I18n$Translations$quizAnswerSuccess(lang))
                    ]));
                case "ReSolved":
                    return A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-quiz__feedback text-disabled"),
                        $tesk9$accessible_html$Accessibility$Live$polite
                    ]), _List_fromArray([
                        $elm$html$Html$text($author$project$I18n$Translations$quizAnswerResolved(lang))
                    ]));
                default:
                    return !state.trial ? $elm$html$Html$text("") : A2($elm$html$Html$div, _List_fromArray([
                        $elm$html$Html$Attributes$class("lia-quiz__feedback text-error"),
                        $tesk9$accessible_html$Accessibility$Live$polite
                    ]), _List_fromArray([
                        $elm$html$Html$text($author$project$I18n$Translations$quizAnswerError(lang))
                    ]));
            }
        }
    });
    var $author$project$Lia$Markdown$Quiz$Update$ShowHint = function(a) {
        return {
            $: "ShowHint",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$View$viewHintButton = function(_v0) {
        var id = _v0.id;
        var show = _v0.show;
        var active = _v0.active;
        var title = _v0.title;
        return show ? A2($author$project$Lia$Utils$btnIcon, {
            icon: "icon-hint",
            msg: active ? $elm$core$Maybe$Just($author$project$Lia$Markdown$Quiz$Update$ShowHint(id)) : $elm$core$Maybe$Nothing,
            tabbable: true,
            title: title
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--transparent lia-quiz__hint"),
            $tesk9$accessible_html$Accessibility$Role$button
        ])) : $elm$html$Html$text("");
    };
    var $author$project$Lia$Markdown$Quiz$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$View$viewHints = F3(function(config, counter, hints) {
        return $elm$core$List$isEmpty(hints) ? $elm$html$Html$text("") : A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Update$Script, A2($elm$html$Html$ul, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-list--unordered lia-quiz__hints"),
            $tesk9$accessible_html$Accessibility$Live$polite
        ]), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$html$Html$li(_List_Nil)), A2($elm$core$List$take, counter, hints))));
    });
    var $author$project$I18n$Translations$quizCheck = function(lang) {
        switch(lang.$){
            case "Am":
                return "መለየት";
            case "Ar":
                return "تحقق";
            case "Bg":
                return "Проверка";
            case "Bn":
                return "পরীক্ষা করুন";
            case "De":
                return "Pr\xfcfen";
            case "Es":
                return "verificar";
            case "Fa":
                return "بررسی";
            case "Fr":
                return "V\xe9rifier";
            case "Hi":
                return "चेक करें";
            case "Hy":
                return "ստուգել";
            case "It":
                return "verifica";
            case "Ja":
                return "確認";
            case "Ka":
                return "შეამოწმეთ";
            case "Ko":
                return "확인";
            case "Nl":
                return "bekijk";
            case "Pa":
                return "ਜਾਂਚ ਕਰੋ";
            case "Pt":
                return "Verificar";
            case "Ru":
                return "проверить";
            case "Sw":
                return "Angalia";
            case "Tw":
                return "選取";
            case "Uk":
                return "перевірити";
            case "Ur":
                return "چیک کریں";
            case "Zh":
                return "選取";
            default:
                return "Check";
        }
    };
    var $author$project$I18n$Translations$quizLabelCheck = function(lang) {
        switch(lang.$){
            case "Am":
                return "መረጃው ተመርጧል ወይም ቆይተው ይቀጥሉ";
            case "Ar":
                return "تحقق من الجواب. تم وضع علامة على الإجابة على أنها صحيحة أو غير صحيحة.";
            case "Bg":
                return "Проверете отговора. Отговорът е маркиран като правилен или неправилен.";
            case "Bn":
                return "উত্তরটি পরীক্ষা করুন। প্রতিক্রিয়াটি সঠিক বা ভুল হিসাবে চিহ্নিত করা হবে।";
            case "De":
                return "\xdcberpr\xfcfe die Antwort. Die Antwort wird als richtig oder falsch markiert.";
            case "Es":
                return "Comprueba la respuesta. La respuesta est\xe1 marcada como correcta o incorrecta.";
            case "Fa":
                return "پاسخ را بررسی کنید. پاسخ صحیح یا نادرست علامت گذاری شده است.";
            case "Fr":
                return "V\xe9rifiez la r\xe9ponse. La r\xe9ponse sera marqu\xe9e comme correcte ou incorrecte.";
            case "Hi":
                return "उत्तर की जाँच करें। उत्तर को सही या गलत के रूप में चिह्नित किया गया है।";
            case "Hy":
                return "Ստուգեք պատասխանը: Պատասխանը նշվում է որպես ճիշտ կամ սխալ:";
            case "It":
                return "Controlla la risposta. La risposta \xe8 indicata come corretta o errata.";
            case "Ja":
                return "答えを確認してください。回答は正解または不正解でマークされます。";
            case "Ka":
                return "შეამოწმეთ პასუხი. პასუხი ჩაინიშნება როგორც სწორი ან არასწორი.";
            case "Ko":
                return "답을 확인하세요. 정답 또는 오답으로 표시됩니다.";
            case "Nl":
                return "Controleer het antwoord. Het antwoord wordt gemarkeerd als goed of fout.";
            case "Pa":
                return "ਜਵਾਬ ਦੀ ਜਾਂਚ ਕਰੋ। ਜਵਾਬ ਸਹੀ ਜਾਂ ਗਲਤ ਨਿਸ਼ਾਨਾ ਲਗਾਇਆ ਜਾਵੇਗਾ।";
            case "Pt":
                return "Verifique a resposta. A resposta ser\xe1 marcada como correta ou incorreta.";
            case "Ru":
                return "Проверьте ответ. Ответ отмечен как правильный или неправильный.";
            case "Sw":
                return "Angalia jibu. Jibu litawekwa alama kuwa sahihi au si sahihi.";
            case "Tw":
                return "检查答案。答案被标记为正确或不正确。";
            case "Uk":
                return "Перевірте відповідь. Відповідь позначена як правильна чи неправильна.";
            case "Ur":
                return "جواب چیک کریں۔ جواب کو درست یا غلط کے طور پر نشان زد کیا جائے گا۔";
            case "Zh":
                return "检查答案。答案被标记为正确或不正确。";
            default:
                return "Check the answer. The response will be marked as correct or incorrect.";
        }
    };
    var $author$project$Lia$Markdown$Quiz$View$viewMainButton = F4(function(config, trials, solution, msg) {
        return A3($author$project$Lia$Utils$btn, {
            msg: _Utils_eq(solution, $author$project$Lia$Markdown$Quiz$Solution$Open) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing,
            tabbable: _Utils_eq(solution, $author$project$Lia$Markdown$Quiz$Solution$Open),
            title: ""
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--outline lia-quiz__check"),
            $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$quizLabelCheck(config.lang))
        ]), _List_fromArray([
            $elm$html$Html$text($author$project$I18n$Translations$quizCheck(config.lang)),
            $elm$html$Html$text(trials > 0 ? " " + $elm$core$String$fromInt(trials) : "")
        ]));
    });
    var $author$project$I18n$Translations$quizLabelSolution = function(lang) {
        switch(lang.$){
            case "Am":
                return "የይለፍ መረጃ ይሰራል";
            case "Ar":
                return "اعرض الحل. تم وضع علامة 'حل' الاختبار.";
            case "Bg":
                return "Покажете решението. Тестът е означен като решен.";
            case "Bn":
                return "সমাধান প্রদর্শন করুন। কুইজটি সমাধানিত হিসাবে চিহ্নিত করা হবে।";
            case "De":
                return "Zeige die L\xf6sung. Das Quiz wird als aufgel\xf6st markiert.";
            case "Es":
                return "Muestre la soluci\xf3n. El cuestionario se marca como resuelto.";
            case "Fa":
                return "راه حل را نشان دهید. مسابقه به عنوان حل شده علامت گذاری شده است.";
            case "Fr":
                return "Affichez la solution. Le quiz sera marqu\xe9 comme r\xe9solu.";
            case "Hi":
                return "समाधान दिखाएं। प्रश्नोत्तरी को समाधान के रूप में चिह्नित किया जाएगा।";
            case "Hy":
                return "Showույց տվեք լուծումը: Վիկտորինան նշվում է որպես լուծված:";
            case "It":
                return "Mostra la soluzione. Il questionario si registra come risolto.";
            case "Ja":
                return "解答を表示します。クイズは解決済みとマークされます。";
            case "Ka":
                return "გაჩვენეთ გადაჭრა. კიზი ჩაინიშნება როგორც გადაჭრული.";
            case "Ko":
                return "솔루션을 보여주세요. 퀴즈가 해결된 것으로 표시됩니다.";
            case "Nl":
                return "Laat de oplossing zien. De quiz is gemarkeerd als opgelost.";
            case "Pa":
                return "ਹੱਲ ਦਿਖਾਓ। ਕਵਿਜ਼ ਹੱਲ ਕੀਤਾ ਜਾਵੇਗਾ।";
            case "Pt":
                return "Mostrar a solu\xe7\xe3o. O quiz ser\xe1 marcado como resolvido.";
            case "Ru":
                return "Покажи решение. Викторина помечается как решенная.";
            case "Sw":
                return "Onyesha suluhisho. Maswali yatatiwa alama kuwa yametatuliwa.";
            case "Tw":
                return "显示解决方案。测验被标记为已解决。";
            case "Uk":
                return "Покажіть рішення. Вікторина позначена як розв’язана.";
            case "Ur":
                return "حل دکھائیں۔ کوئز کو حل شدہ کے طور پر نشان زد کیا جائے گا۔";
            case "Zh":
                return "显示解决方案。测验被标记为已解决。";
            default:
                return "Show the solution. The quiz will be marked as resolved.";
        }
    };
    var $author$project$I18n$Translations$quizSolution = function(lang) {
        switch(lang.$){
            case "Am":
                return "አስገሳት አሳይ";
            case "Ar":
                return "إظهار الحل";
            case "Bg":
                return "Отговор";
            case "Bn":
                return "সমাধান প্রদর্শন করুন";
            case "De":
                return "zeige L\xf6sung";
            case "Es":
                return "mostrar soluci\xf3n";
            case "Fa":
                return "نمایش راهکار";
            case "Fr":
                return "Afficher la solution";
            case "Hi":
                return "समाधान दिखाएं";
            case "Hy":
                return "ցույց տալ լուծումը";
            case "It":
                return "mostra la soluzione";
            case "Ja":
                return "解答を表示";
            case "Ka":
                return "გადაჭრა გაჩვენე";
            case "Ko":
                return "정답 보기";
            case "Nl":
                return "toon oplossing";
            case "Pa":
                return "ਹੱਲ ਦਿਖਾਓ";
            case "Pt":
                return "mostrar solu\xe7\xe3o";
            case "Ru":
                return "показать решение";
            case "Sw":
                return "onyesha suluhisho";
            case "Tw":
                return "顯示解答";
            case "Uk":
                return "показати розв'язок";
            case "Ur":
                return "حل دکھائیں";
            case "Zh":
                return "顯示解答";
            default:
                return "show solution";
        }
    };
    var $author$project$Lia$Markdown$Quiz$View$viewSolutionButton = function(_v0) {
        var config = _v0.config;
        var hidden = _v0.hidden;
        var solution = _v0.solution;
        var msg = _v0.msg;
        return A2($author$project$Lia$Utils$btnIcon, {
            icon: "icon-resolve",
            msg: _Utils_eq(solution, $author$project$Lia$Markdown$Quiz$Solution$Open) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing,
            tabbable: !hidden && _Utils_eq(solution, $author$project$Lia$Markdown$Quiz$Solution$Open),
            title: $author$project$I18n$Translations$quizSolution(config.lang)
        }, _List_fromArray([
            $elm$html$Html$Attributes$classList(_List_fromArray([
                _Utils_Tuple2("lia-btn--transparent lia-quiz__resolve", true),
                _Utils_Tuple2("hide", hidden)
            ])),
            $tesk9$accessible_html$Accessibility$Aria$label($author$project$I18n$Translations$quizLabelSolution(config.lang))
        ]));
    };
    var $author$project$Lia$Markdown$Quiz$View$viewQuiz = F5(function(config, labeledBy, state, quiz, _v0) {
        var attr = _v0.a;
        var body = _v0.b;
        return _List_fromArray([
            A2($elm$html$Html$div, A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(state.solved, $author$project$Lia$Markdown$Quiz$Solution$ReSolved), $tesk9$accessible_html$Accessibility$Live$polite, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-quiz__answers"), A2($elm$core$List$cons, A2($elm$core$Maybe$withDefault, $elm$html$Html$Attributes$class(""), A2($elm$core$Maybe$map, $tesk9$accessible_html$Accessibility$Aria$labelledBy, labeledBy)), attr))), body),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-quiz__control")
            ]), _List_fromArray([
                A4($author$project$Lia$Markdown$Quiz$View$viewMainButton, config, state.trial, state.solved, A2($author$project$Lia$Markdown$Quiz$Update$Check, quiz.id, quiz.quiz)),
                $author$project$Lia$Markdown$Quiz$View$viewSolutionButton({
                    config: config,
                    hidden: _Utils_cmp(state.trial, state.opt.showResolveAt) < 0,
                    msg: A2($author$project$Lia$Markdown$Quiz$Update$ShowSolution, quiz.id, quiz.quiz),
                    solution: state.solved
                }),
                $author$project$Lia$Markdown$Quiz$View$viewHintButton({
                    active: _Utils_eq($author$project$Lia$Markdown$Quiz$Solution$Open, state.solved) && _Utils_cmp(state.hint, $elm$core$List$length(quiz.hints)) < 0,
                    id: quiz.id,
                    show: !_Utils_eq(quiz.hints, _List_Nil) && _Utils_cmp(state.trial, state.opt.showHintsAt) > -1,
                    title: $author$project$I18n$Translations$quizHint(config.lang)
                })
            ])),
            A2($author$project$Lia$Markdown$Quiz$View$viewFeedback, config.lang, state),
            A3($author$project$Lia$Markdown$Quiz$View$viewHints, config, state.hint, quiz.hints)
        ]);
    });
    var $author$project$Lia$Markdown$Quiz$Update$Matrix_Update = F2(function(a, b) {
        return {
            $: "Matrix_Update",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Quiz$Update$Vector_Update = F2(function(a, b) {
        return {
            $: "Vector_Update",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Quiz$Solution$toClass = F2(function(_v0, partiallyCorrect) {
        var solution = _v0.a;
        var trials = _v0.b;
        switch(solution.$){
            case "Solved":
                return "is-success is-disabled";
            case "ReSolved":
                return "is-disabled";
            default:
                return !trials ? "" : _Utils_eq(partiallyCorrect, $elm$core$Maybe$Just(true)) ? "is-success" : "is-failure";
        }
    });
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropData = function(a) {
        return {
            $: "DropData",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropEnter = function(a) {
        return {
            $: "DropEnter",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropSource = function(a) {
        return {
            $: "DropSource",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropStart = {
        $: "DropStart"
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$DropTarget = {
        $: "DropTarget"
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$None = {
        $: "None"
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$Update$Toggle = {
        $: "Toggle"
    };
    var $author$project$Lia$Markdown$Quiz$Block$View$get_option = F3(function(config, id, list) {
        get_option: while(true){
            var _v0 = _Utils_Tuple2(id, list);
            if (_v0.b.b) {
                if (!_v0.a) {
                    var _v1 = _v0.b;
                    var x = _v1.a;
                    return A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Block$Update$Script, A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$viewer, config, x)));
                } else {
                    var i = _v0.a;
                    var _v2 = _v0.b;
                    var xs = _v2.b;
                    var $temp$config = config, $temp$id = i - 1, $temp$list = xs;
                    config = $temp$config;
                    id = $temp$id;
                    list = $temp$list;
                    continue get_option;
                }
            } else return A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$quizSelection(config.lang))
            ]));
        }
    });
    var $tesk9$accessible_html$Accessibility$Aria$hasListBoxPopUp = A2($tesk9$accessible_html$Accessibility$Utils$aria, "haspopup", "listbox");
    var $author$project$Lia$Markdown$Quiz$Solution$isOpen = A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Basics$eq($author$project$Lia$Markdown$Quiz$Solution$Open));
    var $tesk9$accessible_html$Accessibility$Role$listBox = $tesk9$accessible_html$Accessibility$Utils$role("listbox");
    var $author$project$Lia$Markdown$Quiz$Block$Update$Choose = function(a) {
        return {
            $: "Choose",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$View$option = F3(function(config, active, id) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), A2($elm$core$Basics$composeR, $elm$html$Html$div(_List_Nil), A2($elm$core$Basics$composeR, $elm$html$Html$map($author$project$Lia$Markdown$Quiz$Block$Update$Script), A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$html$Html$div(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-dropdown__option"),
            $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Quiz$Block$Update$Choose(id)),
            $tesk9$accessible_html$Accessibility$Key$onKeyDown(A3($andre_dietrich$elm_conditional$Conditional$List$addIf, active, $tesk9$accessible_html$Accessibility$Key$escape($author$project$Lia$Markdown$Quiz$Block$Update$Toggle), _List_fromArray([
                $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Markdown$Quiz$Block$Update$Choose(id)),
                $tesk9$accessible_html$Accessibility$Key$space($author$project$Lia$Markdown$Quiz$Block$Update$Choose(id))
            ]))),
            $tesk9$accessible_html$Accessibility$Role$listItem,
            $elm$html$Html$Attributes$tabindex(active ? 0 : -1)
        ]))))));
    });
    var $author$project$Lia$Markdown$Quiz$Block$View$select = F6(function(config, randomize, solution, open, options, i) {
        var active = $author$project$Lia$Markdown$Quiz$Solution$isOpen(solution);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-dropdown"),
            $elm$html$Html$Attributes$class(A2($author$project$Lia$Markdown$Quiz$Solution$toClass, solution, $elm$core$Maybe$Nothing)),
            active ? $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Quiz$Block$Update$Toggle) : $elm$html$Html$Attributes$disabled(true)
        ]), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-dropdown__selected"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(false),
                $tesk9$accessible_html$Accessibility$Role$button,
                $tesk9$accessible_html$Accessibility$Aria$expanded(open),
                $tesk9$accessible_html$Accessibility$Aria$hasListBoxPopUp,
                $tesk9$accessible_html$Accessibility$Key$onKeyDown(active ? _List_fromArray([
                    $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Markdown$Quiz$Block$Update$Toggle),
                    $tesk9$accessible_html$Accessibility$Key$space($author$project$Lia$Markdown$Quiz$Block$Update$Toggle)
                ]) : _List_Nil),
                $elm$html$Html$Attributes$tabindex(active ? 0 : -1)
            ]), _List_fromArray([
                A3($author$project$Lia$Markdown$Quiz$Block$View$get_option, config, i, options),
                A2($elm$html$Html$i, _List_fromArray([
                    $elm$html$Html$Attributes$class("icon" + (open ? " icon-chevron-up" : " icon-chevron-down"))
                ]), _List_Nil)
            ])),
            A2($elm$html$Html$div, A2($author$project$Lia$Utils$deactivate, !(open || active), _List_fromArray([
                $elm$html$Html$Attributes$class("lia-dropdown__options"),
                $tesk9$accessible_html$Accessibility$Aria$hidden(!(open && active)),
                $tesk9$accessible_html$Accessibility$Role$listBox,
                $elm$html$Html$Attributes$class(open ? "is-visible" : "is-hidden")
            ])), A2($author$project$Lia$Utils$shuffle, randomize, A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Quiz$Block$View$option, config, open && active), options)))
        ]));
    });
    var $author$project$Lia$Markdown$Quiz$Block$Update$Input = function(a) {
        return {
            $: "Input",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Block$View$text = F2(function(solution, state) {
        return A2($elm$html$Html$input, _List_fromArray([
            $elm$html$Html$Attributes$type_("input"),
            $elm$html$Html$Attributes$class("lia-input lia-quiz__input"),
            $elm$html$Html$Attributes$class($author$project$Lia$Markdown$Quiz$Solution$isOpen(solution) ? "" : "lia-input--disabled"),
            $elm$html$Html$Attributes$class(A2($author$project$Lia$Markdown$Quiz$Solution$toClass, solution, $elm$core$Maybe$Nothing)),
            $elm$html$Html$Attributes$value(state),
            $elm$html$Html$Attributes$disabled(!$author$project$Lia$Markdown$Quiz$Solution$isOpen(solution)),
            $elm$html$Html$Events$onInput($author$project$Lia$Markdown$Quiz$Block$Update$Input),
            $author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Quiz$Block$Update$Input(state)),
            $tesk9$accessible_html$Accessibility$Aria$label("quiz answer")
        ]), _List_Nil);
    });
    var $author$project$Lia$Markdown$Quiz$Block$View$view = F5(function(config, randomize, solution, quiz, state) {
        switch(state.$){
            case "Text":
                var str = state.a;
                return _List_fromArray([
                    A2($author$project$Lia$Markdown$Quiz$Block$View$text, solution, str),
                    function() {
                        switch(solution.a.$){
                            case "Solved":
                                var _v2 = solution.a;
                                return A2($author$project$Lia$Utils$icon, "icon-check text-success", _List_fromArray([
                                    A2($elm$html$Html$Attributes$style, "position", "absolute"),
                                    A2($elm$html$Html$Attributes$style, "top", "1rem"),
                                    A2($elm$html$Html$Attributes$style, "right", "1rem")
                                ]));
                            case "Open":
                                var _v3 = solution.a;
                                var trials = solution.b;
                                return trials > 0 ? A2($author$project$Lia$Utils$icon, "icon-close text-error", _List_fromArray([
                                    A2($elm$html$Html$Attributes$style, "position", "absolute"),
                                    A2($elm$html$Html$Attributes$style, "top", "1rem"),
                                    A2($elm$html$Html$Attributes$style, "right", "1rem")
                                ])) : $elm$html$Html$text("");
                            default:
                                return $elm$html$Html$text("");
                        }
                    }()
                ]);
            case "Select":
                var open = state.a;
                var value = state.b;
                return _List_fromArray([
                    A6($author$project$Lia$Markdown$Quiz$Block$View$select, config, randomize, solution, open, quiz.options, A2($elm$core$Maybe$withDefault, -1, $elm$core$List$head(value)))
                ]);
            default:
                var highlight = state.a;
                var active = state.b;
                var value = state.c;
                var solved = function() {
                    if (solution.a.$ === "Open") {
                        var _v5 = solution.a;
                        return false;
                    } else return true;
                }();
                var id = A2($elm$core$Maybe$withDefault, -1, $elm$core$List$head(value));
                return _List_fromArray([
                    A2($elm$html$Html$div, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "width", "100%"),
                        A2($elm$html$Html$Attributes$style, "padding", "0.5rem"),
                        A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                        A2($elm$html$Html$Attributes$style, "position", "relative"),
                        $elm$html$Html$Events$onClick(solved || $elm$core$List$isEmpty(value) ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropTarget),
                        $tesk9$accessible_html$Accessibility$Role$button,
                        $tesk9$accessible_html$Accessibility$Key$onKeyDown(solved || $elm$core$List$isEmpty(value) ? _List_Nil : _List_fromArray([
                            $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Markdown$Quiz$Block$Update$DropTarget),
                            $tesk9$accessible_html$Accessibility$Key$space($author$project$Lia$Markdown$Quiz$Block$Update$DropTarget)
                        ])),
                        $elm$html$Html$Attributes$tabindex($elm$core$List$isEmpty(value) ? 0 : -1),
                        A2($elm$html$Html$Attributes$style, "border", highlight ? "5px dotted #888" : "3px dotted #888"),
                        A2($elm$html$Html$Attributes$style, "border-radius", "5px")
                    ]), _List_fromArray([
                        A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Inline$View$dropHere(_List_fromArray([
                            A2($elm$html$Html$Attributes$style, "height", "4rem"),
                            A2($elm$html$Html$Attributes$style, "display", "flex"),
                            A2($elm$html$Html$Attributes$style, "font-size", "4rem"),
                            A2($elm$html$Html$Attributes$style, "font-size", "min(10vw, 4rem)"),
                            A2($elm$html$Html$Attributes$style, "line-height", "1")
                        ])), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), A2($elm$core$Basics$composeR, $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Quiz$Block$Update$Script)), $elm$html$Html$div(_List_fromArray([
                            A2($elm$html$Html$Attributes$style, "border", "3px dotted #888"),
                            A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                            A2($elm$html$Html$Attributes$style, "background-color", "#f9f9f9"),
                            A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                            A2($elm$html$Html$Attributes$style, "display", "flex"),
                            A2($elm$html$Html$Attributes$style, "justify-content", "center"),
                            A2($elm$html$Html$Attributes$style, "display", "flex"),
                            $elm$html$Html$Attributes$draggable(solved ? "false" : "true"),
                            A2($elm$html$Html$Events$on, "dragend", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropData(id))),
                            A2($elm$html$Html$Events$on, "dragstart", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropStart)),
                            $tesk9$accessible_html$Accessibility$Role$button,
                            $elm$html$Html$Attributes$tabindex(0)
                        ])))), A2($elm_community$list_extra$List$Extra$getAt, id, quiz.options))),
                        A2($elm$html$Html$div, _List_fromArray([
                            A2($elm$html$Html$Events$on, "dragenter", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropEnter(true))),
                            A2($elm$html$Html$Events$on, "dragleave", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropEnter(false))),
                            A2($elm$html$Html$Attributes$style, "height", "100%"),
                            A2($elm$html$Html$Attributes$style, "width", "100%"),
                            A2($elm$html$Html$Attributes$style, "position", "absolute"),
                            A2($elm$html$Html$Attributes$style, "top", "0"),
                            A2($elm$html$Html$Attributes$style, "left", "0"),
                            A2($elm$html$Html$Attributes$style, "z-index", "10"),
                            A2($elm$html$Html$Attributes$style, "display", active ? "block" : "none")
                        ]), _List_Nil)
                    ])),
                    A2($elm$html$Html$div, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "display", "flex"),
                        A2($elm$html$Html$Attributes$style, "flex-wrap", "wrap"),
                        A2($elm$html$Html$Attributes$style, "gap", "0.5rem"),
                        A2($elm$html$Html$Attributes$style, "align-items", "flex-start"),
                        A2($elm$html$Html$Attributes$style, "margin", "1rem 0px")
                    ]), A2($author$project$Lia$Utils$shuffle, randomize, A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$indexedMap, F2(function(i, a) {
                        return _Utils_eq(i, id) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($elm$html$Html$span, _List_fromArray([
                            A2($elm$html$Html$Attributes$style, "border", "3px dotted #888"),
                            A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                            A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                            A2($elm$html$Html$Attributes$style, "background-color", "#f9f9f9"),
                            A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                            $elm$html$Html$Attributes$draggable(solved ? "false" : "true"),
                            A2($elm$html$Html$Events$on, "dragend", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropData(i))),
                            A2($elm$html$Html$Events$on, "dragstart", $elm$json$Json$Decode$succeed(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropStart)),
                            $elm$html$Html$Events$onClick(solved ? $author$project$Lia$Markdown$Quiz$Block$Update$None : $author$project$Lia$Markdown$Quiz$Block$Update$DropSource(i)),
                            $tesk9$accessible_html$Accessibility$Key$onKeyDown(solved ? _List_Nil : _List_fromArray([
                                $tesk9$accessible_html$Accessibility$Key$enter($author$project$Lia$Markdown$Quiz$Block$Update$DropSource(i)),
                                $tesk9$accessible_html$Accessibility$Key$space($author$project$Lia$Markdown$Quiz$Block$Update$DropSource(i))
                            ])),
                            A2($elm$html$Html$Attributes$style, "display", "inline-flex"),
                            $tesk9$accessible_html$Accessibility$Role$button,
                            $elm$html$Html$Attributes$tabindex(0)
                        ]), A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Quiz$Block$Update$Script), A2($author$project$Lia$Markdown$Inline$View$viewer, config, a))));
                    }), quiz.options))))
                ]);
        }
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $tesk9$accessible_html$Accessibility$Role$rowHeader = $tesk9$accessible_html$Accessibility$Utils$role("rowheader");
    var $elm$html$Html$td = _VirtualDom_node("td");
    var $elm$html$Html$tr = _VirtualDom_node("tr");
    var $author$project$Lia$Markdown$Quiz$Matrix$View$add_text = F3(function(config, inline, _v0) {
        var toRow = _v0.a;
        var partiallySolved = _v0.b;
        return A2($elm$html$Html$tr, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__row lia-survey-matrix__row"),
            function() {
                if (partiallySolved.$ === "Nothing") return $elm$html$Html$Attributes$class("");
                else {
                    if (partiallySolved.a) return $tesk9$accessible_html$Accessibility$Aria$invalid(false);
                    else return $tesk9$accessible_html$Accessibility$Aria$invalid(true);
                }
            }(),
            $tesk9$accessible_html$Accessibility$Role$rowHeader
        ]), A2($elm$core$List$append, toRow, $elm$core$List$singleton(A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Matrix$Update$Script, A2($elm$html$Html$td, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__data lia-survey-matrix__data")
        ]), A2($author$project$Lia$Markdown$Inline$View$viewer, config, inline))))));
    });
    var $elm$html$Html$th = _VirtualDom_node("th");
    var $tesk9$accessible_html$Accessibility$Role$columnHeader = $tesk9$accessible_html$Accessibility$Utils$role("columnheader");
    var $author$project$Lia$Markdown$Quiz$Matrix$View$th = function(config) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), A2($elm$core$Basics$composeR, $elm$html$Html$th(_List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__header lia-survey-matrix__header"),
            $tesk9$accessible_html$Accessibility$Role$columnHeader
        ])), $elm$html$Html$map($author$project$Lia$Markdown$Quiz$Matrix$Update$Script)));
    };
    var $elm$html$Html$thead = _VirtualDom_node("thead");
    var $author$project$Lia$Markdown$Quiz$Matrix$View$header = F2(function(config, inlines) {
        return A2($elm$html$Html$thead, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__head lia-survey-matrix__head")
        ]), A2($elm$core$List$append, A2($elm$core$List$map, $author$project$Lia$Markdown$Quiz$Matrix$View$th(config), inlines), _List_fromArray([
            A2($elm$html$Html$th, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__header lia-survey-matrix__header")
            ]), _List_Nil)
        ])));
    });
    var $elm$html$Html$table = _VirtualDom_node("table");
    var $elm$html$Html$tbody = _VirtualDom_node("tbody");
    var $author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle = F2(function(a, b) {
        return {
            $: "Toggle",
            a: a,
            b: b
        };
    });
    var $tesk9$accessible_html$Accessibility$Role$checkBox = $tesk9$accessible_html$Accessibility$Utils$role("checkbox");
    var $author$project$Lia$Markdown$Quiz$Matrix$View$check = F5(function(open, colorClass, row_id, column_id, value) {
        return A2($elm$html$Html$td, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__data lia-survey-matrix__data")
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-checkbox"),
                $elm$html$Html$Attributes$class(colorClass),
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(value),
                $tesk9$accessible_html$Accessibility$Aria$label("Matrix quiz answer"),
                $tesk9$accessible_html$Accessibility$Role$checkBox,
                open ? $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id)) : $elm$html$Html$Attributes$disabled(true)
            ]), _List_Nil)
        ]));
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$View$radio = F5(function(open, colorClass, row_id, column_id, value) {
        return A2($elm$html$Html$td, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__data lia-survey-matrix__data")
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-radio"),
                $elm$html$Html$Attributes$class(colorClass),
                $elm$html$Html$Attributes$type_("radio"),
                $elm$html$Html$Attributes$checked(value),
                $tesk9$accessible_html$Accessibility$Aria$label("Matrix quiz answer"),
                $tesk9$accessible_html$Accessibility$Role$radio,
                open ? $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Quiz$Matrix$Update$Toggle, row_id, column_id)) : $elm$html$Html$Attributes$disabled(true)
            ]), _List_Nil)
        ]));
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$View$tr = F5(function(open, _class, partiallySolved, id, state) {
        var partialSolution = A2($elm$core$Array$get, id, partiallySolved);
        return _Utils_Tuple2(function() {
            if (state.$ === "SingleChoice") {
                var list = state.a;
                return A2($elm$core$List$indexedMap, A3($author$project$Lia$Markdown$Quiz$Matrix$View$radio, open, _class(partialSolution), id), list);
            } else {
                var list = state.a;
                return A2($elm$core$List$indexedMap, A3($author$project$Lia$Markdown$Quiz$Matrix$View$check, open, _class(partialSolution), id), list);
            }
        }(), partialSolution);
    });
    var $author$project$Lia$Markdown$Quiz$Matrix$View$view = function(_v0) {
        var config = _v0.config;
        var shuffle = _v0.shuffle;
        var open = _v0.open;
        var _class = _v0._class;
        var quiz = _v0.quiz;
        var state = _v0.state;
        var partiallySolved = _v0.partiallySolved;
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table-responsive has-thead-sticky has-last-col-sticky")
        ]), _List_fromArray([
            A2($elm$html$Html$table, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table lia-survey-matrix is-alternating")
            ]), _List_fromArray([
                A2($author$project$Lia$Markdown$Quiz$Matrix$View$header, config, quiz.headers),
                A2($elm$html$Html$tbody, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-table__body lia-survey-matrix__body")
                ]), shuffle(A3($elm$core$List$map2, $author$project$Lia$Markdown$Quiz$Matrix$View$add_text(config), quiz.options, A2($elm$core$List$indexedMap, A3($author$project$Lia$Markdown$Quiz$Matrix$View$tr, open, _class, partiallySolved), $elm$core$Array$toList(state)))))
            ]))
        ]));
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Update$Toggle = function(a) {
        return {
            $: "Toggle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Quiz$Vector$View$check = F5(function(config, open, colorClass, checked, _v0) {
        var id = _v0.a;
        var line = _v0.b;
        return A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label"),
            $tesk9$accessible_html$Accessibility$Role$listItem
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-checkbox"),
                $elm$html$Html$Attributes$class(colorClass),
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(checked),
                $tesk9$accessible_html$Accessibility$Role$checkBox,
                open ? $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id)) : $elm$html$Html$Attributes$disabled(true)
            ]), _List_Nil),
            A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Vector$Update$Script, A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$viewer, config, line)))
        ]));
    });
    var $tesk9$accessible_html$Accessibility$Role$list = $tesk9$accessible_html$Accessibility$Utils$role("list");
    var $author$project$Lia$Markdown$Quiz$Vector$View$radio = F5(function(config, open, colorClass, checked, _v0) {
        var id = _v0.a;
        var line = _v0.b;
        return A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label"),
            $tesk9$accessible_html$Accessibility$Role$listItem
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-radio"),
                $elm$html$Html$Attributes$class(colorClass),
                $elm$html$Html$Attributes$type_("radio"),
                $elm$html$Html$Attributes$checked(checked),
                $tesk9$accessible_html$Accessibility$Role$radio,
                open ? $elm$html$Html$Events$onClick($author$project$Lia$Markdown$Quiz$Vector$Update$Toggle(id)) : $elm$html$Html$Attributes$disabled(true)
            ]), _List_Nil),
            A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Vector$Update$Script, A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$viewer, config, line)))
        ]));
    });
    var $author$project$Lia$Markdown$Quiz$Vector$View$table = F3(function(fn, inlines, bool) {
        return A3($elm$core$List$map2, fn, bool, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, inlines));
    });
    var $author$project$Lia$Markdown$Quiz$Vector$View$view = F5(function(config, open, _class, quiz, state) {
        var _v0 = _Utils_Tuple2(quiz.solution, state);
        _v0$2: while(true)if (_v0.a.$ === "SingleChoice") {
            if (_v0.b.$ === "SingleChoice") {
                var list = _v0.b.a;
                return _Utils_Tuple2(_List_fromArray([
                    $tesk9$accessible_html$Accessibility$Role$radioGroup
                ]), A3($author$project$Lia$Markdown$Quiz$Vector$View$table, A3($author$project$Lia$Markdown$Quiz$Vector$View$radio, config, open, _class), quiz.options, list));
            } else break _v0$2;
        } else {
            if (_v0.b.$ === "MultipleChoice") {
                var list = _v0.b.a;
                return _Utils_Tuple2(_List_fromArray([
                    $tesk9$accessible_html$Accessibility$Role$list
                ]), A3($author$project$Lia$Markdown$Quiz$Vector$View$table, A3($author$project$Lia$Markdown$Quiz$Vector$View$check, config, open, _class), quiz.options, list));
            } else break _v0$2;
        }
        return _Utils_Tuple2(_List_Nil, _List_Nil);
    });
    var $author$project$Lia$Markdown$Quiz$View$viewState = F3(function(config, elem, quiz) {
        var _v0 = _Utils_Tuple2(elem.state, quiz.quiz);
        _v0$3: while(true)switch(_v0.a.$){
            case "Block_State":
                if (_v0.b.$ === "Block_Type") {
                    var s = _v0.a.a;
                    var q = _v0.b.a;
                    return _Utils_Tuple2(_List_Nil, A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Quiz$Update$Block_Update(quiz.id)), A5($author$project$Lia$Markdown$Quiz$Block$View$view, config, elem.opt.randomize, _Utils_Tuple2(elem.solved, elem.trial), q, s)));
                } else break _v0$3;
            case "Vector_State":
                if (_v0.b.$ === "Vector_Type") {
                    var s = _v0.a.a;
                    var q = _v0.b.a;
                    return A2($elm$core$Tuple$mapSecond, A2($elm$core$Basics$composeR, $author$project$Lia$Utils$shuffle(elem.opt.randomize), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Quiz$Update$Vector_Update(quiz.id)))), A5($author$project$Lia$Markdown$Quiz$Vector$View$view, config, _Utils_eq(elem.solved, $author$project$Lia$Markdown$Quiz$Solution$Open), A2($author$project$Lia$Markdown$Quiz$Solution$toClass, _Utils_Tuple2(elem.solved, elem.trial), $elm$core$Maybe$Nothing), q, s));
                } else break _v0$3;
            case "Matrix_State":
                if (_v0.b.$ === "Matrix_Type") {
                    var s = _v0.a.a;
                    var q = _v0.b.a;
                    return _Utils_Tuple2(_List_Nil, _List_fromArray([
                        A2($elm$html$Html$map, $author$project$Lia$Markdown$Quiz$Update$Matrix_Update(quiz.id), $author$project$Lia$Markdown$Quiz$Matrix$View$view({
                            _class: $author$project$Lia$Markdown$Quiz$Solution$toClass(_Utils_Tuple2(elem.solved, elem.trial)),
                            config: config,
                            open: _Utils_eq(elem.solved, $author$project$Lia$Markdown$Quiz$Solution$Open),
                            partiallySolved: elem.partiallySolved,
                            quiz: q,
                            shuffle: $author$project$Lia$Utils$shuffle(elem.opt.randomize),
                            state: s
                        }))
                    ]));
                } else break _v0$3;
            default:
                break _v0$3;
        }
        return _Utils_Tuple2(_List_Nil, _List_Nil);
    });
    var $elm$core$List$partition = F2(function(pred, list) {
        var step = F2(function(x, _v0) {
            var trues = _v0.a;
            var falses = _v0.b;
            return pred(x) ? _Utils_Tuple2(A2($elm$core$List$cons, x, trues), falses) : _Utils_Tuple2(trues, A2($elm$core$List$cons, x, falses));
        });
        return A3($elm$core$List$foldr, step, _Utils_Tuple2(_List_Nil, _List_Nil), list);
    });
    var $elm_community$list_extra$List$Extra$gatherWith = F2(function(testFn, list) {
        var helper = F2(function(scattered, gathered) {
            helper: while(true){
                if (!scattered.b) return $elm$core$List$reverse(gathered);
                else {
                    var toGather = scattered.a;
                    var population = scattered.b;
                    var _v1 = A2($elm$core$List$partition, testFn(toGather), population);
                    var gathering = _v1.a;
                    var remaining = _v1.b;
                    var $temp$scattered = remaining, $temp$gathered = A2($elm$core$List$cons, _Utils_Tuple2(toGather, gathering), gathered);
                    scattered = $temp$scattered;
                    gathered = $temp$gathered;
                    continue helper;
                }
            }
        });
        return A2(helper, list, _List_Nil);
    });
    var $elm_community$list_extra$List$Extra$gatherEquals = function(list) {
        return A2($elm_community$list_extra$List$Extra$gatherWith, $elm$core$Basics$eq, list);
    };
    var $author$project$Lia$Utils$percentage = F2(function(total, i) {
        return $elm$core$Basics$round(10000.0 * i / total) / 100.0;
    });
    var $author$project$Lia$Markdown$Quiz$View$syncAttributes = _List_fromArray([
        _Utils_Tuple2("style", "height: 150px; width: 100%"),
        _Utils_Tuple2("class", "lia-quiz__sync")
    ]);
    var $author$project$Lia$Markdown$Quiz$View$viewSync = F3(function(config, syncData, quiz) {
        var _v0 = _Utils_Tuple2(syncData, A2($elm$core$Maybe$map, $elm$core$List$length, syncData));
        if (_v0.a.$ === "Just" && _v0.b.$ === "Just") {
            if (!_v0.b.a) return quiz;
            else {
                var data = _v0.a.a;
                var length = _v0.b.a;
                var total = length;
                var chartData = A2($elm$core$List$map, function(_v1) {
                    var i = _v1.a;
                    var list = _v1.b;
                    var absolute = 1 + $elm$core$List$length(list);
                    var relative = A2($author$project$Lia$Utils$percentage, total, absolute);
                    if (i.$ === "Just") {
                        var i_ = i.a;
                        return _Utils_Tuple2($elm$json$Json$Encode$string("Trial " + $elm$core$String$fromInt(i_)), $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("value", $elm$json$Json$Encode$float(relative)),
                            _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true)),
                                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string($elm$core$String$fromInt(absolute) + (" (" + ($elm$core$String$fromFloat(relative) + "%)"))))
                            ])))
                        ])));
                    } else return _Utils_Tuple2($elm$json$Json$Encode$string("Resolved"), $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("value", $elm$json$Json$Encode$float(relative)),
                        _Utils_Tuple2("itemStyle", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("color", $elm$json$Json$Encode$string("#888"))
                        ]))),
                        _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true)),
                            _Utils_Tuple2("formatter", $elm$json$Json$Encode$string($elm$core$String$fromInt(absolute) + (" (" + ($elm$core$String$fromFloat(relative) + "%)"))))
                        ])))
                    ])));
                }, $elm_community$list_extra$List$Extra$gatherEquals(data));
                return A2($elm$core$List$append, quiz, $elm$core$List$singleton(A3($author$project$Lia$Markdown$Chart$View$eCharts, {
                    attr: $author$project$Lia$Markdown$Quiz$View$syncAttributes,
                    lang: config.lang,
                    light: config.light
                }, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("left", $elm$json$Json$Encode$int(10)),
                        _Utils_Tuple2("top", $elm$json$Json$Encode$int(20)),
                        _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(20)),
                        _Utils_Tuple2("right", $elm$json$Json$Encode$int(10))
                    ]))),
                    _Utils_Tuple2("xAxis", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                        _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$core$Tuple$first, chartData))
                    ]))),
                    _Utils_Tuple2("yAxis", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("type", $elm$json$Json$Encode$string("value")),
                        _Utils_Tuple2("show", $elm$json$Json$Encode$bool(false))
                    ]))),
                    _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                        _List_fromArray([
                            _Utils_Tuple2("type", $elm$json$Json$Encode$string("bar")),
                            _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$core$Tuple$second, chartData))
                        ])
                    ])))
                ])))));
            }
        } else return quiz;
    });
    var $author$project$Lia$Markdown$Quiz$View$view = F4(function(config, labeledBy, quiz, vector) {
        var _v0 = A2($elm$core$Array$get, quiz.id, vector);
        if (_v0.$ === "Just") {
            var elem = _v0.a;
            return _Utils_Tuple2(elem.scriptID, A3($author$project$Lia$Markdown$Quiz$View$viewSync, config, A4($author$project$Lia$Sync$Types$get, config.sync, function($) {
                return $.quiz;
            }, config.slide, quiz.id), A5($author$project$Lia$Markdown$Quiz$View$viewQuiz, config, labeledBy, elem, quiz, A3($author$project$Lia$Markdown$Quiz$View$viewState, config, elem, quiz))));
        } else return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
    });
    var $author$project$Lia$Markdown$Survey$Update$MatrixUpdate = F3(function(a, b, c) {
        return {
            $: "MatrixUpdate",
            a: a,
            b: b,
            c: c
        };
    });
    var $author$project$Lia$Markdown$Survey$Update$VectorUpdate = F2(function(a, b) {
        return {
            $: "VectorUpdate",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$View$getSync = F2(function(config, id) {
        return A4($author$project$Lia$Sync$Types$get, config.sync, function($) {
            return $.survey;
        }, config.slide, id);
    });
    var $author$project$Lia$Markdown$Survey$Model$get_drop_state = F2(function(vector, id) {
        var _v0 = A2($elm$core$Maybe$map, function($) {
            return $.state;
        }, A2($elm$core$Array$get, id, vector));
        if (_v0.$ === "Just" && _v0.a.$ === "DragAndDrop_State") {
            var _v1 = _v0.a;
            var highlight = _v1.a;
            var active = _v1.b;
            var value = _v1.c;
            return _Utils_Tuple3(highlight, active, value);
        } else return _Utils_Tuple3(false, false, -1);
    });
    var $author$project$Lia$Markdown$Survey$Model$get_matrix_state = F4(function(vector, idx, row, _var) {
        var _v0 = A2($elm$core$Maybe$map, function($) {
            return $.state;
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && _v0.a.$ === "Matrix_State") {
            var _v1 = _v0.a;
            var matrix = _v1.b;
            return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$andThen, function(d) {
                return A2($elm$core$Dict$get, _var, d);
            }, A2($elm$core$Array$get, row, matrix)));
        } else return false;
    });
    var $author$project$Lia$Markdown$Survey$Model$get_select_state = F2(function(vector, id) {
        var _v0 = A2($elm$core$Maybe$map, function($) {
            return $.state;
        }, A2($elm$core$Array$get, id, vector));
        if (_v0.$ === "Just" && _v0.a.$ === "Select_State") {
            var _v1 = _v0.a;
            var open = _v1.a;
            var value = _v1.b;
            return _Utils_Tuple2(open, value);
        } else return _Utils_Tuple2(false, -1);
    });
    var $author$project$Lia$Markdown$Survey$Model$get_text_state = F2(function(vector, idx) {
        var _v0 = A2($elm$core$Maybe$map, function($) {
            return $.state;
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && _v0.a.$ === "Text_State") {
            var str = _v0.a.a;
            return str;
        } else return "";
    });
    var $author$project$Lia$Markdown$Survey$Model$get_vector_state = F3(function(vector, idx, _var) {
        var _v0 = A2($elm$core$Maybe$map, function($) {
            return $.state;
        }, A2($elm$core$Array$get, idx, vector));
        if (_v0.$ === "Just" && _v0.a.$ === "Vector_State") {
            var _v1 = _v0.a;
            var state = _v1.b;
            return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Dict$get, _var, state));
        } else return false;
    });
    var $author$project$Lia$Markdown$Survey$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$View$inline = F2(function(config, elements) {
        return A2($elm$html$Html$span, _List_Nil, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script)))(elements));
    });
    var $author$project$Lia$Markdown$Survey$View$input = F4(function(button, msg, checked, submitted) {
        return A2($elm$html$Html$input, _List_fromArray([
            $elm$html$Html$Attributes$class(button ? "lia-checkbox" : "lia-radio"),
            $elm$html$Html$Attributes$type_(button ? "checkbox" : "radio"),
            submitted ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(msg),
            $elm$html$Html$Attributes$checked(checked)
        ]), _List_Nil);
    });
    var $author$project$Lia$Markdown$Survey$View$matrix = F7(function(config, button, msg, fn, vars, submitted, _v0) {
        var row = _v0.a;
        var elements = _v0.b;
        var msgX = msg(row);
        var fnX = fn(row);
        return A2($elm$html$Html$tr, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table__row lia-survey-matrix__row")
        ]), A2($elm$core$List$append, A2($elm$core$List$map, function(_var) {
            return A2($elm$html$Html$td, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__data lia-survey-matrix__data")
            ]), _List_fromArray([
                A4($author$project$Lia$Markdown$Survey$View$input, button, msgX(_var), fnX(_var), submitted)
            ]));
        }, vars), _List_fromArray([
            A2($elm$html$Html$td, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__data lia-survey-matrix__data")
            ]), _List_fromArray([
                A2($author$project$Lia$Markdown$Survey$View$inline, config, elements)
            ]))
        ])));
    });
    var $author$project$Lia$Markdown$Survey$View$vector = F6(function(config, button, msg, fn, submitted, _v0) {
        var _var = _v0.a;
        var elements = _v0.b;
        var state = fn(_var);
        return A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label")
        ]), _List_fromArray([
            A4($author$project$Lia$Markdown$Survey$View$input, button, msg(_var), state, submitted),
            A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                A2($author$project$Lia$Markdown$Survey$View$inline, config, elements)
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$Sync$Data = F3(function(value, absolute, relative) {
        return {
            absolute: absolute,
            relative: relative,
            value: value
        };
    });
    var $author$project$Lia$Markdown$Survey$Sync$toMatrix = function(_v0) {
        var s = _v0.a;
        if (s.$ === "Matrix_State") {
            var state = s.b;
            return $elm$core$Maybe$Just($elm$core$Array$toList(state));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm_community$list_extra$List$Extra$rowsLength = function(listOfLists) {
        if (!listOfLists.b) return 0;
        else {
            var x = listOfLists.a;
            return $elm$core$List$length(x);
        }
    };
    var $elm_community$list_extra$List$Extra$transpose = function(listOfLists) {
        return A3($elm$core$List$foldr, $elm$core$List$map2($elm$core$List$cons), A2($elm$core$List$repeat, $elm_community$list_extra$List$Extra$rowsLength(listOfLists), _List_Nil), listOfLists);
    };
    var $author$project$Lia$Markdown$Survey$Sync$ifEmpty = function(list) {
        return $elm$core$List$isEmpty(list) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(list);
    };
    var $author$project$Lia$Markdown$Survey$Sync$boolToInt = F2(function(_v0, v) {
        return v ? 1 : 0;
    });
    var $author$project$Lia$Markdown$Survey$Sync$toVector = function(_v0) {
        var s = _v0.a;
        if (s.$ === "Vector_State") {
            var dict = s.b;
            return $elm$core$Maybe$Just(A2($elm$core$Dict$map, $author$project$Lia$Markdown$Survey$Sync$boolToInt, dict));
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Survey$Sync$vector = F2(function(orderBy, list) {
        var _v0 = A2($elm$core$List$filterMap, $author$project$Lia$Markdown$Survey$Sync$toVector, list);
        if (!_v0.b) return $elm$core$Maybe$Nothing;
        else {
            var data = _v0;
            var union = A3($elm$core$List$foldl, F2(function(v1, v2) {
                return A6($elm$core$Dict$merge, $elm$core$Dict$insert, F3(function(key, a, b) {
                    return A2($elm$core$Dict$insert, key, a + b);
                }), $elm$core$Dict$insert, v1, v2, $elm$core$Dict$empty);
            }), $elm$core$Dict$empty, data);
            var total = $elm$core$List$length(data);
            return $author$project$Lia$Markdown$Survey$Sync$ifEmpty(A3($elm$core$List$foldr, F2(function(key, result) {
                return A2($elm$core$List$cons, A2($elm$core$Maybe$withDefault, A3($author$project$Lia$Markdown$Survey$Sync$Data, key, 0, 0), A2($elm$core$Maybe$map, function(absolute) {
                    return A3($author$project$Lia$Markdown$Survey$Sync$Data, key, absolute, A2($author$project$Lia$Utils$percentage, total, absolute));
                }, A2($elm$core$Dict$get, key, union))), result);
            }), _List_Nil, orderBy));
        }
    });
    var $author$project$Lia$Markdown$Survey$Sync$matrix = F2(function(orderBy, list) {
        return A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Markdown$Survey$Sync$vector(orderBy)), A2($elm$core$Basics$composeR, $elm$core$List$map($elm$core$Maybe$withDefault(A2($elm$core$List$map, function(key) {
            return A3($author$project$Lia$Markdown$Survey$Sync$Data, key, 0, 0);
        }, orderBy))), $elm_community$list_extra$List$Extra$transpose)), A3($elm$core$List$foldl, F2(function(state, result) {
            if (result.$ === "Just") {
                var collection = result.a;
                return $elm$core$Maybe$Just(A3($elm$core$List$map2, F2(function(s, c) {
                    return A2($elm$core$List$cons, $author$project$Lia$Markdown$Survey$Sync$Sync(A2($author$project$Lia$Markdown$Survey$Types$Vector_State, true, s)), c);
                }), state, collection));
            } else return $elm$core$Maybe$Just(A2($elm$core$List$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Types$Vector_State(true), A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Survey$Sync$Sync, $elm$core$List$singleton)), state));
        }), $elm$core$Maybe$Nothing, A2($elm$core$List$filterMap, $author$project$Lia$Markdown$Survey$Sync$toMatrix, list)));
    });
    var $author$project$Lia$Markdown$Chart$View$feature = function(config) {
        return _Utils_Tuple2("feature", $elm$json$Json$Encode$object(A3($andre_dietrich$elm_conditional$Conditional$List$addIf, config.magicType, _Utils_Tuple2("magicType", $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("type", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, _List_fromArray([
                "tiled",
                "line",
                "bar",
                "stack"
            ])))
        ]))), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, config.dataZoom, _Utils_Tuple2("dataZoom", $elm$json$Json$Encode$object(_List_Nil)), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, config.dataView, _Utils_Tuple2("dataView", $elm$json$Json$Encode$object(_List_Nil)), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, config.restore, _Utils_Tuple2("restore", $elm$json$Json$Encode$object(_List_Nil)), A3($andre_dietrich$elm_conditional$Conditional$List$addIf, config.saveAsImage, _Utils_Tuple2("saveAsImage", $elm$json$Json$Encode$object(_List_Nil)), _List_Nil)))))));
    };
    var $author$project$Lia$Markdown$Survey$View$matrixBlock = F3(function(config, categories, data) {
        return A3($author$project$Lia$Markdown$Chart$View$eCharts, {
            attr: $author$project$Lia$Markdown$Quiz$View$syncAttributes,
            lang: config.lang,
            light: config.light
        }, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("left", $elm$json$Json$Encode$int(10)),
                _Utils_Tuple2("top", $elm$json$Json$Encode$int(30)),
                _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(28)),
                _Utils_Tuple2("right", $elm$json$Json$Encode$int(30))
            ]))),
            _Utils_Tuple2("legend", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$head, A2($elm$core$Basics$composeR, $elm$core$Maybe$map(function($) {
                    return $.value;
                }), $elm$core$Maybe$withDefault(""))), data)))
            ]))),
            _Utils_Tuple2("xAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, A2($elm$core$List$map, $author$project$Lia$Markdown$Inline$Stringify$stringify, categories)))
            ]))),
            _Utils_Tuple2("yAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("value")),
                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(false))
            ]))),
            _Utils_Tuple2("toolbox", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("orient", $elm$json$Json$Encode$string("vertical")),
                $author$project$Lia$Markdown$Chart$View$feature({
                    dataView: true,
                    dataZoom: false,
                    magicType: true,
                    restore: false,
                    saveAsImage: true
                })
            ]))),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$map, function(data_) {
                return _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("bar")),
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                        return $.value;
                    }, $elm$core$List$head(data_))))),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$map, function(d) {
                        var _v0 = d.absolute;
                        if (!_v0) return _List_fromArray([
                            _Utils_Tuple2("value", $elm$json$Json$Encode$float(d.relative))
                        ]);
                        else return _List_fromArray([
                            _Utils_Tuple2("value", $elm$json$Json$Encode$float(d.relative)),
                            _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true)),
                                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string($elm$core$String$fromInt(d.absolute) + (" (" + ($elm$core$String$fromFloat(d.relative) + "%)")))),
                                _Utils_Tuple2("rotate", $elm$json$Json$Encode$int(90))
                            ])))
                        ]);
                    }, data_)))
                ]);
            }, data)))
        ])));
    });
    var $author$project$Lia$Markdown$Survey$View$viewMatrixSync = F5(function(config, categories, questions, syncData, survey) {
        var _v0 = A2($elm$core$Maybe$map, A2($author$project$Lia$Markdown$Survey$View$matrixBlock, config, categories), A2($elm$core$Maybe$andThen, $author$project$Lia$Markdown$Survey$Sync$matrix(questions), syncData));
        if (_v0.$ === "Nothing") return survey;
        else {
            var diagram = _v0.a;
            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                survey,
                diagram
            ]));
        }
    });
    var $author$project$Lia$Markdown$Survey$Sync$toSelect = function(_v0) {
        var s = _v0.a;
        switch(s.$){
            case "Select_State":
                var i = s.b;
                return $elm$core$Maybe$Just(i);
            case "DragAndDrop_State":
                var i = s.c;
                return $elm$core$Maybe$Just(i);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$Lia$Markdown$Survey$Sync$select = F2(function(maxElements, list) {
        var _v0 = A2($elm$core$List$filterMap, $author$project$Lia$Markdown$Survey$Sync$toSelect, list);
        if (!_v0.b) return $elm$core$Maybe$Nothing;
        else {
            var data = _v0;
            var total = $elm$core$List$length(data);
            return $author$project$Lia$Markdown$Survey$Sync$ifEmpty($elm$core$Array$toList(A2($elm$core$Array$indexedMap, F2(function(index, absolute) {
                return A3($author$project$Lia$Markdown$Survey$Sync$Data, $elm$core$String$fromInt(index + 1), absolute, A2($author$project$Lia$Utils$percentage, total, absolute));
            }), A3($elm$core$List$foldl, F2(function(s, array) {
                var _v1 = A2($elm$core$Array$get, s, array);
                if (_v1.$ === "Just") {
                    var i = _v1.a;
                    return A3($elm$core$Array$set, s, i + 1, array);
                } else return array;
            }), A2($elm$core$Array$repeat, maxElements, 0), data))));
        }
    });
    var $author$project$Lia$Markdown$Survey$View$vectorBlockCategory = F2(function(config, data) {
        return A3($author$project$Lia$Markdown$Chart$View$eCharts, {
            attr: $author$project$Lia$Markdown$Quiz$View$syncAttributes,
            lang: config.lang,
            light: config.light
        }, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("left", $elm$json$Json$Encode$int(10)),
                _Utils_Tuple2("top", $elm$json$Json$Encode$int(20)),
                _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(20)),
                _Utils_Tuple2("right", $elm$json$Json$Encode$int(10))
            ]))),
            _Utils_Tuple2("xAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, A2($elm$core$List$map, function($) {
                    return $.value;
                }, data)))
            ]))),
            _Utils_Tuple2("yAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("value")),
                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(false))
            ]))),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("bar")),
                    _Utils_Tuple2("smooth", $elm$json$Json$Encode$bool(true)),
                    _Utils_Tuple2("areaStyle", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("opacity", $elm$json$Json$Encode$float(0.8))
                    ]))),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$map, function(d) {
                        var _v0 = d.absolute;
                        if (!_v0) return _List_fromArray([
                            _Utils_Tuple2("value", $elm$json$Json$Encode$float(d.relative))
                        ]);
                        else return _List_fromArray([
                            _Utils_Tuple2("value", $elm$json$Json$Encode$float(d.relative)),
                            _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true)),
                                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string($elm$core$String$fromInt(d.absolute) + (" (" + ($elm$core$String$fromFloat(d.relative) + "%)"))))
                            ])))
                        ]);
                    }, data)))
                ])
            ])))
        ])));
    });
    var $author$project$Lia$Markdown$Survey$View$viewSelectSync = F4(function(config, options, syncData, survey) {
        var _v0 = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Survey$View$vectorBlockCategory(config), A2($elm$core$Maybe$andThen, $author$project$Lia$Markdown$Survey$Sync$select($elm$core$List$length(options)), syncData));
        if (_v0.$ === "Nothing") return survey;
        else {
            var diagram = _v0.a;
            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                survey,
                diagram
            ]));
        }
    });
    var $author$project$Lia$Markdown$Survey$Sync$toText = function(_v0) {
        var s = _v0.a;
        if (s.$ === "Text_State") {
            var str = s.a;
            return $elm$core$Maybe$Just(str);
        } else return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Survey$Sync$text = A2($elm$core$Basics$composeR, $elm$core$List$filterMap($author$project$Lia$Markdown$Survey$Sync$toText), $author$project$Lia$Markdown$Survey$Sync$ifEmpty);
    var $author$project$Lia$Markdown$Survey$View$textBlock = function(str) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "white-space", "pre"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(179 179 179)"),
            A2($elm$html$Html$Attributes$style, "border-bottom", "2px dashed #666"),
            A2($elm$html$Html$Attributes$style, "padding", "0.8rem")
        ]), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $author$project$Lia$Utils$string2Color = F2(function(maxValue, url) {
        return function(_v5) {
            var r = _v5.a;
            var g = _v5.b;
            var b = _v5.c;
            return "rgb(" + ($elm$core$String$fromInt(A2($elm$core$Basics$modBy, maxValue, r)) + ("," + ($elm$core$String$fromInt(A2($elm$core$Basics$modBy, maxValue, g)) + ("," + ($elm$core$String$fromInt(A2($elm$core$Basics$modBy, maxValue, b)) + ")")))));
        }(A3($elm$core$List$foldl, F2(function(rgb, _v0) {
            var r = _v0.a;
            var g = _v0.b;
            var b = _v0.c;
            _v1$3: while(true){
                if (rgb.b) {
                    if (rgb.b.b) {
                        if (rgb.b.b.b) {
                            if (!rgb.b.b.b.b) {
                                var r_ = rgb.a;
                                var _v2 = rgb.b;
                                var g_ = _v2.a;
                                var _v3 = _v2.b;
                                var b_ = _v3.a;
                                return _Utils_Tuple3(r + r_, g + g_, b + b_);
                            } else break _v1$3;
                        } else {
                            var r_ = rgb.a;
                            var _v4 = rgb.b;
                            var g_ = _v4.a;
                            return _Utils_Tuple3(r_ + r, g_ + g, b);
                        }
                    } else {
                        var r_ = rgb.a;
                        return _Utils_Tuple3(r_ + r, g, b);
                    }
                } else break _v1$3;
            }
            return _Utils_Tuple3(r, g, b);
        }), _Utils_Tuple3(11111, 99, 12), A2($elm_community$list_extra$List$Extra$greedyGroupsOf, 3, A2($elm$core$List$map, $elm$core$Char$toCode, $elm$core$String$toList(url)))));
    });
    var $author$project$Lia$Markdown$Survey$View$wordCloud = F2(function(config, data) {
        return A3($author$project$Lia$Markdown$Chart$View$eCharts, {
            attr: $author$project$Lia$Markdown$Quiz$View$syncAttributes,
            lang: config.lang,
            light: config.light
        }, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("item")),
                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{b} ({c})"))
            ]))),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, $elm$core$List$singleton(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("wordCloud")),
                _Utils_Tuple2("layoutAnimation", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("gridSize", $elm$json$Json$Encode$int(5)),
                _Utils_Tuple2("shape", $elm$json$Json$Encode$string("pentagon")),
                _Utils_Tuple2("drawOutOfBound", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("sizeRange", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
                    12,
                    50
                ]))),
                _Utils_Tuple2("emphasis", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("focus", $elm$json$Json$Encode$string("self"))
                ]))),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$map, function(d) {
                    return _List_fromArray([
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(d.value)),
                        _Utils_Tuple2("value", $elm$json$Json$Encode$int(d.absolute)),
                        _Utils_Tuple2("textStyle", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("color", $elm$json$Json$Encode$string(A2($author$project$Lia$Utils$string2Color, 160, d.value)))
                        ])))
                    ]);
                }, data)))
            ]))))
        ])));
    });
    var $author$project$Lia$Markdown$Survey$Sync$wordCount = A2($elm$core$Basics$composeR, A2($elm$core$List$foldl, F2(function(s, _v0) {
        var dict = _v0.a;
        var counter = _v0.b;
        return A2($elm$core$Maybe$withDefault, _Utils_Tuple2(dict, counter), A2($elm$core$Maybe$map, function(list) {
            return A3($elm$core$List$foldl, F2(function(key, _v1) {
                var d = _v1.a;
                var c = _v1.b;
                return _Utils_Tuple2(A3($elm$core$Dict$insert, key, A2($elm$core$Maybe$withDefault, 1, A2($elm$core$Maybe$map, $elm$core$Basics$add(1), A2($elm$core$Dict$get, key, d))), d), c + 1);
            }), _Utils_Tuple2(dict, counter), list);
        }, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$String$toUpper, A2($elm$core$Basics$composeR, $elm$core$String$split(","), $elm$core$List$map($elm$core$String$trim))), $author$project$Lia$Markdown$Survey$Sync$toText(s))));
    }), _Utils_Tuple2($elm$core$Dict$empty, 0)), function(_v2) {
        var dict = _v2.a;
        var total = _v2.b;
        return $author$project$Lia$Markdown$Survey$Sync$ifEmpty(A2($elm$core$List$map, function(_v3) {
            var key = _v3.a;
            var value = _v3.b;
            return A3($author$project$Lia$Markdown$Survey$Sync$Data, key, value, A2($author$project$Lia$Utils$percentage, total, value));
        }, $elm$core$Dict$toList(dict)));
    });
    var $author$project$Lia$Markdown$Survey$View$viewTextSync = F4(function(config, lines, syncData, survey) {
        var _v0 = _Utils_Tuple2(syncData, lines);
        if (_v0.a.$ === "Just") {
            if (_v0.b === 1) {
                var data = _v0.a.a;
                var _v1 = A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Survey$View$wordCloud(config), $author$project$Lia$Markdown$Survey$Sync$wordCount(data));
                if (_v1.$ === "Nothing") return survey;
                else {
                    var diagram = _v1.a;
                    return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                        survey,
                        diagram
                    ]));
                }
            } else {
                var data = _v0.a.a;
                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                    survey,
                    A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Markdown$Survey$View$textBlock), $elm$html$Html$div(_List_fromArray([
                        A2($elm$html$Html$Attributes$style, "border", "1px solid rgb(var(--color-highlight))"),
                        A2($elm$html$Html$Attributes$style, "border-radius", "0.8rem"),
                        A2($elm$html$Html$Attributes$style, "max-height", "400px"),
                        A2($elm$html$Html$Attributes$style, "overflow", "auto")
                    ]))), $author$project$Lia$Markdown$Survey$Sync$text(data)))
                ]));
            }
        } else return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            survey
        ]));
    });
    var $author$project$Lia$Markdown$Survey$View$vectorBlockQuantity = F3(function(config, data, categories) {
        var size = 2 * $elm$core$List$length(categories) - 1;
        var sample = $elm$core$List$concat(A2($elm$core$List$filterMap, function(v) {
            var _v0 = A2($elm$core$Maybe$andThen, $elm$core$String$toFloat, $elm$core$List$head(A2($elm$core$String$split, " ", v.value)));
            if (_v0.$ === "Just") {
                var i = _v0.a;
                return $elm$core$Maybe$Just(A2($elm$core$List$repeat, v.absolute, i));
            } else return $elm$core$Maybe$Nothing;
        }, data));
        return A3($author$project$Lia$Markdown$Chart$View$eCharts, {
            attr: $author$project$Lia$Markdown$Quiz$View$syncAttributes,
            lang: config.lang,
            light: config.light
        }, $elm$core$Maybe$Nothing, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("pdf", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$float, sample)),
                _Utils_Tuple2("min", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$float, $elm$core$List$minimum(categories)))),
                _Utils_Tuple2("max", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$float, $elm$core$List$maximum(categories)))),
                _Utils_Tuple2("size", $elm$json$Json$Encode$int(size)),
                _Utils_Tuple2("width", $elm$json$Json$Encode$int(2))
            ]))),
            _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("left", $elm$json$Json$Encode$int(50)),
                _Utils_Tuple2("top", $elm$json$Json$Encode$int(20)),
                _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(20)),
                _Utils_Tuple2("right", $elm$json$Json$Encode$int(20))
            ]))),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("axis"))
            ]))),
            _Utils_Tuple2("xAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                _Utils_Tuple2("data", $elm$json$Json$Encode$null),
                _Utils_Tuple2("boundaryGap", $elm$json$Json$Encode$bool(false))
            ]))),
            _Utils_Tuple2("yAxis", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("value")),
                _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true))
            ]))),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("line")),
                    _Utils_Tuple2("smooth", $elm$json$Json$Encode$bool(true)),
                    _Utils_Tuple2("areaStyle", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("opacity", $elm$json$Json$Encode$float(0.8))
                    ]))),
                    _Utils_Tuple2("data", $elm$json$Json$Encode$null),
                    _Utils_Tuple2("symbol", $elm$json$Json$Encode$string("none"))
                ])
            ])))
        ])));
    });
    var $author$project$Lia$Markdown$Survey$View$viewVectorSync = F5(function(config, analyze, questions, syncData, survey) {
        var _v0 = A2($elm$core$Maybe$andThen, $author$project$Lia$Markdown$Survey$Sync$vector(A2($elm$core$List$map, $elm$core$Tuple$first, questions)), syncData);
        if (_v0.$ === "Nothing") return survey;
        else {
            var data = _v0.a;
            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                survey,
                function() {
                    if (analyze.$ === "Categorical") return A2($author$project$Lia$Markdown$Survey$View$vectorBlockCategory, config, data);
                    else return A3($author$project$Lia$Markdown$Survey$View$vectorBlockQuantity, config, data, A2($elm$core$List$filterMap, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, A2($elm$core$Basics$composeR, $elm$core$String$split(" "), A2($elm$core$Basics$composeR, $elm$core$List$head, $elm$core$Maybe$andThen($elm$core$String$toFloat)))), questions));
                }()
            ]));
        }
    });
    var $author$project$Lia$Markdown$Survey$Update$Drop = function(a) {
        return {
            $: "Drop",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Update$Enter = function(a) {
        return {
            $: "Enter",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Update$None = {
        $: "None"
    };
    var $author$project$Lia$Markdown$Survey$Update$Source = function(a) {
        return {
            $: "Source",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$Update$Start = {
        $: "Start"
    };
    var $author$project$Lia$Markdown$Survey$Update$Target = {
        $: "Target"
    };
    var $author$project$Lia$Markdown$Survey$View$view_drop = F5(function(config, options, _v0, id, submitted) {
        var highlight = _v0.a;
        var active = _v0.b;
        var value = _v0.c;
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "padding", "0.5rem"),
                A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                A2($elm$html$Html$Attributes$style, "position", "relative"),
                $elm$html$Html$Events$onClick(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Target)),
                $tesk9$accessible_html$Accessibility$Role$button,
                $tesk9$accessible_html$Accessibility$Key$onKeyDown(submitted ? _List_Nil : _List_fromArray([
                    $tesk9$accessible_html$Accessibility$Key$enter(A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Target)),
                    $tesk9$accessible_html$Accessibility$Key$space(A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Target))
                ])),
                $elm$html$Html$Attributes$tabindex(submitted ? -1 : 0),
                A2($elm$html$Html$Attributes$style, "border", highlight ? "5px dotted #888" : "3px dotted #888"),
                A2($elm$html$Html$Attributes$style, "border-radius", "5px")
            ]), _List_fromArray([
                A2($elm$core$Maybe$withDefault, $author$project$Lia$Markdown$Inline$View$dropHere(_List_fromArray([
                    A2($elm$html$Html$Attributes$style, "height", "4rem"),
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "font-size", "4rem"),
                    A2($elm$html$Html$Attributes$style, "font-size", "min(10vw, 4rem)"),
                    A2($elm$html$Html$Attributes$style, "line-height", "1")
                ])), A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), A2($elm$core$Basics$composeR, $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script)), $elm$html$Html$div(_List_fromArray([
                    A2($elm$html$Html$Attributes$style, "border", "3px dotted #888"),
                    A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                    A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                    A2($elm$html$Html$Attributes$style, "background-color", "#f9f9f9"),
                    A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "justify-content", "center"),
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    $elm$html$Html$Attributes$draggable(submitted ? "false" : "true"),
                    A2($elm$html$Html$Events$on, "dragend", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Drop(value)))),
                    A2($elm$html$Html$Events$on, "dragstart", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Start))),
                    $tesk9$accessible_html$Accessibility$Role$button,
                    $elm$html$Html$Attributes$tabindex(0)
                ])))), A2($elm_community$list_extra$List$Extra$getAt, value, options))),
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Events$on, "dragenter", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Enter(true)))),
                    A2($elm$html$Html$Events$on, "dragleave", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Enter(false)))),
                    A2($elm$html$Html$Attributes$style, "height", "100%"),
                    A2($elm$html$Html$Attributes$style, "width", "100%"),
                    A2($elm$html$Html$Attributes$style, "position", "absolute"),
                    A2($elm$html$Html$Attributes$style, "top", "0"),
                    A2($elm$html$Html$Attributes$style, "left", "0"),
                    A2($elm$html$Html$Attributes$style, "z-index", "10"),
                    A2($elm$html$Html$Attributes$style, "display", active ? "block" : "none")
                ]), _List_Nil)
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "flex-wrap", "wrap"),
                A2($elm$html$Html$Attributes$style, "gap", "0.5rem"),
                A2($elm$html$Html$Attributes$style, "align-items", "flex-start"),
                A2($elm$html$Html$Attributes$style, "margin", "1rem 0px")
            ]), A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$indexedMap, F2(function(i, a) {
                return _Utils_eq(i, value) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($elm$html$Html$span, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "border", "3px dotted #888"),
                    A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                    A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                    A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                    A2($elm$html$Html$Attributes$style, "background-color", "#f9f9f9"),
                    A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                    $elm$html$Html$Attributes$draggable(submitted ? "false" : "true"),
                    A2($elm$html$Html$Events$on, "dragend", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Drop(i)))),
                    A2($elm$html$Html$Events$on, "dragstart", $elm$json$Json$Decode$succeed(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Start))),
                    $elm$html$Html$Events$onClick(submitted ? $author$project$Lia$Markdown$Survey$Update$None : A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Source(i))),
                    $tesk9$accessible_html$Accessibility$Key$onKeyDown(submitted ? _List_Nil : _List_fromArray([
                        $tesk9$accessible_html$Accessibility$Key$enter(A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Source(i))),
                        $tesk9$accessible_html$Accessibility$Key$space(A2($author$project$Lia$Markdown$Survey$Update$DropUpdate, id, $author$project$Lia$Markdown$Survey$Update$Source(i)))
                    ])),
                    A2($elm$html$Html$Attributes$style, "display", "inline-flex"),
                    $tesk9$accessible_html$Accessibility$Role$button,
                    $elm$html$Html$Attributes$tabindex(0)
                ]), A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script), A2($author$project$Lia$Markdown$Inline$View$viewer, config, a))));
            }), options)))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$View$view_matrix = F5(function(config, header, questions, fn, submitted) {
        var fnX = fn(submitted);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-table-responsive has-thead-sticky has-last-col-sticky")
        ]), _List_fromArray([
            A2($elm$html$Html$table, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table lia-survey-matrix is-alternating")
            ]), _List_fromArray([
                A2($elm$html$Html$thead, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-table__head lia-survey-matrix__head"),
                    $tesk9$accessible_html$Accessibility$Role$columnHeader
                ]), A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Inline$View$viewer(config), $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script))), $elm$html$Html$th(_List_fromArray([
                    $elm$html$Html$Attributes$class("lia-table__head lia-survey-matrix__head")
                ]))), header)),
                A2($elm$html$Html$tbody, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-table__body lia-survey-matrix__body"),
                    $tesk9$accessible_html$Accessibility$Role$rowHeader
                ]), A2($elm$core$List$map, fnX, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, questions)))
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$Update$Choose = {
        $: "Choose"
    };
    var $author$project$Lia$Markdown$Survey$Update$SelectUpdate = F2(function(a, b) {
        return {
            $: "SelectUpdate",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Survey$View$get_option = F3(function(config, id, list) {
        get_option: while(true){
            var _v0 = _Utils_Tuple2(id, list);
            if (_v0.b.b) {
                if (!_v0.a) {
                    var _v1 = _v0.b;
                    var x = _v1.a;
                    return A2($elm$html$Html$span, _List_Nil, A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script), A2($author$project$Lia$Markdown$Inline$View$viewer, config, x)));
                } else {
                    var i = _v0.a;
                    var _v2 = _v0.b;
                    var xs = _v2.b;
                    var $temp$config = config, $temp$id = i - 1, $temp$list = xs;
                    config = $temp$config;
                    id = $temp$id;
                    list = $temp$list;
                    continue get_option;
                }
            } else return $elm$html$Html$text($author$project$I18n$Translations$quizSelection(config.lang));
        }
    });
    var $author$project$Lia$Markdown$Survey$Update$Update = function(a) {
        return {
            $: "Update",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Survey$View$option = F4(function(config, id1, id2, opt) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-dropdown__option"),
            $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Survey$Update$SelectUpdate, id1, $author$project$Lia$Markdown$Survey$Update$Update(id2)))
        ]), A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Survey$Update$Script), A2($author$project$Lia$Markdown$Inline$View$viewer, config, opt)));
    });
    var $author$project$Lia$Markdown$Survey$View$view_select = F5(function(config, options, _v0, id, submitted) {
        var open = _v0.a;
        var value = _v0.b;
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-quiz__answers")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-dropdown")
            ]), _List_fromArray([
                A2($elm$html$Html$span, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-dropdown__selected"),
                    submitted ? $elm$html$Html$Attributes$disabled(true) : $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Survey$Update$SelectUpdate, id, $author$project$Lia$Markdown$Survey$Update$Choose))
                ]), _List_fromArray([
                    A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                        A3($author$project$Lia$Markdown$Survey$View$get_option, config, value, options)
                    ])),
                    A2($author$project$Lia$Utils$icon, open ? "icon-chevron-up" : "icon-chevron-down", _List_Nil)
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-dropdown__options"),
                    $elm$html$Html$Attributes$class(open ? "is-visible" : "is-hidden")
                ]), A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Survey$View$option, config, id), options))
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$Model$getErrorMessage = function(id) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$get(id), $elm$core$Maybe$andThen(function($) {
            return $.errorMsg;
        }));
    };
    var $author$project$Lia$Markdown$Survey$Model$get_submission_state = F2(function(vector, idx) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function($) {
            return $.submitted;
        }, A2($elm$core$Array$get, idx, vector)));
    });
    var $author$project$Lia$Markdown$Survey$Update$Submit = function(a) {
        return {
            $: "Submit",
            a: a
        };
    };
    var $author$project$I18n$Translations$surveySubmit = function(lang) {
        switch(lang.$){
            case "Am":
                return "አመድ";
            case "Ar":
                return "إرسال ";
            case "Bg":
                return "Изпрати";
            case "Bn":
                return "জমা দিন";
            case "De":
                return "Abschicken";
            case "Es":
                return "enviar";
            case "Fa":
                return "ارسال";
            case "Fr":
                return "Soumettre";
            case "Hi":
                return "सबमिट करें";
            case "Hy":
                return "ներկայացնել";
            case "It":
                return "Invia";
            case "Ja":
                return "送信";
            case "Ka":
                return "გაგზავნა";
            case "Ko":
                return "제출";
            case "Nl":
                return "Verzenden";
            case "Pa":
                return "ਜਮਾ ਕਰੋ";
            case "Pt":
                return "Enviar";
            case "Ru":
                return "отправить";
            case "Sw":
                return "Wasilisha";
            case "Tw":
                return "遞交";
            case "Uk":
                return "відіслати";
            case "Ur":
                return "جمع کریں";
            case "Zh":
                return "遞交";
            default:
                return "Submit";
        }
    };
    var $author$project$I18n$Translations$surveySubmitted = function(lang) {
        switch(lang.$){
            case "Am":
                return "እናመሰግናለን";
            case "Ar":
                return "تم الإرسال";
            case "Bg":
                return "Благодаря";
            case "Bn":
                return "ধন্যবাদ";
            case "De":
                return "Dankesch\xf6n";
            case "Es":
                return "enviado";
            case "Fa":
                return "تشکر";
            case "Fr":
                return "Merci";
            case "Hi":
                return "धन्यवाद";
            case "Hy":
                return "շնորհակալություն";
            case "It":
                return "Inviato";
            case "Ja":
                return "ありがとうございます";
            case "Ka":
                return "მადლობა";
            case "Ko":
                return "감사합니다";
            case "Nl":
                return "Vriendelijk bedankt";
            case "Pa":
                return "ਧੰਨਵਾਦ";
            case "Pt":
                return "Obrigado";
            case "Ru":
                return "отправлено";
            case "Sw":
                return "Asante";
            case "Tw":
                return "感謝";
            case "Uk":
                return "дякую";
            case "Ur":
                return "شکریہ";
            case "Zh":
                return "感謝";
            default:
                return "Thanks";
        }
    };
    var $author$project$Lia$Markdown$Survey$View$submit_button = F3(function(config, submitted, idx) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-quiz__control")
        ]), _List_fromArray([
            submitted ? A3($author$project$Lia$Utils$btn, {
                msg: $elm$core$Maybe$Nothing,
                tabbable: false,
                title: $author$project$I18n$Translations$surveySubmitted(config.lang)
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--outline lia-quiz__check"),
                $tesk9$accessible_html$Accessibility$Role$button
            ]), _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$surveySubmitted(config.lang))
            ])) : A3($author$project$Lia$Utils$btn, {
                msg: $elm$core$Maybe$Just($author$project$Lia$Markdown$Survey$Update$Submit(idx)),
                tabbable: false,
                title: $author$project$I18n$Translations$surveySubmit(config.lang)
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--outline lia-quiz__check"),
                $tesk9$accessible_html$Accessibility$Role$button
            ]), _List_fromArray([
                $elm$html$Html$text($author$project$I18n$Translations$surveySubmit(config.lang))
            ]))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$View$viewError = function(message) {
        if (message.$ === "Nothing") return $elm$html$Html$text("");
        else {
            var error = message.a;
            return A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-quiz__feedback text-error")
            ]), _List_fromArray([
                $elm$html$Html$text(error)
            ]));
        }
    };
    var $author$project$Lia$Markdown$Survey$View$view_survey = F6(function(config, attr, _class, model, idx, fn) {
        var submitted = A2($author$project$Lia$Markdown$Survey$Model$get_submission_state, model, idx);
        return A2($elm$html$Html$div, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-quiz lia-quiz-" + (_class + (submitted ? "" : " open")), attr), _List_fromArray([
            fn(submitted),
            A3($author$project$Lia$Markdown$Survey$View$submit_button, config, submitted, idx),
            $author$project$Lia$Markdown$Survey$View$viewError(A2($author$project$Lia$Markdown$Survey$Model$getErrorMessage, idx, model))
        ]));
    });
    var $author$project$Lia$Markdown$Survey$Update$TextUpdate = F2(function(a, b) {
        return {
            $: "TextUpdate",
            a: a,
            b: b
        };
    });
    var $elm$html$Html$Attributes$rows = function(n) {
        return A2(_VirtualDom_attribute, "rows", $elm$core$String$fromInt(n));
    };
    var $author$project$I18n$Translations$surveyText = function(lang) {
        switch(lang.$){
            case "Am":
                return "ግል ጽሑፍ ያስገቡ...";
            case "Ar":
                return "أدخل نص...";
            case "Bg":
                return "Въведете текст...";
            case "Bn":
                return "কিছু লিখুন...";
            case "De":
                return "Texteingabe ...";
            case "Es":
                return "introducir texto";
            case "Fa":
                return "لطفا متن وارد کنید";
            case "Fr":
                return "Saisie de texte ...";
            case "Hi":
                return "टेक्स्ट इनपुट ...";
            case "Hy":
                return "Մուտքագրեք որոշ տեքստ";
            case "It":
                return "Immetti del testo";
            case "Ja":
                return "テキストを入力してください...";
            case "Ka":
                return "შეიყვანეთ ტექსტი...";
            case "Ko":
                return "내용을 입력해주세요.";
            case "Nl":
                return "Tekstinvoer ...";
            case "Pa":
                return "ਕੁਝ ਟੈਕਸਟ ਦਿਓ...";
            case "Pt":
                return "Digite algum texto...";
            case "Ru":
                return "ввод текста";
            case "Sw":
                return "Weka maandishi...";
            case "Tw":
                return "輸入文字...";
            case "Uk":
                return "Ввід тексту ...";
            case "Ur":
                return "کچھ متن درج کریں...";
            case "Zh":
                return "輸入文字...";
            default:
                return "Enter some text...";
        }
    };
    var $author$project$Lia$Markdown$Survey$View$view_text = F5(function(config, str, lines, idx, submitted) {
        var attr = _List_fromArray([
            $elm$html$Html$Events$onInput($author$project$Lia$Markdown$Survey$Update$TextUpdate(idx)),
            $elm$html$Html$Attributes$placeholder($author$project$I18n$Translations$surveyText(config.lang)),
            $elm$html$Html$Attributes$value(str),
            $elm$html$Html$Attributes$disabled(submitted)
        ]);
        if (lines === 1) return A2($elm$html$Html$input, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-input lia-quiz__input"), attr), _List_Nil);
        else return A2($elm$html$Html$textarea, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-input lia-quiz__input"), A2($elm$core$List$cons, $author$project$Lia$Utils$blockKeydown(A2($author$project$Lia$Markdown$Survey$Update$TextUpdate, idx, str)), A2($elm$core$List$cons, $elm$html$Html$Attributes$rows(lines), attr))), _List_Nil);
    });
    var $author$project$Lia$Markdown$Survey$View$view_vector = F3(function(questions, fn, submitted) {
        var fnX = fn(submitted);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-quiz__answers")
        ]), A2($elm$core$List$map, fnX, questions));
    });
    var $author$project$Lia$Markdown$Survey$View$view = F4(function(config, attr, survey, model) {
        return _Utils_Tuple2(A2($elm$core$Maybe$andThen, function($) {
            return $.scriptID;
        }, A2($elm$core$Array$get, survey.id, model)), function() {
            var _v0 = survey.survey;
            switch(_v0.$){
                case "Text":
                    var lines = _v0.a;
                    return A4($author$project$Lia$Markdown$Survey$View$viewTextSync, config, lines, A2($author$project$Lia$Markdown$Survey$View$getSync, config, survey.id), A6($author$project$Lia$Markdown$Survey$View$view_survey, config, attr, "text", model, survey.id, A4($author$project$Lia$Markdown$Survey$View$view_text, config, A2($author$project$Lia$Markdown$Survey$Model$get_text_state, model, survey.id), lines, survey.id)));
                case "Select":
                    var inlines = _v0.a;
                    return A4($author$project$Lia$Markdown$Survey$View$viewSelectSync, config, inlines, A2($author$project$Lia$Markdown$Survey$View$getSync, config, survey.id), A6($author$project$Lia$Markdown$Survey$View$view_survey, config, attr, "select", model, survey.id, A4($author$project$Lia$Markdown$Survey$View$view_select, config, inlines, A2($author$project$Lia$Markdown$Survey$Model$get_select_state, model, survey.id), survey.id)));
                case "DragAndDrop":
                    var inlines = _v0.a;
                    return A4($author$project$Lia$Markdown$Survey$View$viewSelectSync, config, inlines, A2($author$project$Lia$Markdown$Survey$View$getSync, config, survey.id), A6($author$project$Lia$Markdown$Survey$View$view_survey, config, attr, "drop", model, survey.id, A4($author$project$Lia$Markdown$Survey$View$view_drop, config, inlines, A2($author$project$Lia$Markdown$Survey$Model$get_drop_state, model, survey.id), survey.id)));
                case "Vector":
                    var button = _v0.a;
                    var questions = _v0.b;
                    var analysis = _v0.c;
                    return A5($author$project$Lia$Markdown$Survey$View$viewVectorSync, config, analysis, questions, A2($author$project$Lia$Markdown$Survey$View$getSync, config, survey.id), A6($author$project$Lia$Markdown$Survey$View$view_survey, config, attr, button ? "single-choice" : "multiple-choice", model, survey.id, A2($author$project$Lia$Markdown$Survey$View$view_vector, questions, A4($author$project$Lia$Markdown$Survey$View$vector, config, button, $author$project$Lia$Markdown$Survey$Update$VectorUpdate(survey.id), A2($author$project$Lia$Markdown$Survey$Model$get_vector_state, model, survey.id)))));
                default:
                    var button = _v0.a;
                    var header = _v0.b;
                    var vars = _v0.c;
                    var questions = _v0.d;
                    return A5($author$project$Lia$Markdown$Survey$View$viewMatrixSync, config, questions, vars, A2($author$project$Lia$Markdown$Survey$View$getSync, config, survey.id), A6($author$project$Lia$Markdown$Survey$View$view_survey, config, attr, "matrix", model, survey.id, A4($author$project$Lia$Markdown$Survey$View$view_matrix, config, header, questions, A5($author$project$Lia$Markdown$Survey$View$matrix, config, button, $author$project$Lia$Markdown$Survey$Update$MatrixUpdate(survey.id), A2($author$project$Lia$Markdown$Survey$Model$get_matrix_state, model, survey.id), vars))));
            }
        }());
    });
    var $author$project$Lia$Markdown$Table$View$diagramShow = F2(function(attr, active) {
        return A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-show", attr) ? !active : active;
    });
    var $tesk9$accessible_html$Accessibility$Role$gridCell = $tesk9$accessible_html$Accessibility$Utils$role("gridcell");
    var $tesk9$accessible_html$Accessibility$Role$row = $tesk9$accessible_html$Accessibility$Utils$role("row");
    var $elm$html$Html$Attributes$scope = $elm$html$Html$Attributes$stringProperty("scope");
    var $author$project$Lia$Markdown$Table$View$sort = F2(function(state, matrix) {
        if (!_Utils_eq(state.column, -1)) {
            var sorted = A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber), A2($author$project$Lia$Markdown$Table$Matrix$column, state.column, matrix))) ? A2($elm$core$List$sortBy, A2($elm$core$Basics$composeR, $author$project$Lia$Utils$get(state.column), A2($elm$core$Basics$composeR, $elm$core$Maybe$andThen(function($) {
                return $._float;
            }), $elm$core$Maybe$withDefault(0))), matrix) : A2($elm$core$List$sortBy, A2($elm$core$Basics$composeR, $author$project$Lia$Utils$get(state.column), A2($elm$core$Basics$composeR, $elm$core$Maybe$map(A2($elm$core$Basics$composeR, function($) {
                return $.string;
            }, $elm$core$String$toLower)), $elm$core$Maybe$withDefault(""))), matrix);
            return state.dir ? sorted : $elm$core$List$reverse(sorted);
        } else return matrix;
    });
    var $author$project$Lia$Markdown$Table$Update$Sort = F2(function(a, b) {
        return {
            $: "Sort",
            a: a,
            b: b
        };
    });
    var $author$project$I18n$Translations$sortAsc = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቅደም አስቀድሞ";
            case "Ar":
                return "ترتيب تصاعدي";
            case "Bn":
                return "আরোহী ক্রমানুসারে সাজান";
            case "De":
                return "aufsteigend sortieren";
            case "Es":
                return "orden ascendente";
            case "Fr":
                return "trier par ordre croissant";
            case "Hi":
                return "आरोही क्रमबद्ध करें";
            case "It":
                return "ordine crescente";
            case "Ja":
                return "昇順に並べ替え";
            case "Ka":
                return "ზრდადობით დალაგება";
            case "Ko":
                return "오름차순 정렬";
            case "Nl":
                return "oplopend sorteren";
            case "Pa":
                return "ਚੜਦੀ ਕ੍ਰਮ ਵਿੱਚ";
            case "Pt":
                return "ordenar em ordem crescente";
            case "Ru":
                return "сортировать по возрастанию";
            case "Sw":
                return "kupanga kupanda";
            case "Uk":
                return "сортування за зростанням";
            case "Ur":
                return "صعودی ترتیب";
            default:
                return "sort ascending";
        }
    };
    var $author$project$I18n$Translations$sortDesc = function(lang) {
        switch(lang.$){
            case "Am":
                return "ታሪክ አስቀድሞ";
            case "Ar":
                return "ترتيب تنازلي";
            case "Bn":
                return "অবরোহী ক্রমানুসারে সাজান";
            case "De":
                return "absteigend sortieren";
            case "Es":
                return "orden descendiente";
            case "Fr":
                return "trier par ordre d\xe9croissant";
            case "Hi":
                return "अवरोही क्रमबद्ध करें";
            case "It":
                return "ordine discendente";
            case "Ja":
                return "降順に並べ替え";
            case "Ka":
                return "კლებადობით დალაგება";
            case "Ko":
                return "내림차순 정렬";
            case "Nl":
                return "sorteer aflopend";
            case "Pa":
                return "ਡਿਸਕੰਡਿੰਗ ਕ੍ਰਮ ਵਿੱਚ";
            case "Pt":
                return "ordenar em ordem decrescente";
            case "Ru":
                return "сортировка по убыванию";
            case "Sw":
                return "panga kushuka";
            case "Uk":
                return "сортувати за спаданням";
            case "Ur":
                return "نزولی ترتیب";
            default:
                return "sort descending";
        }
    };
    var $author$project$I18n$Translations$sortNot = function(lang) {
        switch(lang.$){
            case "Am":
                return "ተመርጧል";
            case "Ar":
                return "غير مرتب";
            case "Bn":
                return "বিন্যাসযোগ্য নয়";
            case "De":
                return "nicht sortiert";
            case "Es":
                return "no ordenado";
            case "Fr":
                return "non tri\xe9";
            case "Hi":
                return "क्रमबद्ध नहीं";
            case "It":
                return "non ordinato";
            case "Ja":
                return "未並べ替え";
            case "Ka":
                return "არ არის დალაგებული";
            case "Ko":
                return "정렬 안 됨";
            case "Nl":
                return "niet gesorteerd";
            case "Pa":
                return "ਨਾ ਸੋਰਟ";
            case "Pt":
                return "n\xe3o ordenado";
            case "Ru":
                return "не отсортировано";
            case "Sw":
                return "haijapangwa";
            case "Uk":
                return "не сортується";
            case "Ur":
                return "ترتیب نہیں دی گئی";
            default:
                return "not sorted";
        }
    };
    var $author$project$Lia$Markdown$Table$View$header = function(_v0) {
        var lang = _v0.lang;
        var viewer = _v0.viewer;
        var id = _v0.id;
        var format = _v0.format;
        var state = _v0.state;
        var column = _v0.column;
        var inline = _v0.inline;
        var sortable = _v0.sortable;
        return _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class(format)
            ]), viewer(inline)),
            sortable ? A2($author$project$Lia$Utils$btnIcon, {
                icon: _Utils_eq(state.column, column) ? state.dir ? "icon-sort-asc" : "icon-sort-desc" : "icon-sort-desc",
                msg: $elm$core$Maybe$Just($author$project$Lia$Markdown$Update$UpdateTable(A2($author$project$Lia$Markdown$Table$Update$Sort, id, column))),
                tabbable: true,
                title: _Utils_eq(state.column, column) && state.dir ? $author$project$I18n$Translations$sortDesc(lang) : _Utils_eq(state.column, column) && !state.dir ? $author$project$I18n$Translations$sortNot(lang) : $author$project$I18n$Translations$sortAsc(lang)
            }, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn--transparent lia-table__sort"),
                $elm$html$Html$Attributes$class(_Utils_eq(state.column, column) ? "active" : "")
            ])) : $elm$html$Html$text("")
        ]);
    };
    var $author$project$Lia$Markdown$Table$View$isSortable = F2(function(_default, attr) {
        return A2($elm$core$Maybe$withDefault, _default, A2($author$project$Lia$Markdown$HTML$Attributes$isSetMaybe, "data-sortable", attr));
    });
    var $tesk9$accessible_html$Accessibility$Aria$sortAscending = A2($tesk9$accessible_html$Accessibility$Utils$aria, "sort", "ascending");
    var $tesk9$accessible_html$Accessibility$Aria$sortDescending = A2($tesk9$accessible_html$Accessibility$Utils$aria, "sort", "descending");
    var $author$project$Lia$Markdown$Table$View$view_head2 = F6(function(lang, sortable, viewer, id, format, state) {
        return A2($elm$core$Basics$composeR, A2($elm$core$List$map2, $elm$core$Tuple$pair, format), $elm$core$List$indexedMap(F2(function(i, _v0) {
            var f = _v0.a;
            var _v1 = _v0.b;
            var a = _v1.a;
            var r = _v1.b;
            return A2($elm$html$Html$th, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-table__header"), A2($elm$core$List$cons, _Utils_eq(i, id) ? state.dir ? $tesk9$accessible_html$Accessibility$Aria$sortAscending : $tesk9$accessible_html$Accessibility$Aria$sortDescending : $elm$html$Html$Attributes$class(""), A2($elm$core$List$cons, $elm$html$Html$Attributes$scope("col"), A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Role$columnHeader, A2($elm$core$List$cons, $elm$html$Html$Attributes$class(f), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(a)))))), $author$project$Lia$Markdown$Table$View$header({
                column: i,
                format: f,
                id: id,
                inline: r,
                lang: lang,
                sortable: A2($author$project$Lia$Markdown$Table$View$isSortable, sortable, a),
                state: state,
                viewer: viewer
            }));
        })));
    });
    var $author$project$Lia$Markdown$Table$View$formatted = F8(function(lang, sortable, viewer, head, format, rows, id, state) {
        return _List_fromArray([
            A2($elm$html$Html$thead, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__head")
            ]), $elm$core$List$singleton(A2($elm$html$Html$tr, _List_fromArray([
                $tesk9$accessible_html$Accessibility$Role$row
            ]), A7($author$project$Lia$Markdown$Table$View$view_head2, lang, sortable, viewer, id, format, state, head)))),
            A3($elm$html$Html$Keyed$node, "tbody", _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__body")
            ]), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$indexedMap($elm$core$Tuple$pair), A2($elm$core$Basics$composeR, A2($elm$core$List$map2, F2(function(f, _v0) {
                var i = _v0.a;
                var e = _v0.b;
                return _Utils_Tuple2(e.id, A2($elm$html$Html$td, (!i ? $elm$core$List$append(_List_fromArray([
                    $tesk9$accessible_html$Accessibility$Role$rowHeader,
                    $elm$html$Html$Attributes$scope("row")
                ])) : $elm$core$List$cons($tesk9$accessible_html$Accessibility$Role$gridCell))(A2($elm$core$List$cons, $elm$html$Html$Attributes$class(f), A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-table__data"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(e.attr)))), viewer(e.inlines)));
            }), format), A2($elm$core$Basics$composeR, $elm$core$List$unzip, A2($elm$core$Basics$composeR, $elm$core$Tuple$mapFirst($elm$core$String$concat), $elm$core$Tuple$mapSecond($elm$html$Html$tr(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__row"),
                $tesk9$accessible_html$Accessibility$Role$row
            ]))))))), A2($author$project$Lia$Markdown$Table$View$sort, state, rows)))
        ]);
    });
    var $author$project$Lia$Markdown$Table$View$getState = function(id) {
        return A2($elm$core$Basics$composeR, $elm$core$Array$get(id), $elm$core$Maybe$withDefault(A3($author$project$Lia$Markdown$Table$Types$State, -1, false, false)));
    };
    var $author$project$I18n$Translations$chartBar = function(lang) {
        switch(lang.$){
            case "Am":
                return "ባር ሾስትን ጫን ቦታ";
            case "Ar":
                return "مخطط شريطي";
            case "Bn":
                return "বার চার্ট";
            case "De":
                return "Balkendiagramm";
            case "Fr":
                return "Diagramme en b\xe2tons";
            case "Hi":
                return "बार चार्ट";
            case "It":
                return "Diagramma a barre";
            case "Ja":
                return "棒グラフ";
            case "Ka":
                return "ბარი დიაგრამა";
            case "Ko":
                return "바 차트";
            case "Pa":
                return "ਬਾਰ ਚਾਰਟ";
            case "Pt":
                return "Gr\xe1fico de barras";
            case "Sw":
                return "Chati ya paa";
            case "Tw":
                return "柱状图";
            case "Ur":
                return "بار چارٹ";
            case "Zh":
                return "柱状图";
            default:
                return "Bar chart";
        }
    };
    var $author$project$I18n$Translations$chartBoxplot = function(lang) {
        switch(lang.$){
            case "Am":
                return "ቦክስ ፕሎት";
            case "Bn":
                return "বক্স প্লট";
            case "De":
                return "Boxplot";
            case "Fr":
                return "Bo\xeete \xe0 moustaches";
            case "Hi":
                return "बॉक्सप्लॉट";
            case "It":
                return "Diagramma a scatola";
            case "Ja":
                return "ボックスプロット";
            case "Ka":
                return "ყუთოვანი დიაგრამა";
            case "Ko":
                return "상자 그림";
            case "Pa":
                return "ਬਾਕਸਪਲਾਟ";
            case "Pt":
                return "Diagrama de caixa";
            case "Sw":
                return "Boxplot";
            case "Tw":
                return "箱型图";
            case "Ur":
                return "باکس پلاٹ";
            case "Zh":
                return "箱型图";
            default:
                return "Boxplot";
        }
    };
    var $author$project$I18n$Translations$chartFunnel = function(lang) {
        switch(lang.$){
            case "Am":
                return "ፋንኤል ጫን ቦታ";
            case "Ar":
                return "مخطط قمعي";
            case "Bn":
                return "ফানেল চার্ট";
            case "De":
                return "Trichterdiagramm";
            case "Fr":
                return "Entonnoir";
            case "Hi":
                return "फ़नल चार्ट";
            case "It":
                return "Grafico a imbuto";
            case "Ja":
                return "ファネルチャート";
            case "Ka":
                return "ფანელი დიაგრამა";
            case "Ko":
                return "퍼널 차트";
            case "Pt":
                return "Gr\xe1fico de funil";
            case "Sw":
                return "Chati ya faneli";
            case "Tw":
                return "漏斗图";
            case "Ur":
                return "فنل چارٹ";
            case "Zh":
                return "漏斗图";
            default:
                return "Funnel chart";
        }
    };
    var $author$project$I18n$Translations$chartGraph = function(lang) {
        switch(lang.$){
            case "Am":
                return "ባህሪዎች ሾስት";
            case "Ar":
                return "رسم بياني";
            case "Bn":
                return "সম্পর্ক গ্রাফ";
            case "De":
                return "Beziehungsgrafik";
            case "Fr":
                return "Graphe de relations";
            case "Hi":
                return "रिलेशनशिप ग्राफ";
            case "It":
                return "Grafico delle relazioni";
            case "Ja":
                return "関係グラフ";
            case "Ka":
                return "კავშირების გრაფიკი";
            case "Ko":
                return "관계도";
            case "Pt":
                return "Gr\xe1fico de relacionamento";
            case "Sw":
                return "Grafu ya uhusiano";
            case "Tw":
                return "关系图";
            case "Ur":
                return "رابطہ گراف";
            case "Zh":
                return "关系图";
            default:
                return "Relationship graph";
        }
    };
    var $author$project$I18n$Translations$chartHeatmap = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሜይፕ ሾስት";
            case "Ar":
                return "خريطة التمثيل اللوني";
            case "Bn":
                return "হিটম্যাপ";
            case "De":
                return "Heatmap";
            case "Fr":
                return "Carte de chaleur";
            case "Hi":
                return "हीटमैप";
            case "It":
                return "Mappa termica";
            case "Ja":
                return "ヒートマップ";
            case "Ka":
                return "თბილობის რუქა";
            case "Ko":
                return "히트 맵";
            case "Pa":
                return "ਹੀਟਮੈਪ";
            case "Pt":
                return "Mapa de calor";
            case "Sw":
                return "Ramani ya joto";
            case "Tw":
                return "热力图";
            case "Ur":
                return "ہیٹ میپ";
            case "Zh":
                return "热力图";
            default:
                return "Heat map";
        }
    };
    var $author$project$I18n$Translations$chartLine = function(lang) {
        switch(lang.$){
            case "Am":
                return "ስብስብ ሾስትን ጫን ቦታ";
            case "Ar":
                return "مخطط خطي";
            case "Bn":
                return "লাইন চার্ট";
            case "De":
                return "Liniendiagramm";
            case "Fr":
                return "Graphique lin\xe9aire";
            case "Hi":
                return "लाइन चार्ट";
            case "It":
                return "Diagramma a linee";
            case "Ja":
                return "折れ線グラフ";
            case "Ka":
                return "ხაზიანი დიაგრამა";
            case "Ko":
                return "라인 차트";
            case "Pa":
                return "ਰੇਖਾ ਚਾਰਟ";
            case "Pt":
                return "Gr\xe1fico de linhas";
            case "Sw":
                return "Chati ya mstari";
            case "Tw":
                return "折线图";
            case "Ur":
                return "لائن چارٹ";
            case "Zh":
                return "折线图";
            default:
                return "Line chart";
        }
    };
    var $author$project$I18n$Translations$chartMap = function(lang) {
        switch(lang.$){
            case "Am":
                return "ካርታ";
            case "Ar":
                return "خريطة";
            case "Bn":
                return "ম্যাপ";
            case "De":
                return "Karte";
            case "Fr":
                return "Carte";
            case "Hi":
                return "मैप";
            case "It":
                return "Mappa";
            case "Ja":
                return "地図";
            case "Ka":
                return "რუქა";
            case "Ko":
                return "맵";
            case "Pa":
                return "ਨਕਸ਼ਾ";
            case "Pt":
                return "Mapa";
            case "Sw":
                return "ramani";
            case "Tw":
                return "地图";
            case "Ur":
                return "نقشہ";
            case "Zh":
                return "地图";
            default:
                return "Map";
        }
    };
    var $author$project$I18n$Translations$chartParallel = function(lang) {
        switch(lang.$){
            case "Am":
                return "ፓራለል ኮይላርድን ቦታ";
            case "Ar":
                return "متوازي";
            case "Bn":
                return "প্যারালেল কো঑র্ডিনেট ম্যাপ";
            case "De":
                return "Parallele Koordinatenkarte";
            case "Fr":
                return "Carte de coordonn\xe9es parall\xe8les";
            case "Hi":
                return "समानांतर समन्वय मानचित्र";
            case "It":
                return "Mappa a coordinate parallele";
            case "Ja":
                return "パラレル座標マップ";
            case "Ka":
                return "პარალელური კოორდინატების რუქა";
            case "Ko":
                return "평행 좌표 맵";
            case "Pt":
                return "Mapa de coordenadas paralelas";
            case "Sw":
                return "Ramani ya kuratibu sambamba";
            case "Tw":
                return "平行坐标图";
            case "Ur":
                return "متوازی کوآرڈینیٹ نقشہ";
            case "Zh":
                return "平行坐标图";
            default:
                return "Parallel coordinate map";
        }
    };
    var $author$project$I18n$Translations$chartPie = function(lang) {
        switch(lang.$){
            case "Am":
                return "ፒ ሾስትን ጫን ቦታ";
            case "Ar":
                return "مخطط دائري";
            case "Bn":
                return "পাই চার্ট";
            case "De":
                return "Tortendiagramm";
            case "Fr":
                return "Diagramme en secteurs";
            case "Hi":
                return "पाई चार्ट";
            case "It":
                return "Diagramma a torta";
            case "Ja":
                return "円グラフ";
            case "Ka":
                return "პაი დიაგრამა";
            case "Ko":
                return "파이 차트";
            case "Pa":
                return "ਪਾਈ ਚਾਰਟ";
            case "Pt":
                return "Gr\xe1fico de pizza";
            case "Sw":
                return "chati ya pai";
            case "Tw":
                return "饼图";
            case "Ur":
                return "پائی چارٹ";
            case "Zh":
                return "饼图";
            default:
                return "Pie chart";
        }
    };
    var $author$project$I18n$Translations$chartRadar = function(lang) {
        switch(lang.$){
            case "Am":
                return "ራዳር ሾስት";
            case "Ar":
                return "مخطط نسيجي";
            case "Bn":
                return "রেডার চার্ট";
            case "De":
                return "Radar-Karte";
            case "Fr":
                return "Graphique en radar";
            case "Hi":
                return "रडार मैप";
            case "It":
                return "Diagramma Radar";
            case "Ja":
                return "レーダーチャート";
            case "Ka":
                return "რადარი დიაგრამა";
            case "Ko":
                return "레이더 차트";
            case "Pa":
                return "ਰਾਡਾਰ ਚਾਰਟ";
            case "Pt":
                return "Gr\xe1fico de radar";
            case "Sw":
                return "Chati ya rada";
            case "Tw":
                return "雷达图";
            case "Ur":
                return "ریڈار چارٹ";
            case "Zh":
                return "雷达图";
            default:
                return "Radar chart";
        }
    };
    var $author$project$I18n$Translations$chartSankey = function(lang) {
        switch(lang.$){
            case "Am":
                return "ሳንኪ ዲዚግም";
            case "Ar":
                return "مخطط سانكي";
            case "Bn":
                return "স্যাঙ্কি ডায়াগ্রাম";
            case "De":
                return "Sankey-Diagramm";
            case "Fr":
                return "Diagramme de Sankey";
            case "Hi":
                return "सैंके आरेख";
            case "It":
                return "Diagramma di Sankey";
            case "Ja":
                return "サンキーダイアグラム";
            case "Ka":
                return "სანკის დიაგრამა";
            case "Ko":
                return "생키 다이어그램";
            case "Pt":
                return "Diagrama de Sankey";
            case "Sw":
                return "mchoro wa Sankey";
            case "Tw":
                return "桑基图";
            case "Ur":
                return "سنکی ڈایاگرام";
            case "Zh":
                return "桑基图";
            default:
                return "Sankey diagram";
        }
    };
    var $author$project$I18n$Translations$chartScatter = function(lang) {
        switch(lang.$){
            case "Am":
                return "መስመር ግርግር ስቀር ቦታ";
            case "Ar":
                return "مخطط مبعثر";
            case "Bn":
                return "স্ক্যাটার প্লট";
            case "De":
                return "Streudiagramm";
            case "Fr":
                return "Nuage de points";
            case "Hi":
                return "स्कैटरप्लॉट";
            case "It":
                return "Diagramma a dispersione";
            case "Ja":
                return "散布図";
            case "Ka":
                return "გადანაწილების დიაგრამა";
            case "Ko":
                return "분포도";
            case "Pa":
                return "ਸਿਆਨਾ ਚਿੰਨ੍ਹ ਚਾਰਟ";
            case "Pt":
                return "Gr\xe1fico de dispers\xe3o";
            case "Sw":
                return "Kutawanya njama";
            case "Tw":
                return "散点图";
            case "Ur":
                return "اسکیٹر پلاٹ";
            case "Zh":
                return "散点图";
            default:
                return "Scatter plot";
        }
    };
    var $author$project$Lia$Markdown$Table$Update$Toggle = function(a) {
        return {
            $: "Toggle",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Table$View$toggleBtn = F2(function(id, _v0) {
        var name = _v0.a;
        var title = _v0.b;
        return A3($author$project$Lia$Utils$btn, {
            msg: $elm$core$Maybe$Just($author$project$Lia$Markdown$Update$UpdateTable($author$project$Lia$Markdown$Table$Update$Toggle(id))),
            tabbable: true,
            title: title
        }, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-btn--outline lia-plot__switch mb-1"),
            $tesk9$accessible_html$Accessibility$Aria$label(name === "table" ? "switch to table representation" : "switch to visualization in mode " + title)
        ]), _List_fromArray([
            A2($author$project$Lia$Utils$icon, "icon-" + name, _List_Nil),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-btn__text")
            ]), _List_fromArray([
                $elm$html$Html$text(title)
            ]))
        ]));
    });
    var $tesk9$accessible_html$Accessibility$Role$grid = $tesk9$accessible_html$Accessibility$Utils$role("grid");
    var $tesk9$accessible_html$Accessibility$Aria$readOnly = A2($elm$core$Basics$composeL, $tesk9$accessible_html$Accessibility$Utils$aria("readonly"), $tesk9$accessible_html$Accessibility$Utils$toBoolString);
    var $author$project$Lia$Markdown$Table$View$viewTable = F3(function(sticky, attr, body) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$classList(_List_fromArray([
                _Utils_Tuple2("lia-table-responsive", true),
                _Utils_Tuple2("has-thead-sticky", true),
                _Utils_Tuple2("has-first-col-sticky", sticky)
            ])),
            $tesk9$accessible_html$Accessibility$Live$polite
        ]), _List_fromArray([
            A2($elm$html$Html$table, A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Role$grid, A2($elm$core$List$cons, $tesk9$accessible_html$Accessibility$Aria$readOnly(true), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-table", attr))), body)
        ]));
    });
    var $author$project$Lia$Markdown$Table$View$toTable = F5(function(lang, id, attr, _class, body) {
        return _Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$None) ? A3($author$project$Lia$Markdown$Table$View$viewTable, false, attr, body) : A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-plot")
        ]), _List_fromArray([
            A2($author$project$Lia$Markdown$Table$View$toggleBtn, id, function() {
                switch(_class.$){
                    case "BarChart":
                        return _Utils_Tuple2("barchart", $author$project$I18n$Translations$chartBar(lang));
                    case "PieChart":
                        return _Utils_Tuple2("piechart", $author$project$I18n$Translations$chartPie(lang));
                    case "LinePlot":
                        return _Utils_Tuple2("lineplot", $author$project$I18n$Translations$chartLine(lang));
                    case "HeatMap":
                        return _Utils_Tuple2("heatmap", $author$project$I18n$Translations$chartHeatmap(lang));
                    case "Radar":
                        return _Utils_Tuple2("radar", $author$project$I18n$Translations$chartRadar(lang));
                    case "Parallel":
                        return _Utils_Tuple2("parallel", $author$project$I18n$Translations$chartParallel(lang));
                    case "Graph":
                        return _Utils_Tuple2("graph", $author$project$I18n$Translations$chartGraph(lang));
                    case "Map":
                        return _Utils_Tuple2("map", $author$project$I18n$Translations$chartMap(lang));
                    case "Sankey":
                        return _Utils_Tuple2("sankey", $author$project$I18n$Translations$chartSankey(lang));
                    case "ScatterPlot":
                        return _Utils_Tuple2("scatterplot", $author$project$I18n$Translations$chartScatter(lang));
                    case "BoxPlot":
                        return _Utils_Tuple2("boxplot", $author$project$I18n$Translations$chartBoxplot(lang));
                    case "Funnel":
                        return _Utils_Tuple2("funnel", $author$project$I18n$Translations$chartFunnel(lang));
                    default:
                        return _Utils_Tuple2("", "");
                }
            }()),
            A3($author$project$Lia$Markdown$Table$View$viewTable, true, attr, body)
        ]));
    });
    var $author$project$Lia$Markdown$Table$View$view_head1 = F5(function(lang, sortable, viewer, id, state) {
        return $elm$core$List$indexedMap(F2(function(i, r) {
            return A2($elm$html$Html$td, A2($elm$core$List$cons, $elm$html$Html$Attributes$class($author$project$Const$align._default), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(r.attr)), $author$project$Lia$Markdown$Table$View$header({
                column: i,
                format: $author$project$Const$align._default,
                id: id,
                inline: r.inlines,
                lang: lang,
                sortable: A2($author$project$Lia$Markdown$Table$View$isSortable, sortable, r.attr),
                state: state,
                viewer: viewer
            }));
        }));
    });
    var $author$project$Lia$Markdown$Table$View$unformatted = F6(function(lang, sortable, viewer, rows, id, state) {
        var _v0 = A2($author$project$Lia$Markdown$Table$View$sort, state, rows);
        if (_v0.b) {
            var head = _v0.a;
            var tail = _v0.b;
            return A2($elm$core$List$cons, A2($elm$html$Html$tr, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__row"),
                $tesk9$accessible_html$Accessibility$Role$row
            ]), A6($author$project$Lia$Markdown$Table$View$view_head1, lang, sortable, viewer, id, state, head)), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$map(function(e) {
                return A2($elm$html$Html$td, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("lia-table__data"), $author$project$Lia$Markdown$HTML$Attributes$toAttribute(e.attr)), viewer(e.inlines));
            }), $elm$html$Html$tr(_List_fromArray([
                $elm$html$Html$Attributes$class("lia-table__row"),
                $tesk9$accessible_html$Accessibility$Role$row
            ]))), tail));
        } else return _List_Nil;
    });
    var $author$project$Lia$Markdown$Table$Update$NoOp = {
        $: "NoOp"
    };
    var $author$project$Lia$Markdown$Chart$Types$Horizontal = {
        $: "Horizontal"
    };
    var $author$project$Lia$Markdown$Table$View$diagramOrientation = function(attr) {
        var _v0 = A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-orientation", attr);
        _v0$2: while(true){
            if (_v0.$ === "Just") switch(_v0.a){
                case "horizontal":
                    return $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Horizontal);
                case "vertical":
                    return $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical);
                default:
                    break _v0$2;
            }
            else break _v0$2;
        }
        return $elm$core$Maybe$Nothing;
    };
    var $author$project$Lia$Markdown$Chart$View$getColor = function(i) {
        return A2($elm$core$Maybe$withDefault, _Utils_chr("~"), A2($elm$core$Maybe$map, $elm$core$Tuple$first, $elm$core$String$uncons(A3($elm$core$String$slice, i, -1, "*abcdefghijklmnopqrstuvwxyz+ABCDEFGHIJKLMNOPQRSTUVWXYZ#1234567890!\xa7$%&/()=?'_.,;:<>|^\xb0~"))));
    };
    var $author$project$Lia$Markdown$Table$View$getMinMax = F2(function(name, attr) {
        var _v0 = A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$core$String$split(","), $elm$core$List$map($elm$core$String$trim)), A2($author$project$Lia$Markdown$HTML$Attributes$get, name, attr));
        _v0$5: while(true){
            if (_v0.$ === "Just" && _v0.a.b) {
                if (!_v0.a.b.b) {
                    var _v7 = _v0.a;
                    var min = _v7.a;
                    return {
                        max: $elm$core$Maybe$Nothing,
                        min: $elm$core$Maybe$Just(min)
                    };
                } else {
                    if (!_v0.a.b.b.b) {
                        if (_v0.a.a === "") {
                            if (_v0.a.b.a === "") {
                                var _v1 = _v0.a;
                                var _v2 = _v1.b;
                                return {
                                    max: $elm$core$Maybe$Nothing,
                                    min: $elm$core$Maybe$Nothing
                                };
                            } else {
                                var _v3 = _v0.a;
                                var _v4 = _v3.b;
                                var max = _v4.a;
                                return {
                                    max: $elm$core$Maybe$Just(max),
                                    min: $elm$core$Maybe$Nothing
                                };
                            }
                        } else if (_v0.a.b.a === "") {
                            var _v5 = _v0.a;
                            var min = _v5.a;
                            var _v6 = _v5.b;
                            return {
                                max: $elm$core$Maybe$Nothing,
                                min: $elm$core$Maybe$Just(min)
                            };
                        } else {
                            var _v8 = _v0.a;
                            var min = _v8.a;
                            var _v9 = _v8.b;
                            var max = _v9.a;
                            return {
                                max: $elm$core$Maybe$Just(max),
                                min: $elm$core$Maybe$Just(min)
                            };
                        }
                    } else break _v0$5;
                }
            } else break _v0$5;
        }
        return {
            max: $elm$core$Maybe$Nothing,
            min: $elm$core$Maybe$Nothing
        };
    });
    var $author$project$Lia$Markdown$Table$Types$isEmpty = function(str) {
        return str === "" ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(str);
    };
    var $author$project$Lia$Markdown$Table$View$getLabels = F2(function(attr, row) {
        return {
            main: function() {
                var _v0 = A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-title", attr);
                if (_v0.$ === "Just") {
                    var title = _v0.a;
                    return $elm$core$Maybe$Just(title);
                } else return A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, function($) {
                    return $.string;
                }, $author$project$Lia$Markdown$Table$Types$isEmpty), $elm$core$List$head(row));
            }(),
            x: A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-xlabel", attr),
            xLimits: A2($author$project$Lia$Markdown$Table$View$getMinMax, "data-xlim", attr),
            y: A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-ylabel", attr),
            yLimits: A2($author$project$Lia$Markdown$Table$View$getMinMax, "data-ylim", attr)
        };
    });
    var $author$project$Lia$Markdown$Table$Matrix$tail = A2($elm$core$Basics$composeR, $elm$core$List$tail, $elm$core$Maybe$withDefault(_List_Nil));
    var $author$project$Lia$Markdown$Chart$View$encodeTitle = F2(function(position, title) {
        return _Utils_Tuple2("title", $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $elm$core$Tuple$mapSecond($elm$json$Json$Encode$string), position, _List_fromArray([
            _Utils_Tuple2("text", $elm$json$Json$Encode$string(title))
        ]))));
    });
    var $author$project$Lia$Markdown$Chart$View$grid = _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("left", $elm$json$Json$Encode$string("1%")),
        _Utils_Tuple2("right", $elm$json$Json$Encode$string("1%")),
        _Utils_Tuple2("bottom", $elm$json$Json$Encode$string("12%")),
        _Utils_Tuple2("containLabel", $elm$json$Json$Encode$bool(true))
    ])));
    var $author$project$Lia$Markdown$Chart$View$encodeBarChart = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var orientation = _v0.orientation;
        var bars = A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A3($elm$core$List$foldl, F2(function(_v1, bs) {
            var label_ = _v1.a;
            var floats = _v1.b;
            return A2($elm$core$List$all, $elm$core$Basics$eq($elm$core$Maybe$Nothing), floats) ? bs : A2($elm$core$List$cons, _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("bar")),
                _Utils_Tuple2("name", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, label_))),
                _Utils_Tuple2("barGap", $elm$json$Json$Encode$int(0)),
                $author$project$Lia$Markdown$Chart$View$label,
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$json$Json$Encode$float), $elm$core$Maybe$withDefault($elm$json$Json$Encode$null)), floats))
            ]), bs);
        }), _List_Nil, data));
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing), labels.main, _List_fromArray([
            _Utils_Tuple2(_Utils_eq(orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Horizontal)) ? "yAxis" : "xAxis", $elm$json$Json$Encode$object(A2($author$project$Lia$Markdown$Chart$View$addAxisLimits, labels.xLimits, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($elm$core$Maybe$map, function(title) {
                return _Utils_Tuple2("name", $elm$json$Json$Encode$string(title));
            }, labels.x), _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, category))
            ]))))),
            A4(_Utils_eq(orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Horizontal)) ? $author$project$Lia$Markdown$Chart$View$xAxis : $author$project$Lia$Markdown$Chart$View$yAxis, labels.yLimits, "value", labels.y, _List_Nil),
            $author$project$Lia$Markdown$Chart$View$grid,
            _Utils_Tuple2("legend", $elm$json$Json$Encode$object(A3($andre_dietrich$elm_conditional$Conditional$List$addIf, !_Utils_eq(labels.main, $elm$core$Maybe$Nothing), _Utils_Tuple2("top", $elm$json$Json$Encode$string("30px")), _List_fromArray([
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, A2($elm$core$List$filterMap, $elm$core$Basics$identity, $elm$core$List$unzip(data).a)))
            ])))),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: true,
                magicType: true,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", bars)
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewBarChart = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeBarChart, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $f0i$statistics$List$Statistics$median = function(sorted) {
        var l = $elm$core$List$length(sorted);
        var rest = A2($elm$core$List$drop, (l - 1) / 2 | 0, sorted);
        if (A2($elm$core$Basics$modBy, 2, l) === 1) return $elm$core$List$head(rest);
        else {
            if (rest.b && rest.b.b) {
                var a = rest.a;
                var _v1 = rest.b;
                var b = _v1.a;
                return $elm$core$Maybe$Just((a + b) / 2);
            } else return $elm$core$Maybe$Nothing;
        }
    };
    var $f0i$statistics$List$Statistics$minmax = function(list) {
        var min = $elm$core$List$minimum(list);
        var max = $elm$core$List$maximum(list);
        var _v0 = _Utils_Tuple2(min, max);
        if (_v0.a.$ === "Just" && _v0.b.$ === "Just") {
            var a = _v0.a.a;
            var b = _v0.b.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(a, b));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm$core$Basics$clamp = F3(function(low, high, number) {
        return _Utils_cmp(number, low) < 0 ? low : _Utils_cmp(number, high) > 0 ? high : number;
    });
    var $f0i$statistics$List$Statistics$percentile = F2(function(p, sorted) {
        var l = $elm$core$List$length(sorted);
        var pos = (l - 1) * A3($elm$core$Basics$clamp, 0, 1, p);
        var rest = A2($elm$core$List$drop, $elm$core$Basics$floor(pos), sorted);
        var weight = pos - $elm$core$Basics$floor(pos);
        if (rest.b) {
            if (rest.b.b) {
                var a = rest.a;
                var _v1 = rest.b;
                var b = _v1.a;
                return $elm$core$Maybe$Just(a * (1 - weight) + b * weight);
            } else {
                var a = rest.a;
                return $elm$core$Maybe$Just(a);
            }
        } else return $elm$core$Maybe$Nothing;
    });
    var $elm$core$List$sort = function(xs) {
        return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
    };
    var $author$project$Lia$Markdown$Chart$View$encodeBoxPlot = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var boxplots = A2($elm$core$List$filterMap, $elm$core$Basics$identity, A3($elm$core$List$map2, F2(function(c, data_) {
            var _v1 = _Utils_Tuple3(A2($f0i$statistics$List$Statistics$percentile, 0.25, data_), $f0i$statistics$List$Statistics$median(data_), A2($f0i$statistics$List$Statistics$percentile, 0.75, data_));
            if (_v1.a.$ === "Just" && _v1.b.$ === "Just" && _v1.c.$ === "Just") {
                var q1 = _v1.a.a;
                var q2 = _v1.b.a;
                var q3 = _v1.c.a;
                var _v2 = A2($elm$core$Maybe$withDefault, _Utils_Tuple2(q1, q3), A2($elm$core$Maybe$map, function(_v3) {
                    var min_ = _v3.a;
                    var max_ = _v3.b;
                    var whisker2 = q3 + 1.5 * (q3 - q1);
                    var whisker1 = q1 - 1.5 * (q3 - q1);
                    return _Utils_Tuple2(_Utils_cmp(whisker1, min_) < 0 ? min_ : whisker1, _Utils_cmp(whisker2, max_) > 0 ? max_ : whisker2);
                }, $f0i$statistics$List$Statistics$minmax(data_)));
                var min = _v2.a;
                var max = _v2.b;
                return $elm$core$Maybe$Just(_Utils_Tuple2(c, _Utils_Tuple2(_List_fromArray([
                    min,
                    q1,
                    q2,
                    q3,
                    max
                ]), A2($elm$core$List$filter, function(x) {
                    return _Utils_cmp(x, max) > 0 || _Utils_cmp(x, min) < 0;
                }, data_))));
            } else return $elm$core$Maybe$Nothing;
        }), category, A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$filterMap($elm$core$Basics$identity), $elm$core$List$sort), data)));
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Just(_Utils_Tuple2("left", "center"))), labels.main, _List_fromArray([
            _Utils_Tuple2("xAxis", $elm$json$Json$Encode$object(A2($author$project$Lia$Markdown$Chart$View$addAxisLimits, labels.xLimits, A2($andre_dietrich$elm_conditional$Conditional$List$addWhen, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$string, $elm$core$Tuple$pair("name")), labels.x), _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("category")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$json$Json$Encode$string), boxplots))
            ]))))),
            A4($author$project$Lia$Markdown$Chart$View$yAxis, labels.yLimits, "value", labels.y, _List_Nil),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: true,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            $author$project$Lia$Markdown$Chart$View$grid,
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("boxplot")),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$json$Json$Encode$list($elm$json$Json$Encode$float))), boxplots))
                ]),
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("scatter")),
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string("outlier")),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$list($elm$json$Json$Encode$float), A2($elm$core$List$indexedMap, F2(function(i, data_) {
                        return A2($elm$core$List$cons, i, data_);
                    }), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$Tuple$second), boxplots))))
                ])
            ])))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewBoxPlot = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeBoxPlot, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$viewChart = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encode(false), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$encodeLegend = F2(function(params, data) {
        return _Utils_Tuple2("legend", $elm$json$Json$Encode$object(A2($elm$core$List$cons, _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, data)), params)));
    });
    var $author$project$Lia$Markdown$Chart$View$encodeFunnels = F3(function(title, subtitle, data) {
        var step = 100 / (2 * $elm$core$List$length(data));
        var relWidth = $elm$core$String$fromFloat(100 / $elm$core$List$length(data)) + "%";
        var pieces = A2($elm$core$List$indexedMap, F2(function(i, x) {
            return _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("funnel")),
                _Utils_Tuple2("width", $elm$json$Json$Encode$string(relWidth)),
                _Utils_Tuple2("sort", $elm$json$Json$Encode$string("none")),
                _Utils_Tuple2("left", $elm$json$Json$Encode$string($elm$core$String$fromFloat(2 * i * step) + "%")),
                _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("normal", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{c}")),
                        _Utils_Tuple2("position", $elm$json$Json$Encode$string("inside"))
                    ])))
                ]))),
                _Utils_Tuple2("selectedMode", $elm$json$Json$Encode$string("single")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(_v0) {
                    var name_ = _v0.a;
                    var value_ = _v0.b;
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                        _Utils_Tuple2("value", $elm$json$Json$Encode$float(value_))
                    ]));
                }, x))
            ]);
        }), data);
        var head = !_Utils_eq(title, $elm$core$Maybe$Nothing) || !_Utils_eq(subtitle, _List_Nil) ? _List_fromArray([
            _Utils_Tuple2("title", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$cons, _List_fromArray([
                _Utils_Tuple2("text", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", title))),
                _Utils_Tuple2("left", $elm$json$Json$Encode$string("center"))
            ]), A2($elm$core$List$indexedMap, F2(function(i, sub) {
                return _List_fromArray([
                    _Utils_Tuple2("subtext", $elm$json$Json$Encode$string(sub)),
                    _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(40)),
                    _Utils_Tuple2("textAlign", $elm$json$Json$Encode$string("center")),
                    _Utils_Tuple2("left", $elm$json$Json$Encode$string($elm$core$String$fromFloat(2 * i * step + step) + "%"))
                ]);
            }), subtitle))))
        ]) : _List_Nil;
        var categories = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$List$map($elm$core$Tuple$first), $elm$core$List$head(data)));
        return $elm$json$Json$Encode$object(A2($elm$core$List$append, head, _List_fromArray([
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, pieces)),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            A2($author$project$Lia$Markdown$Chart$View$encodeLegend, _List_fromArray([
                _Utils_Tuple2("top", $elm$json$Json$Encode$string("30px"))
            ]), categories),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("item")),
                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{b} : {c} ({d}%)"))
            ])))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$encodeFunnel = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var orientation = _v0.orientation;
        if ($elm$core$List$length(data) === 1) {
            var pieces = A2($elm$json$Json$Encode$list, function(_v1) {
                var name_ = _v1.a;
                var value_ = _v1.b;
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                    _Utils_Tuple2("value", $elm$json$Json$Encode$float(value_))
                ]));
            }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$head(data)));
            var head = !_Utils_eq(labels.main, $elm$core$Maybe$Nothing) || !_Utils_eq(category, _List_Nil) ? _List_fromArray([
                _Utils_Tuple2("title", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("text", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", labels.main))),
                    _Utils_Tuple2("subtext", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(category)))),
                    _Utils_Tuple2("left", $elm$json$Json$Encode$string("center"))
                ])))
            ]) : _List_Nil;
            return $elm$json$Json$Encode$object(A2($elm$core$List$append, head, _List_fromArray([
                _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                    A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Horizontal)), _Utils_Tuple2("orient", $elm$json$Json$Encode$string("horizontal")), _List_fromArray([
                        _Utils_Tuple2("type", $elm$json$Json$Encode$string("funnel")),
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(category)))),
                        _Utils_Tuple2("radius", $elm$json$Json$Encode$string(!_Utils_eq(labels.main, $elm$core$Maybe$Nothing) || !_Utils_eq(category, _List_Nil) ? "65%" : "75%")),
                        _Utils_Tuple2("center", $elm$json$Json$Encode$string("50%")),
                        _Utils_Tuple2("selectedMode", $elm$json$Json$Encode$string("single")),
                        _Utils_Tuple2("data", pieces),
                        _Utils_Tuple2("sort", $elm$json$Json$Encode$string("none"))
                    ]))
                ]))),
                A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                    dataView: true,
                    dataZoom: false,
                    magicType: false,
                    restore: false,
                    saveAsImage: true
                }),
                _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("item")),
                    _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{b} : {c} ({d}%)"))
                ])))
            ])));
        } else return A3($author$project$Lia$Markdown$Chart$View$encodeFunnels, labels.main, category, data);
    };
    var $author$project$Lia$Markdown$Chart$View$viewFunnel = F2(function(settings, _v0) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeFunnel, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    });
    var $author$project$Lia$Markdown$Chart$View$encodeGraph = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var dict = $elm$core$Dict$fromList(A2($elm$core$List$map, function(_v5) {
            var source = _v5.a;
            var target = _v5.b;
            var val = _v5.c;
            return _Utils_Tuple2(_Utils_Tuple2(source, target), val);
        }, data));
        var directed = A2($elm$core$List$all, $elm$core$Basics$identity, $elm$core$Dict$values(A2($elm$core$Dict$map, F2(function(_v4, v) {
            var s = _v4.a;
            var t = _v4.b;
            return _Utils_eq(A2($elm$core$Dict$get, _Utils_Tuple2(t, s), dict), $elm$core$Maybe$Just(v));
        }), dict)));
        var _v1 = A2($elm$core$Maybe$withDefault, _Utils_Tuple2(0, 0), $author$project$Lia$Markdown$Chart$View$minMax(A2($elm$core$List$map, function(_v2) {
            var v = _v2.c;
            return v;
        }, data)));
        var min = _v1.a;
        var max = _v1.b;
        var lineWidth = function(v) {
            return 1 + 4 * $elm$core$Basics$abs(v) / (max - min);
        };
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Just(_Utils_Tuple2("left", "center"))), labels.main, _List_fromArray([
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: false,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, $elm$core$List$singleton(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("graph")),
                _Utils_Tuple2("layout", $elm$json$Json$Encode$string("force")),
                _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true))
                ]))),
                _Utils_Tuple2("symbolSize", $elm$json$Json$Encode$float(40)),
                _Utils_Tuple2("roam", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("animation", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("edgeSymbol", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, directed ? _List_Nil : _List_fromArray([
                    "circle",
                    "arrow"
                ]))),
                _Utils_Tuple2("force", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("repulsion", $elm$json$Json$Encode$int(300)),
                    _Utils_Tuple2("edgeLength", $elm$json$Json$Encode$int(100)),
                    _Utils_Tuple2("gravity", $elm$json$Json$Encode$float(0.1))
                ]))),
                _Utils_Tuple2("draggable", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(node) {
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("id", $elm$json$Json$Encode$string(node)),
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(node))
                    ]));
                }, category)),
                _Utils_Tuple2("edges", A2($elm$json$Json$Encode$list, function(_v3) {
                    var source = _v3.a;
                    var target = _v3.b;
                    var v = _v3.c;
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("source", $elm$json$Json$Encode$string(source)),
                        _Utils_Tuple2("target", $elm$json$Json$Encode$string(target)),
                        _Utils_Tuple2("symbolSize", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
                            5
                        ]))),
                        _Utils_Tuple2("value", $elm$json$Json$Encode$float(v)),
                        _Utils_Tuple2("lineStyle", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("width", $elm$json$Json$Encode$float(lineWidth(v))),
                            _Utils_Tuple2("curveness", $elm$json$Json$Encode$float(directed ? 0 : _Utils_eq(A2($elm$core$Dict$get, _Utils_Tuple2(target, source), dict), $elm$core$Maybe$Nothing) ? 0 : 0.25)),
                            _Utils_Tuple2("opacity", $elm$json$Json$Encode$float(v > 0 ? 0.9 : 0.3))
                        ])))
                    ]));
                }, data))
            ]))))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewGraph = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeGraph, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$encodeHeatMap = F2(function(yLabels, _v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var _v1 = A2($elm$core$Maybe$withDefault, _Utils_Tuple2(0, 0), $author$project$Lia$Markdown$Chart$View$minMax(A2($elm$core$List$filterMap, function(_v2) {
            var v = _v2.c;
            return v;
        }, $elm$core$List$concat(data))));
        var min = _v1.a;
        var max = _v1.b;
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Just(_Utils_Tuple2("left", "center"))), labels.main, _List_fromArray([
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Just("7%"), {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("grid", $elm$json$Json$Encode$object(_Utils_eq(labels.main, $elm$core$Maybe$Nothing) ? _List_fromArray([
                _Utils_Tuple2("height", $elm$json$Json$Encode$string("82%")),
                _Utils_Tuple2("top", $elm$json$Json$Encode$string("0%"))
            ]) : _List_fromArray([
                _Utils_Tuple2("height", $elm$json$Json$Encode$string("74%")),
                _Utils_Tuple2("top", $elm$json$Json$Encode$string("7%"))
            ]))),
            A4($author$project$Lia$Markdown$Chart$View$xAxis, labels.xLimits, "category", labels.x, category),
            A4($author$project$Lia$Markdown$Chart$View$yAxis, labels.yLimits, "category", labels.y, yLabels),
            _Utils_Tuple2("visualMap", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("min", $elm$json$Json$Encode$float(min)),
                _Utils_Tuple2("max", $elm$json$Json$Encode$float(max)),
                _Utils_Tuple2("calculable", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("itemHeight", $elm$json$Json$Encode$string("150px")),
                _Utils_Tuple2("right", $elm$json$Json$Encode$string("7%")),
                _Utils_Tuple2("bottom", $elm$json$Json$Encode$string("9")),
                _Utils_Tuple2("orient", $elm$json$Json$Encode$string("horizontal"))
            ]))),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("heatmap")),
                    _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("show", $elm$json$Json$Encode$bool(true))
                    ]))),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(_v3) {
                        var x = _v3.a;
                        var y = _v3.b;
                        var z = _v3.c;
                        return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_fromArray([
                            $elm$json$Json$Encode$int(x),
                            $elm$json$Json$Encode$int(y),
                            A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$float, z))
                        ]));
                    }, $elm$core$List$concat(data))),
                    _Utils_Tuple2("emphasis", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("itemStyle", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("shadowBlur", $elm$json$Json$Encode$int(10)),
                            _Utils_Tuple2("shadowColor", $elm$json$Json$Encode$string("rgba(0, 0, 0, 0.5)"))
                        ])))
                    ])))
                ])
            ])))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$viewHeatMap = F2(function(settings, y) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeHeatMap(y), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    });
    var $author$project$Lia$Markdown$Chart$View$encodeBasic = F2(function(type_, _v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing), labels.main, _List_fromArray([
            A4($author$project$Lia$Markdown$Chart$View$xAxis, labels.xLimits, "category", labels.x, category),
            A4($author$project$Lia$Markdown$Chart$View$yAxis, labels.yLimits, "value", labels.y, _List_Nil),
            $author$project$Lia$Markdown$Chart$View$grid,
            A2($author$project$Lia$Markdown$Chart$View$encodeLegend, _List_fromArray([
                _Utils_Tuple2("top", $elm$json$Json$Encode$string("30px"))
            ]), A2($elm$core$List$map, $elm$core$Tuple$first, data)),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: true,
                magicType: true,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, function(_v1) {
                var name_ = _v1.a;
                var values = _v1.b;
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string(type_)),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$json$Json$Encode$float), $elm$core$Maybe$withDefault($elm$json$Json$Encode$null)), values))
                ]));
            }, data))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$viewLines = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeBasic("line"), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$encodeMapChart = F2(function(json, data) {
        var _v0 = A3($elm$core$Tuple$mapBoth, $elm$core$String$fromFloat, $elm$core$String$fromFloat, A2($elm$core$Maybe$withDefault, _Utils_Tuple2(0, 0), $author$project$Lia$Markdown$Chart$View$minMax(A2($elm$core$List$filterMap, $elm$core$Tuple$second, data.data))));
        var min = _v0.a;
        var max = _v0.b;
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing), data.labels.main, _List_fromArray([
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("map")),
                    _Utils_Tuple2("map", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", json))),
                    _Utils_Tuple2("roam", $elm$json$Json$Encode$bool(true)),
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "data", data.labels.y))),
                    _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$filterMap, function(_v1) {
                        var key = _v1.a;
                        var value = _v1.b;
                        if (value.$ === "Just") {
                            var num = value.a;
                            return $elm$core$Maybe$Just(_List_fromArray([
                                _Utils_Tuple2("name", $elm$json$Json$Encode$string(key)),
                                _Utils_Tuple2("value", $elm$json$Json$Encode$float(num))
                            ]));
                        } else return $elm$core$Maybe$Nothing;
                    }, data.data)))
                ])
            ]))),
            _Utils_Tuple2("visualMap", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("min", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, min, data.labels.xLimits.min))),
                _Utils_Tuple2("max", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, max, data.labels.xLimits.max))),
                _Utils_Tuple2("calculable", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("itemHeight", $elm$json$Json$Encode$string("150px")),
                _Utils_Tuple2("right", $elm$json$Json$Encode$string("0")),
                _Utils_Tuple2("bottom", $elm$json$Json$Encode$string("center")),
                _Utils_Tuple2("orient", $elm$json$Json$Encode$string("vertical"))
            ]))),
            $author$project$Lia$Markdown$Chart$View$grid,
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: true,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$viewMapChart = F2(function(settings, json) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeMapChart(json), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, json));
    });
    var $author$project$Lia$Markdown$Chart$View$encodeParallel = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var orientation = _v0.orientation;
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing), labels.main, _List_fromArray([
            _Utils_Tuple2("parallelAxis", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$indexedMap, F2(function(i, cat) {
                return _List_fromArray([
                    _Utils_Tuple2("dim", $elm$json$Json$Encode$int(i)),
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(cat))
                ]);
            }), category))),
            _Utils_Tuple2("parallel", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("axisExpandable", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("axisExpandCenter", $elm$json$Json$Encode$int(15)),
                _Utils_Tuple2("axisExpandCount", $elm$json$Json$Encode$int(10)),
                _Utils_Tuple2("axisExpandWidth", $elm$json$Json$Encode$int(100)),
                _Utils_Tuple2("axisExpandTriggerOn", $elm$json$Json$Encode$string("mousemove"))
            ]))),
            _Utils_Tuple2("series", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("parallel")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$list(A2($elm$core$Basics$composeR, $elm$core$Maybe$map($elm$json$Json$Encode$float), $elm$core$Maybe$withDefault($elm$json$Json$Encode$null))), data))
            ]))),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("parallel", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("layout", $elm$json$Json$Encode$string(_Utils_eq(orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical)) ? "vertical" : "horizontal"))
            ]))),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewParallel = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeParallel, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$encodePieCharts = F4(function(width, title, subtitle, data) {
        var step = 100 / (2 * $elm$core$List$length(data));
        var relWidth = $elm$core$String$fromFloat(function(w) {
            return w > 70 ? 70 : w;
        }(width / (6.1 * $elm$core$List$length(data)))) + "%";
        var pieces = A2($elm$core$List$indexedMap, F2(function(i, x) {
            return _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("pie")),
                _Utils_Tuple2("radius", $elm$json$Json$Encode$string(relWidth)),
                _Utils_Tuple2("center", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, _List_fromArray([
                    $elm$core$String$fromFloat(2 * i * step + step) + "%",
                    "50%"
                ]))),
                _Utils_Tuple2("label", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("normal", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{c}")),
                        _Utils_Tuple2("position", $elm$json$Json$Encode$string("inside"))
                    ])))
                ]))),
                _Utils_Tuple2("selectedMode", $elm$json$Json$Encode$string("single")),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(_v0) {
                    var name_ = _v0.a;
                    var value_ = _v0.b;
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                        _Utils_Tuple2("value", $elm$json$Json$Encode$float(value_))
                    ]));
                }, x))
            ]);
        }), data);
        var head = !_Utils_eq(title, $elm$core$Maybe$Nothing) || !_Utils_eq(subtitle, _List_Nil) ? _List_fromArray([
            _Utils_Tuple2("title", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, A2($elm$core$List$cons, _List_fromArray([
                _Utils_Tuple2("text", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", title))),
                _Utils_Tuple2("left", $elm$json$Json$Encode$string("center"))
            ]), A2($elm$core$List$indexedMap, F2(function(i, sub) {
                return _List_fromArray([
                    _Utils_Tuple2("subtext", $elm$json$Json$Encode$string(sub)),
                    _Utils_Tuple2("bottom", $elm$json$Json$Encode$int(40)),
                    _Utils_Tuple2("textAlign", $elm$json$Json$Encode$string("center")),
                    _Utils_Tuple2("left", $elm$json$Json$Encode$string($elm$core$String$fromFloat(2 * i * step + step) + "%"))
                ]);
            }), subtitle))))
        ]) : _List_Nil;
        var categories = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$List$map($elm$core$Tuple$first), $elm$core$List$head(data)));
        return $elm$json$Json$Encode$object(A2($elm$core$List$append, head, _List_fromArray([
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, pieces)),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            A2($author$project$Lia$Markdown$Chart$View$encodeLegend, _List_fromArray([
                _Utils_Tuple2("top", $elm$json$Json$Encode$string("30px"))
            ]), categories),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("item")),
                _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{b} : {c} ({d}%)"))
            ])))
        ])));
    });
    var $author$project$Lia$Markdown$Chart$View$encodePieChart = F2(function(width, _v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        if ($elm$core$List$length(data) === 1) {
            var pieces = A2($elm$json$Json$Encode$list, function(_v1) {
                var name_ = _v1.a;
                var value_ = _v1.b;
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                    _Utils_Tuple2("value", $elm$json$Json$Encode$float(value_))
                ]));
            }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$head(data)));
            var head = !_Utils_eq(labels.main, $elm$core$Maybe$Nothing) || !_Utils_eq(category, _List_Nil) ? _List_fromArray([
                _Utils_Tuple2("title", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("text", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", labels.main))),
                    _Utils_Tuple2("subtext", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(category)))),
                    _Utils_Tuple2("left", $elm$json$Json$Encode$string("center"))
                ])))
            ]) : _List_Nil;
            return $elm$json$Json$Encode$object(A2($elm$core$List$append, head, _List_fromArray([
                _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                    _List_fromArray([
                        _Utils_Tuple2("type", $elm$json$Json$Encode$string("pie")),
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(category)))),
                        _Utils_Tuple2("radius", $elm$json$Json$Encode$string(!_Utils_eq(labels.main, $elm$core$Maybe$Nothing) || !_Utils_eq(category, _List_Nil) ? "65%" : "75%")),
                        _Utils_Tuple2("center", $elm$json$Json$Encode$string("50%")),
                        _Utils_Tuple2("selectedMode", $elm$json$Json$Encode$string("single")),
                        _Utils_Tuple2("data", pieces)
                    ])
                ]))),
                A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                    dataView: true,
                    dataZoom: false,
                    magicType: false,
                    restore: false,
                    saveAsImage: true
                }),
                _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("trigger", $elm$json$Json$Encode$string("item")),
                    _Utils_Tuple2("formatter", $elm$json$Json$Encode$string("{b} : {c} ({d}%)"))
                ])))
            ])));
        } else return A4($author$project$Lia$Markdown$Chart$View$encodePieCharts, width, labels.main, category, data);
    });
    var $author$project$Lia$Markdown$Chart$View$viewPieChart = F2(function(settings, width) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodePieChart(width), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    });
    var $author$project$Lia$Markdown$Chart$View$viewPoints = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeBasic("scatter"), A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$calcMax = $elm$core$List$map2(F2(function(i, d) {
        var value = A2($elm$core$Maybe$withDefault, 0, d);
        return _Utils_cmp(value, i.max) > 0 ? _Utils_update(i, {
            max: value
        }) : i;
    }));
    var $author$project$Lia$Markdown$Chart$View$encodeRadarChart = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var values = A2($elm$json$Json$Encode$list, function(_v1) {
            var name_ = _v1.a;
            var value = _v1.b;
            return $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("name", $elm$json$Json$Encode$string(name_)),
                _Utils_Tuple2("value", A2($elm$json$Json$Encode$list, A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(0), $elm$json$Json$Encode$float), value))
            ]));
        }, data);
        var max_ = A2($elm$core$List$map, function(c) {
            return {
                max: 0,
                name: c
            };
        }, category);
        var indicator = A2($elm$json$Json$Encode$list, function(i) {
            return $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("name", $elm$json$Json$Encode$string(i.name)),
                _Utils_Tuple2("max", $elm$json$Json$Encode$float(i.max))
            ]));
        }, A3($elm$core$List$foldl, F2(function(d, i) {
            return A2($author$project$Lia$Markdown$Chart$View$calcMax, i, d);
        }), max_, A2($elm$core$List$map, $elm$core$Tuple$second, data)));
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Nothing), labels.main, _List_fromArray([
            _Utils_Tuple2("radar", $elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("indicator", indicator),
                _Utils_Tuple2("axisName", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("color", $elm$json$Json$Encode$string("#fff")),
                    _Utils_Tuple2("backgroundColor", $elm$json$Json$Encode$string("#999")),
                    _Utils_Tuple2("borderRadius", $elm$json$Json$Encode$int(3)),
                    _Utils_Tuple2("padding", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
                        3,
                        5
                    ])))
                ])))
            ]))),
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: true,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, _List_fromArray([
                _List_fromArray([
                    _Utils_Tuple2("type", $elm$json$Json$Encode$string("radar")),
                    _Utils_Tuple2("data", values),
                    _Utils_Tuple2("emphasis", $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("lineStyle", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("width", $elm$json$Json$Encode$int(4))
                        ])))
                    ])))
                ])
            ])))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewRadarChart = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeRadarChart, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Chart$View$encodeSankey = function(_v0) {
        var labels = _v0.labels;
        var category = _v0.category;
        var data = _v0.data;
        var orientation = _v0.orientation;
        var dict = $elm$core$Dict$fromList(A2($elm$core$List$map, function(_v5) {
            var source = _v5.a;
            var target = _v5.b;
            var val = _v5.c;
            return _Utils_Tuple2(_Utils_Tuple2(source, target), val);
        }, data));
        var cleared = $elm$core$Dict$toList(A3($elm$core$List$foldl, F2(function(_v3, d) {
            var _v4 = _v3.a;
            var s = _v4.a;
            var t = _v4.b;
            return !_Utils_eq(A2($elm$core$Dict$get, _Utils_Tuple2(t, s), d), $elm$core$Maybe$Nothing) ? A2($elm$core$Dict$remove, _Utils_Tuple2(t, s), d) : d;
        }), dict, $elm$core$Dict$toList(dict)));
        return $elm$json$Json$Encode$object(A3($author$project$Lia$Markdown$Chart$View$add, $author$project$Lia$Markdown$Chart$View$encodeTitle($elm$core$Maybe$Just(_Utils_Tuple2("left", "center"))), labels.main, _List_fromArray([
            A2($author$project$Lia$Markdown$Chart$View$toolbox, $elm$core$Maybe$Nothing, {
                dataView: false,
                dataZoom: false,
                magicType: false,
                restore: false,
                saveAsImage: true
            }),
            _Utils_Tuple2("tooltip", $elm$json$Json$Encode$object(_List_Nil)),
            _Utils_Tuple2("height", $elm$json$Json$Encode$string("80%")),
            _Utils_Tuple2("width", $elm$json$Json$Encode$string("90%")),
            _Utils_Tuple2("series", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$object, $elm$core$List$singleton(A3($andre_dietrich$elm_conditional$Conditional$List$addIf, _Utils_eq(orientation, $elm$core$Maybe$Just($author$project$Lia$Markdown$Chart$Types$Vertical)), _Utils_Tuple2("orient", $elm$json$Json$Encode$string("vertical")), _List_fromArray([
                _Utils_Tuple2("type", $elm$json$Json$Encode$string("sankey")),
                _Utils_Tuple2("layout", $elm$json$Json$Encode$string("none")),
                _Utils_Tuple2("focusNodeAdjacency", $elm$json$Json$Encode$string("allEdges")),
                _Utils_Tuple2("animation", $elm$json$Json$Encode$bool(true)),
                _Utils_Tuple2("data", A2($elm$json$Json$Encode$list, function(node) {
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("name", $elm$json$Json$Encode$string(node))
                    ]));
                }, category)),
                _Utils_Tuple2("edges", A2($elm$json$Json$Encode$list, function(_v1) {
                    var _v2 = _v1.a;
                    var source = _v2.a;
                    var target = _v2.b;
                    var v = _v1.b;
                    return $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("source", $elm$json$Json$Encode$string(source)),
                        _Utils_Tuple2("target", $elm$json$Json$Encode$string(target)),
                        _Utils_Tuple2("value", $elm$json$Json$Encode$float(v))
                    ]));
                }, cleared)),
                _Utils_Tuple2("lineStyle", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("color", $elm$json$Json$Encode$string("source"))
                ])))
            ])))))
        ])));
    };
    var $author$project$Lia$Markdown$Chart$View$viewSankey = function(settings) {
        return A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Chart$View$encodeSankey, A2($author$project$Lia$Markdown$Chart$View$eCharts, settings, $elm$core$Maybe$Nothing));
    };
    var $author$project$Lia$Markdown$Table$View$chart = F7(function(lang, width, isFormatted, attr, mode, _class, matrix) {
        var settings = {
            attr: attr,
            lang: lang,
            light: mode
        };
        var orientation = $author$project$Lia$Markdown$Table$View$diagramOrientation(attr);
        var _v0 = $author$project$Lia$Markdown$Table$Matrix$split(matrix);
        var head = _v0.a;
        var body = _v0.b;
        var labels = A2($author$project$Lia$Markdown$Table$View$getLabels, attr, head);
        switch(_class.$){
            case "BarChart":
                return A2($author$project$Lia$Markdown$Chart$View$viewBarChart, settings, {
                    category: A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$List$head, A2($elm$core$Basics$composeR, $elm$core$Maybe$map(function($) {
                        return $.string;
                    }), $elm$core$Maybe$withDefault(""))), body),
                    data: A2($elm$core$List$map, function(row) {
                        return _Utils_Tuple2(A2($elm$core$Maybe$map, function($) {
                            return $.string;
                        }, $elm$core$List$head(row)), A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                            return $._float;
                        }), $elm$core$List$tail(row))));
                    }, $author$project$Lia$Markdown$Table$Matrix$tail($author$project$Lia$Markdown$Table$Matrix$transpose(matrix))),
                    labels: labels,
                    orientation: orientation
                });
            case "PieChart":
                if (A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber), A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)))) return A3($author$project$Lia$Markdown$Chart$View$viewPieChart, settings, width, {
                    category: _List_Nil,
                    data: A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, function(category) {
                        return $elm$core$Maybe$map($elm$core$Tuple$pair(category.string));
                    }, head), $elm$core$List$filterMap($elm$core$Basics$identity)), A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                        return $._float;
                    }, body)),
                    labels: labels,
                    orientation: orientation
                });
                else {
                    var classes = A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                    return A3($author$project$Lia$Markdown$Chart$View$viewPieChart, settings, width, {
                        category: A2($elm$core$List$map, function($) {
                            return $.string;
                        }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body))),
                        data: A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, function(c) {
                            return $elm$core$Maybe$map($elm$core$Tuple$pair(c));
                        }, classes), $elm$core$List$filterMap($elm$core$Basics$identity)), A2($elm$core$List$filterMap, $elm$core$List$tail, A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                            return $._float;
                        }, body))),
                        labels: labels,
                        orientation: orientation
                    });
                }
            case "Funnel":
                if (A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $elm$core$List$all($author$project$Lia$Markdown$Table$Types$isNumber), A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)))) return A3($author$project$Lia$Markdown$Chart$View$viewFunnel, settings, width, {
                    category: _List_Nil,
                    data: A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, function(category) {
                        return $elm$core$Maybe$map($elm$core$Tuple$pair(category.string));
                    }, head), $elm$core$List$filterMap($elm$core$Basics$identity)), A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                        return $._float;
                    }, body)),
                    labels: labels,
                    orientation: orientation
                });
                else {
                    var classes = A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                    return A3($author$project$Lia$Markdown$Chart$View$viewFunnel, settings, width, {
                        category: A2($elm$core$List$map, function($) {
                            return $.string;
                        }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body))),
                        data: A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, function(c) {
                            return $elm$core$Maybe$map($elm$core$Tuple$pair(c));
                        }, classes), $elm$core$List$filterMap($elm$core$Basics$identity)), A2($elm$core$List$filterMap, $elm$core$List$tail, A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                            return $._float;
                        }, body))),
                        labels: labels,
                        orientation: orientation
                    });
                }
            case "HeatMap":
                var y = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
                var x = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                return A3($author$project$Lia$Markdown$Chart$View$viewHeatMap, settings, y, {
                    category: x,
                    data: A2($elm$core$List$indexedMap, F2(function(y_, row) {
                        return A2($elm$core$List$indexedMap, F2(function(x_, cell) {
                            return _Utils_Tuple3(x_, y_, cell._float);
                        }), row);
                    }), $author$project$Lia$Markdown$Table$Matrix$tail($author$project$Lia$Markdown$Table$Matrix$transpose(body))),
                    labels: labels,
                    orientation: orientation
                });
            case "Radar":
                return A2($author$project$Lia$Markdown$Chart$View$viewRadarChart, settings, {
                    category: A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                        return $.string;
                    }), $elm$core$List$tail(head))),
                    data: A2($elm$core$List$map, function(row) {
                        return _Utils_Tuple2(A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                            return $.string;
                        }, $elm$core$List$head(row))), A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, $elm$core$List$map(function($) {
                            return $._float;
                        }), $elm$core$List$tail(row))));
                    }, body),
                    labels: labels,
                    orientation: orientation
                });
            case "Parallel":
                return A2($author$project$Lia$Markdown$Chart$View$viewParallel, settings, {
                    category: A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head))),
                    data: $author$project$Lia$Markdown$Table$Matrix$transpose(A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                        return $._float;
                    }, $author$project$Lia$Markdown$Table$Matrix$tail($author$project$Lia$Markdown$Table$Matrix$transpose(body)))),
                    labels: labels,
                    orientation: orientation
                });
            case "BoxPlot":
                return A2($author$project$Lia$Markdown$Chart$View$viewBoxPlot, settings, {
                    category: A2($elm$core$List$map, function($) {
                        return $.string;
                    }, head),
                    data: $author$project$Lia$Markdown$Table$Matrix$transpose(A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                        return $._float;
                    }, body)),
                    labels: labels,
                    orientation: orientation
                });
            case "Graph":
                var nodesB = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
                var nodesA = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                var nodes = A2($elm$core$List$filter, $elm$core$Basics$neq(""), $elm$core$Set$toList($elm$core$Set$fromList(_Utils_ap(nodesA, nodesB))));
                return A2($author$project$Lia$Markdown$Chart$View$viewGraph, settings, {
                    category: nodes,
                    data: A2($elm$core$List$filter, function(_v4) {
                        var a = _v4.a;
                        var b = _v4.b;
                        return a !== "" || b !== "";
                    }, A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$concatMap, function(row) {
                        if (!row.b) return _List_Nil;
                        else {
                            var b = row.a;
                            var values = row.b;
                            return A3($elm$core$List$map2, F2(function(a, v) {
                                var _v3 = v._float;
                                if (_v3.$ === "Just") {
                                    var _float = _v3.a;
                                    return !_float ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(_Utils_Tuple3(a, b.string, _float));
                                } else return $elm$core$Maybe$Nothing;
                            }), nodesA, values);
                        }
                    }, body))),
                    labels: labels,
                    orientation: orientation
                });
            case "Sankey":
                var nodesB = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
                var nodesA = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                var nodes = A2($elm$core$List$filter, $elm$core$Basics$neq(""), $elm$core$Set$toList($elm$core$Set$fromList(_Utils_ap(nodesA, nodesB))));
                return A2($author$project$Lia$Markdown$Chart$View$viewSankey, settings, {
                    category: nodes,
                    data: A2($elm$core$List$filter, function(_v7) {
                        var a = _v7.a;
                        var b = _v7.b;
                        return a !== "" || b !== "";
                    }, A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$concatMap, function(row) {
                        if (!row.b) return _List_Nil;
                        else {
                            var b = row.a;
                            var values = row.b;
                            return A3($elm$core$List$map2, F2(function(a, v) {
                                var _v6 = v._float;
                                if (_v6.$ === "Just") {
                                    var _float = _v6.a;
                                    return !_float ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(_Utils_Tuple3(a, b.string, _float));
                                } else return $elm$core$Maybe$Nothing;
                            }), nodesA, values);
                        }
                    }, body))),
                    labels: labels,
                    orientation: orientation
                });
            case "Map":
                var data = isFormatted ? body : matrix;
                var categories = A2($elm$core$List$map, function($) {
                    return $.string;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, data)));
                return A3($author$project$Lia$Markdown$Chart$View$viewMapChart, settings, A2($author$project$Lia$Markdown$HTML$Attributes$get, "data-src", attr), {
                    category: _List_Nil,
                    data: A3($elm$core$List$map2, $elm$core$Tuple$pair, categories, A2($elm$core$List$map, function($) {
                        return $._float;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 1, data)))),
                    labels: labels,
                    orientation: orientation
                });
            default:
                var xs = A2($elm$core$List$map, function($) {
                    return $._float;
                }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
                if (_Utils_eq($elm$core$List$length(xs), $elm$core$List$length(A2($elm$core$List$filterMap, $elm$core$Basics$identity, xs)))) {
                    var type_ = F2(function(name, pts) {
                        return _Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$LinePlot) ? A2($author$project$Lia$Markdown$Chart$Types$Lines, pts, $elm$core$Maybe$Just(name)) : A2($author$project$Lia$Markdown$Chart$Types$Dots, pts, $elm$core$Maybe$Just(name));
                    });
                    var legend = A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                    var diagrams = A2($elm$core$List$indexedMap, F2(function(i, diagram) {
                        return _Utils_Tuple2($author$project$Lia$Markdown$Chart$View$getColor(i), diagram);
                    }), A3($elm$core$List$map2, type_, legend, A2($elm$core$List$map, A2($elm$core$Basics$composeR, A2($elm$core$List$map2, F2(function(x, y) {
                        return A3($elm$core$Maybe$map2, $author$project$Lia$Markdown$Chart$Types$Point, x, y);
                    }), xs), $elm$core$List$filterMap($elm$core$Basics$identity)), A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                        return $._float;
                    }, $author$project$Lia$Markdown$Table$Matrix$tail($author$project$Lia$Markdown$Table$Matrix$transpose(body))))));
                    return A2($author$project$Lia$Markdown$Chart$View$viewChart, settings, {
                        diagrams: $elm$core$Dict$fromList(diagrams),
                        legend: legend,
                        orientation: orientation,
                        title: A2($elm$core$Maybe$withDefault, "", labels.main),
                        xLabel: A2($elm$core$Maybe$withDefault, "", labels.x),
                        xLimits: labels.xLimits,
                        yLabel: A2($elm$core$Maybe$withDefault, "", labels.y),
                        yLimits: labels.yLimits
                    });
                } else {
                    var xValues = A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, A2($author$project$Lia$Markdown$Table$Matrix$column, 0, body)));
                    var xLabels = A2($elm$core$List$map, function($) {
                        return $.string;
                    }, A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail(head)));
                    return A2(_Utils_eq(_class, $author$project$Lia$Markdown$Table$Types$LinePlot) ? $author$project$Lia$Markdown$Chart$View$viewLines : $author$project$Lia$Markdown$Chart$View$viewPoints, settings, {
                        category: xValues,
                        data: A3($elm$core$List$map2, $elm$core$Tuple$pair, xLabels, A2($author$project$Lia$Markdown$Table$Matrix$map, function($) {
                            return $._float;
                        }, $author$project$Lia$Markdown$Table$Matrix$tail($author$project$Lia$Markdown$Table$Matrix$transpose(body)))),
                        labels: labels,
                        orientation: orientation
                    });
                }
        }
    });
    var $author$project$Lia$Markdown$Table$View$diagramTranspose = F2(function(attr, matrix) {
        return A2($author$project$Lia$Markdown$HTML$Attributes$isSet, "data-transpose", attr) ? $author$project$Lia$Markdown$Table$Matrix$transpose(matrix) : matrix;
    });
    var $author$project$Lia$Markdown$Table$View$viewDiagram = F4(function(config, table, state, attr) {
        return A2($elm$html$Html$div, _List_fromArray([
            $author$project$Lia$Utils$blockKeydown($author$project$Lia$Markdown$Update$UpdateTable($author$project$Lia$Markdown$Table$Update$NoOp)),
            $tesk9$accessible_html$Accessibility$Live$polite
        ]), _List_fromArray([
            A2($author$project$Lia$Markdown$Table$View$toggleBtn, table.id, _Utils_Tuple2("table", "Table")),
            A7($author$project$Lia$Markdown$Table$View$chart, config.main.lang, config.screen.width, !_Utils_eq(table.format, _List_Nil), attr, config.light, table._class, A2($author$project$Lia$Markdown$Table$View$diagramTranspose, attr, A2($elm$core$List$cons, A2($elm$core$List$indexedMap, A2($author$project$Lia$Markdown$Table$Types$toCell, config.main, -1), table.head), A2($author$project$Lia$Markdown$Table$View$sort, state, A2($author$project$Lia$Markdown$Table$Types$toMatrix, config.main, table.body)))))
        ]));
    });
    var $author$project$Lia$Markdown$Table$View$view = F3(function(config, attr, table) {
        var state = A2($author$project$Lia$Markdown$Table$View$getState, table.id, config.section.table_vector);
        return A2($author$project$Lia$Markdown$Table$View$diagramShow, attr, state.diagram) ? A4($author$project$Lia$Markdown$Table$View$viewDiagram, config, table, state, attr) : _Utils_eq(table.head, _List_Nil) && _Utils_eq(table.format, _List_Nil) ? A5($author$project$Lia$Markdown$Table$View$toTable, config.main.lang, table.id, attr, table._class, A6($author$project$Lia$Markdown$Table$View$unformatted, config.main.lang, table.sortable, config.view, A2($author$project$Lia$Markdown$Table$Types$toMatrix, config.main, table.body), table.id, state)) : A5($author$project$Lia$Markdown$Table$View$toTable, config.main.lang, table.id, attr, table._class, A8($author$project$Lia$Markdown$Table$View$formatted, config.main.lang, table.sortable, config.view, table.head, table.format, A2($author$project$Lia$Markdown$Table$Types$toMatrix, config.main, table.body), table.id, state));
    });
    var $author$project$Lia$Markdown$Task$Update$Script = function(a) {
        return {
            $: "Script",
            a: a
        };
    };
    var $author$project$Lia$Markdown$Task$Update$Toggle = F2(function(a, b) {
        return {
            $: "Toggle",
            a: a,
            b: b
        };
    });
    var $author$project$Lia$Markdown$Task$View$row = F4(function(config, x, inlines, _v0) {
        var y = _v0.a;
        var checked = _v0.b;
        return A2($elm$html$Html$label, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-label")
        ]), _List_fromArray([
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$type_("checkbox"),
                $elm$html$Html$Attributes$checked(checked),
                $elm$html$Html$Attributes$class("lia-checkbox"),
                $elm$html$Html$Events$onClick(A2($author$project$Lia$Markdown$Task$Update$Toggle, x, y))
            ]), _List_Nil),
            A2($elm$html$Html$map, $author$project$Lia$Markdown$Task$Update$Script, A2($elm$html$Html$span, _List_Nil, A2($author$project$Lia$Markdown$Inline$View$viewer, config, inlines)))
        ]));
    });
    var $author$project$Lia$Markdown$Task$View$view = F4(function(config, vector, attr, task) {
        var _v0 = A2($elm$core$Array$get, task.id, vector);
        if (_v0.$ === "Just") {
            var element = _v0.a;
            return _Utils_Tuple2(element.scriptID, A2($elm$html$Html$div, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-quiz lia-quiz-multiple-choice open", attr), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-quiz__answers")
                ]), A3($elm$core$List$map2, A2($author$project$Lia$Markdown$Task$View$row, config, task.id), task.task, A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, $elm$core$Array$toList(element.state))))
            ])));
        } else return _Utils_Tuple2($elm$core$Maybe$Nothing, $elm$html$Html$text(""));
    });
    var $author$project$Lia$Markdown$Inline$View$dragEvent = F2(function(config, _v0) {
        var msg = _v0.msg;
        var event = _v0.event;
        var id = _v0.id;
        var i = _v0.i;
        return A2($elm$html$Html$Attributes$attribute, event, A3(config.input.on, msg, id, A2($elm$json$Json$Encode$encode, 0, A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
            id,
            i
        ])))));
    });
    var $author$project$Lia$Markdown$Inline$View$viewQuizDrops = function(config) {
        var occupied = A2($elm$core$List$filterMap, $elm$core$Basics$identity, A2($elm$core$List$indexedMap, F2(function(i, state) {
            if (state.$ === "Drop") {
                if (state.c.b) {
                    if (!state.c.b.b) {
                        var _v3 = state.c;
                        var state_ = _v3.a;
                        return $elm$core$Maybe$Just(_List_fromArray([
                            i,
                            state_
                        ]));
                    } else {
                        var state_ = state.c;
                        return $elm$core$Maybe$Just(state_);
                    }
                } else return $elm$core$Maybe$Nothing;
            } else return $elm$core$Maybe$Nothing;
        }), $elm$core$Array$toList(config.input.state)));
        return $elm$core$List$concat(A2($elm$core$List$indexedMap, F2(function(id, _v0) {
            var state = _v0.a;
            var option = _v0.b;
            if (state.$ === "Drop") {
                var active = state.b;
                return A2($elm$core$List$indexedMap, F2(function(i, o) {
                    return A2($elm$core$List$member, _List_fromArray([
                        id,
                        i
                    ]), occupied) ? $elm$html$Html$text("") : A2($elm$html$Html$span, A3($andre_dietrich$elm_conditional$Conditional$List$appendIf, config.input.active, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                        $elm$html$Html$Attributes$draggable("true"),
                        A2($author$project$Lia$Markdown$Inline$View$dragEvent, config, {
                            event: "ondragend",
                            i: i,
                            id: id,
                            msg: "dragend"
                        }),
                        A2($author$project$Lia$Markdown$Inline$View$dragEvent, config, {
                            event: "ondragstart",
                            i: i,
                            id: id,
                            msg: "dragstart"
                        }),
                        A2($author$project$Lia$Markdown$Inline$View$dragEvent, config, {
                            event: "onclick",
                            i: i,
                            id: id,
                            msg: "dragsource"
                        }),
                        $author$project$Lia$Markdown$Inline$View$keyDownEvent(A3(config.input.on, "dragsource", id, A2($elm$json$Json$Encode$encode, 0, A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, _List_fromArray([
                            id,
                            i
                        ])))))
                    ]), _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "border", "3px dotted #888"),
                        A2($elm$html$Html$Attributes$style, "margin", "0.25rem"),
                        A2($elm$html$Html$Attributes$style, "padding", "1rem"),
                        A2($elm$html$Html$Attributes$style, "background-color", "#f9f9f9"),
                        A2($elm$html$Html$Attributes$style, "border-radius", "4px"),
                        A2($elm$html$Html$Attributes$style, "display", "inline-block"),
                        $tesk9$accessible_html$Accessibility$Role$button,
                        $elm$html$Html$Attributes$tabindex(0),
                        A2($elm$html$Html$Attributes$attribute, "aria-grabbed", active ? "true" : "false")
                    ])), A2($author$project$Lia$Markdown$Inline$View$viewer, config, o));
                }), option);
            } else return _List_Nil;
        }), A3($elm$core$List$map2, $elm$core$Tuple$pair, $elm$core$Array$toList(config.input.state), $elm$core$Array$toList(config.input.options))));
    };
    var $author$project$Lia$Markdown$View$quizControl = F5(function(config, labeledBy, attr, quiz, solution) {
        return A2($author$project$Lia$Markdown$View$scriptView, config.view, function() {
            if (solution.$ === "Nothing") return A2($elm$core$Tuple$mapSecond, $elm$html$Html$map($author$project$Lia$Markdown$Update$UpdateQuiz), A2($elm$core$Tuple$mapSecond, $elm$html$Html$div(A2($author$project$Lia$Markdown$HTML$Attributes$annotation, A2($author$project$Lia$Markdown$Quiz$View$class, quiz.id, config.section.quiz_vector), attr)), A4($author$project$Lia$Markdown$Quiz$View$view, config.main, labeledBy, quiz, config.section.quiz_vector)));
            else {
                var _v22 = solution.a;
                var answer = _v22.a;
                var hidden_effects = _v22.b;
                return A2($author$project$Lia$Markdown$Quiz$View$showSolution, quiz, config.section.quiz_vector) ? A2($elm$core$Tuple$mapSecond, $elm$html$Html$div(A2($author$project$Lia$Markdown$HTML$Attributes$annotation, A2($author$project$Lia$Markdown$Quiz$View$class, quiz.id, config.section.quiz_vector), attr)), A2($elm$core$Tuple$mapSecond, function(list) {
                    return A2($elm$core$List$append, list, _List_fromArray([
                        A2($elm$html$Html$div, _List_fromArray([
                            $elm$html$Html$Attributes$class("lia-quiz__solution")
                        ]), A2($elm$core$List$map, $author$project$Lia$Markdown$View$view_block(config), answer))
                    ]));
                }, A2($elm$core$Tuple$mapSecond, $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Update$UpdateQuiz)), A4($author$project$Lia$Markdown$Quiz$View$view, config.main, labeledBy, quiz, config.section.quiz_vector)))) : A2($elm$core$Tuple$mapSecond, $elm$html$Html$div(A2($author$project$Lia$Markdown$HTML$Attributes$annotation, A2($author$project$Lia$Markdown$Quiz$View$class, quiz.id, config.section.quiz_vector), attr)), A2($elm$core$Tuple$mapSecond, $elm$core$List$map($elm$html$Html$map($author$project$Lia$Markdown$Update$UpdateQuiz)), A4($author$project$Lia$Markdown$Quiz$View$view, config.main, labeledBy, quiz, config.section.quiz_vector)));
            }
        }());
    });
    var $author$project$Lia$Markdown$View$svgElement = F2(function(config, list) {
        return A2($elm$html$Html$div, _List_Nil, function() {
            if (list.b && list.a.$ === "Paragraph" && !list.a.a.b && !list.b.b) {
                var _v20 = list.a;
                var content = _v20.b;
                return config.view(content);
            } else return A2($elm$core$List$map, $author$project$Lia$Markdown$View$view_block(config), list);
        }());
    });
    var $author$project$Lia$Markdown$View$viewBlocks = function(config) {
        return $elm$core$List$map($author$project$Lia$Markdown$View$view_block(config));
    };
    var $author$project$Lia$Markdown$View$viewHTMLBlock = F3(function(config, attr, node) {
        return A4($author$project$Lia$Markdown$HTML$View$view, $elm$html$Html$div, $author$project$Lia$Markdown$View$view_block(config), attr, node);
    });
    var $author$project$Lia$Markdown$View$viewQuiz = F5(function(config, labeledBy, attr, quiz, solution) {
        var _v17 = A3($author$project$Lia$Markdown$Quiz$View$maybeConfig, config.main, quiz, config.section.quiz_vector);
        if (_v17.$ === "Just") {
            var _v18 = _v17.a;
            var main = _v18.a;
            var md = _v18.b;
            var randomize = _v18.c;
            var mainConfig = A2($author$project$Lia$Markdown$Config$setMain, main, config);
            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                A2($author$project$Lia$Markdown$View$view_block, mainConfig, md),
                A2($elm$html$Html$map, $author$project$Lia$Markdown$Update$Script, A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "flex-wrap", "wrap"),
                    A2($elm$html$Html$Attributes$style, "gap", "0.5rem"),
                    A2($elm$html$Html$Attributes$style, "align-items", "flex-start")
                ]), A2($author$project$Lia$Utils$shuffle, randomize, $author$project$Lia$Markdown$Inline$View$viewQuizDrops(mainConfig.main)))),
                A5($author$project$Lia$Markdown$View$quizControl, config, labeledBy, attr, quiz, solution)
            ]));
        } else return A5($author$project$Lia$Markdown$View$quizControl, config, labeledBy, attr, quiz, solution);
    });
    var $author$project$Lia$Markdown$View$viewQuote = F3(function(config, attr, elements) {
        if (elements.b && elements.a.$ === "Paragraph" && elements.b.b && elements.b.a.$ === "Citation" && !elements.b.b.b) {
            var _v14 = elements.a;
            var pAttr = _v14.a;
            var pElement = _v14.b;
            var _v15 = elements.b;
            var _v16 = _v15.a;
            var cAttr = _v16.a;
            var citation = _v16.b;
            return A2($elm$html$Html$blockquote, A2($elm$core$List$cons, $elm$html$Html$Attributes$cite($elm$core$String$trim(A2($author$project$Lia$Markdown$Inline$Stringify$stringify_, config.main, citation))), A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-quote", attr)), _List_fromArray([
                A2($elm$html$Html$em, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-quote__text")
                ]), _List_fromArray([
                    A2($author$project$Lia$Markdown$View$view_block, config, A2($author$project$Lia$Markdown$Types$Paragraph, pAttr, pElement))
                ])),
                A2($elm$html$Html$cite, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-quote__cite", cAttr), A2($elm$core$List$cons, $elm$html$Html$text("―"), config.view(citation)))
            ]));
        } else return A2($elm$html$Html$blockquote, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-quote", attr), A2($elm$core$List$map, $author$project$Lia$Markdown$View$view_block(config), elements));
    });
    var $author$project$Lia$Markdown$View$view_ascii = F3(function(config, attr, _v12) {
        var caption = _v12.a;
        var image = _v12.b;
        return A3($author$project$Lia$Markdown$View$svgFigure, config, caption, A3($andre_dietrich$elm_svgbob$SvgBob$drawElements, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), $author$project$Lia$Markdown$View$svgElement(config), A3($elm$core$Basics$apL, $andre_dietrich$elm_svgbob$SvgBob$setColorsIn, config.light ? {
            background: "white",
            stroke: "black",
            text: "#4b4b4b"
        } : {
            background: "#323232",
            stroke: "#ddd",
            text: "white"
        }, image)));
    });
    var $author$project$Lia$Markdown$View$view_block = F2(function(config, block) {
        view_block: while(true)switch(block.$){
            case "HLine":
                var attr = block.a;
                return A2($elm$html$Html$hr, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-divider", attr), _List_Nil);
            case "Paragraph":
                if (block.b.b && !block.b.b.b) {
                    var attr = block.a;
                    var _v2 = block.b;
                    var element = _v2.a;
                    var _v3 = $author$project$Lia$Markdown$Inline$Types$htmlBlock(element);
                    if (_v3.$ === "Just") {
                        var _v4 = _v3.a;
                        var name = _v4.a;
                        var attributes = _v4.b;
                        var inlines = _v4.c;
                        return A4($author$project$Lia$Markdown$HTML$View$view, $elm$html$Html$div, A2($elm$core$Basics$composeR, config.view, A2($elm$core$Basics$composeR, $elm$core$List$head, $elm$core$Maybe$withDefault(A2($elm$html$Html$p, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-paragraph", attr), config.view(_List_fromArray([
                            element
                        ])))))), attr, A3($author$project$Lia$Markdown$HTML$Types$Node, name, attributes, _List_fromArray([
                            inlines
                        ])));
                    } else return $author$project$Lia$Markdown$Inline$Types$mediaBlock(element) ? _Utils_eq(attr, _List_Nil) ? A2($elm$core$Maybe$withDefault, $elm$html$Html$text(""), $elm$core$List$head(config.view(_List_fromArray([
                        element
                    ])))) : A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(attr), config.view(_List_fromArray([
                        element
                    ]))) : A2($elm$html$Html$p, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-paragraph", attr), config.view(_List_fromArray([
                        element
                    ])));
                } else {
                    var attr = block.a;
                    var elements = block.b;
                    return A2($elm$html$Html$p, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, $author$project$Lia$Markdown$Inline$Types$mediaBlock, $elm$core$List$head(elements))) ? "lia-paragraph clearfix" : "lia-paragraph", attr), config.view(elements));
                }
            case "Effect":
                var attr = block.a;
                var e = block.b;
                return A5($author$project$Lia$Markdown$Effect$View$block, config.main, config.section.effect_model, attr, e, A2($author$project$Lia$Markdown$View$viewBlocks, config, e.content));
            case "BulletList":
                var attr = block.a;
                var list = block.b;
                return A2($elm$html$Html$ul, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-list--unordered", attr), A2($author$project$Lia$Markdown$View$view_bulletList, config, list));
            case "OrderedList":
                var attr = block.a;
                var list = block.b;
                return A2($elm$html$Html$ol, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-list--ordered", attr), A2($author$project$Lia$Markdown$View$view_list, config, list));
            case "Table":
                var attr = block.a;
                var table = block.b;
                return A3($author$project$Lia$Markdown$Table$View$view, config, attr, table);
            case "Quote":
                var attr = block.a;
                var quote = block.b;
                return A3($author$project$Lia$Markdown$View$viewQuote, config, attr, quote);
            case "HTML":
                var attr = block.a;
                var node = block.b;
                return A3($author$project$Lia$Markdown$View$viewHTMLBlock, config, attr, node);
            case "Code":
                var code = block.a;
                return A2($elm$html$Html$map, $author$project$Lia$Markdown$Update$UpdateCode, $author$project$Lia$Markdown$Code$View$view({
                    code: code,
                    cursors: A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, function($) {
                        return $.data;
                    }, A2($elm$core$Basics$composeR, function($) {
                        return $.cursor;
                    }, $elm$core$List$filter(function(cursor) {
                        return _Utils_eq(cursor.section, config.section.id);
                    }))), config.main.sync)),
                    lang: config.main.lang,
                    model: config.section.code_model,
                    sync: A2($elm$core$Maybe$withDefault, $elm$core$Array$empty, A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, function($) {
                        return $.data;
                    }, A2($elm$core$Basics$composeR, function($) {
                        return $.code;
                    }, $elm$core$Dict$get(config.section.id))), config.main.sync)),
                    theme: config.ace_theme
                }));
            case "Quiz":
                var attr = block.a;
                var quiz = block.b;
                var solution = block.c;
                return A5($author$project$Lia$Markdown$View$viewQuiz, config, $elm$core$Maybe$Nothing, attr, quiz, solution);
            case "Survey":
                var attr = block.a;
                var survey = block.b;
                return A2($author$project$Lia$Markdown$View$scriptView, config.view, A2($elm$core$Tuple$mapSecond, $elm$html$Html$map($author$project$Lia$Markdown$Update$UpdateSurvey), A4($author$project$Lia$Markdown$Survey$View$view, config.main, attr, survey, config.section.survey_vector)));
            case "Comment":
                var _v5 = block.a;
                var id1 = _v5.a;
                var id2 = _v5.b;
                var _v6 = _Utils_Tuple2(config.mode, A4($author$project$Lia$Markdown$Effect$Model$get_paragraph, !_Utils_eq(config.main.visible, $elm$core$Maybe$Nothing), id1, id2, config.section.effect_model));
                _v6$2: while(true){
                    if (_v6.b.$ === "Just") switch(_v6.a.$){
                        case "Textbook":
                            var _v7 = _v6.a;
                            var _v8 = _v6.b.a;
                            var comment = _v8.b;
                            var $temp$config = config, $temp$block = A2($author$project$Lia$Markdown$Types$Paragraph, comment.attr, comment.content);
                            config = $temp$config;
                            block = $temp$block;
                            continue view_block;
                        case "Presentation":
                            var _v9 = _v6.a;
                            var _v10 = _v6.b.a;
                            var narrator = _v10.a;
                            var comment = _v10.b;
                            return A2($elm$html$Html$map, $author$project$Lia$Markdown$Update$Script, A2($elm$html$Html$div, $author$project$Lia$Markdown$HTML$Attributes$toAttribute(A2($elm$core$List$append, comment.attr, $author$project$Lia$Markdown$View$addTranslation({
                                audio: comment.audio,
                                hidden: true,
                                id: id1,
                                narrator: narrator,
                                translations: config.main.translations
                            }))), A2($author$project$Lia$Markdown$Inline$View$reduce, config.main, comment.content)));
                        default:
                            break _v6$2;
                    }
                    else break _v6$2;
                }
                return $elm$html$Html$text("");
            case "Header":
                var attr = block.a;
                var _v11 = block.b;
                var sub = _v11.a;
                var elements = _v11.b;
                return A5($author$project$Lia$Markdown$View$header, config, config.section.indentation, sub, attr, elements);
            case "Chart":
                var attr = block.a;
                var chart = block.b;
                return A3($elm$html$Html$Lazy$lazy2, $author$project$Lia$Markdown$Chart$View$view, {
                    attr: attr,
                    lang: config.main.lang,
                    light: config.light
                }, chart);
            case "ASCII":
                var attr = block.a;
                var bob = block.b;
                return A3($author$project$Lia$Markdown$View$view_ascii, config, attr, bob);
            case "Task":
                var attr = block.a;
                var list = block.b;
                return A2($author$project$Lia$Markdown$View$scriptView, config.view, A2($elm$core$Tuple$mapSecond, $elm$html$Html$map($author$project$Lia$Markdown$Update$UpdateTask), A4($author$project$Lia$Markdown$Task$View$view, config.main, config.section.task_vector, attr, list)));
            case "Gallery":
                var attr = block.a;
                var media = block.b;
                return A2($elm$html$Html$map, $author$project$Lia$Markdown$Update$UpdateGallery, A4($author$project$Lia$Markdown$Gallery$View$view, config.main, config.section.gallery_vector, attr, media));
            case "Citation":
                var attr = block.a;
                var quote = block.b;
                return A2($elm$html$Html$cite, A2($author$project$Lia$Markdown$HTML$Attributes$annotation, "lia-cite", attr), A2($elm$core$List$cons, $elm$html$Html$text("—"), config.view(quote)));
            case "Problem":
                var element = block.a;
                return A2($elm$html$Html$p, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-problem")
                ]), config.view(element));
            default:
                return $elm$html$Html$text("");
        }
    });
    var $author$project$Lia$Markdown$View$view_bulletList = function(config) {
        var viewer = A2($elm$core$Basics$composeR, $elm$core$List$map($author$project$Lia$Markdown$View$view_block(config)), $elm$html$Html$li(_List_Nil));
        return $elm$core$List$map(viewer);
    };
    var $author$project$Lia$Markdown$View$view_list = function(config) {
        var viewer = function(_v0) {
            var value = _v0.a;
            var sub_list = _v0.b;
            return A2($elm$html$Html$li, _List_fromArray([
                $elm$html$Html$Attributes$value(value)
            ]), A2($elm$core$List$map, $author$project$Lia$Markdown$View$view_block(config), sub_list));
        };
        return $elm$core$List$map(viewer);
    };
    var $author$project$Lia$Markdown$View$subView = F4(function(config, slide, id, sub) {
        return A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Effect$Script$Types$Sub(id)), function() {
            if (sub.$ === "SubSection") {
                var x = sub.a;
                var section = config.section;
                var main = config.main;
                var input = main.input;
                var effects = config.section.effect_model;
                return A2($elm$core$List$map, $author$project$Lia$Markdown$View$view_block(_Utils_update(config, {
                    main: _Utils_update(main, {
                        input: _Utils_update(input, {
                            path: A2($elm$core$List$cons, _Utils_Tuple2("effect", slide), A2($elm$core$List$cons, _Utils_Tuple2("sub", id), input.path))
                        }),
                        scripts: x.effect_model.javascript
                    }),
                    section: _Utils_update(section, {
                        code_model: x.code_model,
                        effect_model: _Utils_update(effects, {
                            comments: x.effect_model.comments,
                            javascript: x.effect_model.javascript
                        }),
                        quiz_vector: x.quiz_vector,
                        survey_vector: x.survey_vector,
                        table_vector: x.table_vector
                    })
                })), x.body);
            } else {
                var x = sub.a;
                var main = config.main;
                return A2($elm$core$List$map, $elm$html$Html$map($author$project$Lia$Markdown$Update$Script), A2($author$project$Lia$Markdown$Inline$View$viewer, _Utils_update(main, {
                    scripts: x.effect_model.javascript
                }), x.body));
            }
        }());
    });
    var $tesk9$accessible_html$Accessibility$Landmark$main_ = $tesk9$accessible_html$Accessibility$Utils$role("main");
    var $author$project$Lia$Markdown$View$viewMain = function(hidden) {
        return $elm$html$Html$main_(hidden ? _List_fromArray([
            $elm$html$Html$Attributes$hidden(hidden)
        ]) : _List_fromArray([
            $elm$html$Html$Attributes$class("lia-slide__content"),
            $tesk9$accessible_html$Accessibility$Landmark$main_,
            $tesk9$accessible_html$Accessibility$Live$polite
        ]));
    };
    var $elm$html$Html$Attributes$align = $elm$html$Html$Attributes$stringProperty("align");
    var $author$project$Lia$Markdown$Footnote$View$definition = F2(function(fn, _v0) {
        var key = _v0.a;
        var val = _v0.b;
        return A2($elm$html$Html$tr, _List_Nil, _List_fromArray([
            A2($elm$html$Html$td, _List_fromArray([
                A2($elm$html$Html$Attributes$attribute, "valign", "top"),
                A2($elm$html$Html$Attributes$style, "padding-right", "10px")
            ]), _List_fromArray([
                A2($elm$html$Html$p, _List_fromArray([
                    $elm$html$Html$Attributes$id($author$project$Lia$Markdown$Footnote$View$by(key))
                ]), _List_fromArray([
                    $author$project$Lia$Markdown$Footnote$View$braces(key)
                ]))
            ])),
            A2($elm$html$Html$td, _List_fromArray([
                A2($elm$html$Html$Attributes$attribute, "valign", "top")
            ]), A2($elm$core$List$map, fn, val))
        ]));
    });
    var $author$project$Lia$Markdown$Footnote$Model$empty = $elm$core$Dict$isEmpty;
    var $author$project$Lia$Markdown$Footnote$Model$toList = $elm$core$Dict$toList;
    var $author$project$Lia$Markdown$Footnote$View$block = F2(function(fn, model) {
        if ($author$project$Lia$Markdown$Footnote$Model$empty(model)) return $elm$html$Html$text("");
        else {
            var def = $author$project$Lia$Markdown$Footnote$View$definition(fn);
            return A2($elm$html$Html$footer, _List_Nil, _List_fromArray([
                A2($elm$html$Html$table, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "padding", "-10px"),
                    A2($elm$html$Html$Attributes$style, "border-top", "2px solid black"),
                    A2($elm$html$Html$Attributes$style, "-ms-transform", "scale(0.8, 0.8)"),
                    A2($elm$html$Html$Attributes$style, "-ms-transform-origin", "0 50%"),
                    A2($elm$html$Html$Attributes$style, "-webkit-transform", "scale(0.8, 0.8)"),
                    A2($elm$html$Html$Attributes$style, "-webkit-transform-origin-x", "0"),
                    A2($elm$html$Html$Attributes$style, "transform", "scale(0.8, 0.8)"),
                    A2($elm$html$Html$Attributes$style, "transform-origin", "0 50%"),
                    $elm$html$Html$Attributes$align("left")
                ]), A2($elm$core$List$map, def, $author$project$Lia$Markdown$Footnote$Model$toList(model)))
            ]));
        }
    });
    var $author$project$Lia$Markdown$HTML$Json$encode = F2(function(encoder, node) {
        switch(node.$){
            case "Node":
                var tag = node.a;
                var a = node.b;
                var content = node.c;
                return _Utils_Tuple2("Node", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("tag", $elm$json$Json$Encode$string(tag)),
                    $author$project$Lia$Markdown$HTML$Json$encParameters(a),
                    _Utils_Tuple2("content", A2($elm$json$Json$Encode$list, encoder, content))
                ])));
            case "InnerHtml":
                var code = node.a;
                return _Utils_Tuple2("InnerHtml", $elm$json$Json$Encode$string(code));
            case "OuterHtml":
                var tag = node.a;
                var a = node.b;
                var content = node.c;
                return _Utils_Tuple2("OuterHtml", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("tag", $elm$json$Json$Encode$string(tag)),
                    $author$project$Lia$Markdown$HTML$Json$encParameters(a),
                    _Utils_Tuple2("content", $elm$json$Json$Encode$string(content))
                ])));
            default:
                var a = node.a;
                var code = node.b;
                var foreignObjects = node.c;
                return _Utils_Tuple2("SvgNode", $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("body", $elm$json$Json$Encode$string(code)),
                    $author$project$Lia$Markdown$HTML$Json$encParameters(a),
                    _Utils_Tuple2("foreignObjects", A2($elm$json$Json$Encode$list, function(_v1) {
                        var attr = _v1.a;
                        var content = _v1.b;
                        return $elm$json$Json$Encode$object(_List_fromArray([
                            $author$project$Lia$Markdown$HTML$Json$encParameters(attr),
                            _Utils_Tuple2("content", A2($elm$json$Json$Encode$list, encoder, content))
                        ]));
                    }, foreignObjects))
                ])));
        }
    });
    var $author$project$Lia$Markdown$Quiz$Block$Json$encode = function(quiz) {
        return _Utils_Tuple2(function() {
            var _v0 = quiz.solution;
            switch(_v0.$){
                case "Text":
                    return "Text";
                case "Select":
                    return "Select";
                default:
                    return "Drop";
            }
        }(), $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("options", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, quiz.options)),
            _Utils_Tuple2("solution", $author$project$Lia$Markdown$Quiz$Block$Json$fromState(quiz.solution))
        ])));
    };
    var $author$project$Lia$Markdown$Quiz$Matrix$Json$encode = function(quiz) {
        return _Utils_Tuple2($author$project$Lia$Markdown$Quiz$Matrix$Json$uid, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("headers", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, quiz.headers)),
            _Utils_Tuple2("options", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, quiz.options)),
            _Utils_Tuple2("solution", $author$project$Lia$Markdown$Quiz$Matrix$Json$fromState(quiz.solution))
        ])));
    };
    var $author$project$Lia$Markdown$Quiz$Multi$Json$encode = function(quiz) {
        return _Utils_Tuple2($author$project$Lia$Markdown$Quiz$Multi$Json$uid, $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("elements", $elm$json$Json$Encode$null),
            _Utils_Tuple2("options", A2($elm$json$Json$Encode$array, $elm$json$Json$Encode$list($author$project$Lia$Markdown$Inline$Json$Encode$encode), quiz.options)),
            _Utils_Tuple2("solution", $author$project$Lia$Markdown$Quiz$Multi$Json$fromState(quiz.solution))
        ])));
    };
    var $author$project$Lia$Markdown$Quiz$Vector$Json$encode = function(quiz) {
        return _Utils_Tuple2(function() {
            var _v0 = quiz.solution;
            if (_v0.$ === "SingleChoice") return "SingleChoice";
            else return "MultipleChoice";
        }(), $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("options", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, quiz.options)),
            _Utils_Tuple2("solution", $author$project$Lia$Markdown$Quiz$Vector$Json$fromState(quiz.solution))
        ])));
    };
    var $author$project$Lia$Markdown$Quiz$Json$encode = function(quiz) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            function() {
                var _v0 = quiz.quiz;
                switch(_v0.$){
                    case "Generic_Type":
                        return _Utils_Tuple2("Generic", $elm$json$Json$Encode$null);
                    case "Block_Type":
                        var block = _v0.a;
                        return $author$project$Lia$Markdown$Quiz$Block$Json$encode(block);
                    case "Multi_Type":
                        var multi = _v0.a;
                        return $author$project$Lia$Markdown$Quiz$Multi$Json$encode(multi);
                    case "Vector_Type":
                        var vector = _v0.a;
                        return $author$project$Lia$Markdown$Quiz$Vector$Json$encode(vector);
                    default:
                        var matrix = _v0.a;
                        return $author$project$Lia$Markdown$Quiz$Matrix$Json$encode(matrix);
                }
            }(),
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(quiz.id)),
            _Utils_Tuple2("hints", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, quiz.hints))
        ]));
    };
    var $author$project$Lia$Markdown$Survey$Json$encode = function(survey) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(survey.id)),
            function() {
                var _v0 = survey.survey;
                switch(_v0.$){
                    case "Text":
                        var i = _v0.a;
                        return _Utils_Tuple2("Text", $elm$json$Json$Encode$int(i));
                    case "Select":
                        var elements = _v0.a;
                        return _Utils_Tuple2("Select", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, elements));
                    case "DragAndDrop":
                        var elements = _v0.a;
                        return _Utils_Tuple2("Drop", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, elements));
                    case "Vector":
                        var bool = _v0.a;
                        var options = _v0.b;
                        return _Utils_Tuple2("Vector", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("bool", $elm$json$Json$Encode$bool(bool)),
                            _Utils_Tuple2("options", $elm$json$Json$Encode$object(A2($elm$core$List$map, $elm$core$Tuple$mapSecond($author$project$Lia$Markdown$Inline$Json$Encode$encode), options)))
                        ])));
                    default:
                        var bool = _v0.a;
                        var cols = _v0.b;
                        var ids = _v0.c;
                        var rows = _v0.d;
                        return _Utils_Tuple2("Matrix", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("bool", $elm$json$Json$Encode$bool(bool)),
                            _Utils_Tuple2("cols", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, cols)),
                            _Utils_Tuple2("ids", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, ids)),
                            _Utils_Tuple2("rows", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, rows))
                        ])));
                }
            }()
        ]));
    };
    var $author$project$Lia$Markdown$Table$Json$cell = function(_v0) {
        var p = _v0.a;
        var inlines = _v0.b;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("cell", $author$project$Lia$Markdown$Inline$Json$Encode$encode(inlines)),
            _Utils_Tuple2("a", $elm$json$Json$Encode$null)
        ]));
    };
    var $author$project$Lia$Markdown$Table$Json$encode = function(table) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("class", $elm$json$Json$Encode$string(function() {
                var _v0 = table._class;
                switch(_v0.$){
                    case "None":
                        return "none";
                    case "LinePlot":
                        return "lineplot";
                    case "ScatterPlot":
                        return "scatterplot";
                    case "BarChart":
                        return "barchart";
                    case "PieChart":
                        return "piechart";
                    case "HeatMap":
                        return "heatmap";
                    case "Radar":
                        return "radar";
                    case "Parallel":
                        return "parallel";
                    case "Sankey":
                        return "sankey";
                    case "BoxPlot":
                        return "boxplot";
                    case "Graph":
                        return "graph";
                    case "Map":
                        return "map";
                    default:
                        return "funnel";
                }
            }())),
            _Utils_Tuple2("head", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Table$Json$cell, table.head)),
            _Utils_Tuple2("format", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, table.format)),
            _Utils_Tuple2("body", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$list($author$project$Lia$Markdown$Table$Json$cell), table.body)),
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(table.id))
        ]));
    };
    var $author$project$Lia$Markdown$Task$Json$encode = function(task) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$int(task.id)),
            _Utils_Tuple2("tasks", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Inline$Json$Encode$encode, task.task))
        ]));
    };
    var $author$project$Lia$Markdown$HTML$Json$maybeEncParameters = function(a) {
        return $elm$core$List$isEmpty(a) ? $elm$core$Basics$identity : $elm$core$List$cons($author$project$Lia$Markdown$HTML$Json$encParameters(a));
    };
    var $author$project$Lia$Markdown$Json$Encode$encBlock = function(b) {
        return $elm$json$Json$Encode$object(function() {
            switch(b.$){
                case "Paragraph":
                    var a = b.a;
                    var elements = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Paragraph", $author$project$Lia$Markdown$Inline$Json$Encode$encode(elements))
                    ]));
                case "HLine":
                    var a = b.a;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("HLine", $elm$json$Json$Encode$null)
                    ]));
                case "Quote":
                    var a = b.a;
                    var blocks = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Quote", $author$project$Lia$Markdown$Json$Encode$cyclic$encode()(blocks))
                    ]));
                case "BulletList":
                    var a = b.a;
                    var blocksList = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("BulletList", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Json$Encode$cyclic$encode(), blocksList))
                    ]));
                case "OrderedList":
                    var a = b.a;
                    var list = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("OrderedList", A2($elm$json$Json$Encode$list, $author$project$Lia$Markdown$Json$Encode$ol, list))
                    ]));
                case "Header":
                    var a = b.a;
                    var _v2 = b.b;
                    var level = _v2.a;
                    var elements = _v2.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Header", $author$project$Lia$Markdown$Inline$Json$Encode$encode(elements)),
                        _Utils_Tuple2("level", $elm$json$Json$Encode$int(level))
                    ]));
                case "Citation":
                    var a = b.a;
                    var elements = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Citation", $author$project$Lia$Markdown$Inline$Json$Encode$encode(elements))
                    ]));
                case "Problem":
                    var elements = b.a;
                    return _List_fromArray([
                        _Utils_Tuple2("Problem", $author$project$Lia$Markdown$Inline$Json$Encode$encode(elements))
                    ]);
                case "Quiz":
                    var a = b.a;
                    var quiz = b.b;
                    var solution = b.c;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Quiz", $author$project$Lia$Markdown$Quiz$Json$encode(quiz)),
                        _Utils_Tuple2("solution", function() {
                            if (solution.$ === "Nothing") return $elm$json$Json$Encode$null;
                            else {
                                var _v4 = solution.a;
                                var blocks = _v4.a;
                                var hidden_effects = _v4.b;
                                return $elm$json$Json$Encode$object(_List_fromArray([
                                    _Utils_Tuple2("hidden_effects", $elm$json$Json$Encode$int(hidden_effects)),
                                    _Utils_Tuple2("blocks", $author$project$Lia$Markdown$Json$Encode$cyclic$encode()(blocks))
                                ]));
                            }
                        }())
                    ]));
                case "Survey":
                    var a = b.a;
                    var survey = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Survey", $author$project$Lia$Markdown$Survey$Json$encode(survey))
                    ]));
                case "Task":
                    var a = b.a;
                    var tasks = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Task", $author$project$Lia$Markdown$Task$Json$encode(tasks))
                    ]));
                case "Gallery":
                    var a = b.a;
                    var media = b.b.media;
                    var id = b.b.id;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Gallery", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("media", $author$project$Lia$Markdown$Inline$Json$Encode$encode(media)),
                            _Utils_Tuple2("id", $elm$json$Json$Encode$int(id))
                        ])))
                    ]));
                case "Effect":
                    var a = b.a;
                    var eBlock = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Effect", $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("id", $elm$json$Json$Encode$int(eBlock.id)),
                            _Utils_Tuple2("begin", $elm$json$Json$Encode$int(eBlock.begin)),
                            _Utils_Tuple2("end", A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, eBlock.end))),
                            _Utils_Tuple2("content", $author$project$Lia$Markdown$Json$Encode$cyclic$encode()(eBlock.content)),
                            _Utils_Tuple2("playback", $elm$json$Json$Encode$bool(eBlock.playback)),
                            _Utils_Tuple2("voice", $elm$json$Json$Encode$string(eBlock.voice))
                        ])))
                    ]));
                case "Table":
                    var a = b.a;
                    var table = b.b;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Table", $author$project$Lia$Markdown$Table$Json$encode(table))
                    ]));
                case "Chart":
                    var a = b.a;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("Chart", $elm$json$Json$Encode$null)
                    ]));
                case "Code":
                    return _List_fromArray([
                        _Utils_Tuple2("Code", $elm$json$Json$Encode$null)
                    ]);
                case "Comment":
                    return _List_fromArray([
                        _Utils_Tuple2("Comment", $elm$json$Json$Encode$null)
                    ]);
                case "ASCII":
                    var a = b.a;
                    return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
                        _Utils_Tuple2("ASCII", $elm$json$Json$Encode$null)
                    ]));
                case "HTML":
                    var a = b.a;
                    var node = b.b;
                    return A2($author$project$Lia$Markdown$Json$Encode$htmlEncode, a, node);
                default:
                    return _List_Nil;
            }
        }());
    };
    var $author$project$Lia$Markdown$Json$Encode$htmlEncode = F2(function(a, node) {
        return A2($author$project$Lia$Markdown$HTML$Json$maybeEncParameters, a, _List_fromArray([
            A2($author$project$Lia$Markdown$HTML$Json$encode, $author$project$Lia$Markdown$Json$Encode$encBlock, node)
        ]));
    });
    var $author$project$Lia$Markdown$Json$Encode$ol = function(_v0) {
        var id = _v0.a;
        var blocks = _v0.b;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2(id, $author$project$Lia$Markdown$Json$Encode$cyclic$encode()(blocks))
        ]));
    };
    function $author$project$Lia$Markdown$Json$Encode$cyclic$encode() {
        return $elm$json$Json$Encode$list($author$project$Lia$Markdown$Json$Encode$encBlock);
    }
    try {
        var $author$project$Lia$Markdown$Json$Encode$encode = $author$project$Lia$Markdown$Json$Encode$cyclic$encode();
        $author$project$Lia$Markdown$Json$Encode$cyclic$encode = function() {
            return $author$project$Lia$Markdown$Json$Encode$encode;
        };
    } catch ($) {
        throw "Some top-level definitions from `Lia.Markdown.Json.Encode` are causing infinite recursion:\n\n  ┌─────┐\n  │    encode\n  │     ↓\n  │    encBlock\n  │     ↓\n  │    htmlEncode\n  │     ↓\n  │    ol\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!";
    }
    var $author$project$Lia$Markdown$View$toHash = A2($elm$core$Basics$composeR, $elm$core$List$singleton, A2($elm$core$Basics$composeR, $author$project$Lia$Markdown$Json$Encode$encode, A2($elm$core$Basics$composeR, $elm$json$Json$Encode$encode(0), A2($elm$core$Basics$composeR, $truqu$elm_md5$MD5$hex, A2($elm$core$String$slice, 0, 8)))));
    var $author$project$Lia$Markdown$View$fold = F3(function(config, output, blocks) {
        fold: while(true){
            _v0$3: while(true){
                if (!blocks.b) return $elm$core$List$reverse(output);
                else {
                    if (blocks.b.b && blocks.b.a.$ === "Quiz") switch(blocks.a.$){
                        case "Paragraph":
                            var _v1 = blocks.a;
                            var a = _v1.a;
                            var e = _v1.b;
                            var _v2 = blocks.b;
                            var _v3 = _v2.a;
                            var attr = _v3.a;
                            var quiz = _v3.b;
                            var solution = _v3.c;
                            var bs = _v2.b;
                            var id = $author$project$Lia$Markdown$View$toHash(A2($author$project$Lia$Markdown$Types$Paragraph, a, e));
                            var $temp$config = config, $temp$output = A2($elm$core$List$cons, A5($author$project$Lia$Markdown$View$viewQuiz, config, $elm$core$Maybe$Just(id), attr, quiz, solution), A2($elm$core$List$cons, A2($author$project$Lia$Markdown$View$view_block, config, A2($author$project$Lia$Markdown$Types$Paragraph, A2($elm$core$List$cons, _Utils_Tuple2("id", id), a), e)), output)), $temp$blocks = bs;
                            config = $temp$config;
                            output = $temp$output;
                            blocks = $temp$blocks;
                            continue fold;
                        case "HTML":
                            var _v4 = blocks.a;
                            var a = _v4.a;
                            var e = _v4.b;
                            var _v5 = blocks.b;
                            var _v6 = _v5.a;
                            var attr = _v6.a;
                            var quiz = _v6.b;
                            var solution = _v6.c;
                            var bs = _v5.b;
                            var id = $author$project$Lia$Markdown$View$toHash(A2($author$project$Lia$Markdown$Types$HTML, a, e));
                            var $temp$config = config, $temp$output = A2($elm$core$List$cons, A5($author$project$Lia$Markdown$View$viewQuiz, config, $elm$core$Maybe$Just(id), attr, quiz, solution), A2($elm$core$List$cons, A2($author$project$Lia$Markdown$View$view_block, config, A2($author$project$Lia$Markdown$Types$HTML, A2($elm$core$List$cons, _Utils_Tuple2("id", id), a), e)), output)), $temp$blocks = bs;
                            config = $temp$config;
                            output = $temp$output;
                            blocks = $temp$blocks;
                            continue fold;
                        default:
                            break _v0$3;
                    }
                    else break _v0$3;
                }
            }
            var b = blocks.a;
            var bs = blocks.b;
            var $temp$config = config, $temp$output = A2($elm$core$List$cons, A2($author$project$Lia$Markdown$View$view_block, config, b), output), $temp$blocks = bs;
            config = $temp$config;
            output = $temp$output;
            blocks = $temp$blocks;
            continue fold;
        }
    });
    var $author$project$Lia$Markdown$Effect$Model$getHiddenComments = A2($elm$core$Basics$composeR, $elm$core$Dict$toList, $elm$core$List$filterMap(function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        var _v1 = A2($elm$core$Array$get, 0, value.content);
        if (_v1.$ === "Just") {
            var first = _v1.a;
            return !first.visible ? $elm$core$Maybe$Just(function(text) {
                return _Utils_Tuple3(key, value.narrator, text);
            }($author$project$Lia$Markdown$Inline$Stringify$stringify(A3($author$project$Lia$Markdown$Effect$Model$getComment_Helper, value.content, 1, first).content))) : $elm$core$Maybe$Nothing;
        } else return $elm$core$Maybe$Nothing;
    }));
    var $author$project$Lia$Markdown$Update$FootnoteHide = {
        $: "FootnoteHide"
    };
    var $author$project$Lia$Markdown$Footnote$Model$getNote = F2(function(model, key) {
        return A2($elm$core$Dict$get, key, model);
    });
    var $author$project$Lia$Markdown$View$view_footnote = F3(function(viewer, key, footnotes) {
        var _v0 = A2($elm$core$Maybe$andThen, $author$project$Lia$Markdown$Footnote$Model$getNote(footnotes), key);
        if (_v0.$ === "Just") {
            var notes = _v0.a;
            return A3($author$project$Lia$Utils$modal, $author$project$Lia$Markdown$Update$FootnoteHide, $elm$core$Maybe$Nothing, _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "align-items", "center"),
                    A2($elm$html$Html$Attributes$style, "max-width", "90%")
                ]), $elm$core$List$singleton(A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "max-height", "92%"),
                    A2($elm$html$Html$Attributes$style, "overflow", "auto")
                ]), A2($elm$core$List$map, viewer, notes))))
            ]));
        } else return $elm$html$Html$text("");
    });
    var $author$project$Lia$Markdown$View$view_header = function(config) {
        return A2($elm$html$Html$header, _List_fromArray([
            $tesk9$accessible_html$Accessibility$Key$tabbable(false)
        ]), _List_fromArray([
            A5($author$project$Lia$Markdown$View$header, config, config.section.indentation, 0, _List_Nil, config.section.title)
        ]));
    };
    var $author$project$Lia$Markdown$View$view_body = F2(function(hidden, _v0) {
        var config = _v0.a;
        var footnote2show = _v0.b;
        var footnotes = _v0.c;
        return A2($elm$core$Basics$composeR, A2($author$project$Lia$Markdown$View$fold, config, _List_Nil), A2($elm$core$Basics$composeR, $elm$core$List$cons(A3($author$project$Lia$Markdown$View$view_footnote, $author$project$Lia$Markdown$View$view_block(config), footnote2show, footnotes)), A2($elm$core$Basics$composeR, $elm$core$List$cons($author$project$Lia$Markdown$View$view_header(config)), A2($elm$core$Basics$composeR, function(s) {
            return A2($elm$core$List$append, s, _Utils_eq(config.main.visible, $elm$core$Maybe$Nothing) ? _List_fromArray([
                A2($author$project$Lia$Markdown$Footnote$View$block, $author$project$Lia$Markdown$View$view_block(config), footnotes)
            ]) : _Utils_eq(config.mode, $author$project$Lia$Settings$Types$Presentation) ? A2($elm$core$List$map, function(_v1) {
                var id = _v1.a;
                var voice = _v1.b;
                var text = _v1.c;
                return A2($elm$html$Html$span, $author$project$Lia$Markdown$HTML$Attributes$toAttribute($author$project$Lia$Markdown$View$addTranslation({
                    audio: $elm$core$Array$empty,
                    hidden: true,
                    id: id,
                    narrator: voice,
                    translations: config.main.translations
                })), _List_fromArray([
                    $elm$html$Html$text(text)
                ]));
            }, $author$project$Lia$Markdown$Effect$Model$getHiddenComments(config.section.effect_model.comments)) : _List_Nil);
        }, $author$project$Lia$Markdown$View$viewMain(hidden)))));
    });
    var $author$project$Lia$Markdown$View$view = F3(function(hidden, persistent, config) {
        var _v0 = config.section.error;
        if (_v0.$ === "Nothing") return persistent || !hidden ? A3($author$project$Lia$Markdown$View$view_body, hidden, _Utils_Tuple3(A2($author$project$Lia$Markdown$Config$setSubViewer, $author$project$Lia$Markdown$View$subView(config), config), config.section.footnote2show, config.section.footnotes), config.section.body) : A2($author$project$Lia$Markdown$View$viewMain, hidden, _List_fromArray([
            $author$project$Lia$Markdown$View$view_header(config)
        ]));
        else {
            var msg = _v0.a;
            return A2($author$project$Lia$Markdown$View$viewMain, hidden, _List_fromArray([
                $author$project$Lia$Markdown$View$view_header(config),
                $elm$html$Html$text(msg)
            ]));
        }
    });
    var $author$project$Lia$View$showSection = F3(function(model, screen1, _v0) {
        var id = _v0.a;
        var section = _v0.b;
        return A2($elm$html$Html$map, $author$project$Lia$Update$UpdateMarkdown, A3($author$project$Lia$Markdown$View$view, !_Utils_eq(model.section_active, id), A2($elm$core$Maybe$withDefault, model.persistent, section.persistent), A3($author$project$Lia$View$initConfig, screen1, model, section)));
    });
    var $author$project$Lia$Chat$Update$Input = function(a) {
        return {
            $: "Input",
            a: a
        };
    };
    var $author$project$Lia$Chat$Update$Send = {
        $: "Send"
    };
    var $tesk9$accessible_html$Accessibility$Role$article = $tesk9$accessible_html$Accessibility$Utils$role("article");
    var $author$project$I18n$Translations$chatSend = function(lang) {
        switch(lang.$){
            case "Am":
                return "መልእክት ላክ";
            case "Ar":
                return "إرسال الرسالة";
            case "Bg":
                return "Изпрати съобщение";
            case "Bn":
                return "বার্তা পাঠান";
            case "De":
                return "Nachricht senden";
            case "Es":
                return "Enviar mensaje";
            case "Fa":
                return "ارسال پیام";
            case "Fr":
                return "Envoyer le message";
            case "Hi":
                return "संदेश भेजें";
            case "Hy":
                return "Ուղարկել նամակ";
            case "It":
                return "Invia messaggio";
            case "Ja":
                return "メッセージを送信する";
            case "Ka":
                return "შეტყობინების გაგზავნა";
            case "Ko":
                return "메시지 보내기";
            case "Nl":
                return "Bericht versturen";
            case "Pa":
                return "ਸੁਨੇਹਾ ਭੇਜੋ";
            case "Pt":
                return "Enviar mensagem";
            case "Ru":
                return "Отправить сообщение";
            case "Sw":
                return "Tuma ujumbe";
            case "Tw":
                return "發送訊息";
            case "Uk":
                return "Надіслати повідомлення";
            case "Ur":
                return "پیغام بھیجیں";
            case "Zh":
                return "发送消息";
            default:
                return "Send message";
        }
    };
    var $tesk9$accessible_html$Accessibility$Role$textBox = $tesk9$accessible_html$Accessibility$Utils$role("textbox");
    var $author$project$Lia$Markdown$Config$setID = F2(function(id, config) {
        var section = config.section;
        var main = config.main;
        return _Utils_update(config, {
            main: _Utils_update(main, {
                slide: id
            }),
            mode: $author$project$Lia$Settings$Types$Textbook,
            section: _Utils_update(section, {
                id: id
            })
        });
    });
    var $author$project$Lia$Markdown$View$viewContent = function(config) {
        var config_ = A2($author$project$Lia$Markdown$Config$setSubViewer, $author$project$Lia$Markdown$View$subView(config), config);
        return A3($author$project$Lia$Markdown$View$fold, config_, _List_Nil, config_.section.body);
    };
    var $author$project$Lia$Chat$View$viewMessage = F2(function(config, _v0) {
        var id = _v0.a;
        var section = _v0.b;
        var id_ = A2($elm$core$Maybe$withDefault, -1, $elm$core$String$toInt(id));
        return A2($elm$core$Tuple$pair, id, A2($elm$html$Html$map, $author$project$Lia$Chat$Update$UpdateMarkdown(id), A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin", "0.45rem 0.5rem"),
            A2($elm$html$Html$Attributes$style, "box-shadow", "0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)"),
            A2($elm$html$Html$Attributes$style, "padding", !section.effect_model.effects ? "1rem 1rem 0.1rem" : "1rem 1rem 0.1rem 3rem")
        ]), $author$project$Lia$Markdown$View$viewContent(A2($author$project$Lia$Markdown$Config$setID, id_, config(section))))));
    });
    var $author$project$Lia$Chat$View$view = F3(function(lang, config, model) {
        return A2($elm$html$Html$div, $author$project$Lia$Utils$noTranslate(_List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "column"),
            A2($elm$html$Html$Attributes$style, "position", "absolute"),
            A2($elm$html$Html$Attributes$style, "padding", "1rem")
        ])), _List_fromArray([
            A2($elm$html$Html$section, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "overflow", "auto"),
                $elm$html$Html$Attributes$id("lia-chat-messages"),
                $tesk9$accessible_html$Accessibility$Live$livePolite,
                $tesk9$accessible_html$Accessibility$Live$atomic(true)
            ]), $elm$core$List$singleton(A3($elm$html$Html$Keyed$node, "article", _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "flex-direction", "column"),
                A2($elm$html$Html$Attributes$style, "justify-content", "flex-end"),
                A2($elm$html$Html$Attributes$style, "bottom", "0"),
                $tesk9$accessible_html$Accessibility$Role$article
            ]), A2($elm$core$List$map, $author$project$Lia$Chat$View$viewMessage(config), $elm$core$Dict$toList(model.messages))))),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding", "0.5rem"),
                A2($elm$html$Html$Attributes$style, "height", "11.5rem")
            ]), _List_fromArray([
                A2($author$project$Lia$Utils$btnIcon, {
                    icon: "icon-send",
                    msg: function() {
                        var _v0 = $elm$core$String$trim(model.input);
                        if (_v0 === "") return $elm$core$Maybe$Nothing;
                        else return $elm$core$Maybe$Just($author$project$Lia$Chat$Update$Send);
                    }(),
                    tabbable: true,
                    title: $author$project$I18n$Translations$chatSend(lang)
                }, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "position", "absolute"),
                    A2($elm$html$Html$Attributes$style, "right", "2rem"),
                    A2($elm$html$Html$Attributes$style, "z-index", "100"),
                    A2($elm$html$Html$Attributes$style, "color", "#888"),
                    $elm$html$Html$Attributes$class("lia-btn--transparent"),
                    $tesk9$accessible_html$Accessibility$Aria$keyShortcuts(_List_fromArray([
                        "Ctrl-Enter",
                        "Command-Enter"
                    ]))
                ])),
                A2($author$project$Lia$Markdown$Code$Editor$editor, _List_fromArray([
                    $author$project$Lia$Markdown$Code$Editor$onChange($author$project$Lia$Chat$Update$Input),
                    $author$project$Lia$Markdown$Code$Editor$value(model.input),
                    A2($elm$html$Html$Attributes$style, "min-height", "10rem"),
                    A2($elm$html$Html$Attributes$style, "width", "100%"),
                    $author$project$Lia$Markdown$Code$Editor$maxLines(4),
                    $author$project$Lia$Markdown$Code$Editor$mode("markdown"),
                    $author$project$Lia$Markdown$Code$Editor$showGutter(false),
                    $elm$html$Html$Attributes$class("lia-code__input"),
                    $author$project$Lia$Markdown$Code$Editor$onCtrlEnter($author$project$Lia$Chat$Update$Send),
                    $tesk9$accessible_html$Accessibility$Role$textBox
                ]), _List_Nil)
            ]))
        ]));
    });
    var $author$project$Library$SplitPane$Bound$getValue = function(value) {
        return value.a;
    };
    var $author$project$Library$SplitPane$firstChildViewStyle = F2(function(display, _v0) {
        var state = _v0.a;
        var _v1 = state.splitterPosition;
        if (_v1.$ === "Px") {
            var p = _v1.a;
            var v = A2($elm$json$Json$Encode$encode, 0, $elm$json$Json$Encode$int($author$project$Library$SplitPane$Bound$getValue(p))) + "px";
            var _v2 = state.orientation;
            if (_v2.$ === "Horizontal") return _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", _Utils_eq(display, $author$project$Library$SplitPane$Both) || _Utils_eq(display, $author$project$Library$SplitPane$OnlyFirst) ? "flex" : "none"),
                A2($elm$html$Html$Attributes$style, "width", _Utils_eq(display, $author$project$Library$SplitPane$Both) || _Utils_eq(display, $author$project$Library$SplitPane$OnlyFirst) ? v : "0"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
                A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
                A2($elm$html$Html$Attributes$style, "position", "relative")
            ]);
            else return _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", !_Utils_eq(display, $author$project$Library$SplitPane$OnlySecond) ? "flex" : "none"),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", v),
                A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
                A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
                A2($elm$html$Html$Attributes$style, "position", "relative")
            ]);
        } else {
            var p = _v1.a;
            return _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", _Utils_eq(display, $author$project$Library$SplitPane$OnlySecond) ? "none" : "flex"),
                A2($elm$html$Html$Attributes$style, "flex", function() {
                    if (_Utils_eq(display, $author$project$Library$SplitPane$Both)) {
                        var v = A2($elm$json$Json$Encode$encode, 0, $elm$json$Json$Encode$float($author$project$Library$SplitPane$Bound$getValue(p)));
                        return v;
                    } else return "1 1 0%";
                }()),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
                A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
                A2($elm$html$Html$Attributes$style, "position", "relative")
            ]);
        }
    });
    var $author$project$Library$SplitPane$CustomSplitter = function(a) {
        return {
            $: "CustomSplitter",
            a: a
        };
    };
    var $author$project$Library$SplitPane$SplitterClick = function(a) {
        return {
            $: "SplitterClick",
            a: a
        };
    };
    var $elm$virtual_dom$VirtualDom$Custom = function(a) {
        return {
            $: "Custom",
            a: a
        };
    };
    var $elm$html$Html$Events$custom = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$Custom(decoder));
    });
    var $author$project$Library$SplitPane$DOMInfo = F6(function(x, y, touchX, touchY, parentWidth, parentHeight) {
        return {
            parentHeight: parentHeight,
            parentWidth: parentWidth,
            touchX: touchX,
            touchY: touchY,
            x: x,
            y: y
        };
    });
    var $author$project$Library$SplitPane$domInfo = A7($elm$json$Json$Decode$map6, $author$project$Library$SplitPane$DOMInfo, $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "clientX", $elm$json$Json$Decode$int)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "clientY", $elm$json$Json$Decode$int)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$at, _List_fromArray([
        "touches",
        "0",
        "clientX"
    ]), $elm$json$Json$Decode$int)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$at, _List_fromArray([
        "touches",
        "0",
        "clientY"
    ]), $elm$json$Json$Decode$int)), A2($elm$json$Json$Decode$at, _List_fromArray([
        "currentTarget",
        "parentElement",
        "clientWidth"
    ]), $elm$json$Json$Decode$int), A2($elm$json$Json$Decode$at, _List_fromArray([
        "currentTarget",
        "parentElement",
        "clientHeight"
    ]), $elm$json$Json$Decode$int));
    var $author$project$Library$SplitPane$onMouseDown = function(toMsg) {
        return A2($elm$html$Html$Events$custom, "mousedown", A2($elm$json$Json$Decode$map, function(d) {
            return {
                message: toMsg($author$project$Library$SplitPane$SplitterClick(d)),
                preventDefault: true,
                stopPropagation: false
            };
        }, $author$project$Library$SplitPane$domInfo));
    };
    var $author$project$Library$SplitPane$domInfoToPosition = function(_v0) {
        var x = _v0.x;
        var y = _v0.y;
        var touchX = _v0.touchX;
        var touchY = _v0.touchY;
        var _v1 = _Utils_Tuple2(_Utils_Tuple2(x, y), _Utils_Tuple2(touchX, touchY));
        if (_v1.b.a.$ === "Just" && _v1.b.b.$ === "Just") {
            var _v2 = _v1.b;
            var posX = _v2.a.a;
            var posY = _v2.b.a;
            return {
                x: posX,
                y: posY
            };
        } else {
            if (_v1.a.a.$ === "Just" && _v1.a.b.$ === "Just") {
                var _v3 = _v1.a;
                var posX = _v3.a.a;
                var posY = _v3.b.a;
                return {
                    x: posX,
                    y: posY
                };
            } else return {
                x: 0,
                y: 0
            };
        }
    };
    var $author$project$Library$SplitPane$onTouchCancel = function(toMsg) {
        return A2($elm$html$Html$Events$custom, "touchcancel", A2($elm$json$Json$Decode$map, function(d) {
            return {
                message: toMsg($author$project$Library$SplitPane$SplitterLeftAlone($author$project$Library$SplitPane$domInfoToPosition(d))),
                preventDefault: true,
                stopPropagation: true
            };
        }, $author$project$Library$SplitPane$domInfo));
    };
    var $author$project$Library$SplitPane$onTouchEnd = function(toMsg) {
        return A2($elm$html$Html$Events$custom, "touchend", A2($elm$json$Json$Decode$map, function(d) {
            return {
                message: toMsg($author$project$Library$SplitPane$SplitterLeftAlone($author$project$Library$SplitPane$domInfoToPosition(d))),
                preventDefault: true,
                stopPropagation: true
            };
        }, $author$project$Library$SplitPane$domInfo));
    };
    var $author$project$Library$SplitPane$onTouchMove = function(toMsg) {
        return A2($elm$html$Html$Events$custom, "touchmove", A2($elm$json$Json$Decode$map, function(d) {
            return {
                message: toMsg($author$project$Library$SplitPane$SplitterMove($author$project$Library$SplitPane$domInfoToPosition(d))),
                preventDefault: true,
                stopPropagation: true
            };
        }, $author$project$Library$SplitPane$domInfo));
    };
    var $author$project$Library$SplitPane$onTouchStart = function(toMsg) {
        return A2($elm$html$Html$Events$custom, "touchstart", A2($elm$json$Json$Decode$map, function(d) {
            return {
                message: toMsg($author$project$Library$SplitPane$SplitterClick(d)),
                preventDefault: true,
                stopPropagation: true
            };
        }, $author$project$Library$SplitPane$domInfo));
    };
    var $author$project$Library$SplitPane$createCustomSplitter = F2(function(toMsg, details) {
        return $author$project$Library$SplitPane$CustomSplitter(A2($elm$html$Html$span, A2($elm$core$List$cons, $author$project$Library$SplitPane$onMouseDown(toMsg), A2($elm$core$List$cons, $author$project$Library$SplitPane$onTouchStart(toMsg), A2($elm$core$List$cons, $author$project$Library$SplitPane$onTouchEnd(toMsg), A2($elm$core$List$cons, $author$project$Library$SplitPane$onTouchMove(toMsg), A2($elm$core$List$cons, $author$project$Library$SplitPane$onTouchCancel(toMsg), details.attributes))))), details.children));
    });
    var $author$project$Library$SplitPane$baseDefaultSplitterStyles = _List_fromArray([
        A2($elm$html$Html$Attributes$style, "width", "100%"),
        A2($elm$html$Html$Attributes$style, "background", "#000"),
        A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
        A2($elm$html$Html$Attributes$style, "opacity", ".2"),
        A2($elm$html$Html$Attributes$style, "zIndex", "1"),
        A2($elm$html$Html$Attributes$style, "webkitUserSelect", "none"),
        A2($elm$html$Html$Attributes$style, "mozUserSelect", "none"),
        A2($elm$html$Html$Attributes$style, "userSelect", "none"),
        A2($elm$html$Html$Attributes$style, "backgroundClip", "padding-box")
    ]);
    var $author$project$Library$SplitPane$defaultHorizontalSplitterStyle = F2(function(visible, dragState) {
        return _Utils_ap($author$project$Library$SplitPane$baseDefaultSplitterStyles, _Utils_ap(_List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "11px"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "margin", "0 -5px"),
            A2($elm$html$Html$Attributes$style, "borderLeft", "5px solid rgba(255, 255, 255, 0)"),
            A2($elm$html$Html$Attributes$style, "borderRight", "5px solid rgba(255, 255, 255, 0)")
        ]), function() {
            var _v0 = _Utils_Tuple2(visible, dragState);
            if (_v0.a.$ === "Both" && _v0.b.$ === "Draggable") {
                var _v1 = _v0.a;
                return _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "cursor", "col-resize"),
                    A2($elm$html$Html$Attributes$style, "display", "")
                ]);
            } else return _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "none")
            ]);
        }()));
    });
    var $author$project$Library$SplitPane$defaultVerticalSplitterStyle = F2(function(visible, dragState) {
        return _Utils_ap($author$project$Library$SplitPane$baseDefaultSplitterStyles, _Utils_ap(_List_fromArray([
            A2($elm$html$Html$Attributes$style, "height", "11px"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "margin", "-5px 0"),
            A2($elm$html$Html$Attributes$style, "borderTop", "5px solid rgba(255, 255, 255, 0)"),
            A2($elm$html$Html$Attributes$style, "borderBottom", "5px solid rgba(255, 255, 255, 0)")
        ]), function() {
            var _v0 = _Utils_Tuple2(visible, dragState);
            if (_v0.a.$ === "Both" && _v0.b.$ === "Draggable") {
                var _v1 = _v0.a;
                return _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "cursor", "row-resize")
                ]);
            } else return _List_Nil;
        }()));
    });
    var $author$project$Library$SplitPane$createDefaultSplitterDetails = F3(function(visible, ori, dragState) {
        if (ori.$ === "Horizontal") return {
            attributes: A2($author$project$Library$SplitPane$defaultHorizontalSplitterStyle, visible, dragState),
            children: _List_Nil
        };
        else return {
            attributes: A2($author$project$Library$SplitPane$defaultVerticalSplitterStyle, visible, dragState),
            children: _List_Nil
        };
    });
    var $author$project$Library$SplitPane$getConcreteSplitter = F4(function(visible, viewConfig, ori, dragState) {
        var _v0 = viewConfig.splitter;
        if (_v0.$ === "Just") {
            var splitter = _v0.a.a;
            return splitter;
        } else {
            var _v1 = A2($author$project$Library$SplitPane$createCustomSplitter, viewConfig.toMsg, A3($author$project$Library$SplitPane$createDefaultSplitterDetails, visible, ori, dragState));
            var defaultSplitter = _v1.a;
            return defaultSplitter;
        }
    });
    var $author$project$Library$SplitPane$paneContainerStyle = F2(function(display, ori) {
        return _List_fromArray([
            A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
            A2($elm$html$Html$Attributes$style, "display", _Utils_eq(display, $author$project$Library$SplitPane$Both) ? "flex" : "blocknone"),
            A2($elm$html$Html$Attributes$style, "flexDirection", function() {
                if (ori.$ === "Horizontal") return "row";
                else return "column";
            }()),
            A2($elm$html$Html$Attributes$style, "justifyContent", "center"),
            A2($elm$html$Html$Attributes$style, "alignItems", "center"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "boxSizing", "border-box")
        ]);
    });
    var $author$project$Library$SplitPane$secondChildViewStyle = F2(function(display, _v0) {
        var state = _v0.a;
        var _v1 = state.splitterPosition;
        if (_v1.$ === "Px") return _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", _Utils_eq(display, $author$project$Library$SplitPane$OnlyFirst) ? "none" : "flex"),
            A2($elm$html$Html$Attributes$style, "flex", "1"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
            A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
            A2($elm$html$Html$Attributes$style, "position", "relative")
        ]);
        else {
            var p = _v1.a;
            return _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", _Utils_eq(display, $author$project$Library$SplitPane$OnlyFirst) ? "none" : "flex"),
                A2($elm$html$Html$Attributes$style, "flex", function() {
                    if (_Utils_eq(display, $author$project$Library$SplitPane$OnlySecond)) return "1 1 0%";
                    else {
                        var v = A2($elm$json$Json$Encode$encode, 0, $elm$json$Json$Encode$float(1 - $author$project$Library$SplitPane$Bound$getValue(p)));
                        return v;
                    }
                }()),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
                A2($elm$html$Html$Attributes$style, "boxSizing", "border-box"),
                A2($elm$html$Html$Attributes$style, "position", "relative")
            ]);
        }
    });
    var $author$project$Library$SplitPane$view = F5(function(visible, _v0, firstView, secondView, _v1) {
        var viewConfig = _v0.a;
        var state = _v1.a;
        return A2($elm$html$Html$div, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("pane-container"), A2($author$project$Library$SplitPane$paneContainerStyle, visible, state.orientation)), _List_fromArray([
            A2($elm$html$Html$div, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("pane-first-view"), A2($author$project$Library$SplitPane$firstChildViewStyle, visible, $author$project$Library$SplitPane$State(state))), _List_fromArray([
                firstView
            ])),
            A4($author$project$Library$SplitPane$getConcreteSplitter, visible, viewConfig, state.orientation, state.dragState),
            A2($elm$html$Html$div, A2($elm$core$List$cons, $elm$html$Html$Attributes$class("pane-second-view"), A2($author$project$Library$SplitPane$secondChildViewStyle, visible, $author$project$Library$SplitPane$State(state))), _List_fromArray([
                secondView
            ]))
        ]));
    });
    var $author$project$Library$SplitPane$ViewConfig = function(a) {
        return {
            $: "ViewConfig",
            a: a
        };
    };
    var $author$project$Library$SplitPane$createViewConfig = function(_v0) {
        var toMsg = _v0.toMsg;
        var customSplitter = _v0.customSplitter;
        return $author$project$Library$SplitPane$ViewConfig({
            splitter: customSplitter,
            toMsg: toMsg
        });
    };
    var $author$project$Lia$View$viewConfig = $author$project$Library$SplitPane$createViewConfig({
        customSplitter: $elm$core$Maybe$Nothing,
        toMsg: $author$project$Lia$Update$Pane
    });
    var $author$project$Lia$View$viewPanes = F2(function(screen1, model) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-slide__container")
        ]), _List_fromArray([
            A5($author$project$Library$SplitPane$view, function() {
                var _v0 = _Utils_Tuple3(model.settings.chat.show, $author$project$Lia$Sync$Types$isConnected(model.sync.state), _Utils_cmp(screen1.width, $author$project$Const$globalBreakpoints.sm) > 0);
                if (_v0.a && _v0.b) {
                    if (_v0.c) return $author$project$Library$SplitPane$Both;
                    else return $author$project$Library$SplitPane$OnlySecond;
                } else return $author$project$Library$SplitPane$OnlyFirst;
            }(), $author$project$Lia$View$viewConfig, A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "overflow-y", "auto"),
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "justify-content", "center"),
                $elm$html$Html$Attributes$class("lia-slide__container"),
                A2($elm$html$Html$Attributes$style, "margin-top", "0px")
            ]), A2($elm$core$List$map, A2($author$project$Lia$View$showSection, model, screen1), $elm$core$Array$toIndexedList(model.sections))), A2($elm$html$Html$map, $author$project$Lia$Update$UpdateChat, A3($author$project$Lia$Chat$View$view, model.translation, A2($author$project$Lia$View$initConfig, screen1, model), model.chat)), model.pane)
        ]));
    });
    var $author$project$Lia$View$viewProgress = F2(function(model, effect_model) {
        var toPercent = F2(function(val, array) {
            return val * 100.0 / $elm$core$Array$length(array);
        });
        var percent = function() {
            var _v0 = model.settings.mode;
            if (_v0.$ === "Textbook") return A2(toPercent, model.section_active + 1, model.sections);
            else {
                var onePercent = A2(toPercent, 1, model.sections) / (effect_model.effects + 1) * (effect_model.visible + 1);
                return onePercent + A2(toPercent, model.section_active, model.sections);
            }
        }();
        return $elm$core$String$fromFloat(percent) + "%";
    });
    var $author$project$Lia$Markdown$Effect$Model$getVideoRecordings = $author$project$Lia$Markdown$Effect$Model$getRecordings(function($) {
        return $.video;
    });
    var $author$project$Library$Overlay$DragAt = function(a) {
        return {
            $: "DragAt",
            a: a
        };
    };
    var $author$project$Library$Overlay$DragEnd = {
        $: "DragEnd"
    };
    var $author$project$Library$Overlay$MouseMoveFollow = function(a) {
        return {
            $: "MouseMoveFollow",
            a: a
        };
    };
    var $author$project$Library$Overlay$MouseResizeFollow = function(a) {
        return {
            $: "MouseResizeFollow",
            a: a
        };
    };
    var $author$project$Library$Overlay$ResizeAt = function(a) {
        return {
            $: "ResizeAt",
            a: a
        };
    };
    var $author$project$Library$Overlay$ResizeEnd = {
        $: "ResizeEnd"
    };
    var $author$project$Library$Overlay$isFollowMove = function(mode) {
        if (mode.$ === "FollowMouse") return true;
        else return false;
    };
    var $author$project$Library$Overlay$isFollowResize = function(mode) {
        if (mode.$ === "FollowResize") return true;
        else return false;
    };
    var $author$project$Library$Overlay$isAnyFollowMode = function(mode) {
        return $author$project$Library$Overlay$isFollowMove(mode) || $author$project$Library$Overlay$isFollowResize(mode);
    };
    var $author$project$Library$Overlay$positionDecoder = A3($elm$json$Json$Decode$map2, $author$project$Library$Overlay$Position, A2($elm$json$Json$Decode$map, $elm$core$Basics$round, A2($elm$json$Json$Decode$field, "pageX", $elm$json$Json$Decode$float)), A2($elm$json$Json$Decode$map, $elm$core$Basics$round, A2($elm$json$Json$Decode$field, "pageY", $elm$json$Json$Decode$float)));
    var $author$project$Library$Overlay$onMouseMove = function(toMsg) {
        return A2($elm$html$Html$Events$on, "mousemove", A2($elm$json$Json$Decode$map, toMsg, $author$project$Library$Overlay$positionDecoder));
    };
    var $author$project$Library$Overlay$onMouseUp = function(msg) {
        return A2($elm$html$Html$Events$on, "mouseup", $elm$json$Json$Decode$succeed(msg));
    };
    var $author$project$Library$Overlay$onTouchEnd = function(msg) {
        return A2($elm$html$Html$Events$on, "touchend", $elm$json$Json$Decode$succeed(msg));
    };
    var $author$project$Library$Overlay$alwaysPreventDefault = function(msg) {
        return _Utils_Tuple2(msg, true);
    };
    var $elm$virtual_dom$VirtualDom$MayPreventDefault = function(a) {
        return {
            $: "MayPreventDefault",
            a: a
        };
    };
    var $elm$html$Html$Events$preventDefaultOn = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
    });
    var $author$project$Library$Overlay$touchPositionDecoder = A2($elm$json$Json$Decode$at, _List_fromArray([
        "touches",
        "0"
    ]), $author$project$Library$Overlay$positionDecoder);
    var $author$project$Library$Overlay$onTouchMove = function(toMsg) {
        return A2($elm$html$Html$Events$preventDefaultOn, "touchmove", A2($elm$json$Json$Decode$map, $author$project$Library$Overlay$alwaysPreventDefault, A2($elm$json$Json$Decode$map, toMsg, $author$project$Library$Overlay$touchPositionDecoder)));
    };
    var $author$project$Library$Overlay$backgroundDiv = function(model) {
        return !_Utils_eq(model.drag, $elm$core$Maybe$Nothing) || !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) || $author$project$Library$Overlay$isAnyFollowMode(model.mode) ? A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "position", "fixed"),
            A2($elm$html$Html$Attributes$style, "top", "0"),
            A2($elm$html$Html$Attributes$style, "left", "0"),
            A2($elm$html$Html$Attributes$style, "width", "100vw"),
            A2($elm$html$Html$Attributes$style, "height", "100vh"),
            A2($elm$html$Html$Attributes$style, "z-index", "40"),
            A2($elm$html$Html$Attributes$style, "background", "transparent"),
            $elm$html$Html$Attributes$tabindex(0),
            $author$project$Library$Overlay$onMouseMove(function(pos) {
                return !_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragAt(pos) : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeAt(pos) : $author$project$Library$Overlay$isFollowMove(model.mode) ? $author$project$Library$Overlay$MouseMoveFollow(pos) : $author$project$Library$Overlay$isFollowResize(model.mode) ? $author$project$Library$Overlay$MouseResizeFollow(pos) : $author$project$Library$Overlay$DragAt(pos);
            }),
            $author$project$Library$Overlay$onMouseUp(!_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragEnd : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeEnd : $author$project$Library$Overlay$DragEnd),
            $author$project$Library$Overlay$onTouchMove(function(pos) {
                return !_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragAt(pos) : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeAt(pos) : $author$project$Library$Overlay$isFollowMove(model.mode) ? $author$project$Library$Overlay$MouseMoveFollow(pos) : $author$project$Library$Overlay$isFollowResize(model.mode) ? $author$project$Library$Overlay$MouseResizeFollow(pos) : $author$project$Library$Overlay$DragAt(pos);
            }),
            $author$project$Library$Overlay$onTouchEnd(!_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragEnd : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeEnd : $author$project$Library$Overlay$DragEnd)
        ]), _List_Nil) : $elm$html$Html$text("");
    };
    var $author$project$Library$Overlay$DoubleClick = function(a) {
        return {
            $: "DoubleClick",
            a: a
        };
    };
    var $author$project$Library$Overlay$DoubleClickResize = function(a) {
        return {
            $: "DoubleClickResize",
            a: a
        };
    };
    var $author$project$Library$Overlay$DragStart = function(a) {
        return {
            $: "DragStart",
            a: a
        };
    };
    var $author$project$Library$Overlay$Foreign = function(a) {
        return {
            $: "Foreign",
            a: a
        };
    };
    var $author$project$Library$Overlay$Ignore = {
        $: "Ignore"
    };
    var $author$project$Library$Overlay$LostFocus = {
        $: "LostFocus"
    };
    var $author$project$Library$Overlay$ResizeStart = function(a) {
        return {
            $: "ResizeStart",
            a: a
        };
    };
    var $author$project$Library$Overlay$getBorderColor = function(mode) {
        switch(mode.$){
            case "FollowMouse":
                return "#ff5722";
            case "FollowResize":
                return "#4CAF50";
            case "Resize":
                return "#d3d3d3";
            default:
                return "#d3d3d3";
        }
    };
    var $author$project$Library$Overlay$modeToString = function(mode) {
        switch(mode.$){
            case "Move":
                return "Move";
            case "Resize":
                return "Resize";
            case "FollowMouse":
                return "Follow Mouse Movement";
            default:
                return "Follow Mouse Resize";
        }
    };
    var $author$project$Library$Overlay$onDoubleClick = function(toMsg) {
        return A2($elm$html$Html$Events$on, "dblclick", A2($elm$json$Json$Decode$map, toMsg, $author$project$Library$Overlay$positionDecoder));
    };
    var $author$project$Library$Overlay$Down = {
        $: "Down"
    };
    var $author$project$Library$Overlay$ExitFollowMode = {
        $: "ExitFollowMode"
    };
    var $author$project$Library$Overlay$Left = {
        $: "Left"
    };
    var $author$project$Library$Overlay$Right = {
        $: "Right"
    };
    var $author$project$Library$Overlay$ToggleMode = {
        $: "ToggleMode"
    };
    var $author$project$Library$Overlay$Up = {
        $: "Up"
    };
    var $author$project$Library$Overlay$ArrowMove = function(a) {
        return {
            $: "ArrowMove",
            a: a
        };
    };
    var $author$project$Library$Overlay$ArrowResize = function(a) {
        return {
            $: "ArrowResize",
            a: a
        };
    };
    var $author$project$Library$Overlay$arrowMsg = F2(function(mode, direction) {
        switch(mode.$){
            case "Move":
                return $author$project$Library$Overlay$ArrowMove(direction);
            case "Resize":
                return $author$project$Library$Overlay$ArrowResize(direction);
            case "FollowMouse":
                return $author$project$Library$Overlay$Ignore;
            default:
                return $author$project$Library$Overlay$Ignore;
        }
    });
    var $author$project$Library$Overlay$keyDecoder = function(mode) {
        return A2($elm$json$Json$Decode$map, function(keyCode) {
            switch(keyCode){
                case 13:
                    return {
                        message: $author$project$Library$Overlay$ToggleMode,
                        preventDefault: true,
                        stopPropagation: true
                    };
                case 27:
                    return {
                        message: $author$project$Library$Overlay$ExitFollowMode,
                        preventDefault: true,
                        stopPropagation: true
                    };
                case 37:
                    return {
                        message: A2($author$project$Library$Overlay$arrowMsg, mode, $author$project$Library$Overlay$Right),
                        preventDefault: true,
                        stopPropagation: true
                    };
                case 38:
                    return {
                        message: A2($author$project$Library$Overlay$arrowMsg, mode, $author$project$Library$Overlay$Up),
                        preventDefault: true,
                        stopPropagation: true
                    };
                case 39:
                    return {
                        message: A2($author$project$Library$Overlay$arrowMsg, mode, $author$project$Library$Overlay$Left),
                        preventDefault: true,
                        stopPropagation: true
                    };
                case 40:
                    return {
                        message: A2($author$project$Library$Overlay$arrowMsg, mode, $author$project$Library$Overlay$Down),
                        preventDefault: true,
                        stopPropagation: true
                    };
                default:
                    return {
                        message: $author$project$Library$Overlay$Ignore,
                        preventDefault: false,
                        stopPropagation: false
                    };
            }
        }, $elm$html$Html$Events$keyCode);
    };
    var $author$project$Library$Overlay$onKeyDownPreventDefault = function(mode) {
        return A2($elm$html$Html$Events$custom, "keydown", $author$project$Library$Overlay$keyDecoder(mode));
    };
    var $author$project$Library$Overlay$onMouseDown = function(toMsg) {
        return A2($elm$html$Html$Events$on, "mousedown", A2($elm$json$Json$Decode$map, toMsg, $author$project$Library$Overlay$positionDecoder));
    };
    var $author$project$Library$Overlay$onTouchStart = function(toMsg) {
        return A2($elm$html$Html$Events$preventDefaultOn, "touchstart", A2($elm$json$Json$Decode$map, $author$project$Library$Overlay$alwaysPreventDefault, A2($elm$json$Json$Decode$map, toMsg, $author$project$Library$Overlay$touchPositionDecoder)));
    };
    var $author$project$Library$Overlay$positionToString = function(pos) {
        return "x: " + ($elm$core$String$fromInt(pos.x) + (", y: " + $elm$core$String$fromInt(pos.y)));
    };
    var $author$project$Library$Overlay$px = function(n) {
        return $elm$core$String$fromInt(n) + "px";
    };
    var $author$project$Library$Overlay$sizeToString = function(size) {
        return "width: " + ($elm$core$String$fromInt(size.width) + (", height: " + $elm$core$String$fromInt(size.height)));
    };
    var $author$project$Library$Overlay$overlayDiv = F3(function(attr, model, inside) {
        return A2($elm$html$Html$div, A2($elm$core$List$append, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "position", "absolute"),
            A2($elm$html$Html$Attributes$style, "z-index", "50"),
            A2($elm$html$Html$Attributes$style, "background", "#000"),
            $author$project$Library$Overlay$onKeyDownPreventDefault(model.mode),
            A2($elm$html$Html$Attributes$attribute, "tabindex", "0"),
            A2($elm$html$Html$Attributes$attribute, "aria-label", "Video playback controls - Current mode: " + $author$project$Library$Overlay$modeToString(model.mode)),
            A2($elm$html$Html$Attributes$style, "right", $author$project$Library$Overlay$px(model.position.x)),
            A2($elm$html$Html$Attributes$style, "top", $author$project$Library$Overlay$px(model.position.y)),
            A2($elm$html$Html$Attributes$style, "width", $author$project$Library$Overlay$px(model.size.width)),
            A2($elm$html$Html$Attributes$style, "height", $author$project$Library$Overlay$px(model.size.height)),
            A2($elm$html$Html$Attributes$style, "border", "5px solid " + $author$project$Library$Overlay$getBorderColor(model.mode)),
            A2($elm$html$Html$Attributes$style, "border-radius", "50%"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "column"),
            A2($elm$html$Html$Attributes$style, "justify-content", "center"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "overflow", "hidden"),
            A2($elm$html$Html$Attributes$style, "touch-action", "none"),
            A2($elm$html$Html$Attributes$attribute, "role", "region"),
            A2($elm$html$Html$Attributes$attribute, "aria-label", "Video playback controls"),
            A2($elm$html$Html$Attributes$attribute, "aria-live", "polite"),
            $author$project$Library$Overlay$onMouseMove(function(pos) {
                return !_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragAt(pos) : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeAt(pos) : $author$project$Library$Overlay$isFollowMove(model.mode) ? $author$project$Library$Overlay$MouseMoveFollow(pos) : $author$project$Library$Overlay$isFollowResize(model.mode) ? $author$project$Library$Overlay$MouseResizeFollow(pos) : $author$project$Library$Overlay$Ignore;
            }),
            $author$project$Library$Overlay$onMouseUp(!_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragEnd : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeEnd : $author$project$Library$Overlay$Ignore),
            $author$project$Library$Overlay$onTouchMove(function(pos) {
                return !_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragAt(pos) : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeAt(pos) : $author$project$Library$Overlay$isFollowMove(model.mode) ? $author$project$Library$Overlay$MouseMoveFollow(pos) : $author$project$Library$Overlay$isFollowResize(model.mode) ? $author$project$Library$Overlay$MouseResizeFollow(pos) : $author$project$Library$Overlay$Ignore;
            }),
            $author$project$Library$Overlay$onTouchEnd(!_Utils_eq(model.drag, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$DragEnd : !_Utils_eq(model.resize, $elm$core$Maybe$Nothing) ? $author$project$Library$Overlay$ResizeEnd : $author$project$Library$Overlay$Ignore),
            $elm$html$Html$Events$onBlur($author$project$Library$Overlay$LostFocus)
        ]), attr), _List_fromArray([
            A2($elm$html$Html$map, $author$project$Library$Overlay$Foreign, inside),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "padding", "10px"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "cursor", $author$project$Library$Overlay$isFollowMove(model.mode) ? "grabbing" : "move"),
                A2($elm$html$Html$Attributes$style, "color", "#fff"),
                A2($elm$html$Html$Attributes$style, "text-align", "center"),
                A2($elm$html$Html$Attributes$style, "top", "0px"),
                A2($elm$html$Html$Attributes$style, "right", "0px"),
                $author$project$Library$Overlay$onMouseDown($author$project$Library$Overlay$DragStart),
                $author$project$Library$Overlay$onTouchStart($author$project$Library$Overlay$DragStart),
                $author$project$Library$Overlay$onDoubleClick(function(pos) {
                    return $author$project$Library$Overlay$DoubleClick(pos);
                }),
                A2($elm$html$Html$Attributes$attribute, "aria-label", "Drag to move video overlay. Double-click to make it follow mouse."),
                A2($elm$html$Html$Attributes$attribute, "tabindex", "0"),
                $elm$html$Html$Attributes$title($author$project$Library$Overlay$isFollowMove(model.mode) ? "double-click to release" : "drag or double-click video comment")
            ]), _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "width", "8%"),
                A2($elm$html$Html$Attributes$style, "height", "8%"),
                A2($elm$html$Html$Attributes$style, "background", $author$project$Library$Overlay$isFollowResize(model.mode) ? "#4CAF50" : "#d3d3d3"),
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "right", "10%"),
                A2($elm$html$Html$Attributes$style, "bottom", "10%"),
                A2($elm$html$Html$Attributes$style, "cursor", $author$project$Library$Overlay$isFollowResize(model.mode) ? "grabbing" : "se-resize"),
                A2($elm$html$Html$Attributes$style, "border-radius", "50%"),
                $author$project$Library$Overlay$onMouseDown($author$project$Library$Overlay$ResizeStart),
                $author$project$Library$Overlay$onTouchStart($author$project$Library$Overlay$ResizeStart),
                $author$project$Library$Overlay$onDoubleClick(function(pos) {
                    return $author$project$Library$Overlay$DoubleClickResize(pos);
                }),
                A2($elm$html$Html$Attributes$attribute, "aria-label", "Resize video overlay. Double-click to make it follow mouse for resizing."),
                A2($elm$html$Html$Attributes$attribute, "tabindex", "0"),
                $elm$html$Html$Attributes$title($author$project$Library$Overlay$isFollowResize(model.mode) ? "double-click to stop resize following" : "resize or double-click to follow resize")
            ]), _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "left", "-9999px"),
                A2($elm$html$Html$Attributes$style, "top", "auto"),
                A2($elm$html$Html$Attributes$style, "width", "1px"),
                A2($elm$html$Html$Attributes$style, "height", "1px"),
                A2($elm$html$Html$Attributes$style, "overflow", "hidden")
            ]), _List_fromArray([
                $elm$html$Html$text("Current mode: " + ($author$project$Library$Overlay$modeToString(model.mode) + (". " + (($author$project$Library$Overlay$isFollowMove(model.mode) ? "Overlay is following mouse movement. Double-click or press ESC to release. " : $author$project$Library$Overlay$isFollowResize(model.mode) ? "Overlay is following mouse for resizing. Double-click or press ESC to release. " : "Use arrow keys to " + ((_Utils_eq(model.mode, $author$project$Library$Overlay$Move) ? "move" : "resize") + " the video overlay. Press Enter to switch modes. Double-click on center to make overlay follow mouse movement. Double-click on resize handle to make overlay resize with mouse. ")) + ("Current position: " + ($author$project$Library$Overlay$positionToString(model.position) + (". Current size: " + $author$project$Library$Overlay$sizeToString(model.size))))))))
            ]))
        ]));
    });
    var $author$project$Library$Overlay$view = F3(function(attr, model, inside) {
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            $author$project$Library$Overlay$backgroundDiv(model),
            A3($author$project$Library$Overlay$overlayDiv, attr, model, inside)
        ]));
    });
    var $author$project$Lia$View$viewVideoComment = F3(function(comments, overlay, effects) {
        var urls = comments.active ? $author$project$Lia$Markdown$Effect$Model$getVideoRecordings(effects) : _List_Nil;
        var videos = A2($elm$core$String$join, ",", urls);
        var hide = $elm$core$String$isEmpty(videos);
        return A2($elm$html$Html$map, $author$project$Lia$Update$UpdateOverlay, A3($author$project$Library$Overlay$view, hide || !comments.active || comments.hide ? _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "none")
        ]) : _List_fromArray([
            $elm$html$Html$Attributes$class("fade-in")
        ]), overlay, A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("lia-tts-videos"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$attribute, "data-urls", videos)
        ]), A2($elm$core$List$map, function(url) {
            return A2($elm$html$Html$video, _List_fromArray([
                $elm$html$Html$Attributes$controls(false),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "objectFit", "cover"),
                A2($elm$html$Html$Attributes$style, "opacity", hide ? "0" : "1"),
                A2($elm$html$Html$Attributes$style, "transition", "opacity 0.3s"),
                A2($elm$html$Html$Attributes$attribute, "data-url", url),
                A2($elm$html$Html$Attributes$style, "display", "none"),
                $elm$html$Html$Attributes$preload("auto"),
                $elm$html$Html$Attributes$src(url),
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($author$project$Lia$Markdown$Inline$View$onError, "video", url)
            ]), _List_Nil);
        }, urls))));
    });
    var $author$project$Lia$View$viewSlide = F3(function(modalIsActive, screen1, model) {
        var _v0 = $author$project$Lia$Update$get_active_section(model);
        if (_v0.$ === "Just") {
            var section = _v0.a;
            return _List_fromArray([
                A2($elm$html$Html$div, A2($author$project$Lia$Utils$deactivate, modalIsActive, _List_fromArray([
                    $elm$html$Html$Attributes$class("lia-slide")
                ])), _List_fromArray([
                    A9($author$project$Lia$View$slideTopBar, model.langCode, model.translation, screen1, model.url, model.repositoryUrl, model.settings, A2($author$project$Lia$Definition$Types$merge, model.definition, section.definition), A2($author$project$Lia$View$viewProgress, model, section.effect_model), model.sync),
                    A2($author$project$Lia$View$viewPanes, screen1, model),
                    $author$project$Lia$View$slideBottom({
                        effects: section.effect_model,
                        lang: model.translation,
                        settings: model.settings,
                        slide: model.section_active,
                        tiny: screen1.width < 400
                    })
                ])),
                $author$project$Lia$View$slideA11y({
                    effect: section.effect_model,
                    formulas: model.definition.formulas,
                    id: model.section_active,
                    lang: model.translation,
                    light: model.settings.light,
                    media: model.media,
                    modalIsActive: modalIsActive,
                    mode: model.settings.mode,
                    tooltips: model.settings.tooltips && _Utils_cmp(screen1.width, $author$project$Const$tooltipBreakpoint) > -1,
                    translations: {
                        name: model.langName,
                        _new: model.langCode,
                        old: model.langCodeOriginal
                    }
                }),
                A3($author$project$Lia$View$viewVideoComment, {
                    active: model.settings.sound,
                    hide: model.settings.hideVideoComments || _Utils_eq(model.settings.mode, $author$project$Lia$Settings$Types$Textbook)
                }, model.overlayVideo, section.effect_model),
                $author$project$Lia$View$showModal(model)
            ]);
        } else return _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("lia-slide")
            ]), _List_fromArray([
                A9($author$project$Lia$View$slideTopBar, model.langCode, model.translation, screen1, model.url, model.repositoryUrl, model.settings, model.definition, "0px", model.sync),
                $elm$html$Html$text("Ups, something went wrong")
            ]))
        ]);
    });
    var $author$project$Lia$View$view = F3(function(screen1, hasIndex, model) {
        var modalIsActive = $author$project$Lia$View$isHidden(model);
        return A2($elm$html$Html$div, $author$project$Lia$Settings$View$design(model.settings), A2($elm$core$List$cons, A2($elm$html$Html$a, A2($author$project$Lia$Utils$deactivate, modalIsActive, _List_fromArray([
            $elm$html$Html$Attributes$class("lia-skip-nav"),
            $elm$html$Html$Attributes$href("#" + $elm$core$String$fromInt(1 + model.section_active))
        ])), _List_fromArray([
            $elm$html$Html$text("skip navigation")
        ])), A2($elm$core$List$cons, A3($author$project$Lia$View$viewIndex, modalIsActive, hasIndex, model), A3($author$project$Lia$View$viewSlide, modalIsActive, screen1, model))));
    });
    var $author$project$Lia$Script$view = $author$project$Lia$View$view;
    var $author$project$Lia$View$viewSection = F4(function(screen1, model, section_active, sec) {
        return A2($elm$html$Html$map, $author$project$Lia$Update$UpdateMarkdown, A3($author$project$Lia$Markdown$View$view, false, true, A9($author$project$Lia$Markdown$Config$init, model.translation, {
            name: model.langName,
            _new: model.langCode,
            old: model.langCodeOriginal
        }, model.settings, model.sync, screen1, section_active, $elm$core$Maybe$Just(model.definition.formulas), model.media, sec)));
    });
    var $author$project$Lia$View$viewFullPage = F2(function(screen1, model) {
        return A2($elm$core$List$indexedMap, A2($author$project$Lia$View$viewSection, screen1, model), $elm$core$Array$toList(model.sections));
    });
    var $author$project$Lia$Script$viewFullPage = $author$project$Lia$View$viewFullPage;
    var $author$project$View$view = function(model) {
        return {
            body: function() {
                var _v0 = model.state;
                switch(_v0.$){
                    case "Running":
                        return model.fullPage ? _List_fromArray([
                            A2($elm$html$Html$map, $author$project$Update$LiaScript, A2($elm$html$Html$div, _List_Nil, A2($author$project$Lia$Script$viewFullPage, model.session.screen, model.lia)))
                        ]) : _List_fromArray([
                            A2($elm$html$Html$map, $author$project$Update$LiaScript, A3($author$project$Lia$Script$view, model.session.screen, model.hasIndex, model.lia))
                        ]);
                    case "Idle":
                        return _List_fromArray([
                            A2($elm$html$Html$map, $author$project$Update$UpdateIndex, A3($author$project$Index$View$view, model.session, model.lia.settings, model.index))
                        ]);
                    case "Loading":
                        return $author$project$View$loading;
                    case "Loading_Zip":
                        return $author$project$View$loading;
                    case "Parsing":
                        var percent = $elm$core$String$length(A2($elm$core$Maybe$withDefault, "", model.code));
                        return _List_fromArray([
                            $author$project$View$base_div(_List_fromArray([
                                A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                                    $elm$html$Html$text("Parsing : " + (A3($elm$core$String$slice, 0, 5, $elm$core$String$fromFloat(100 - percent / model.size * 100)) + "%"))
                                ])),
                                A2($elm$html$Html$br, _List_Nil, _List_Nil),
                                A2($elm$html$Html$progress, _List_fromArray([
                                    A2($elm$html$Html$Attributes$style, "width", "70%"),
                                    $elm$html$Html$Attributes$max("100"),
                                    $elm$html$Html$Attributes$value(A3($elm$core$String$slice, 0, 5, $elm$core$String$fromFloat(100 - percent / model.size * 100)))
                                ]), _List_Nil)
                            ]))
                        ]);
                    default:
                        return _List_fromArray([
                            A2($elm$html$Html$map, $author$project$Update$LiaScript, A3($author$project$Lia$Script$view, model.session.screen, model.hasIndex, model.lia))
                        ]);
                }
            }(),
            title: model.lia.title
        };
    };
    var $author$project$Main$main = $elm$browser$Browser$application({
        init: $author$project$Main$init,
        onUrlChange: $author$project$Update$UrlChanged,
        onUrlRequest: $author$project$Update$LinkClicked,
        subscriptions: $author$project$Update$subscriptions,
        update: $author$project$Update$update,
        view: $author$project$View$view
    });
    _Platform_export({
        "Main": {
            "init": $author$project$Main$main(A2($elm$json$Json$Decode$andThen, function(sync) {
                return A2($elm$json$Json$Decode$andThen, function(settings) {
                    return A2($elm$json$Json$Decode$andThen, function(seed) {
                        return A2($elm$json$Json$Decode$andThen, function(script) {
                            return A2($elm$json$Json$Decode$andThen, function(screen1) {
                                return A2($elm$json$Json$Decode$andThen, function(isFullscreen) {
                                    return A2($elm$json$Json$Decode$andThen, function(hideURL) {
                                        return A2($elm$json$Json$Decode$andThen, function(hasShareAPI) {
                                            return A2($elm$json$Json$Decode$andThen, function(hasIndex) {
                                                return A2($elm$json$Json$Decode$andThen, function(fullPage) {
                                                    return A2($elm$json$Json$Decode$andThen, function(courseUrl) {
                                                        return $elm$json$Json$Decode$succeed({
                                                            courseUrl: courseUrl,
                                                            fullPage: fullPage,
                                                            hasIndex: hasIndex,
                                                            hasShareAPI: hasShareAPI,
                                                            hideURL: hideURL,
                                                            isFullscreen: isFullscreen,
                                                            screen: screen1,
                                                            script: script,
                                                            seed: seed,
                                                            settings: settings,
                                                            sync: sync
                                                        });
                                                    }, A2($elm$json$Json$Decode$field, "courseUrl", $elm$json$Json$Decode$oneOf(_List_fromArray([
                                                        $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                                                        A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
                                                    ]))));
                                                }, A2($elm$json$Json$Decode$field, "fullPage", $elm$json$Json$Decode$oneOf(_List_fromArray([
                                                    $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                                                    A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$bool)
                                                ]))));
                                            }, A2($elm$json$Json$Decode$field, "hasIndex", $elm$json$Json$Decode$bool));
                                        }, A2($elm$json$Json$Decode$field, "hasShareAPI", $elm$json$Json$Decode$oneOf(_List_fromArray([
                                            $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                                            A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$bool)
                                        ]))));
                                    }, A2($elm$json$Json$Decode$field, "hideURL", $elm$json$Json$Decode$bool));
                                }, A2($elm$json$Json$Decode$field, "isFullscreen", $elm$json$Json$Decode$bool));
                            }, A2($elm$json$Json$Decode$field, "screen", A2($elm$json$Json$Decode$andThen, function(width) {
                                return A2($elm$json$Json$Decode$andThen, function(height) {
                                    return $elm$json$Json$Decode$succeed({
                                        height: height,
                                        width: width
                                    });
                                }, A2($elm$json$Json$Decode$field, "height", $elm$json$Json$Decode$int));
                            }, A2($elm$json$Json$Decode$field, "width", $elm$json$Json$Decode$int))));
                        }, A2($elm$json$Json$Decode$field, "script", $elm$json$Json$Decode$oneOf(_List_fromArray([
                            $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                            A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
                        ]))));
                    }, A2($elm$json$Json$Decode$field, "seed", $elm$json$Json$Decode$int));
                }, A2($elm$json$Json$Decode$field, "settings", $elm$json$Json$Decode$value));
            }, A2($elm$json$Json$Decode$field, "sync", A2($elm$json$Json$Decode$andThen, function(support) {
                return A2($elm$json$Json$Decode$andThen, function(enabled) {
                    return $elm$json$Json$Decode$succeed({
                        enabled: enabled,
                        support: support
                    });
                }, A2($elm$json$Json$Decode$field, "enabled", $elm$json$Json$Decode$bool));
            }, A2($elm$json$Json$Decode$field, "support", $elm$json$Json$Decode$list($elm$json$Json$Decode$string))))))({
                "versions": {
                    "elm": "0.19.1"
                },
                "types": {
                    "message": "Update.Msg",
                    "aliases": {
                        "Service.Event.Event": {
                            "args": [],
                            "type": "{ reply : Basics.Bool, track : List.List Service.Event.POI, service : String.String, message : { cmd : String.String, param : Json.Encode.Value } }"
                        },
                        "Lia.Script.Msg": {
                            "args": [],
                            "type": "Lia.Update.Msg"
                        },
                        "Service.Event.POI": {
                            "args": [],
                            "type": "( String.String, Basics.Int )"
                        },
                        "Session.Screen": {
                            "args": [],
                            "type": "{ width : Basics.Int, height : Basics.Int }"
                        },
                        "Url.Url": {
                            "args": [],
                            "type": "{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"
                        },
                        "Index.Model.Course": {
                            "args": [],
                            "type": "{ id : String.String, versions : Dict.Dict String.String Index.Model.Release, active : Maybe.Maybe String.String, last_visit : String.String, popup : Maybe.Maybe Index.Model.Action }"
                        },
                        "Lia.Definition.Types.Definition": {
                            "args": [],
                            "type": "{ author : String.String, date : String.String, email : String.String, language : String.String, typographic_quotation : { single : ( String.String, String.String ), double : ( String.String, String.String ) }, logo : String.String, narrator : String.String, version : String.String, comment : Lia.Markdown.Inline.Types.Inlines, resources : List.List Lia.Definition.Types.Resource, base : String.String, appendix : String.String, translation : Dict.Dict String.String String.String, formulas : Dict.Dict String.String String.String, macro : Dict.Dict String.String String.String, imports : List.List String.String, attributes : List.List Lia.Markdown.Inline.Types.Inlines, section : Basics.Int, uid : Basics.Int, debug : Basics.Bool, onload : String.String, lightMode : Maybe.Maybe Basics.Bool, mode : Maybe.Maybe Lia.Settings.Types.Mode }"
                        },
                        "Lia.Markdown.Inline.Types.Inlines": {
                            "args": [],
                            "type": "List.List Lia.Markdown.Inline.Types.Inline"
                        },
                        "Index.Model.Release": {
                            "args": [],
                            "type": "{ title : Lia.Markdown.Inline.Types.Inlines, definition : Lia.Definition.Types.Definition }"
                        },
                        "Library.SplitPane.DOMInfo": {
                            "args": [],
                            "type": "{ x : Maybe.Maybe Basics.Int, y : Maybe.Maybe Basics.Int, touchX : Maybe.Maybe Basics.Int, touchY : Maybe.Maybe Basics.Int, parentWidth : Basics.Int, parentHeight : Basics.Int }"
                        },
                        "Lia.Markdown.Effect.Types.Effect": {
                            "args": [
                                "body"
                            ],
                            "type": "{ content : List.List body, playback : Basics.Bool, begin : Basics.Int, end : Maybe.Maybe Basics.Int, voice : String.String, id : Basics.Int }"
                        },
                        "Browser.Dom.Element": {
                            "args": [],
                            "type": "{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float }, element : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }"
                        },
                        "Lia.Markdown.HTML.Attributes.Parameters": {
                            "args": [],
                            "type": "List.List ( String.String, String.String )"
                        },
                        "Library.Overlay.Position": {
                            "args": [],
                            "type": "{ x : Basics.Int, y : Basics.Int }"
                        },
                        "Library.SplitPane.Position": {
                            "args": [],
                            "type": "{ x : Basics.Int, y : Basics.Int }"
                        },
                        "Browser.Dom.Viewport": {
                            "args": [],
                            "type": "{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }"
                        },
                        "Lia.Markdown.Types.Blocks": {
                            "args": [],
                            "type": "List.List Lia.Markdown.Types.Block"
                        },
                        "Lia.Markdown.Chart.Types.Chart": {
                            "args": [],
                            "type": "{ title : String.String, yLabel : String.String, xLabel : String.String, legend : List.List String.String, diagrams : Dict.Dict Char.Char Lia.Markdown.Chart.Types.Diagram, xLimits : { min : Maybe.Maybe String.String, max : Maybe.Maybe String.String }, yLimits : { min : Maybe.Maybe String.String, max : Maybe.Maybe String.String }, orientation : Maybe.Maybe Lia.Markdown.Chart.Types.Orientation }"
                        },
                        "SvgBob.Model.Colors": {
                            "args": [],
                            "type": "{ stroke : String.String, text : String.String, background : String.String }"
                        },
                        "SvgBob.Configuration": {
                            "args": [
                                "a"
                            ],
                            "type": "{ svg : List.List ( SvgBob.Types.Point, SvgBob.Types.Element ), foreign : List.List ( a, ( SvgBob.Types.Point, ( Basics.Int, Basics.Int ) ) ), settings : SvgBob.Settings, columns : Basics.Int, rows : Basics.Int }"
                        },
                        "Lia.Markdown.Gallery.Types.Gallery": {
                            "args": [],
                            "type": "{ media : Lia.Markdown.Inline.Types.Inlines, id : Basics.Int }"
                        },
                        "Lia.Markdown.Quiz.Types.Hints": {
                            "args": [],
                            "type": "List.List Lia.Markdown.Inline.Types.Inlines"
                        },
                        "SvgBob.Types.Point": {
                            "args": [],
                            "type": "{ x : Basics.Float, y : Basics.Float }"
                        },
                        "Lia.Markdown.Quiz.Block.Types.Quiz": {
                            "args": [
                                "opt"
                            ],
                            "type": "{ options : List.List opt, solution : Lia.Markdown.Quiz.Block.Types.State }"
                        },
                        "Lia.Markdown.Quiz.Matrix.Types.Quiz": {
                            "args": [],
                            "type": "{ headers : List.List Lia.Markdown.Inline.Types.Inlines, options : List.List Lia.Markdown.Inline.Types.Inlines, solution : Lia.Markdown.Quiz.Matrix.Types.State }"
                        },
                        "Lia.Markdown.Quiz.Multi.Types.Quiz": {
                            "args": [
                                "block",
                                "inline"
                            ],
                            "type": "{ elements : List.List block, options : Array.Array (List.List inline), solution : Lia.Markdown.Quiz.Multi.Types.State }"
                        },
                        "Lia.Markdown.Quiz.Types.Quiz": {
                            "args": [
                                "x"
                            ],
                            "type": "{ quiz : Lia.Markdown.Quiz.Types.Type x, id : Basics.Int, hints : Lia.Markdown.Quiz.Types.Hints }"
                        },
                        "Lia.Markdown.Quiz.Vector.Types.Quiz": {
                            "args": [],
                            "type": "{ options : List.List Lia.Markdown.Inline.Types.Inlines, solution : Lia.Markdown.Quiz.Vector.Types.State }"
                        },
                        "SvgBob.Settings": {
                            "args": [],
                            "type": "SvgBob.Model.Settings"
                        },
                        "SvgBob.Model.Settings": {
                            "args": [],
                            "type": "{ fontSize : Basics.Float, lineWidth : Basics.Float, textWidth : Basics.Float, textHeight : Basics.Float, arcRadius : Basics.Float, color : SvgBob.Model.Colors, verbatim : { string : String.String, multiline : Basics.Bool, height : Maybe.Maybe String.String, width : Maybe.Maybe String.String } }"
                        },
                        "Lia.Markdown.Quiz.Matrix.Types.State": {
                            "args": [],
                            "type": "Array.Array Lia.Markdown.Quiz.Vector.Types.State"
                        },
                        "Lia.Markdown.Quiz.Multi.Types.State": {
                            "args": [],
                            "type": "Array.Array Lia.Markdown.Quiz.Block.Types.State"
                        },
                        "Lia.Markdown.Survey.Types.Survey": {
                            "args": [],
                            "type": "{ survey : Lia.Markdown.Survey.Types.Type, id : Basics.Int }"
                        },
                        "Lia.Markdown.Table.Types.Table": {
                            "args": [],
                            "type": "{ class : Lia.Markdown.Table.Types.Class, sortable : Basics.Bool, head : List.List ( Lia.Markdown.HTML.Attributes.Parameters, Lia.Markdown.Inline.Types.Inlines ), format : List.List String.String, body : List.List (List.List ( Lia.Markdown.HTML.Attributes.Parameters, Lia.Markdown.Inline.Types.Inlines )), id : Basics.Int }"
                        },
                        "Lia.Markdown.Task.Types.Task": {
                            "args": [],
                            "type": "{ task : List.List Lia.Markdown.Inline.Types.Inlines, id : Basics.Int }"
                        },
                        "Lia.Markdown.Chart.Types.Point": {
                            "args": [],
                            "type": "{ x : Basics.Float, y : Basics.Float }"
                        },
                        "Array.Tree": {
                            "args": [
                                "a"
                            ],
                            "type": "Elm.JsArray.JsArray (Array.Node a)"
                        }
                    },
                    "unions": {
                        "Update.Msg": {
                            "args": [],
                            "tags": {
                                "LiaScript": [
                                    "Lia.Script.Msg"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "UpdateIndex": [
                                    "Index.Update.Msg"
                                ],
                                "Resize": [
                                    "Session.Screen"
                                ],
                                "LiaParse": [],
                                "LinkClicked": [
                                    "Browser.UrlRequest"
                                ],
                                "UrlChanged": [
                                    "Url.Url"
                                ],
                                "Load_ReadMe_Result": [
                                    "String.String",
                                    "Result.Result Http.Error String.String"
                                ],
                                "Load_Template_Result": [
                                    "String.String",
                                    "Result.Result Http.Error String.String"
                                ],
                                "GotResponse": [
                                    "String.String",
                                    "Result.Result Http.Error Update.ResponseData"
                                ]
                            }
                        },
                        "Basics.Bool": {
                            "args": [],
                            "tags": {
                                "True": [],
                                "False": []
                            }
                        },
                        "Http.Error": {
                            "args": [],
                            "tags": {
                                "BadUrl": [
                                    "String.String"
                                ],
                                "Timeout": [],
                                "NetworkError": [],
                                "BadStatus": [
                                    "Basics.Int"
                                ],
                                "BadBody": [
                                    "String.String"
                                ]
                            }
                        },
                        "Basics.Int": {
                            "args": [],
                            "tags": {
                                "Int": []
                            }
                        },
                        "List.List": {
                            "args": [
                                "a"
                            ],
                            "tags": {}
                        },
                        "Maybe.Maybe": {
                            "args": [
                                "a"
                            ],
                            "tags": {
                                "Just": [
                                    "a"
                                ],
                                "Nothing": []
                            }
                        },
                        "Index.Update.Msg": {
                            "args": [],
                            "tags": {
                                "IndexList": [
                                    "List.List Index.Model.Course"
                                ],
                                "IndexError": [
                                    "String.String"
                                ],
                                "Input": [
                                    "String.String"
                                ],
                                "Delete": [
                                    "Basics.Bool",
                                    "String.String"
                                ],
                                "Reset": [
                                    "Basics.Bool",
                                    "String.String",
                                    "Maybe.Maybe String.String"
                                ],
                                "Restore": [
                                    "String.String",
                                    "Maybe.Maybe String.String"
                                ],
                                "Share": [
                                    "{ title : String.String, text : String.String, url : String.String, image : Maybe.Maybe String.String }"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Activate": [
                                    "String.String",
                                    "Maybe.Maybe String.String"
                                ],
                                "NoOp": [],
                                "LoadCourse": [
                                    "String.String"
                                ],
                                "UpdateSettings": [
                                    "Lia.Settings.Update.Msg"
                                ],
                                "Modal": [
                                    "Maybe.Maybe Index.Model.Modal"
                                ],
                                "MasonryMsg": [
                                    "Library.Masonry.Msg"
                                ],
                                "PopupClose": [],
                                "None": []
                            }
                        },
                        "Lia.Update.Msg": {
                            "args": [],
                            "tags": {
                                "Load": [
                                    "Basics.Bool",
                                    "Basics.Int"
                                ],
                                "InitSection": [],
                                "PrevSection": [],
                                "NextSection": [],
                                "JumpToFragment": [
                                    "Basics.Int"
                                ],
                                "UpdateIndex": [
                                    "Lia.Index.Update.Msg"
                                ],
                                "UpdateSettings": [
                                    "Lia.Settings.Update.Msg"
                                ],
                                "UpdateMarkdown": [
                                    "Lia.Markdown.Update.Msg"
                                ],
                                "UpdateSync": [
                                    "Lia.Sync.Update.Msg"
                                ],
                                "UpdateChat": [
                                    "Lia.Chat.Update.Msg"
                                ],
                                "UpdateOverlay": [
                                    "Library.Overlay.Msg Lia.Update.Msg"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Home": [],
                                "Script": [
                                    "( Basics.Int, Lia.Markdown.Effect.Script.Types.Msg Lia.Markdown.Update.Msg )"
                                ],
                                "TTSReplay": [
                                    "Basics.Bool"
                                ],
                                "Media": [
                                    "( String.String, Maybe.Maybe Basics.Int, Maybe.Maybe Basics.Int )"
                                ],
                                "Pane": [
                                    "Library.SplitPane.Msg"
                                ],
                                "Focus": []
                            }
                        },
                        "Url.Protocol": {
                            "args": [],
                            "tags": {
                                "Http": [],
                                "Https": [],
                                "File": [],
                                "File2": [],
                                "Ipfs": [],
                                "Ipns": [],
                                "Dat": [],
                                "Ftp": [],
                                "Hyper": [],
                                "About": []
                            }
                        },
                        "Update.ResponseData": {
                            "args": [],
                            "tags": {
                                "IsZip": [],
                                "IsMarkdown": [
                                    "String.String"
                                ]
                            }
                        },
                        "Result.Result": {
                            "args": [
                                "error",
                                "value"
                            ],
                            "tags": {
                                "Ok": [
                                    "value"
                                ],
                                "Err": [
                                    "error"
                                ]
                            }
                        },
                        "String.String": {
                            "args": [],
                            "tags": {
                                "String": []
                            }
                        },
                        "Browser.UrlRequest": {
                            "args": [],
                            "tags": {
                                "Internal": [
                                    "Url.Url"
                                ],
                                "External": [
                                    "String.String"
                                ]
                            }
                        },
                        "Json.Encode.Value": {
                            "args": [],
                            "tags": {
                                "Value": []
                            }
                        },
                        "Index.Model.Action": {
                            "args": [],
                            "tags": {
                                "Popup_Delete": [],
                                "Popup_Reset": []
                            }
                        },
                        "Dict.Dict": {
                            "args": [
                                "k",
                                "v"
                            ],
                            "tags": {
                                "RBNode_elm_builtin": [
                                    "Dict.NColor",
                                    "k",
                                    "v",
                                    "Dict.Dict k v",
                                    "Dict.Dict k v"
                                ],
                                "RBEmpty_elm_builtin": []
                            }
                        },
                        "Lia.Markdown.Inline.Types.Inline": {
                            "args": [],
                            "tags": {
                                "Chars": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Symbol": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Bold": [
                                    "Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Italic": [
                                    "Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Strike": [
                                    "Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Underline": [
                                    "Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Superscript": [
                                    "Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Verbatim": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Formula": [
                                    "String.String",
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Ref": [
                                    "Lia.Markdown.Inline.Types.Reference",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "FootnoteMark": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "EInline": [
                                    "Lia.Markdown.Effect.Types.Effect Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Script": [
                                    "Basics.Int",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "IHTML": [
                                    "Lia.Markdown.HTML.Types.Node Lia.Markdown.Inline.Types.Inline",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Container": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Quiz": [
                                    "( String.String, Basics.Int )",
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ]
                            }
                        },
                        "Index.Model.Modal": {
                            "args": [],
                            "tags": {
                                "Files": [],
                                "Directory": []
                            }
                        },
                        "Lia.Settings.Types.Mode": {
                            "args": [],
                            "tags": {
                                "Slides": [],
                                "Presentation": [],
                                "Textbook": []
                            }
                        },
                        "Lia.Chat.Update.Msg": {
                            "args": [],
                            "tags": {
                                "Send": [],
                                "Input": [
                                    "String.String"
                                ],
                                "UpdateMarkdown": [
                                    "String.String",
                                    "Lia.Markdown.Update.Msg"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ]
                            }
                        },
                        "Lia.Index.Update.Msg": {
                            "args": [],
                            "tags": {
                                "ScanIndex": [
                                    "String.String"
                                ],
                                "DeleteSearch": [],
                                "NoOp": []
                            }
                        },
                        "Lia.Markdown.Effect.Script.Types.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Click": [
                                    "Basics.Int"
                                ],
                                "Reset": [
                                    "Basics.Int"
                                ],
                                "Execute": [
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "Activate": [
                                    "Basics.Bool",
                                    "Basics.Int"
                                ],
                                "Value": [
                                    "Basics.Int",
                                    "Basics.Bool",
                                    "String.String"
                                ],
                                "Radio": [
                                    "Basics.Int",
                                    "Basics.Bool",
                                    "String.String"
                                ],
                                "Checkbox": [
                                    "Basics.Int",
                                    "Basics.Bool",
                                    "String.String"
                                ],
                                "Edit": [
                                    "Basics.Bool",
                                    "Basics.Int"
                                ],
                                "EditCode": [
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "EditParam": [
                                    "Basics.Int",
                                    "String.String",
                                    "String.String"
                                ],
                                "NoOp": [],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Delay": [
                                    "Basics.Float",
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ],
                                "Sub": [
                                    "Basics.Int",
                                    "sub"
                                ]
                            }
                        },
                        "Lia.Markdown.Update.Msg": {
                            "args": [],
                            "tags": {
                                "UpdateEffect": [
                                    "Basics.Bool",
                                    "Lia.Markdown.Effect.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "UpdateCode": [
                                    "Lia.Markdown.Code.Update.Msg"
                                ],
                                "UpdateQuiz": [
                                    "Lia.Markdown.Quiz.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "UpdateSurvey": [
                                    "Lia.Markdown.Survey.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "UpdateTable": [
                                    "Lia.Markdown.Table.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "UpdateTask": [
                                    "Lia.Markdown.Task.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "UpdateGallery": [
                                    "Lia.Markdown.Gallery.Update.Msg Lia.Markdown.Update.Msg"
                                ],
                                "FootnoteHide": [],
                                "FootnoteShow": [
                                    "String.String"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg Lia.Markdown.Update.Msg"
                                ],
                                "NoOp": []
                            }
                        },
                        "Lia.Settings.Update.Msg": {
                            "args": [],
                            "tags": {
                                "Toggle": [
                                    "Lia.Settings.Update.Toggle"
                                ],
                                "ChangeTheme": [
                                    "String.String"
                                ],
                                "ChangeEditor": [
                                    "String.String"
                                ],
                                "ChangeLang": [
                                    "String.String"
                                ],
                                "ChangeFontSize": [
                                    "Basics.Int"
                                ],
                                "SwitchMode": [
                                    "Lia.Settings.Types.Mode"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "ShareCourse": [
                                    "String.String"
                                ],
                                "Ignore": [],
                                "FocusLoss": [
                                    "Maybe.Maybe Lia.Settings.Types.Action"
                                ],
                                "Change": [
                                    "Lia.Settings.Types.Audio"
                                ]
                            }
                        },
                        "Lia.Sync.Update.Msg": {
                            "args": [],
                            "tags": {
                                "Room": [
                                    "String.String"
                                ],
                                "Password": [
                                    "String.String"
                                ],
                                "Backend": [
                                    "Lia.Sync.Update.SyncMsg"
                                ],
                                "Connect": [],
                                "Disconnect": [],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Random_Generate": [],
                                "Random_Result": [
                                    "String.String"
                                ],
                                "EnabledScript": [
                                    "Basics.Bool"
                                ]
                            }
                        },
                        "Library.Masonry.Msg": {
                            "args": [],
                            "tags": {
                                "GotElement": [
                                    "Result.Result Browser.Dom.Error ( Library.Masonry.Id, Browser.Dom.Element )"
                                ]
                            }
                        },
                        "Library.Overlay.Msg": {
                            "args": [
                                "parentMsg"
                            ],
                            "tags": {
                                "DragStart": [
                                    "Library.Overlay.Position"
                                ],
                                "DragAt": [
                                    "Library.Overlay.Position"
                                ],
                                "DragEnd": [],
                                "ResizeStart": [
                                    "Library.Overlay.Position"
                                ],
                                "ResizeAt": [
                                    "Library.Overlay.Position"
                                ],
                                "ResizeEnd": [],
                                "Foreign": [
                                    "parentMsg"
                                ],
                                "ArrowMove": [
                                    "Library.Overlay.Direction"
                                ],
                                "ArrowResize": [
                                    "Library.Overlay.Direction"
                                ],
                                "ToggleMode": [],
                                "Ignore": [],
                                "DoubleClick": [
                                    "Library.Overlay.Position"
                                ],
                                "DoubleClickResize": [
                                    "Library.Overlay.Position"
                                ],
                                "MouseMoveFollow": [
                                    "Library.Overlay.Position"
                                ],
                                "MouseResizeFollow": [
                                    "Library.Overlay.Position"
                                ],
                                "ExitFollowMode": [],
                                "LostFocus": []
                            }
                        },
                        "Library.SplitPane.Msg": {
                            "args": [],
                            "tags": {
                                "SplitterClick": [
                                    "Library.SplitPane.DOMInfo"
                                ],
                                "SplitterMove": [
                                    "Library.SplitPane.Position"
                                ],
                                "SplitterLeftAlone": [
                                    "Library.SplitPane.Position"
                                ]
                            }
                        },
                        "Lia.Definition.Types.Resource": {
                            "args": [],
                            "tags": {
                                "Link": [
                                    "String.String"
                                ],
                                "Script": [
                                    "String.String"
                                ],
                                "Module": [
                                    "String.String"
                                ]
                            }
                        },
                        "Lia.Settings.Types.Action": {
                            "args": [],
                            "tags": {
                                "ShowInformation": [],
                                "ShowTranslations": [],
                                "ShowSettings": [],
                                "ShowModes": [],
                                "ShowShare": [],
                                "Close": []
                            }
                        },
                        "Lia.Settings.Types.Audio": {
                            "args": [],
                            "tags": {
                                "Pitch": [
                                    "String.String"
                                ],
                                "Rate": [
                                    "String.String"
                                ]
                            }
                        },
                        "Library.Overlay.Direction": {
                            "args": [],
                            "tags": {
                                "Up": [],
                                "Down": [],
                                "Left": [],
                                "Right": []
                            }
                        },
                        "Browser.Dom.Error": {
                            "args": [],
                            "tags": {
                                "NotFound": [
                                    "String.String"
                                ]
                            }
                        },
                        "Basics.Float": {
                            "args": [],
                            "tags": {
                                "Float": []
                            }
                        },
                        "Library.Masonry.Id": {
                            "args": [],
                            "tags": {
                                "Id": [
                                    "String.String"
                                ]
                            }
                        },
                        "Lia.Markdown.Code.Update.Msg": {
                            "args": [],
                            "tags": {
                                "Eval": [
                                    "Basics.Int"
                                ],
                                "Stop": [
                                    "Basics.Int"
                                ],
                                "Update": [
                                    "Basics.Int",
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "Synchronize": [
                                    "Basics.Int",
                                    "Basics.Int",
                                    "Json.Encode.Value"
                                ],
                                "SynchronizeCursor": [
                                    "Basics.Int",
                                    "Basics.Int",
                                    "Json.Encode.Value"
                                ],
                                "FlipView": [
                                    "Lia.Markdown.Code.Types.Code",
                                    "Basics.Int"
                                ],
                                "FlipFullscreen": [
                                    "Lia.Markdown.Code.Types.Code",
                                    "Basics.Int"
                                ],
                                "Load": [
                                    "Basics.Int",
                                    "Basics.Int"
                                ],
                                "First": [
                                    "Basics.Int"
                                ],
                                "Last": [
                                    "Basics.Int"
                                ],
                                "UpdateTerminal": [
                                    "Basics.Int",
                                    "Lia.Markdown.Code.Terminal.Msg"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Resize": [
                                    "Lia.Markdown.Code.Types.Code",
                                    "String.String"
                                ],
                                "ToggleSync": [
                                    "Basics.Int"
                                ],
                                "CopyToClipboard": [
                                    "Lia.Markdown.Code.Types.Code",
                                    "Basics.Int"
                                ]
                            }
                        },
                        "Lia.Markdown.Effect.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Init": [
                                    "Basics.Bool"
                                ],
                                "Next": [],
                                "Previous": [],
                                "Send": [
                                    "List.List Service.Event.Event"
                                ],
                                "Mute": [
                                    "Basics.Int"
                                ],
                                "Rendered": [
                                    "Basics.Bool",
                                    "Browser.Dom.Viewport"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Lia.Markdown.Gallery.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Show": [
                                    "Basics.Int",
                                    "Basics.Int"
                                ],
                                "Close": [
                                    "Basics.Int"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Block_Update": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Block.Update.Msg sub"
                                ],
                                "Multi_Update": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Multi.Update.Msg sub"
                                ],
                                "Vector_Update": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Vector.Update.Msg sub"
                                ],
                                "Matrix_Update": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Matrix.Update.Msg sub"
                                ],
                                "Check": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Types.Type Lia.Markdown.Types.Block"
                                ],
                                "ShowHint": [
                                    "Basics.Int"
                                ],
                                "ShowSolution": [
                                    "Basics.Int",
                                    "Lia.Markdown.Quiz.Types.Type Lia.Markdown.Types.Block"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Lia.Markdown.Survey.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "TextUpdate": [
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "SelectUpdate": [
                                    "Basics.Int",
                                    "Lia.Markdown.Survey.Update.SelectMsg"
                                ],
                                "DropUpdate": [
                                    "Basics.Int",
                                    "Lia.Markdown.Survey.Update.DropMsg"
                                ],
                                "VectorUpdate": [
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "MatrixUpdate": [
                                    "Basics.Int",
                                    "Basics.Int",
                                    "String.String"
                                ],
                                "Submit": [
                                    "Basics.Int"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ],
                                "None": []
                            }
                        },
                        "Lia.Markdown.Table.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Sort": [
                                    "Basics.Int",
                                    "Basics.Int"
                                ],
                                "Toggle": [
                                    "Basics.Int"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "NoOp": []
                            }
                        },
                        "Lia.Markdown.Task.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Toggle": [
                                    "Basics.Int",
                                    "Basics.Int"
                                ],
                                "Handle": [
                                    "Service.Event.Event"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Dict.NColor": {
                            "args": [],
                            "tags": {
                                "Red": [],
                                "Black": []
                            }
                        },
                        "Lia.Markdown.HTML.Types.Node": {
                            "args": [
                                "content"
                            ],
                            "tags": {
                                "Node": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "List.List content"
                                ],
                                "InnerHtml": [
                                    "String.String"
                                ],
                                "OuterHtml": [
                                    "String.String",
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "String.String"
                                ],
                                "SvgNode": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "String.String",
                                    "List.List ( Lia.Markdown.HTML.Attributes.Parameters, List.List content )"
                                ]
                            }
                        },
                        "Lia.Markdown.Inline.Types.Reference": {
                            "args": [],
                            "tags": {
                                "Link": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "String.String",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Mail": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "String.String",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Image": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "String.String",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Audio": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "( Basics.Bool, String.String )",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Movie": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "( Basics.Bool, String.String )",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Embed": [
                                    "Lia.Markdown.Inline.Types.Inlines",
                                    "String.String",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Preview_Lia": [
                                    "String.String"
                                ],
                                "Preview_Link": [
                                    "String.String"
                                ],
                                "QR_Link": [
                                    "String.String",
                                    "Maybe.Maybe Lia.Markdown.Inline.Types.Inlines"
                                ]
                            }
                        },
                        "Lia.Sync.Update.SyncMsg": {
                            "args": [],
                            "tags": {
                                "Open": [
                                    "Basics.Bool"
                                ],
                                "Select": [
                                    "Maybe.Maybe ( Basics.Bool, Lia.Sync.Via.Backend )"
                                ],
                                "Config": [
                                    "Lia.Sync.Via.Msg"
                                ]
                            }
                        },
                        "Lia.Settings.Update.Toggle": {
                            "args": [],
                            "tags": {
                                "TableOfContents": [],
                                "Sound": [],
                                "Light": [],
                                "QRCode": [],
                                "Sync": [],
                                "Action": [
                                    "Lia.Settings.Types.Action"
                                ],
                                "SupportMenu": [],
                                "Chat": [],
                                "TranslateWithGoogle": [],
                                "Tooltips": [],
                                "PreferBrowserTTS": [],
                                "VideoComments": [],
                                "Fullscreen": []
                            }
                        },
                        "Lia.Sync.Via.Backend": {
                            "args": [],
                            "tags": {
                                "Edrys": [],
                                "GUN": [
                                    "{ urls : String.String, persistent : Basics.Bool }"
                                ],
                                "P2PT": [
                                    "String.String"
                                ],
                                "PubNub": [
                                    "{ pubKey : String.String, subKey : String.String }"
                                ],
                                "NoStr": [],
                                "MQTT": [],
                                "Torrent": []
                            }
                        },
                        "Lia.Markdown.Types.Block": {
                            "args": [],
                            "tags": {
                                "HLine": [
                                    "Lia.Markdown.HTML.Attributes.Parameters"
                                ],
                                "Quote": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Types.Blocks"
                                ],
                                "Paragraph": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "BulletList": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "List.List Lia.Markdown.Types.Blocks"
                                ],
                                "OrderedList": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "List.List ( String.String, Lia.Markdown.Types.Blocks )"
                                ],
                                "Table": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Table.Types.Table"
                                ],
                                "Quiz": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Quiz.Types.Quiz Lia.Markdown.Types.Block",
                                    "Maybe.Maybe ( Lia.Markdown.Types.Blocks, Basics.Int )"
                                ],
                                "Effect": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Effect.Types.Effect Lia.Markdown.Types.Block"
                                ],
                                "Comment": [
                                    "( Basics.Int, Basics.Int )"
                                ],
                                "Survey": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Survey.Types.Survey"
                                ],
                                "Chart": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Chart.Types.Chart"
                                ],
                                "Code": [
                                    "Lia.Markdown.Code.Types.Code"
                                ],
                                "Task": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Task.Types.Task"
                                ],
                                "ASCII": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "( Maybe.Maybe Lia.Markdown.Inline.Types.Inlines, SvgBob.Configuration Lia.Markdown.Types.Blocks )"
                                ],
                                "HTML": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.HTML.Types.Node Lia.Markdown.Types.Block"
                                ],
                                "Header": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "( Basics.Int, Lia.Markdown.Inline.Types.Inlines )"
                                ],
                                "Gallery": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Gallery.Types.Gallery"
                                ],
                                "Citation": [
                                    "Lia.Markdown.HTML.Attributes.Parameters",
                                    "Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Problem": [
                                    "Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "HtmlComment": []
                            }
                        },
                        "Lia.Markdown.Code.Types.Code": {
                            "args": [],
                            "tags": {
                                "Highlight": [
                                    "Basics.Int"
                                ],
                                "Evaluate": [
                                    "Basics.Int"
                                ]
                            }
                        },
                        "Lia.Markdown.Survey.Update.DropMsg": {
                            "args": [],
                            "tags": {
                                "Target": [],
                                "Drop": [
                                    "Basics.Int"
                                ],
                                "Start": [],
                                "Enter": [
                                    "Basics.Bool"
                                ],
                                "Source": [
                                    "Basics.Int"
                                ],
                                "Exit": []
                            }
                        },
                        "Lia.Markdown.Code.Terminal.Msg": {
                            "args": [],
                            "tags": {
                                "KeyDown": [
                                    "Basics.Int"
                                ],
                                "Input": [
                                    "String.String"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Block.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Toggle": [],
                                "Choose": [
                                    "Basics.Int"
                                ],
                                "Input": [
                                    "String.String"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ],
                                "DropStart": [],
                                "DropData": [
                                    "Basics.Int"
                                ],
                                "DropEnter": [
                                    "Basics.Bool"
                                ],
                                "DropExit": [],
                                "DropTarget": [],
                                "DropSource": [
                                    "Basics.Int"
                                ],
                                "None": []
                            }
                        },
                        "Lia.Markdown.Quiz.Matrix.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Toggle": [
                                    "Basics.Int",
                                    "Basics.Int"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Multi.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ],
                                "Handle": [
                                    "( String.String, Json.Encode.Value )"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Vector.Update.Msg": {
                            "args": [
                                "sub"
                            ],
                            "tags": {
                                "Toggle": [
                                    "Basics.Int"
                                ],
                                "Script": [
                                    "Lia.Markdown.Effect.Script.Types.Msg sub"
                                ]
                            }
                        },
                        "Lia.Sync.Via.Msg": {
                            "args": [],
                            "tags": {
                                "InputGun": [
                                    "String.String"
                                ],
                                "CheckboxGun": [],
                                "InputPubNub": [
                                    "String.String",
                                    "String.String"
                                ],
                                "InputP2PT": [
                                    "String.String"
                                ]
                            }
                        },
                        "Lia.Markdown.Survey.Update.SelectMsg": {
                            "args": [],
                            "tags": {
                                "Choose": [],
                                "Update": [
                                    "Basics.Int"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Types.Type": {
                            "args": [
                                "x"
                            ],
                            "tags": {
                                "Generic_Type": [],
                                "Block_Type": [
                                    "Lia.Markdown.Quiz.Block.Types.Quiz Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Multi_Type": [
                                    "Lia.Markdown.Quiz.Multi.Types.Quiz x Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Vector_Type": [
                                    "Lia.Markdown.Quiz.Vector.Types.Quiz"
                                ],
                                "Matrix_Type": [
                                    "Lia.Markdown.Quiz.Matrix.Types.Quiz"
                                ]
                            }
                        },
                        "Array.Array": {
                            "args": [
                                "a"
                            ],
                            "tags": {
                                "Array_elm_builtin": [
                                    "Basics.Int",
                                    "Basics.Int",
                                    "Array.Tree a",
                                    "Elm.JsArray.JsArray a"
                                ]
                            }
                        },
                        "Char.Char": {
                            "args": [],
                            "tags": {
                                "Char": []
                            }
                        },
                        "Lia.Markdown.Table.Types.Class": {
                            "args": [],
                            "tags": {
                                "None": [],
                                "LinePlot": [],
                                "ScatterPlot": [],
                                "BarChart": [],
                                "PieChart": [],
                                "HeatMap": [],
                                "Radar": [],
                                "Parallel": [],
                                "Sankey": [],
                                "BoxPlot": [],
                                "Graph": [],
                                "Map": [],
                                "Funnel": []
                            }
                        },
                        "Lia.Markdown.Chart.Types.Diagram": {
                            "args": [],
                            "tags": {
                                "Lines": [
                                    "List.List Lia.Markdown.Chart.Types.Point",
                                    "Maybe.Maybe String.String"
                                ],
                                "Dots": [
                                    "List.List Lia.Markdown.Chart.Types.Point",
                                    "Maybe.Maybe String.String"
                                ]
                            }
                        },
                        "SvgBob.Types.Element": {
                            "args": [],
                            "tags": {
                                "Text": [
                                    "String.String"
                                ],
                                "TextEmoji": [
                                    "String.String"
                                ],
                                "Line": [
                                    "SvgBob.Types.Direction",
                                    "SvgBob.Types.Direction"
                                ],
                                "Triangle": [
                                    "SvgBob.Types.Direction"
                                ],
                                "Curve": [
                                    "Basics.Float",
                                    "SvgBob.Types.Direction",
                                    "SvgBob.Types.Direction"
                                ],
                                "Sequence": [
                                    "List.List SvgBob.Types.Element"
                                ],
                                "Box": [],
                                "BigBox": [],
                                "Circle": [
                                    "Basics.Bool"
                                ],
                                "ForeignObject": [
                                    "String.String",
                                    "( Basics.Int, Basics.Int )"
                                ]
                            }
                        },
                        "Lia.Markdown.Chart.Types.Orientation": {
                            "args": [],
                            "tags": {
                                "Horizontal": [],
                                "Vertical": []
                            }
                        },
                        "Lia.Markdown.Quiz.Block.Types.State": {
                            "args": [],
                            "tags": {
                                "Text": [
                                    "String.String"
                                ],
                                "Select": [
                                    "Basics.Bool",
                                    "List.List Basics.Int"
                                ],
                                "Drop": [
                                    "Basics.Bool",
                                    "Basics.Bool",
                                    "List.List Basics.Int"
                                ]
                            }
                        },
                        "Lia.Markdown.Quiz.Vector.Types.State": {
                            "args": [],
                            "tags": {
                                "SingleChoice": [
                                    "List.List Basics.Bool"
                                ],
                                "MultipleChoice": [
                                    "List.List Basics.Bool"
                                ]
                            }
                        },
                        "Lia.Markdown.Survey.Types.Type": {
                            "args": [],
                            "tags": {
                                "Text": [
                                    "Basics.Int"
                                ],
                                "Select": [
                                    "List.List Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "DragAndDrop": [
                                    "List.List Lia.Markdown.Inline.Types.Inlines"
                                ],
                                "Vector": [
                                    "Basics.Bool",
                                    "List.List ( String.String, Lia.Markdown.Inline.Types.Inlines )",
                                    "Lia.Markdown.Survey.Types.Analysis"
                                ],
                                "Matrix": [
                                    "Basics.Bool",
                                    "List.List Lia.Markdown.Inline.Types.Inlines",
                                    "List.List String.String",
                                    "List.List Lia.Markdown.Inline.Types.Inlines"
                                ]
                            }
                        },
                        "Lia.Markdown.Survey.Types.Analysis": {
                            "args": [],
                            "tags": {
                                "Categorical": [],
                                "Quantitative": []
                            }
                        },
                        "SvgBob.Types.Direction": {
                            "args": [],
                            "tags": {
                                "Center": [],
                                "East": [],
                                "East_": [
                                    "Basics.Float"
                                ],
                                "South": [],
                                "South_": [
                                    "Basics.Float"
                                ],
                                "North": [],
                                "North_": [
                                    "Basics.Float"
                                ],
                                "West": [],
                                "West_": [
                                    "Basics.Float"
                                ],
                                "Ext": [
                                    "SvgBob.Types.Direction",
                                    "SvgBob.Types.Direction"
                                ],
                                "Ext_": [
                                    "Basics.Float",
                                    "SvgBob.Types.Direction",
                                    "SvgBob.Types.Direction"
                                ]
                            }
                        },
                        "Elm.JsArray.JsArray": {
                            "args": [
                                "a"
                            ],
                            "tags": {
                                "JsArray": [
                                    "a"
                                ]
                            }
                        },
                        "Array.Node": {
                            "args": [
                                "a"
                            ],
                            "tags": {
                                "SubTree": [
                                    "Array.Tree a"
                                ],
                                "Leaf": [
                                    "Elm.JsArray.JsArray a"
                                ]
                            }
                        }
                    }
                }
            })
        }
    });
    //////////////////// HMR BEGIN ////////////////////
    /*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/ /*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */ if (module.hot) {
        (function() {
            "use strict";
            //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
            if (typeof Object.assign != "function") Object.assign = function(target) {
                "use strict";
                if (target == null) throw new TypeError("Cannot convert undefined or null to object");
                target = Object(target);
                for(var index = 1; index < arguments.length; index++){
                    var source = arguments[index];
                    if (source != null) {
                        for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                    }
                }
                return target;
            };
            // Elm 0.19.1 introduced a '$' prefix at the beginning of the symbols it emits,
            // and we check for `Maybe.Just` because we expect it to be present in all Elm programs.
            var elmVersion;
            if (typeof elm$core$Maybe$Just !== "undefined") elmVersion = "0.19.0";
            else if (typeof $elm$core$Maybe$Just !== "undefined") elmVersion = "0.19.1";
            else throw new Error("Could not determine Elm version");
            function elmSymbol(symbol) {
                try {
                    switch(elmVersion){
                        case "0.19.0":
                            return eval(symbol);
                        case "0.19.1":
                            return eval("$" + symbol);
                        default:
                            throw new Error("Cannot resolve " + symbol + ". Elm version unknown!");
                    }
                } catch (e) {
                    if (e instanceof ReferenceError) return undefined;
                    else throw e;
                }
            }
            var instances = module.hot.data ? module.hot.data.instances || {} : {};
            var uid = module.hot.data ? module.hot.data.uid || 0 : 0;
            if (Object.keys(instances).length === 0) log("[elm-hot] Enabled");
            var cancellers = [];
            // These 2 variables act as dynamically-scoped variables which are set only when the
            // Elm module's hooked init function is called.
            var initializingInstance = null;
            var swappingInstance = null;
            module.hot.accept();
            module.hot.dispose(function(data) {
                data.instances = instances;
                data.uid = uid;
                // Cleanup pending async tasks
                // First, make sure that no new tasks can be started until we finish replacing the code
                _Scheduler_binding = function() {
                    return _Scheduler_fail(new Error("[elm-hot] Inactive Elm instance."));
                };
                // Second, kill pending tasks belonging to the old instance
                if (cancellers.length) {
                    log("[elm-hot] Killing " + cancellers.length + " running processes...");
                    try {
                        cancellers.forEach(function(cancel) {
                            cancel();
                        });
                    } catch (e) {
                        console.warn("[elm-hot] Kill process error: " + e.message);
                    }
                }
            });
            function log(message) {
                if (module.hot.verbose) console.log(message);
            }
            function getId() {
                return ++uid;
            }
            function findPublicModules(parent, path) {
                var modules = [];
                for(var key in parent){
                    var child = parent[key];
                    var currentPath = path ? path + "." + key : key;
                    if ("init" in child) modules.push({
                        path: currentPath,
                        module: child
                    });
                    else modules = modules.concat(findPublicModules(child, currentPath));
                }
                return modules;
            }
            function registerInstance(domNode, flags, path, portSubscribes, portSends) {
                var id = getId();
                var instance = {
                    id: id,
                    path: path,
                    domNode: domNode,
                    flags: flags,
                    portSubscribes: portSubscribes,
                    portSends: portSends,
                    lastState: null // last Elm app state (root model)
                };
                return instances[id] = instance;
            }
            function isFullscreenApp() {
                // Returns true if the Elm app will take over the entire DOM body.
                return typeof elmSymbol("elm$browser$Browser$application") !== "undefined" || typeof elmSymbol("elm$browser$Browser$document") !== "undefined";
            }
            function wrapDomNode(node) {
                // When embedding an Elm app into a specific DOM node, Elm will replace the provided
                // DOM node with the Elm app's content. When the Elm app is compiled normally, the
                // original DOM node is reused (its attributes and content changes, but the object
                // in memory remains the same). But when compiled using `--debug`, Elm will completely
                // destroy the original DOM node and instead replace it with 2 brand new nodes: one
                // for your Elm app's content and the other for the Elm debugger UI. In this case,
                // if you held a reference to the DOM node provided for embedding, it would be orphaned
                // after Elm module initialization.
                //
                // So in order to make both cases consistent and isolate us from changes in how Elm
                // does this, we will insert a dummy node to wrap the node for embedding and hold
                // a reference to the dummy node.
                //
                // We will also put a tag on the dummy node so that the Elm developer knows who went
                // behind their back and rudely put stuff in their DOM.
                var dummyNode = document.createElement("div");
                dummyNode.setAttribute("data-elm-hot", "true");
                dummyNode.style.height = "inherit";
                var parentNode = node.parentNode;
                parentNode.replaceChild(dummyNode, node);
                dummyNode.appendChild(node);
                return dummyNode;
            }
            function wrapPublicModule(path, module1) {
                var originalInit = module1.init;
                if (originalInit) module1.init = function(args) {
                    var elm;
                    var portSubscribes = {};
                    var portSends = {};
                    var domNode = null;
                    var flags = null;
                    if (typeof args !== "undefined") {
                        // normal case
                        domNode = args["node"] && !isFullscreenApp() ? wrapDomNode(args["node"]) : document.body;
                        flags = args["flags"];
                    } else {
                        // rare case: Elm allows init to be called without any arguments at all
                        domNode = document.body;
                        flags = undefined;
                    }
                    initializingInstance = registerInstance(domNode, flags, path, portSubscribes, portSends);
                    elm = originalInit(args);
                    wrapPorts(elm, portSubscribes, portSends);
                    initializingInstance = null;
                    return elm;
                };
                else console.error("Could not find a public module to wrap at path " + path);
            }
            function swap(Elm, instance) {
                log("[elm-hot] Hot-swapping module: " + instance.path);
                swappingInstance = instance;
                // remove from the DOM everything that had been created by the old Elm app
                var containerNode = instance.domNode;
                while(containerNode.lastChild)containerNode.removeChild(containerNode.lastChild);
                var m = getAt(instance.path.split("."), Elm);
                var elm;
                if (m) {
                    // prepare to initialize the new Elm module
                    var args = {
                        flags: instance.flags
                    };
                    if (containerNode === document.body) ;
                    else {
                        // embed case: provide a new node for Elm to use
                        var nodeForEmbed = document.createElement("div");
                        containerNode.appendChild(nodeForEmbed);
                        args["node"] = nodeForEmbed;
                    }
                    elm = m.init(args);
                    Object.keys(instance.portSubscribes).forEach(function(portName) {
                        if (portName in elm.ports && "subscribe" in elm.ports[portName]) {
                            var handlers = instance.portSubscribes[portName];
                            if (!handlers.length) return;
                            log("[elm-hot] Reconnect " + handlers.length + " handler(s) to port '" + portName + "' (" + instance.path + ").");
                            handlers.forEach(function(handler) {
                                elm.ports[portName].subscribe(handler);
                            });
                        } else {
                            delete instance.portSubscribes[portName];
                            log("[elm-hot] Port was removed: " + portName);
                        }
                    });
                    Object.keys(instance.portSends).forEach(function(portName) {
                        if (portName in elm.ports && "send" in elm.ports[portName]) {
                            log("[elm-hot] Replace old port send with the new send");
                            instance.portSends[portName] = elm.ports[portName].send;
                        } else {
                            delete instance.portSends[portName];
                            log("[elm-hot] Port was removed: " + portName);
                        }
                    });
                } else log("[elm-hot] Module was removed: " + instance.path);
                swappingInstance = null;
            }
            function wrapPorts(elm, portSubscribes, portSends) {
                var portNames = Object.keys(elm.ports || {});
                //hook ports
                if (portNames.length) {
                    // hook outgoing ports
                    portNames.filter(function(name) {
                        return "subscribe" in elm.ports[name];
                    }).forEach(function(portName) {
                        var port = elm.ports[portName];
                        var subscribe = port.subscribe;
                        var unsubscribe = port.unsubscribe;
                        elm.ports[portName] = Object.assign(port, {
                            subscribe: function(handler) {
                                log("[elm-hot] ports." + portName + ".subscribe called.");
                                if (!portSubscribes[portName]) portSubscribes[portName] = [
                                    handler
                                ];
                                else //TODO handle subscribing to single handler more than once?
                                portSubscribes[portName].push(handler);
                                return subscribe.call(port, handler);
                            },
                            unsubscribe: function(handler) {
                                log("[elm-hot] ports." + portName + ".unsubscribe called.");
                                var list = portSubscribes[portName];
                                if (list && list.indexOf(handler) !== -1) list.splice(list.lastIndexOf(handler), 1);
                                else console.warn("[elm-hot] ports." + portName + ".unsubscribe: handler not subscribed");
                                return unsubscribe.call(port, handler);
                            }
                        });
                    });
                    // hook incoming ports
                    portNames.filter(function(name) {
                        return "send" in elm.ports[name];
                    }).forEach(function(portName) {
                        var port = elm.ports[portName];
                        portSends[portName] = port.send;
                        elm.ports[portName] = Object.assign(port, {
                            send: function(val) {
                                return portSends[portName].call(port, val);
                            }
                        });
                    });
                }
                return portSubscribes;
            }
            /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */ function findNavKey(rootModel) {
                var queue = [];
                if (isDebuggerModel(rootModel)) /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */ queue.push({
                    value: rootModel["state"],
                    keypath: [
                        "state"
                    ]
                });
                else queue.push({
                    value: rootModel,
                    keypath: []
                });
                while(queue.length !== 0){
                    var item = queue.shift();
                    if (typeof item.value === "undefined" || item.value === null) continue;
                    // The nav key is identified by a runtime tag added by the elm-hot injector.
                    if (item.value.hasOwnProperty("elm-hot-nav-key")) // found it!
                    return item;
                    if (typeof item.value !== "object") continue;
                    for(var propName in item.value){
                        if (!item.value.hasOwnProperty(propName)) continue;
                        var newKeypath = item.keypath.slice();
                        newKeypath.push(propName);
                        queue.push({
                            value: item.value[propName],
                            keypath: newKeypath
                        });
                    }
                }
                return null;
            }
            function isDebuggerModel(model) {
                // Up until elm/browser 1.0.2, the Elm debugger could be identified by a
                // property named "expando". But in version 1.0.2 that was renamed to "expandoModel"
                return model && (model.hasOwnProperty("expando") || model.hasOwnProperty("expandoModel")) && model.hasOwnProperty("state");
            }
            function getAt(keyPath, obj) {
                return keyPath.reduce(function(xs, x) {
                    return xs && xs[x] ? xs[x] : null;
                }, obj);
            }
            function removeNavKeyListeners(navKey) {
                window.removeEventListener("popstate", navKey.value);
                window.navigator.userAgent.indexOf("Trident") < 0 || window.removeEventListener("hashchange", navKey.value);
            }
            // hook program creation
            var initialize = _Platform_initialize;
            _Platform_initialize = function(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
                var instance = initializingInstance || swappingInstance;
                var tryFirstRender = !!swappingInstance;
                var hookedInit = function(args) {
                    var initialStateTuple = init(args);
                    if (swappingInstance) {
                        var oldModel = swappingInstance.lastState;
                        var newModel = initialStateTuple.a;
                        if (typeof elmSymbol("elm$browser$Browser$application") !== "undefined") {
                            var oldKeyLoc = findNavKey(oldModel);
                            // attempt to find the Browser.Navigation.Key in the newly-constructed model
                            // and bring it along with the rest of the old data.
                            var newKeyLoc = findNavKey(newModel);
                            var error = null;
                            if (newKeyLoc === null) error = "could not find Browser.Navigation.Key in the new app model";
                            else if (oldKeyLoc === null) error = "could not find Browser.Navigation.Key in the old app model.";
                            else if (newKeyLoc.keypath.toString() !== oldKeyLoc.keypath.toString()) error = "the location of the Browser.Navigation.Key in the model has changed.";
                            else {
                                // remove event listeners attached to the old nav key
                                removeNavKeyListeners(oldKeyLoc.value);
                                // insert the new nav key into the old model in the exact same location
                                var parentKeyPath = oldKeyLoc.keypath.slice(0, -1);
                                var lastSegment = oldKeyLoc.keypath.slice(-1)[0];
                                var oldParent = getAt(parentKeyPath, oldModel);
                                oldParent[lastSegment] = newKeyLoc.value;
                            }
                            if (error !== null) {
                                console.error("[elm-hot] Hot-swapping " + instance.path + " not possible: " + error);
                                oldModel = newModel;
                            }
                        }
                        // the heart of the app state hot-swap
                        initialStateTuple.a = oldModel;
                        // ignore any Cmds returned by the init during hot-swap
                        initialStateTuple.b = elmSymbol("elm$core$Platform$Cmd$none");
                    } else // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a;
                    return initialStateTuple;
                };
                var hookedStepperBuilder = function(sendToApp, model) {
                    var result;
                    // first render may fail if shape of model changed too much
                    if (tryFirstRender) {
                        tryFirstRender = false;
                        try {
                            result = stepperBuilder(sendToApp, model);
                        } catch (e) {
                            throw new Error("[elm-hot] Hot-swapping " + instance.path + " is not possible, please reload page. Error: " + e.message);
                        }
                    } else result = stepperBuilder(sendToApp, model);
                    return function(nextModel, isSync) {
                        if (instance) // capture the state after every step so that later we can restore from it during a hot-swap
                        instance.lastState = nextModel;
                        return result(nextModel, isSync);
                    };
                };
                return initialize(flagDecoder, args, hookedInit, update, subscriptions, hookedStepperBuilder);
            };
            // hook process creation
            var originalBinding = _Scheduler_binding;
            _Scheduler_binding = function(originalCallback) {
                return originalBinding(function() {
                    // start the scheduled process, which may return a cancellation function.
                    var cancel = originalCallback.apply(this, arguments);
                    if (cancel) {
                        cancellers.push(cancel);
                        return function() {
                            cancellers.splice(cancellers.indexOf(cancel), 1);
                            return cancel();
                        };
                    }
                    return cancel;
                });
            };
            scope["_elm_hot_loader_init"] = function(Elm) {
                // swap instances
                var removedInstances = [];
                for(var id in instances){
                    var instance = instances[id];
                    if (instance.domNode.parentNode) swap(Elm, instance);
                    else removedInstances.push(id);
                }
                removedInstances.forEach(function(id) {
                    delete instance[id];
                });
                // wrap all public modules
                var publicModules = findPublicModules(Elm);
                publicModules.forEach(function(m) {
                    wrapPublicModule(m.path, m.module);
                });
            };
        })();
        scope["_elm_hot_loader_init"](scope["Elm"]);
    }
//////////////////// HMR END ////////////////////
})(this);

},{}],"4dsMr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _globals = require("./types/globals");
const log = {
    info: function(...args) {
        if (window.LIA.debug) {
            console.info("⭐", ...args);
            if (window.LIA.log) window.LIA.log("log", args);
        }
    },
    warn: function(...args) {
        if (window.LIA.debug) {
            console.warn("⭐", ...args);
            if (window.LIA.log) window.LIA.log("warn", args);
        }
    },
    error: function(...args) {
        console.error("⭐", ...args);
        if (window.LIA.log) window.LIA.log("error", args);
    }
};
exports.default = log;

},{"./types/globals":"60gyf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60gyf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wzf3":[function(require,module,exports) {
var global = arguments[3];
(function(factory) {
    typeof define === "function" && define.amd ? define(factory) : factory();
})(function() {
    "use strict";
    function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
        return n;
    }
    function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
    }
    function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
        for(var t = 0; t < r.length; t++){
            var o = r[t];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
    }
    function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
            writable: !1
        }), e;
    }
    function _createForOfIteratorHelper(r, e) {
        var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
        if (!t) {
            if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
                t && (r = t);
                var n = 0, F = function() {};
                return {
                    s: F,
                    n: function() {
                        return n >= r.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: r[n++]
                        };
                    },
                    e: function(r) {
                        throw r;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                t = t.call(r);
            },
            n: function() {
                var r = t.next();
                return a = r.done, r;
            },
            e: function(r) {
                u = !0, o = r;
            },
            f: function() {
                try {
                    a || null == t.return || t.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function _get() {
        return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r) {
            var p = _superPropBase(e, t);
            if (p) {
                var n = Object.getOwnPropertyDescriptor(p, t);
                return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
            }
        }, _get.apply(null, arguments);
    }
    function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
            return t.__proto__ || Object.getPrototypeOf(t);
        }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), Object.defineProperty(t, "prototype", {
            writable: !1
        }), e && _setPrototypeOf(t, e);
    }
    function _isNativeReflectConstruct() {
        try {
            var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        } catch (t) {}
        return (_isNativeReflectConstruct = function() {
            return !!t;
        })();
    }
    function _possibleConstructorReturn(t, e) {
        if (e && ("object" == typeof e || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
    }
    function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
            return t.__proto__ = e, t;
        }, _setPrototypeOf(t, e);
    }
    function _superPropBase(t, o) {
        for(; !({}).hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
        return t;
    }
    function _superPropGet(t, o, e, r) {
        var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e);
        return 2 & r && "function" == typeof p ? function(t) {
            return p.apply(e, t);
        } : p;
    }
    function _toPrimitive(t, r) {
        if ("object" != typeof t || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
            var i = e.call(t, r || "default");
            if ("object" != typeof i) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
    }
    function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == typeof i ? i : i + "";
    }
    function _unsupportedIterableToArray(r, a) {
        if (r) {
            if ("string" == typeof r) return _arrayLikeToArray(r, a);
            var t = ({}).toString.call(r).slice(8, -1);
            return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
        }
    }
    (function(self1) {
        return {
            NativeAbortSignal: self1.AbortSignal,
            NativeAbortController: self1.AbortController
        };
    })(typeof self !== "undefined" ? self : global);
    /**
   * @param {any} reason abort reason
   */ function createAbortEvent(reason) {
        var event;
        try {
            event = new Event("abort");
        } catch (e) {
            if (typeof document !== "undefined") {
                if (!document.createEvent) {
                    // For Internet Explorer 8:
                    event = document.createEventObject();
                    event.type = "abort";
                } else {
                    // For Internet Explorer 11:
                    event = document.createEvent("Event");
                    event.initEvent("abort", false, false);
                }
            } else // Fallback where document isn't available:
            event = {
                type: "abort",
                bubbles: false,
                cancelable: false
            };
        }
        event.reason = reason;
        return event;
    }
    /**
   * @param {any} reason abort reason
   */ function normalizeAbortReason(reason) {
        if (reason === undefined) {
            if (typeof document === "undefined") {
                reason = new Error("This operation was aborted");
                reason.name = "AbortError";
            } else try {
                reason = new DOMException("signal is aborted without reason");
                // The DOMException does not support setting the name property directly.
                Object.defineProperty(reason, "name", {
                    value: "AbortError"
                });
            } catch (err) {
                // IE 11 does not support calling the DOMException constructor, use a
                // regular error object on it instead.
                reason = new Error("This operation was aborted");
                reason.name = "AbortError";
            }
        }
        return reason;
    }
    var Emitter = /*#__PURE__*/ function() {
        function Emitter() {
            _classCallCheck(this, Emitter);
            Object.defineProperty(this, "listeners", {
                value: {},
                writable: true,
                configurable: true
            });
        }
        return _createClass(Emitter, [
            {
                key: "addEventListener",
                value: function addEventListener(type, callback, options) {
                    if (!(type in this.listeners)) this.listeners[type] = [];
                    this.listeners[type].push({
                        callback: callback,
                        options: options
                    });
                }
            },
            {
                key: "removeEventListener",
                value: function removeEventListener(type, callback) {
                    if (!(type in this.listeners)) return;
                    var stack = this.listeners[type];
                    for(var i = 0, l = stack.length; i < l; i++)if (stack[i].callback === callback) {
                        stack.splice(i, 1);
                        return;
                    }
                }
            },
            {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                    var _this = this;
                    if (!(event.type in this.listeners)) return;
                    var stack = this.listeners[event.type];
                    var stackToCall = stack.slice();
                    var _loop = function _loop() {
                        var listener = stackToCall[i];
                        try {
                            listener.callback.call(_this, event);
                        } catch (e) {
                            Promise.resolve().then(function() {
                                throw e;
                            });
                        }
                        if (listener.options && listener.options.once) _this.removeEventListener(event.type, listener.callback);
                    };
                    for(var i = 0, l = stackToCall.length; i < l; i++)_loop();
                    return !event.defaultPrevented;
                }
            }
        ]);
    }();
    var AbortSignal = /*#__PURE__*/ function(_Emitter) {
        function AbortSignal() {
            var _this2;
            _classCallCheck(this, AbortSignal);
            _this2 = _callSuper(this, AbortSignal);
            // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
            // constructor has failed to run, then "this.listeners" will still be undefined and then we call
            // the parent constructor directly instead as a workaround. For general details, see babel bug:
            // https://github.com/babel/babel/issues/3041
            // This hack was added as a fix for the issue described here:
            // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
            if (!_this2.listeners) Emitter.call(_this2);
            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
            Object.defineProperty(_this2, "aborted", {
                value: false,
                writable: true,
                configurable: true
            });
            Object.defineProperty(_this2, "onabort", {
                value: null,
                writable: true,
                configurable: true
            });
            Object.defineProperty(_this2, "reason", {
                value: undefined,
                writable: true,
                configurable: true
            });
            return _this2;
        }
        _inherits(AbortSignal, _Emitter);
        return _createClass(AbortSignal, [
            {
                key: "toString",
                value: function toString() {
                    return "[object AbortSignal]";
                }
            },
            {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                    if (event.type === "abort") {
                        this.aborted = true;
                        if (typeof this.onabort === "function") this.onabort.call(this, event);
                    }
                    _superPropGet(AbortSignal, "dispatchEvent", this, 3)([
                        event
                    ]);
                }
            },
            {
                key: "throwIfAborted",
                value: function throwIfAborted() {
                    var aborted = this.aborted, _this$reason = this.reason, reason = _this$reason === void 0 ? "Aborted" : _this$reason;
                    if (!aborted) return;
                    throw reason;
                }
            }
        ], [
            {
                key: "timeout",
                value: function timeout(time) {
                    var controller = new AbortController();
                    setTimeout(function() {
                        return controller.abort(new DOMException("This signal is timeout in ".concat(time, "ms"), "TimeoutError"));
                    }, time);
                    return controller.signal;
                }
            },
            {
                key: "any",
                value: function any(iterable) {
                    var controller = new AbortController();
                    /**
         * @this AbortSignal
         */ function abort() {
                        controller.abort(this.reason);
                        clean();
                    }
                    function clean() {
                        var _iterator = _createForOfIteratorHelper(iterable), _step;
                        try {
                            for(_iterator.s(); !(_step = _iterator.n()).done;){
                                var signal = _step.value;
                                signal.removeEventListener("abort", abort);
                            }
                        } catch (err) {
                            _iterator.e(err);
                        } finally{
                            _iterator.f();
                        }
                    }
                    var _iterator2 = _createForOfIteratorHelper(iterable), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var signal = _step2.value;
                            if (signal.aborted) {
                                controller.abort(signal.reason);
                                break;
                            } else signal.addEventListener("abort", abort);
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                    return controller.signal;
                }
            }
        ]);
    }(Emitter);
    var AbortController = /*#__PURE__*/ function() {
        function AbortController() {
            _classCallCheck(this, AbortController);
            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController()) to be [] for compat with the native impl
            Object.defineProperty(this, "signal", {
                value: new AbortSignal(),
                writable: true,
                configurable: true
            });
        }
        return _createClass(AbortController, [
            {
                key: "abort",
                value: function abort(reason) {
                    var signalReason = normalizeAbortReason(reason);
                    var event = createAbortEvent(signalReason);
                    this.signal.reason = signalReason;
                    this.signal.dispatchEvent(event);
                }
            },
            {
                key: "toString",
                value: function toString() {
                    return "[object AbortController]";
                }
            }
        ]);
    }();
    if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        // These are necessary to make sure that we get correct output for:
        // Object.prototype.toString.call(new AbortController())
        AbortController.prototype[Symbol.toStringTag] = "AbortController";
        AbortSignal.prototype[Symbol.toStringTag] = "AbortSignal";
    }
    function polyfillNeeded(self1) {
        if (self1.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
            console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill");
            return true;
        }
        // Note that the "unfetch" minimal fetch polyfill defines fetch() without
        // defining window.Request, and this polyfill need to work on top of unfetch
        // so the below feature detection needs the !self.AbortController part.
        // The Request.prototype check is also needed because Safari versions 11.1.2
        // up to and including 12.1.x has a window.AbortController present but still
        // does NOT correctly implement abortable fetch:
        // https://bugs.webkit.org/show_bug.cgi?id=174980#c2
        return typeof self1.Request === "function" && !self1.Request.prototype.hasOwnProperty("signal") || !self1.AbortController;
    }
    (function(self1) {
        if (!polyfillNeeded(self1)) return;
        self1.AbortController = AbortController;
        self1.AbortSignal = AbortSignal;
    })(typeof self !== "undefined" ? self : global);
});

},{}],"lx71L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
const Service = {
    PORT: "console",
    handle: function(event) {
        switch(event.message.cmd){
            case "log":
                (0, _logDefault.default).info(event.message.param);
                break;
            case "warn":
                (0, _logDefault.default).warn(event.message.param);
                break;
            case "error":
                (0, _logDefault.default).error(event.message.param);
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    }
};
exports.default = Service;

},{"../log":"4dsMr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ksx6E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _settings = require("../../connectors/Base/settings");
var _tts = require("./TTS");
var _ttsDefault = parcelHelpers.interopDefault(_tts);
var _script = require("./Script");
var _scriptDefault = parcelHelpers.interopDefault(_script);
var connector = null;
var elmSend;
const Service = {
    PORT: "db",
    conn: null,
    callback: null,
    init: function(elmSend_, connector_) {
        connector = connector_;
        elmSend = elmSend_;
        elmSend({
            reply: true,
            track: [
                [
                    (0, _settings.Settings).PORT,
                    -1
                ]
            ],
            service: this.PORT,
            message: {
                cmd: "init",
                param: connector.initSettings(connector.getSettings(), false)
            }
        });
    },
    onReady: function(callback) {
        this.callback = callback;
    },
    handle: async function(event) {
        if (!connector) return;
        const param = event.message.param;
        switch(event.message.cmd){
            case "load":
                event.message.param = await connector.load(param);
                sendReply(event);
                break;
            case "store":
                if (param.id < 10000) connector.store(param);
                break;
            case "update":
                if (param.id < 10000) connector.update({
                    table: param.table,
                    id: param.id
                }, transaction(param.data));
                break;
            case "index_get":
                // the reply must contain the id as the url ... such that
                // LiaScript knows, what to do ...
                event.message.param = await connector.getFromIndex(param) || {
                    id: param
                };
                sendReply(event);
                break;
            case "index_list":
                // this might be necessary to stop talking, if the user switches back
                // from a course to the home screen
                try {
                    (0, _ttsDefault.default).mute();
                } catch (e) {}
                event.message.param = await connector.getIndex();
                sendReply(event);
                break;
            case "index_reset":
                connector.reset(param.url, param.version);
                break;
            case "index_delete":
                connector.deleteFromIndex(param);
                break;
            case "index_restore":
                event.message.param = await connector.restoreFromIndex(param.url, param.version);
                sendReply(event);
                break;
            case "index_store":
                {
                    let isPersistent = true;
                    try {
                        isPersistent = !(param.definition.macro["persistent"].trim().toLowerCase() === "false");
                    } catch (e) {}
                    if (isPersistent) connector.open(param.readme, param.version, param.section_active);
                    if (param.definition.onload !== "") // adding the semaphore to delay the execution of other scripts
                    (0, _scriptDefault.default).exec(param.definition.onload, 10);
                    if (document.documentElement.lang != param.definition.language) {
                        document.documentElement.lang = param.definition.language;
                        // Force recalculation of styles in Firefox
                        let forceRecalc = window.getComputedStyle(document.body).direction;
                        document.body.style.display = "none";
                        document.body.offsetHeight // force a reflow
                        ;
                        document.body.style.display = "";
                    }
                    meta("author", param.definition.author);
                    meta("og:description", param.comment);
                    meta("og:title", param.str_title);
                    meta("og:type", "website");
                    meta("og:url", "");
                    meta("og:image", param.definition.logo);
                    // store the basic info in the offline-repositories
                    if (isPersistent) connector.storeToIndex(param).then(()=>{
                        if (this.callback) this.callback();
                    });
                    if (window.LIA.onReady) window.LIA.onReady(param.definition);
                    else // this callback might be required, when `onload` on an iframe will not trigger,
                    // which can be used to register an onReady callback
                    try {
                        window.parent["liaReady"](param.definition);
                    } catch (e) {
                        console.log("no parent frame to send readiness");
                    }
                    // this will add the font definition
                    if (param.definition.macro.font) try {
                        const r = document.querySelector(":root");
                        if (r) {
                            const rs = getComputedStyle(r);
                            const fontSettings = [
                                "family",
                                "mono",
                                "headline"
                            ];
                            fontSettings.forEach((val)=>{
                                const key = "--global-font-" + val;
                                r.style.setProperty(key, rs.getPropertyValue(key) + "," + param.definition.macro.font);
                            });
                        }
                    } catch (e) {
                        console.warn("could not load font");
                    }
                    break;
                }
            case "settings":
                try {
                    (0, _settings.Settings).updateClassName(event.message.param.config);
                    setTimeout(function() {
                        window.dispatchEvent(new Event("resize"));
                    }, 333);
                    let style = document.getElementById("lia-custom-style");
                    if (typeof event.message.param.custom === "string") {
                        if (style == null) {
                            style = document.createElement("style");
                            style.id = "lia-custom-style";
                            document.head.appendChild(style);
                        }
                        style.innerHTML = ":root {" + event.message.param.custom + "}";
                    } else if (style !== null) style.innerHTML = "";
                } catch (e) {
                    (0, _logDefault.default).warn("DB: settings => ", e.message);
                }
                connector.setSettings(event.message.param.config);
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    },
    addMisc: async function(uidDB, versionDB, key, value) {
        if (connector) connector.addMisc(uidDB, versionDB, key, value);
    },
    getMisc: async function(uidDB, versionDB, key) {
        if (connector) return connector.getMisc(uidDB, versionDB, key);
        else console.warn("connector not initialized");
    }
};
/**
 * **private helper:** defines a couple of transaction only for the data stored
 * in the "code" table.
 *
 * @param def
 * @returns a function that modifies a certain sub-entry within the database
 */ function transaction(def) {
    switch(def.cmd){
        // update the current version and logs
        case "version":
            return (project)=>{
                project[def.id].version_active = def.data.version_active;
                project[def.id].log = def.data.log;
                project[def.id].version[def.data.version_active] = def.data.version;
                return project;
            };
        // append a new version of files and logs
        case "append":
            return (project)=>{
                project[def.id].version_active = def.data.version_active;
                project[def.id].log = def.data.log;
                project[def.id].file = def.data.file;
                project[def.id].version.push(def.data.version);
                project[def.id].repository = {
                    ...project[def.id].repository,
                    ...def.data.repository
                };
                return project;
            };
        // change the active version of the project
        case "active":
            return (project)=>{
                project[def.id].version_active = def.data.version_active;
                project[def.id].log = def.data.log;
                project[def.id].file = def.data.file;
                return project;
            };
        case "flip_view":
            return (project)=>{
                project[def.id].file[def.data.file_id].visible = def.data.value;
                return project;
            };
        case "flip_fullscreen":
            return (project)=>{
                project[def.id].file[def.data.file_id].fullscreen = def.data.value;
                return project;
            };
        default:
            (0, _logDefault.default).warn("unknown update cmd: ", def.cmd);
            return (project)=>{
                return project;
            };
    }
}
function meta(name, content) {
    if (content !== "") {
        let meta = document.createElement("meta");
        meta.name = name;
        meta.content = content;
        document.getElementsByTagName("head")[0].appendChild(meta);
    }
}
function sendReply(event) {
    if (elmSend) elmSend(event);
}
exports.default = Service;

},{"../log":"4dsMr","../../connectors/Base/settings":"3xoes","./TTS":"idFt9","./Script":"ljmaF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3xoes":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Settings", ()=>Settings);
var _liaD = require("../../liascript/types/lia.d");
const defaultSettings = {
    table_of_contents: window.innerWidth > 768,
    mode: _liaD.Mode.Textbook,
    theme: "default",
    light: true,
    editor: "dreamweaver",
    font_size: 1,
    sound: true,
    lang: "en",
    tooltips: false,
    preferBrowserTTS: true,
    hideVideoComments: false,
    audio: {
        pitch: 1,
        rate: 1
    }
};
const Settings = {
    PORT: "settings",
    data: defaultSettings,
    storage: function(_) {},
    init: function(data, local = false, storage) {
        if (storage) this.storage = storage;
        if (!data) {
            data = defaultSettings;
            this.update(data, local);
        }
        this.data = data;
        if (window.LIA) window.LIA.settings = this;
        return data;
    },
    update: function(data, storeLocally = true) {
        if (storeLocally) localStorage.setItem(this.PORT, JSON.stringify(data));
        this.updateClassName(data);
        this.data = data;
    },
    updateClassName: function(data) {
        try {
            let fontSize = 1;
            switch(data.font_size){
                case 2:
                    fontSize = 2;
                    break;
                case 3:
                    fontSize = 3;
                    break;
                default:
                    fontSize = 1;
            }
            let className = `lia-theme-${data.theme} lia-variant-${data.light ? "light" : "dark"} lia-font-scale-${fontSize}`;
            document.documentElement.className = className;
        } catch (err) {
            console.warn("settings (className): ", err.message);
        }
    },
    setter: function(name, value1) {
        if (JSON.stringify(value1) !== JSON.stringify(this.data[name])) {
            this.data[name] = value1;
            this.storage(this.data);
            this.updateClassName(this.data);
            if (window.LIA.send) window.LIA.send({
                reply: true,
                track: [
                    [
                        this.PORT,
                        -1
                    ]
                ],
                service: this.PORT,
                message: {
                    cmd: "init",
                    param: this.data
                }
            });
        }
    },
    get table_of_contents () {
        return this.data.table_of_contents;
    },
    set table_of_contents (value){
        this.setter("table_of_contents", value);
    },
    get mode () {
        return this.data.mode;
    },
    set mode (value){
        this.setter("mode", value);
    },
    get theme () {
        return this.data.theme;
    },
    set theme (value){
        this.setter("theme", value);
    },
    get light () {
        return this.data.light;
    },
    set light (value){
        this.setter("light", value);
    },
    get editor () {
        return this.data.editor;
    },
    set editor (value){
        this.setter("editor", value);
    },
    get font_size () {
        return this.data.font_size;
    },
    set font_size (value){
        this.setter("font_size", value);
    },
    get sound () {
        return this.data.sound;
    },
    set sound (value){
        this.setter("sound", value);
    },
    get tooltips () {
        return this.data.tooltips;
    },
    set tooltips (value){
        this.setter("tooltips", value);
    },
    get preferBrowserTTS () {
        return this.data.preferBrowserTTS;
    },
    set preferBrowserTTS (value){
        this.setter("preferBrowserTTS", value);
    },
    get hideVideoComments () {
        return this.data.hideVideoComments;
    },
    set hideVideoComments (value){
        this.setter("hideVideoComments", value);
    },
    set audio (value){
        this.data.audio = value;
        this.setter("audio", value);
    },
    get audio () {
        return this.data.audio;
    }
};

},{"../../liascript/types/lia.d":"aT9qy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aT9qy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mode", ()=>Mode);
let Mode;
(function(Mode) {
    Mode["Slides"] = "Slides";
    Mode["Presentation"] = "Presentation";
    Mode["Textbook"] = "Textbook";
})(Mode || (Mode = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"idFt9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Service", ()=>Service);
parcelHelpers.export(exports, "inject", ()=>inject);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _responsiveVoice = require("../types/responsiveVoice");
// @ts-ignore
var _easySpeech = require("easy-speech/dist/EasySpeech");
var _easySpeechDefault = parcelHelpers.interopDefault(_easySpeech);
let Gender;
(function(Gender) {
    Gender[Gender["Female"] = 0] = "Female";
    Gender[Gender["Male"] = 1] = "Male";
    Gender[Gender["Unknown"] = 2] = "Unknown";
})(Gender || (Gender = {}));
var useBrowserTTS = null;
var browserVoices = {};
var firstSpeak = true;
var elmSend;
const SETTINGS = "settings";
const AUDIO = "lia-tts-recordings";
const VIDEO = "lia-tts-videos";
const Service = {
    PORT: "tts",
    easySpeechSettings: null,
    init: function(elmSend_) {
        elmSend = elmSend_;
        setTimeout(function() {
            firstSpeak = false;
            if (window.responsiveVoice) sendEnabledTTS("responsiveVoiceTTS");
            window.LIA.playback = function(event) {
                playback(event);
            };
        }, 2000);
        this.easySpeechSettings = (0, _easySpeechDefault.default).detect();
        (0, _easySpeechDefault.default).init({
            maxTimeout: 5000,
            interval: 250
        }).then(()=>{
            useBrowserTTS = true;
            sendEnabledTTS("browserTTS");
        }).catch((e)=>{
            console.warn(e);
        });
    },
    mute: function() {
        cancel();
    },
    handle: function(event) {
        switch(event.message.cmd){
            // stop talking but send a response to the sender
            case "cancel":
                cancel();
                if (event.track.length == 1 && event.track[0][0] === "effect") event.track[0][0] = SETTINGS;
                sendResponse(event, "stop", null);
                break;
            case "read":
                {
                    // TODO: this is a hack to guide TTS from the effect to the settings,
                    // such that the current status can be marked at the bottom buttons!
                    if (event.track.length == 1 && event.track[0][0] === "effect") event.track[0][0] = SETTINGS;
                    if (firstSpeak) {
                        sendResponse(event, "stop");
                        return;
                    }
                    const timeout = event.message.param.endsWith("-0") ? 2000 : 500;
                    setTimeout(function() {
                        read(event);
                    }, timeout);
                    break;
                }
            case "playback":
                playback(event);
                break;
            case "preferBrowserTTS":
                useBrowserTTS = event.message.param ? true : false;
                break;
            default:
                (0, _logDefault.default).warn("(Service TTS) unknown message =>", event);
        }
    }
};
function playback(event) {
    const voice = event.message.param.voice;
    const lang = event.message.param.lang;
    let text = event.message.param.text;
    const options = getAudioSettings(text);
    if (typeof text !== "string") text = innerText(text);
    speak(text, voice, lang, options, event);
}
function innerText(node) {
    if (node.nodeType === Node.TEXT_NODE) // If the child node is a text node, append its text content
    return node.textContent;
    else if (node.tagName === "INPUT") // If the child node is an input element, append its value
    return node.value;
    else if (node.classList.contains("lia-effect__circle") || node.classList.contains("lia-quiz-multi")) return "";
    else if (node.classList.contains("lia-dropdown")) node = node.childNodes[0];
    let text = "";
    try {
        if (window.getComputedStyle(node).display !== "none") node.childNodes.forEach((n)=>{
            text += innerText(n);
        });
    } catch (e) {
        console.warn("TTS: could not read innerText -->", e.message);
    }
    return text;
}
function getAudioSettings(element) {
    const options = Object.assign({
        videoRate: 1
    }, window.LIA.settings.audio);
    const rate = element.getAttribute("data-rate");
    if (rate) try {
        options.rate = parseFloat(rate);
    } catch (e) {}
    const pitch = element.getAttribute("data-pitch");
    if (pitch) try {
        options.pitch = parseFloat(pitch);
    } catch (e) {}
    return options;
}
function read(event) {
    cancel();
    let element = document.getElementsByClassName(event.message.param);
    if (element.length) {
        let voice = element[0].getAttribute("data-voice") || "default";
        let lang = element[0].getAttribute("data-lang") || "en";
        let translation = (element[0].getAttribute("translate") || "no") === "yes";
        const options = getAudioSettings(element[0]);
        let hasAudioURLs = false;
        let text = "";
        for(let i = 0; i < element.length; i++){
            text += element[i].innerText || element[i].textContent;
            let audioUrl = element[i].getAttribute("data-file") || null;
            if (audioUrl) hasAudioURLs = true;
        }
        // This is used to clean up effect numbers, which are marked by a \b
        // \b(1.)\b is not visible to the user within the browser
        text = text.replace(/\\u001a\\d+\\u001a/g, "").trim();
        const player = document.getElementById(VIDEO);
        const videos = Array.from(player?.children) || [];
        if (videos.length > 0 && player) {
            let currentIndex = 0;
            let isEnding = false;
            let ttsFinished = !translation // If no translation needed, mark TTS as finished
            ;
            // Send initial start response
            sendResponse(event, "start");
            // Handle translation mode differently
            if (translation && text.trim() !== "") // For translation mode, preload videos to get their durations
            Promise.all(videos.map((video)=>{
                return new Promise((resolve)=>{
                    // If video is already loaded with duration
                    if (video.readyState >= 2 && video.duration) {
                        resolve(video.duration);
                        return;
                    }
                    // Otherwise wait for metadata to load
                    const handleLoaded = ()=>{
                        video.removeEventListener("loadedmetadata", handleLoaded);
                        resolve(video.duration);
                    };
                    video.addEventListener("loadedmetadata", handleLoaded);
                    // Set source if not already
                    if (!video.src && video.querySelector("source")) video.load();
                });
            })).then((durations)=>{
                // Calculate total video duration
                const totalVideoDuration = durations.reduce((total, duration)=>total + duration, 0);
                // Estimate TTS duration based on text length and speech rate
                const estimatedTTSDuration = estimateTTSDuration(text, lang, options.rate);
                // Calculate adjusted playback rate if video is shorter than TTS
                const originalRate = options.rate;
                if (totalVideoDuration < estimatedTTSDuration) {
                    // Calculate rate to match durations, with a minimum threshold
                    const MIN_RATE = 0.5 // Most browsers support down to 0.5x speed
                    ;
                    options.videoRate = Math.max(MIN_RATE, totalVideoDuration / estimatedTTSDuration * originalRate);
                    console.log(`Adjusting video playback rate to ${options.videoRate} to match estimated TTS duration`);
                } else options.videoRate = originalRate;
                // Start TTS with custom handlers
                speak(text, voice, lang, options, {
                    ...event,
                    message: {
                        ...event.message,
                        cmd: event.message.cmd
                    },
                    handlers: {
                        onStart: ()=>{
                            // Start video when TTS begins speaking
                            playNext();
                        },
                        onStop: ()=>{
                            ttsFinished = true;
                            // Stop the currently playing video when TTS finishes
                            if (currentIndex < videos.length) {
                                const currentVideo = videos[currentIndex];
                                if (!currentVideo.paused) {
                                    currentVideo.pause();
                                    // Trigger the end of video processing
                                    currentIndex = videos.length;
                                    isEnding = true;
                                }
                            }
                            // Send stop response
                            if (isEnding || currentIndex >= videos.length) sendResponse(event, "stop");
                            else // Mark as ending to prepare for stop response
                            isEnding = true;
                        },
                        onError: (error)=>{
                            console.warn("TTS translation error:", error);
                            ttsFinished = true;
                            if (!videos[currentIndex]?.played.length) playNext();
                            if (currentIndex >= videos.length && isEnding) sendResponse(event, "stop");
                        }
                    }
                });
            }).catch((error)=>{
                console.warn("Error calculating video durations:", error);
                // Fall back to original behavior if duration calculation fails
                speak(text, voice, lang, options, {
                    ...event,
                    message: {
                        ...event.message,
                        cmd: event.message.cmd
                    },
                    handlers: {
                        onStart: ()=>playNext(),
                        onStop: ()=>{
                            ttsFinished = true;
                            // Stop the currently playing video when TTS finishes
                            if (currentIndex < videos.length) {
                                const currentVideo = videos[currentIndex];
                                if (!currentVideo.paused) {
                                    currentVideo.pause();
                                    // Trigger the end of video processing
                                    currentIndex = videos.length;
                                    isEnding = true;
                                }
                            }
                            // Send stop response
                            if (isEnding || currentIndex >= videos.length) sendResponse(event, "stop");
                            else // Mark as ending to prepare for stop response
                            isEnding = true;
                        },
                        onError: (error)=>{
                            console.warn("TTS translation error:", error);
                            ttsFinished = true;
                            if (!videos[currentIndex]?.played.length) playNext();
                            if (currentIndex >= videos.length && isEnding) sendResponse(event, "stop");
                        }
                    }
                });
            });
            else // For non-translation mode, play the video immediately with original audio
            playNext();
            async function playNext() {
                if (currentIndex >= videos.length) {
                    if (!isEnding) {
                        isEnding = true;
                        if (ttsFinished) sendResponse(event, "stop");
                    }
                    return;
                }
                const video = videos[currentIndex];
                // Parse time fragment from video URL
                const timeFragment = parseTimeFragment(video.src);
                // Set up event to handle end time if specified
                if (timeFragment.end !== null) {
                    const checkTimeUpdate = ()=>{
                        if (video.currentTime >= timeFragment.end) {
                            video.pause();
                            video.removeEventListener("timeupdate", checkTimeUpdate);
                            video.onended({});
                        }
                    };
                    video.addEventListener("timeupdate", checkTimeUpdate);
                }
                video.onended = ()=>{
                    currentIndex++;
                    playNext();
                };
                // Set start time if specified, otherwise reset to beginning
                if (timeFragment.start !== null) video.currentTime = timeFragment.start;
                else if (video.currentTime !== 0) video.currentTime = 0;
                video.preservesPitch = true;
                // Use possibly adjusted video rate in translation mode
                video.playbackRate = translation && options.videoRate ? options.videoRate : options.rate;
                // Set muted state based on translation flag
                video.muted = translation;
                video.style.display = "block";
                if (currentIndex > 0) videos[currentIndex - 1].style.display = "none";
                // Always store the background video
                storeBackgroundVideo(player, video);
                // Play the video
                const response = video.play();
                if (response && typeof response.then === "function") response.catch((e)=>{
                    console.warn("Failed to play video:", e.message);
                });
            }
        } else if (hasAudioURLs) {
            let audioUrls = Array.from(document.getElementsByClassName(AUDIO));
            let currentIndex = 0;
            async function playNext() {
                if (currentIndex >= audioUrls.length) {
                    sendResponse(event, "stop");
                    return;
                }
                const audio = audioUrls[currentIndex];
                const source = audio.firstChild;
                // Parse time fragment from audio URL
                const timeFragment = parseTimeFragment(source.src);
                // Set up event to handle end time if specified
                if (timeFragment.end !== null) {
                    const checkTimeUpdate = ()=>{
                        if (audio.currentTime >= timeFragment.end) {
                            audio.pause();
                            audio.removeEventListener("timeupdate", checkTimeUpdate);
                            audio.onended({}) // Trigger the onended event manually
                            ;
                        }
                    };
                    audio.addEventListener("timeupdate", checkTimeUpdate);
                }
                const error = (error)=>{
                    console.warn("TTS failed to play ->", "" + error, source.src);
                    if (source.src.startsWith("blob:")) {
                        currentIndex++;
                        playNext();
                        return;
                    }
                    audio.pause();
                    if (window.LIA.fetchError) {
                        window.LIA.fetchError("audio", source.src.replace(window.location.origin, ""));
                        return;
                    }
                    currentIndex++;
                    playNext();
                };
                audio.onended = ()=>{
                    audio.currentTime = 0;
                    currentIndex++;
                    playNext();
                };
                // Set start time if specified
                if (timeFragment.start !== null) audio.currentTime = timeFragment.start;
                else if (audio.currentTime > 0) // Your existing logic for resetting audio
                audio.innerHTML = source.outerHTML;
                audio.preservesPitch = true;
                audio.playbackRate = options.rate;
                const response = audio.play();
                if (response !== undefined) response.catch((e)=>error(e.message));
                else error("resource couldn't be played");
            }
            sendResponse(event, "start");
            playNext();
        } else if (text !== "" && element[0] !== undefined) speak(text, voice, lang, options, event);
    }
}
function sendReply(event) {
    if (elmSend) elmSend(event);
}
function sendEnabledTTS(system) {
    sendReply({
        reply: true,
        track: [
            [
                SETTINGS,
                0
            ]
        ],
        service: "tts",
        message: {
            cmd: system,
            param: true
        }
    });
}
function inject(key) {
    if (typeof key === "string") {
        useBrowserTTS = useBrowserTTS === null ? false : useBrowserTTS;
        setTimeout(function() {
            const script = document.createElement("script");
            script.src = "https://code.responsivevoice.org/responsivevoice.js?key=" + key;
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
            script.onload = ()=>{
                window.responsiveVoice.init();
                sendEnabledTTS("responsiveVoiceTTS");
            };
        }, 250);
    }
}
function cancel() {
    try {
        const audioRecordings = document.getElementsByClassName(AUDIO);
        for(let i = 0; i < audioRecordings.length; i++){
            audioRecordings[i].pause();
            audioRecordings[i].currentTime = 0;
        }
    } catch (e) {
        console.warn("TTS failed to cancel audioRecordings", e.message);
    }
    try {
        const player = document.getElementById(VIDEO);
        const videos = Array.from(player?.children) || [];
        for(let i = 0; i < videos.length; i++)videos[i].pause();
    } catch (e) {
        console.warn("TTS failed to cancel videoRecordings", e.message);
    }
    try {
        (0, _easySpeechDefault.default).cancel();
    } catch (e) {}
    if (window.responsiveVoice) window.responsiveVoice.cancel();
}
function speak(text, voice, lang, options, event) {
    const customHandlers = event.handlers || {
        onStart: ()=>sendResponse(event, "start"),
        onStop: ()=>sendResponse(event, "stop"),
        onError: (e)=>{
            sendResponse(event, "error", e.toString());
            console.warn("TTS playback failed:", e.toString());
        }
    };
    if (useBrowserTTS) {
        const syncVoice = getVoice(lang, voice);
        // there was a voice
        if (syncVoice) easySpeak(text, syncVoice, options, customHandlers);
        else if (window.responsiveVoice) responsiveSpeak(text, voice, options, customHandlers);
        else {
            const defaultVoice = getDefaultVoice();
            if (defaultVoice) {
                // store as default for the next run
                browserVoices[toKey(lang, voice)] = defaultVoice;
                easySpeak(text, defaultVoice, options, customHandlers);
            } else customHandlers.onError("no TTS support");
        }
    } else if (window.responsiveVoice) {
        // fix for responsiveVoice not working with German
        if (voice.startsWith("German")) voice.replace("German", "Deutsch");
        responsiveSpeak(text, voice, options, customHandlers);
    }
}
function easySpeak(text, syncVoice, options, handlers) {
    (0, _easySpeechDefault.default).speak({
        text: text,
        voice: syncVoice,
        start: handlers.onStart,
        end: handlers.onStop,
        error: handlers.onError,
        pitch: options.pitch,
        rate: options.rate
    });
}
function responsiveSpeak(text, voice, options, handlers) {
    if (window.responsiveVoice) window.responsiveVoice.speak(text, voice, {
        onstart: handlers.onStart,
        onend: handlers.onStop,
        onerror: handlers.onError,
        pitch: options.pitch,
        rate: options.rate
    });
}
function sendResponse(event, cmd, param = "browser") {
    event.message.cmd = cmd;
    event.message.param = param;
    sendReply(event);
}
function getDefaultVoice() {
    const voices = (0, _easySpeechDefault.default).voices();
    if (!voices) return null;
    return voices[0];
}
function toKey(lang, voice) {
    return lang + " - " + voice;
}
function getVoice(lang, voice) {
    // fix for browserTTS not working with Deutsch
    if (voice.startsWith("Deutsch")) voice.replace("Deutsch", "German");
    const key = toKey(lang, voice);
    if (browserVoices[key]) return browserVoices[key];
    const voices = (0, _easySpeechDefault.default).voices();
    if (!voices) return null;
    let gender = detectGender(voice);
    let temp;
    let bestFit;
    for(let i = 0; i < voices.length; i++){
        temp = voices[i];
        if (temp.lang.startsWith(lang) && gender === detectGender(temp.name + temp.voiceURI)) {
            bestFit = temp;
            break;
        }
        if (temp.lang.startsWith(lang) && !bestFit) bestFit = temp;
    }
    if (bestFit) {
        browserVoices[key] = bestFit;
        return bestFit;
    }
    return null;
}
function detectGender(voice) {
    // Check explicit gender indicators first
    if (voice.match(/female/i)) return Gender.Female;
    if (voice.match(/male/i)) return Gender.Male;
    // iOS/Safari male voices
    const maleVoices = /\b(Albert|Daniel|Eddy|Fred|Grandpa|Jacques|Junior|Maged|Ralph|Reed|Rishi|Rocko|Thomas|Zarvox|Xander)\b/i;
    if (voice.match(maleVoices)) return Gender.Male;
    // iOS/Safari female voices - comprehensive list
    const femaleVoices = /\b(Alice|Alva|Amelie|Amira|Anna|Carmit|Damayanti|Daria|Ellen|Grandma|Ioana|Joana|Kanya|Karen|Kathy|Kyoko|Lana|Laura|Lekha|Lesya|Linh|Luciana|Mariska|Meijia|Melina|Milena|Moira|Monica|Montserrat|Nora|Paulina|Princess|Samantha|Sandy|Sara|Satu|Shelley|Tessa|Tina|Tingting|Yelda|Yuna|Zosia|Zuzana)\b/i;
    if (voice.match(femaleVoices)) return Gender.Female;
    // Additional generic gender detection for other voices
    if (voice.match(/\b(man|boy|guy|sir|mr\.?|he|him)\b/i)) return Gender.Male;
    if (voice.match(/\b(woman|girl|lady|ms\.?|mrs\.?|miss|she|her)\b/i)) return Gender.Female;
    // Neutral or non-human voices: Bahh, Bells, Flo, Sinji, Trinoids
    return Gender.Unknown;
}
function storeBackgroundVideo(player, video) {
    try {
        const background = video.cloneNode(true);
        background.addEventListener("loadedmetadata", ()=>{
            background.currentTime = background.duration;
        });
        background.id = "tts-video-preview";
        background.preload = "auto";
        background.autoplay = false;
        background.muted = true;
        background.onerror = null;
        background.onended = null;
        background.onplay = null;
        if (document.getElementById("tts-video-preview")) document.getElementById("tts-video-preview")?.replaceWith(background);
        else player.parentElement?.insertBefore(background, player.parentElement.firstChild);
    } catch (e) {
        console.warn("TTS failed to draw video frame ->", e.message);
    }
}
function parseTimeFragment(url) {
    const result = {
        start: null,
        end: null
    };
    try {
        // Extract time fragment if it exists
        const hashIndex = url.indexOf("#t=");
        if (hashIndex !== -1) {
            const timeValue = url.substring(hashIndex + 3);
            const timeParts = timeValue.split(",");
            if (timeParts[0]) result.start = parseFloat(timeParts[0]);
            if (timeParts[1]) result.end = parseFloat(timeParts[1]);
        }
    } catch (e) {
        console.warn("Failed to parse time fragment:", e);
    }
    return result;
}
/**
 * Estimates the duration of TTS output based on text length, language and speech rate
 * This is a rough approximation as actual TTS timing depends on many factors
 */ function estimateTTSDuration(text, lang, rate) {
    // Average speaking rates for different languages (words per minute)
    const baseRates = {
        en: 150,
        de: 125,
        fr: 165,
        es: 155,
        it: 160,
        ja: 125,
        zh: 130,
        ru: 120,
        default: 140
    };
    // Get base rate for language or use default
    const baseLang = lang.split("-")[0].toLowerCase();
    const baseWPM = baseRates[baseLang] || baseRates.default;
    // Adjust by TTS rate setting
    const adjustedWPM = baseWPM * rate;
    // Count words (simple approximation)
    const wordCount = text.split(/\s+/).filter((word)=>word.length > 0).length;
    // Add some padding (10%) for pauses and processing
    const durationSeconds = wordCount / adjustedWPM * 66;
    // Ensure minimum duration
    return Math.max(2, durationSeconds);
}
exports.default = Service;

},{"../log":"4dsMr","../types/responsiveVoice":"em0N9","easy-speech/dist/EasySpeech":"ekLjV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"em0N9":[function(require,module,exports) {
// taken from: https://responsivevoice.org/api/
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekLjV":[function(require,module,exports) {
/**
 * @module EasySpeech
 * @typicalname EasySpeech
 */ /**
 * Cross browser Speech Synthesis with easy API.
 * This project was created, because it's always a struggle to get the synthesis
 * part of `Web Speech API` running on most major browsers.
 *
 * Setup is very straight forward (see example).
 *
 * @example
 * import EasySpeech from 'easy-speech'
 *
 * const example = async () => {
 *   await EasySpeech.init() // required
 *   await EasySpeech.speak({ 'Hello, world' })
 * }
 *
 * @see https://wicg.github.io/speech-api/#tts-section
 * @see https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis
 * @type {Object}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>EasySpeech);
const EasySpeech = {};
/**
 * To support multiple environments (browser, node) we define scope, based
 * on what's available with window as priority, since Browsers are main target.
 * @private
 */ const scope = typeof globalThis === "undefined" ? window : globalThis;
/**
 * @private
 * @type {{
 *  status: String,
    initialized: Boolean,
    speechSynthesis: null|SpeechSynthesis,
    speechSynthesisUtterance: null|SpeechSynthesisUtterance,
    speechSynthesisVoice: null|SpeechSynthesisVoice,
    speechSynthesisEvent: null|SpeechSynthesisEvent,
    speechSynthesisErrorEvent: null|SpeechSynthesisErrorEvent,
    voices: null|Array<SpeechSynthesisVoice>,
    maxLengthExceeded: string,
    defaults: {
      pitch: Number,
      rate: Number,
      volume: Number,
      voice: null|SpeechSynthesisVoice
    },
    handlers: {}
 * }}
 */ const internal = {
    status: "created"
};
const patches = {};
/*******************************************************************************
 *
 * AVAILABLE WITHOUT INIT
 *
 ******************************************************************************/ /**
 * Enable module-internal debugging by passing your own callback function.
 * Debug will automatically pass through all updates to `status`
 *
 * @example
 * import EasySpeech from 'easy-speech'
 * import Log from '/path/to/my/Log'
 *
 * EasySpeech.debug(arg => Log.debug('EasySpeech:', arg))
 *
 * @param {Function} fn A function, which always receives one argument, that
 *  represents a current debug message
 */ EasySpeech.debug = (fn)=>{
    debug = typeof fn === "function" ? fn : ()=>{};
};
let debug = ()=>{};
/**
 * Detects all possible occurrences of the main Web Speech API components
 * in the global scope.
 *
 * The returning object will have the following structure (see example).
 *
 * @example
 * EasySpeech.detect()
 *
 * {
 *     speechSynthesis: SpeechSynthesis|undefined,
 *     speechSynthesisUtterance: SpeechSynthesisUtterance|undefined,
 *     speechSynthesisVoice: SpeechSynthesisVoice|undefined,
 *     speechSynthesisEvent: SpeechSynthesisEvent|undefined,
 *     speechSynthesisErrorEvent: SpeechSynthesisErrorEvent|undefined,
 *     onvoiceschanged: Boolean,
 *     onboundary: Boolean,
 *     onend: Boolean,
 *     onerror: Boolean,
 *     onmark: Boolean,
 *     onpause: Boolean,
 *     onresume: Boolean,
 *     onstart: Boolean
 * }
 *
 * @returns {object} An object containing all possible features and their status
 */ EasySpeech.detect = ()=>detectFeatures();
/** @private **/ const detectFeatures = ()=>{
    const features = {};
    [
        "speechSynthesis",
        "speechSynthesisUtterance",
        "speechSynthesisVoice",
        "speechSynthesisEvent",
        "speechSynthesisErrorEvent"
    ].forEach((feature)=>{
        features[feature] = detect(feature);
    });
    features.onvoiceschanged = hasProperty(features.speechSynthesis, "onvoiceschanged");
    const hasUtterance = hasProperty(features.speechSynthesisUtterance, "prototype");
    utteranceEvents.forEach((event)=>{
        const name = `on${event}`;
        features[name] = hasUtterance && hasProperty(features.speechSynthesisUtterance.prototype, name);
    });
    // not published to the outside
    patches.isAndroid = isAndroid();
    patches.isFirefox = isFirefox() || isKaiOS();
    patches.isSafari = isSafari();
    debug(`is android: ${!!patches.isAndroid}`);
    debug(`is firefox: ${!!patches.isFirefox}`);
    debug(`is safari: ${!!patches.isSafari}`);
    return features;
};
/** @private **/ const hasProperty = (target = {}, prop)=>Object.hasOwnProperty.call(target, prop) || prop in target || !!target[prop];
/** @private **/ const getUA = ()=>(scope.navigator || {}).userAgent || "";
/** @private **/ const isAndroid = ()=>/android/i.test(getUA());
/** @private **/ const isKaiOS = ()=>/kaios/i.test(getUA());
/** @private **/ const isFirefox = ()=>{
    // InstallTrigger will soon be deprecated
    if (typeof scope.InstallTrigger !== "undefined") return true;
    return /firefox/i.test(getUA());
};
/** @private **/ const isSafari = ()=>typeof scope.GestureEvent !== "undefined";
/**
 * Common prefixes for browsers that tend to implement their custom names for
 * certain parts of their API.
 * @private
 **/ const prefixes = [
    "webKit",
    "moz",
    "ms",
    "o"
];
/**
 * Make the first character of a String uppercase
 * @private
 **/ const capital = (s)=>`${s.charAt(0).toUpperCase()}${s.slice(1)}`;
/**
 * Find a feature in global scope by checking for various combinations and
 * variations of the base-name
 * @param {String} baseName name of the component to look for, must begin with
 *   lowercase char
 * @return {Object|undefined} The component from global scope, if found
 * @private
 **/ const detect = (baseName)=>{
    const capitalBaseName = capital(baseName);
    const baseNameWithPrefixes = prefixes.map((p)=>`${p}${capitalBaseName}`);
    const found = [
        baseName,
        capitalBaseName
    ].concat(baseNameWithPrefixes).find(inGlobalScope);
    return scope[found];
};
/**
 * Returns, if a given name exists in global scope
 * @private
 * @param name
 * @return {boolean}
 */ const inGlobalScope = (name)=>scope[name];
/**
 * Returns a shallow copy of the current internal status. Depending of the
 * current state this might return an object with only a single field `status`
 * or a complete Object, including detected features, `defaults`, `handlers`
 * and supported `voices`.
 *
 * @example
 * import EasySpeech from 'easy-speech'
 *
 * // uninitialized
 * EasySpeech.status() // { status: 'created' }
 *
 * // after EasySpeech.init
 * EasySpeech.status()
 *
 * {
 *   status: 'init: complete',
 *   initialized: true,
 *   speechSynthesis: speechSynthesis,
 *   speechSynthesisUtterance: SpeechSynthesisUtterance,
 *   speechSynthesisVoice: SpeechSynthesisVoice,
 *   speechSynthesisEvent: SpeechSynthesisEvent,
 *   speechSynthesisErrorEvent: SpeechSynthesisErrorEvent,
 *   voices: [...],
 *   defaults: {
 *     pitch: 1,
 *     rate: 1,
 *     volume: 1,
 *     voice: null
 *   },
 *   handlers: {}
 * }
 *
 * @return {Object} the internal status
 */ EasySpeech.status = ()=>({
        ...internal
    });
/**
 * Returns a filtered subset of available voices by given
 * parameters. Multiple parameters can be used.
 * @param name {string=} a string that is expected to occur in the voices name; does not need to be the full name
 * @param voiceURI {string=} a string that is expected to occur in the voices voiceURI; does not need to be the full URI
 * @param language {string=} a language code to filter by .lang; short and long-form are accepted
 * @param localService {boolean=} use true/false to include/exclude local/remote voices
 * @return {SpeechSynthesisVoice[]} a list of voices, matching the given rules
 */ EasySpeech.filterVoices = ({ name , language , localService , voiceURI  })=>{
    const voices = internal.voices || [];
    const hasName = typeof name !== "undefined";
    const hasVoiceURI = typeof voiceURI !== "undefined";
    const hasLocalService = typeof localService !== "undefined";
    const hasLang = typeof language !== "undefined";
    const langCode = hasLang && language.split(/[-_]+/g)[0].toLocaleLowerCase();
    return voices.filter((v)=>{
        if (hasName && v.name.includes(name) || hasVoiceURI && v.voiceURI.includes(voiceURI) || hasLocalService && v.localService === localService) return true;
        if (hasLang) {
            const compareLang = v.lang && v.lang.toLocaleLowerCase();
            return compareLang && (compareLang === langCode || compareLang.indexOf(`${langCode}-`) > -1 || compareLang.indexOf(`${langCode}_`) > -1);
        }
        return false;
    });
};
/**
 * Updates the internal status
 * @private
 * @param {String} s the current status to set
 */ const status = (s)=>{
    debug(s);
    internal.status = s;
};
/**
 * This is the function you need to run, before being able to speak.
 * It includes:
 * - feature detection
 * - feature assignment (into internal state)
 * - voices loading
 * - state update
 * - inform caller about success
 *
 * It will load voices by a variety of strategies:
 *
 * - detect and that SpeechSynthesis is basically supported, if not -> fail
 * - load voices directly
 * - if not loaded but `onvoiceschanged` is available: use `onvoiceschanged`
 * - if `onvoiceschanged` is not available: fallback to timeout
 * - if `onvoiceschanged` is fired but no voices available: fallback to timeout
 * - timeout reloads voices in a given `interval` until a `maxTimeout` is reached
 * - if voices are loaded until then -> complete
 * - if no voices found -> fail
 *
 * Note: if once initialized you can't re-init (will skip and resolve to
 * `false`) unless you run `EasySpeech.reset()`.
 *
 * @param maxTimeout {number}[5000] the maximum timeout to wait for voices in ms
 * @param interval {number}[250] the interval in ms to check for voices
 * @param quiet {boolean=} prevent rejection on errors, e.g. if no voices
 * @param maxLengthExceeded {string=} defines what to do, if max text length (4096 bytes) is exceeded:
 * - 'error' - throw an Error
 * - 'none' - do nothing; note that some voices may not speak the text at all without any error or warning
 * - 'warn' - default, raises a warning
 * @return {Promise<Boolean>}
 * @fulfil {Boolean} true, if initialized, false, if skipped (because already
 *   initialized)
 * @reject {Error} - The error `message` property will always begin with
 *   `EasySpeech: ` and contain one of the following:
 *
 *   - `browser misses features` - The browser will not be able to use speech
 *      synthesis at all as it misses crucial features
 *   - `browser has no voices (timeout)` - No voice could be loaded with neither
 *      of the given strategies; chances are high the browser does not have
 *      any voices embedded (example: Chromium on *buntu os')
 */ EasySpeech.init = function({ maxTimeout =5000 , interval =250 , quiet , maxLengthExceeded  } = {}) {
    return new Promise((resolve, reject)=>{
        if (internal.initialized) return resolve(false);
        EasySpeech.reset();
        status("init: start");
        // there may be the case, that the browser needs to load using a timer
        // so we declare it at the top to make sure the interval is always cleared
        // when we exit the Promise via fail / complete
        let timer;
        let voicesChangedListener;
        let completeCalled = false;
        internal.maxLengthExceeded = maxLengthExceeded || "warn";
        const fail = (errorMessage)=>{
            status(`init: failed (${errorMessage})`);
            clearInterval(timer);
            internal.initialized = false;
            // we have the option to fail quiet here
            return quiet ? resolve(false) : reject(new Error(`EasySpeech: ${errorMessage}`));
        };
        const complete = ()=>{
            // avoid race-conditions between listeners and timeout
            if (completeCalled) return;
            status("init: complete");
            // set flags immediately
            completeCalled = true;
            internal.initialized = true;
            // cleanup events and timer
            clearInterval(timer);
            speechSynthesis.onvoiceschanged = null;
            if (voicesChangedListener) speechSynthesis.removeEventListener("voiceschanged", voicesChangedListener);
            // all done
            return resolve(true);
        };
        // before initializing we force-detect all required browser features
        const features = detectFeatures();
        const hasAllFeatures = !!features.speechSynthesis && !!features.speechSynthesisUtterance;
        if (!hasAllFeatures) return fail("browser misses features");
        // assign all detected features to our internal definitions
        Object.keys(features).forEach((feature)=>{
            internal[feature] = features[feature];
        });
        // start initializing
        const { speechSynthesis  } = internal;
        const voicesLoaded = ()=>{
            const voices = speechSynthesis.getVoices() || [];
            if (voices.length > 0) {
                internal.voices = voices;
                status(`voices loaded: ${voices.length}`);
                // if we find a default voice, set it as default
                internal.defaultVoice = voices.find((v)=>v.default);
                // otherwise let's stick to the first one we can find by locale
                if (!internal.defaultVoice) {
                    const language = (scope.navigator || {}).language || "";
                    const filtered = EasySpeech.filterVoices({
                        language
                    });
                    if (filtered.length > 0) internal.defaultVoice = filtered[0];
                }
                // otherwise let's use the first element in the array
                if (!internal.defaultVoice) internal.defaultVoice = voices[0];
                return true;
            }
            return false;
        };
        status("init: voices");
        // best case: detect if voices can be loaded directly
        if (voicesLoaded()) return complete();
        // last possible fallback method: run a timer until max. timeout and reload
        const loadViaTimeout = ()=>{
            status("init: voices (timer)");
            let timeout = 0;
            timer = setInterval(()=>{
                if (voicesLoaded()) return complete();
                if (timeout > maxTimeout) return fail("browser has no voices (timeout)");
                timeout += interval;
            }, interval);
        };
        // detect if voices can be loaded after onveoiceschanged,
        // but only if the browser supports this event
        if (features.onvoiceschanged) {
            status("init: voices (onvoiceschanged)");
            speechSynthesis.onvoiceschanged = ()=>{
                if (voicesLoaded()) return complete();
                // xxx: some browsers (like chrome on android still have not all
                // voices loaded at this point, whichs is why we need to enter
                // the timeout-based method here.
                return loadViaTimeout();
            };
            // xxx: there is an edge-case where browser provide onvoiceschanged,
            // but they never load the voices, so init would never complete
            // in such case we need to fail after maxTimeout
            setTimeout(()=>{
                if (voicesLoaded()) return complete();
                return fail("browser has no voices (timeout)");
            }, maxTimeout);
        } else {
            // this is a very problematic case, since we don't really know, whether
            // this event will fire at all, so we need to setup both a listener AND
            // run the timeout and make sure on of them "wins"
            // affected browsers may be: MacOS Safari
            if (hasProperty(speechSynthesis, "addEventListener")) {
                status("init: voices (addEventListener)");
                voicesChangedListener = ()=>{
                    if (voicesLoaded()) return complete();
                };
                speechSynthesis.addEventListener("voiceschanged", voicesChangedListener);
            }
            // for all browser not supporting onveoiceschanged we start a timer
            // until we reach a certain timeout and try to get the voices
            loadViaTimeout();
        }
    });
};
/**
 * Placed as first line in functions that require `EasySpeech.init` before they
 * can run.
 * @param {boolean=} force set to true to force-skip check
 * @private
 */ const ensureInit = ({ force  } = {})=>{
    if (!force && !internal.initialized) throw new Error("EasySpeech: not initialized. Run EasySpeech.init() first");
};
/*******************************************************************************
 *
 * AVAILABLE ONLY AFTER INIT
 *
 ******************************************************************************/ /**
 * Returns all available voices.
 *
 * @condition `EasySpeech.init` must have been called and resolved to `true`
 * @return {Array<SpeechSynthesisVoice>}
 */ EasySpeech.voices = ()=>{
    ensureInit();
    return internal.voices;
};
/**
 * Attaches global/default handlers to every utterance instance. The handlers
 * will run in parallel to any additional handlers, attached when calling
 * `EasySpeech.speak`
 *
 * @condition `EasySpeech.init` must have been called and resolved to `true`
 *
 * @param {Object} handlers
 * @param {function=} handlers.boundary - optional, event handler
 * @param {function=} handlers.end - optional, event handler
 * @param {function=} handlers.error - optional, event handler
 * @param {function=} handlers.mark - optional, event handler
 * @param {function=} handlers.pause - optional, event handler
 * @param {function=} handlers.resume - optional, event handler
 * @param {function=} handlers.start - optional, event handler
 *
 * @return {Object} a shallow copy of the Object, containing all global handlers
 */ EasySpeech.on = (handlers)=>{
    ensureInit();
    utteranceEvents.forEach((name)=>{
        const handler = handlers[name];
        if (validate.handler(handler)) internal.handlers[name] = handler;
    });
    return {
        ...internal.handlers
    };
};
/**
 * We use these keys to search for these events in handler objects and defaults
 * @private
 */ const utteranceEvents = [
    "boundary",
    "end",
    "error",
    "mark",
    "pause",
    "resume",
    "start"
];
/**
 * Internal validation of passed parameters
 * @private
 */ const validate = {
    isNumber: (n)=>typeof n === "number" && !Number.isNaN(n),
    pitch: (p)=>validate.isNumber(p) && p >= 0 && p <= 2,
    volume: (v)=>validate.isNumber(v) && v >= 0 && v <= 1,
    rate: (r)=>validate.isNumber(r) && r >= 0.1 && r <= 10,
    text: (t)=>typeof t === "string",
    handler: (h)=>typeof h === "function",
    // we prefer duck typing here, mostly because there are cases where
    // SpeechSynthesisVoice is not defined on global scope but is supported
    // when using getVoices().
    voice: (v)=>v && v.lang && v.name && v.voiceURI
};
/**
 * Sets defaults for utterances. Invalid values will be ignored without error
 * or warning.
 *
 * @see https://wicg.github.io/speech-api/#utterance-attributes
 * @param {object=} options - Optional object containing values to set values
 * @param {object=} options.voice - Optional `SpeechSynthesisVoice` instance or
 *  `SpeechSynthesisVoice`-like Object
 * @param {number=} options.pitch - Optional pitch value >= 0 and <= 2
 * @param {number=} options.rate - Optional rate value >= 0.1 and <= 10
 * @param {number=} options.volume - Optional volume value >= 0 and <= 1
 *
 * @return {object} a shallow copy of the current defaults
 */ EasySpeech.defaults = (options)=>{
    ensureInit();
    if (options) {
        internal.defaults = internal.defaults || {};
        [
            "voice",
            "pitch",
            "rate",
            "volume"
        ].forEach((name)=>{
            const value = options[name];
            const isValid = validate[name];
            if (isValid(value)) internal.defaults[name] = value;
        });
    }
    return {
        ...internal.defaults
    };
};
/**
 * Determines the current voice and makes sure, there is always a voice returned
 * @private
 * @param voice
 * @return {*|SpeechSynthesisVoice|{}}
 */ const getCurrentVoice = (voice)=>voice || internal.defaults?.voice || internal.defaultVoice || internal.voices?.[0];
/**
 * Creates a new `SpeechSynthesisUtterance` instance
 * @private
 * @param text
 */ const createUtterance = (text)=>{
    const UtteranceClass = internal.speechSynthesisUtterance;
    return new UtteranceClass(text);
};
/**
 * Speaks a voice by given parameters, constructs utterance by best possible
 * combinations of parameters and defaults.
 *
 * If the given utterance parameters are missing or invalid, defaults will be
 * used as fallback.
 *
 * @example
 * const voice = EasySpeech.voices()[10] // get a voice you like
 *
 * EasySpeech.speak({
 *   text: 'Hello, world',
 *   voice: voice,
 *   pitch: 1.2,  // a little bit higher
 *   rate: 1.7, // a little bit faster
 *   boundary: event => console.debug('word boundary reached', event.charIndex),
 *   error: e => notify(e)
 * })
 *
 * @param {object} options - required options
 * @param {string} text - required text to speak
 * @param {object=} voice - optional `SpeechSynthesisVoice` instance or
 *   structural similar object (if `SpeechSynthesisUtterance` is not supported)
 * @param {number=} options.pitch - Optional pitch value >= 0 and <= 2
 * @param {number=} options.rate - Optional rate value >= 0.1 and <= 10
 * @param {number=} options.volume - Optional volume value >= 0 and <= 1
 * @param {boolean=} options.force - Optional set to true to force speaking, no matter the internal state
 * @param {boolean=} options.infiniteResume - Optional, force or prevent internal resumeInfinity pattern
 * @param {boolean=} options.noStop - Optional, if true will not stop current voices
 * @param {object=} handlers - optional additional local handlers, can be
 *   directly added as top-level properties of the options
 * @param {function=} handlers.boundary - optional, event handler
 * @param {function=} handlers.end - optional, event handler
 * @param {function=} handlers.error - optional, event handler
 * @param {function=} handlers.mark - optional, event handler
 * @param {function=} handlers.pause - optional, event handler
 * @param {function=} handlers.resume - optional, event handler
 * @param {function=} handlers.start - optional, event handler
 *
 * @return {Promise<SpeechSynthesisEvent|SpeechSynthesisErrorEvent>}
 * @fulfill {SpeechSynthesisEvent} Resolves to the `end` event
 * @reject {SpeechSynthesisEvent} rejects using the `error` event
 */ EasySpeech.speak = ({ text , voice , pitch , rate , volume , force , infiniteResume , noStop , ...handlers })=>{
    ensureInit({
        force
    });
    if (!validate.text(text)) throw new Error("EasySpeech: at least some valid text is required to speak");
    if (new TextEncoder().encode(text).length > 4096) {
        const message = "EasySpeech: text exceeds max length of 4096 bytes, which will not work with some voices.";
        switch(internal.maxLengthExceeded){
            case "none":
                break;
            case "error":
                throw new Error(message);
            case "warn":
            default:
                console.warn(message);
        }
    }
    const getValue = (options)=>{
        const [name, value] = Object.entries(options)[0];
        if (validate[name](value)) return value;
        return internal.defaults?.[name];
    };
    return new Promise((resolve, reject)=>{
        status("init speak");
        const utterance = createUtterance(text);
        const currentVoice = getCurrentVoice(voice);
        // XXX: if we force-speak, we may not get a current voice!
        // This may occur when the browser won't load voices but
        // provides SpeechSynth and SpeechSynthUtterance.
        // We then might at least try to speak something with defaults
        if (currentVoice) {
            utterance.voice = currentVoice;
            utterance.lang = currentVoice.lang;
            utterance.voiceURI = currentVoice.voiceURI;
        }
        utterance.text = text;
        utterance.pitch = getValue({
            pitch
        });
        utterance.rate = getValue({
            rate
        });
        utterance.volume = getValue({
            volume
        });
        const isMsNatural = utterance.voice && utterance.voice.name && utterance.voice.name.toLocaleLowerCase().includes("(natural)");
        debugUtterance(utterance, {
            isMsNatural
        });
        utteranceEvents.forEach((name)=>{
            const fn = handlers[name];
            if (validate.handler(fn)) utterance.addEventListener(name, fn);
            if (internal.handlers?.[name]) utterance.addEventListener(name, internal.handlers[name]);
        });
        // always attached are start, end and error listeners
        // XXX: chrome won't play longer tts texts in one piece and stops after a few
        // words. We need to add an intervall here in order prevent this. See:
        // https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts
        //
        // XXX: this apparently works only on chrome desktop, while it breaks chrome
        // mobile (android), so we need to detect chrome desktop
        //
        // XXX: resumeInfinity breaks on firefox macOs so we need to avoid it there
        // as well. Since we don't need it in FF anyway, we can safely skip there
        //
        // XXX: resumeInfinity is also incompatible with older safari ios versions
        // so we skip it on safari, too.
        //
        // XXX: we can force-enable or force-disable infiniteResume via flag now and
        // use the deterministic approach if it's not a boolean value
        utterance.addEventListener("start", ()=>{
            patches.paused = false;
            patches.speaking = true;
            const defaultResumeInfinity = !isMsNatural && !patches.isFirefox && !patches.isSafari && patches.isAndroid !== true;
            const useResumeInfinity = typeof infiniteResume === "boolean" ? infiniteResume : defaultResumeInfinity;
            if (useResumeInfinity) resumeInfinity(utterance);
        });
        utterance.addEventListener("end", (endEvent)=>{
            status("speak complete");
            patches.paused = false;
            patches.speaking = false;
            clearTimeout(timeoutResumeInfinity);
            resolve(endEvent);
        });
        utterance.addEventListener("error", (errorEvent = {})=>{
            status(`speak failed: ${errorEvent.message}`);
            patches.paused = false;
            patches.speaking = false;
            clearTimeout(timeoutResumeInfinity);
            reject(errorEvent);
        });
        // make sure we have no mem-leak
        clearTimeout(timeoutResumeInfinity);
        // do not cancel currently playing voice, if noStop option is true explicitly.
        if (!(noStop === true)) internal.speechSynthesis.cancel();
        setTimeout(()=>internal.speechSynthesis.speak(utterance), 10);
    });
};
/** @private **/ const debugUtterance = ({ voice , pitch , rate , volume  }, { isMsNatural =false  } = {})=>{
    debug(`utterance: voice=${voice?.name} volume=${volume} rate=${rate} pitch=${pitch} isMsNatural=${isMsNatural}`);
};
/**
 * Timer variable to clear interval
 * @private
 */ let timeoutResumeInfinity;
/**
 * Fixes long texts in some browsers
 * @private
 * @param target
 */ function resumeInfinity(target) {
    // prevent memory-leak in case utterance is deleted, while this is ongoing
    if (!target && timeoutResumeInfinity) {
        debug("force-clear timeout");
        return scope.clearTimeout(timeoutResumeInfinity);
    }
    // only execute on speaking utterances, otherwise paused
    // utterances will get resumed, thus breaking user experience
    // include internal patching, since some systems have problems with
    // pause/resume and updateing the internal state on speechSynthesis
    const { paused , speaking  } = internal.speechSynthesis;
    const isSpeaking = speaking || patches.speaking;
    const isPaused = paused || patches.paused;
    debug(`resumeInfinity isSpeaking=${isSpeaking} isPaused=${isPaused}`);
    if (isSpeaking && !isPaused) {
        internal.speechSynthesis.pause();
        internal.speechSynthesis.resume();
    }
    timeoutResumeInfinity = scope.setTimeout(function() {
        resumeInfinity(target);
    }, 5000);
}
/**
 * Cancels the current speaking, if any running
 */ EasySpeech.cancel = ()=>{
    ensureInit();
    status("cancelling");
    internal.speechSynthesis.cancel();
    patches.paused = false;
    patches.speaking = false;
};
/**
 * Resumes to speak, if any paused
 */ EasySpeech.resume = ()=>{
    ensureInit();
    status("resuming");
    patches.paused = false;
    patches.speaking = true;
    internal.speechSynthesis.resume();
};
/**
 * Pauses the current speaking, if any running
 */ EasySpeech.pause = ()=>{
    ensureInit();
    status("pausing");
    // exec pause on Android causes speech to end but not to fire end-event
    // se we simply do it manually instead of pausing
    if (patches.isAndroid) {
        debug("patch pause on Android with cancel");
        return internal.speechSynthesis.cancel();
    }
    internal.speechSynthesis.pause();
    // in some cases, pause does not update the internal state,
    // so we need to update it manually using an own state
    patches.paused = true;
    patches.speaking = false;
};
/**
 * Resets the internal state to a default-uninitialized state
 */ EasySpeech.reset = ()=>{
    Object.assign(internal, {
        status: "reset",
        initialized: false,
        speechSynthesis: null,
        speechSynthesisUtterance: null,
        speechSynthesisVoice: null,
        speechSynthesisEvent: null,
        speechSynthesisErrorEvent: null,
        voices: null,
        defaultVoice: null,
        defaults: {
            pitch: 1,
            rate: 1,
            volume: 1,
            voice: null
        },
        handlers: {}
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljmaF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JS", ()=>JS);
parcelHelpers.export(exports, "LiaEvents", ()=>LiaEvents);
parcelHelpers.export(exports, "liaExec", ()=>liaExec);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
let JS;
(function(JS) {
    JS["exec"] = "exec";
    JS["eval"] = "eval";
})(JS || (JS = {}));
class LiaError extends Error {
    constructor(message, files, ...params){
        super(...params);
        if (Error.captureStackTrace) Error.captureStackTrace(this, LiaError);
        this.message = message;
        this.details = [];
        for(let i = 0; i < files; i++)this.details.push([]);
    }
    add_detail(fileId, msg, type, line, column) {
        this.details[fileId].push({
            row: line,
            column: column,
            text: msg,
            type: type
        });
    }
    get_detail(msg, type, line, column = 0) {
        return {
            row: line,
            column: column,
            text: msg,
            type: type
        };
    }
    // sometimes you need to adjust the compile messages to fit into the
    // editor ... use this function to adapt the row parameters ...
    // file_id with 0 will apply the correction value to all files
    correct_lines(fileId, by) {
        if (fileId == null) for(let i = 0; i < this.details.length; i++)this.correct_lines(i, by);
        else this.details[fileId].map((e)=>{
            e.row = e.row + by;
        });
    }
}
const worker = new Worker(require("1f2822e68b3db8af"));
class LiaEvents {
    constructor(){
        this.event = {};
        this.input = {};
    }
    register(name, fn) {
        this.event[name] = fn;
    }
    register_input(track, name, fn) {
        const id = JSON.stringify(track);
        if (this.input[id] === undefined) this.input[id] = {};
        this.input[id][name] = fn;
    }
    dispatch_input(event) {
        const id = JSON.stringify(event.track);
        try {
            if (this.input[id]) this.input[id][event.message.cmd](event.message.param);
        } catch (e) {
            (0, _logDefault.default).error("unable to dispatch message", event.message);
        }
    }
    dispatch(name, data) {
        if (this.event.hasOwnProperty(name)) this.event[name](data);
    }
    remove(name) {
        delete this.event[name];
    }
}
var eventHandler = new LiaEvents();
// This var is used to store the ID of a setTimeout, to prevent it from being
// called multiple times.
var delayID = null;
// This is a backup for all JavaScript code, to be evaluated. All scripts are
// delayed until all JavaScript resources have been loaded.
var lia_queue = [];
var onload = false;
var elmSend;
const Service = {
    PORT: "script",
    init: function(elmSend_) {
        elmSend = elmSend_;
        worker.onmessage = (event)=>{
            sendReply(event.data);
        };
    },
    /** This is a little helper, which allows to execute some code snippets,
   * actually from the `@onload` macro.
   *
   * @param code - a string with valid JavaScript
   * @param delay - delay in milliseconds
   */ exec: function(code, delay = 0) {
        if (code) {
            onload = true;
            code = `window.LIA.eventSemaphore++
          try {
            ${code}
          } catch (e) {
            console.warn('failed to execute onload =>', e.message)
          }
          window.LIA.eventSemaphore--
          onload = false`;
            liaExec({
                reply: false,
                track: [],
                service: this.PORT,
                message: {
                    cmd: "exec",
                    param: {
                        code,
                        delay
                    }
                }
            });
        }
    },
    handle: function(event) {
        switch(event.message.cmd){
            case "eval":
                liaEval(event);
                break;
            case "exec":
                liaExec(event);
                break;
            case "input":
                eventHandler.dispatch_input(event);
                break;
            case "stop":
                eventHandler.dispatch_input(event);
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    }
};
/**
 * This helper function can be used in conjunction with an `eval` function, to
 * extract the faulty line number, if `eval` fails, depending on the used
 * browser.
 *
 * @param error - the entire error
 * @returns - null or the correct line number
 */ function getLineNumber(error) {
    if (error.stack) {
        // firefox
        const firefoxRegex = /<anonymous>:(\d+):\d+/;
        if (error.stack.match(firefoxRegex)) {
            const res = error.stack.match(firefoxRegex);
            return res ? parseInt(res[1], 10) : null;
        }
        // chrome
        const chromeRegex = /<anonymous>.+:(\d+):\d+/;
        if (error.stack && error.stack.match(chromeRegex)) {
            const res = error.stack.match(chromeRegex);
            return res ? parseInt(res[1], 10) : null;
        }
    }
    return null;
}
function liaEval(event) {
    liaEvalCode(event.message.param, {
        lia: (result, details = [], ok = true)=>{
            event.message.cmd = "eval";
            event.message.param = {
                result: result,
                details: details,
                ok: ok
            };
            sendReply(event);
        },
        log: (topic, sep, ...args)=>{
            event.message.cmd = "log";
            event.message.param = [
                topic,
                list_to_string(sep, args)
            ];
            sendReply(event);
        },
        handle: (name, fn)=>{
            eventHandler.register_input(event.track, name, fn);
        },
        register: (name, fn)=>{
            eventHandler.register(name, fn);
        },
        dispatch: (name, data)=>{
            eventHandler.dispatch(name, data);
        }
    });
}
function sendReply(event) {
    if (elmSend) elmSend(event);
}
function liaEvalCode(code, send) {
    if (window.LIA.eventSemaphore > 0) {
        lia_queue.push({
            type: JS.eval,
            code: code,
            send: send
        });
        if (lia_queue.length === 1) delayExecution();
        return;
    }
    try {
        const console = {
            debug: (...args)=>{
                return send.log("debug", "\n", args);
            },
            log: (...args)=>{
                return send.log("info", "\n", args);
            },
            warn: (...args)=>{
                return send.log("warn", "\n", args);
            },
            error: (...args)=>{
                return send.log("error", "\n", args);
            },
            stream: (...args)=>{
                return send.log("stream", "", args);
            },
            html: (...args)=>{
                return send.log("html", "\n", args);
            },
            clear: ()=>send.lia("LIA: clear")
        };
        send.lia(String(eval(code + "\n"))) //, send, console)))
        ;
    } catch (e) {
        if (e instanceof LiaError) send.lia(e.message, e.details, false);
        else send.lia(e.message, [], false);
    }
}
function liaExec(event) {
    if (window.LIA.eventSemaphore > 0) {
        lia_queue.push({
            type: JS.exec,
            event: event
        });
        if (lia_queue.length === 1) delayExecution();
        return;
    }
    liaExecCode(event);
}
function liaExecCode(event) {
    if (event.message.param.worker) {
        worker.postMessage(event);
        return;
    }
    setTimeout(()=>{
        const send = {
            lia: execute_response(event, "exec"),
            output: execute_response(event, "async"),
            wait: ()=>{
                execute_response(event)("LIA: wait");
            },
            stop: ()=>{
                execute_response(event)("LIA: stop");
            },
            clear: ()=>{
                execute_response(event)("LIA: clear");
            },
            html: (msg)=>{
                execute_response(event)("HTML: " + msg);
            },
            liascript: (msg)=>{
                execute_response(event)("LIASCRIPT: " + msg);
            }
        };
        try {
            const result = eval(event.message.param.code);
            send.lia(result === undefined ? "LIA: stop" : result);
        } catch (e) {
            (0, _logDefault.default).error("exec => ", e.message);
            send.lia(e.message, false, []);
        }
    }, event.message.param.delay);
}
function execute_response(event, cmd) {
    return (msg, ok = true, details = [])=>{
        if (typeof msg !== "string") msg = JSON.stringify(msg);
        if (cmd) event.message.cmd = cmd;
        event.message.param = {
            ok: ok,
            result: msg,
            details: details
        };
        sendReply(event);
    };
}
function delayExecution() {
    if (window.LIA.eventSemaphore > 0 && !delayID) {
        // the timer should be started only once, that is why, the id of it is
        // stored in a global variable
        delayID = setTimeout(function() {
            delayID = null;
            delayExecution();
        }, 250);
        console.warn(window.LIA.eventSemaphore, delayID);
    } else if (onload && window.LIA.eventSemaphore === 0) {
        const onloadEvent = lia_queue.shift();
        if (onloadEvent?.type === JS.exec) liaExecCode(onloadEvent.event);
        onload = false;
        setTimeout(delayExecution, 50);
    } else if (!delayID) {
        let event;
        while(event = lia_queue.shift())switch(event.type){
            case JS.eval:
                liaEvalCode(event.code, event.send);
                break;
            case JS.exec:
                liaExecCode(event.event);
                break;
            default:
                (0, _logDefault.default).warn("lia_queue => unknown event => ", JSON.stringify(event));
        }
    }
}
function list_to_string(sep, list) {
    let str = "";
    for(let i = 0; i < list[0].length; i++){
        str += typeof list[0][i] === "string" ? list[0][i] : JSON.stringify(list[0][i]);
        str += " ";
    }
    return str.slice(0, -1) + sep;
}
exports.default = Service;

},{"../log":"4dsMr","1f2822e68b3db8af":"9HcEz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9HcEz":[function(require,module,exports) {
let workerURL = require("dcaaa33fc1046f6a");
let bundleURL = require("93068df5505c9aa1");
let url = bundleURL.getBundleURL("kuqFz") + "Worker.ddf989de.js" + "?" + Date.now();
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"dcaaa33fc1046f6a":"cn2gM","93068df5505c9aa1":"lgJ39"}],"cn2gM":[function(require,module,exports) {
"use strict";
module.exports = function(workerUrl, origin, isESM) {
    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,
    // use the worker bundle's own url.
    return workerUrl;
    else {
        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.
        var source = isESM ? "import " + JSON.stringify(workerUrl) + ";" : "importScripts(" + JSON.stringify(workerUrl) + ");";
        return URL.createObjectURL(new Blob([
            source
        ], {
            type: "application/javascript"
        }));
    }
};

},{}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"2RCSc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _liaD = require("../types/lia.d");
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var elmSend;
var db = null;
var Files = null;
var uri = "";
var JSZip = null;
function getFileMimeType(fileName) {
    const extension = (fileName.split(".").pop() || "").toLowerCase();
    const mimeTypes = {
        // Text files
        txt: "text/plain",
        html: "text/html",
        htm: "text/html",
        css: "text/css",
        js: "application/javascript",
        json: "application/json",
        xml: "application/xml",
        csv: "text/csv",
        // Image files
        jpg: "image/jpeg",
        jpeg: "image/jpeg",
        png: "image/png",
        gif: "image/gif",
        bmp: "image/bmp",
        webp: "image/webp",
        svg: "image/svg+xml",
        ico: "image/vnd.microsoft.icon",
        // Audio files
        mp3: "audio/mpeg",
        wav: "audio/wav",
        ogg: "audio/ogg",
        flac: "audio/flac",
        aac: "audio/aac",
        m4a: "audio/x-m4a",
        // Video files
        mp4: "video/mp4",
        m4v: "video/x-m4v",
        webm: "video/webm",
        avi: "video/x-msvideo",
        mov: "video/quicktime",
        wmv: "video/x-ms-wmv",
        flv: "video/x-flv",
        mkv: "video/x-matroska",
        // Font files
        ttf: "font/ttf",
        otf: "font/otf",
        woff: "font/woff",
        woff2: "font/woff2",
        // Document files
        pdf: "application/pdf",
        doc: "application/msword",
        docx: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        ppt: "application/vnd.ms-powerpoint",
        pptx: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        xls: "application/vnd.ms-excel",
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        // Archive files
        zip: "application/zip",
        rar: "application/vnd.rar",
        "7z": "application/x-7z-compressed",
        tar: "application/x-tar",
        gz: "application/gzip",
        // Binary files
        exe: "application/vnd.microsoft.portable-executable",
        bin: "application/octet-stream",
        dll: "application/octet-stream",
        // Miscellaneous
        md: "text/markdown",
        rtf: "application/rtf",
        eot: "application/vnd.ms-fontobject",
        jsonld: "application/ld+json",
        torrent: "application/x-bittorrent"
    };
    return mimeTypes[extension] || "application/octet-stream" // Default to binary if unknown
    ;
}
function LOG(arg) {
    if (typeof arg === "string") (0, _logDefault.default).info("local:", arg);
    else (0, _logDefault.default).info("local:", ...arg);
}
async function hash(readme) {
    // @ts-ignore
    const crypto = window.crypto || window.msCrypto;
    const arrayBuffer = await readme.arrayBuffer();
    const hashBuffer = await crypto.subtle.digest("SHA-256", arrayBuffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map((b)=>b.toString(16).padStart(2, "0")).join("");
    return hashHex;
}
function findReadme(files) {
    // Step 1: Sort the files by the depth of their path (shallow folder first)
    const sortedFiles = files.sort((a, b)=>{
        const pathA = (a.webkitRelativePath || a.path || "").split("/").length;
        const pathB = (b.webkitRelativePath || b.path || "").split("/").length;
        return pathA - pathB // Sort shallower paths first
        ;
    });
    // Step 2: If webkitpath or path exists, look for 'readme.md' in the shallowest folder
    let readmeFiles = sortedFiles.filter((file)=>file.name.toLowerCase().endsWith("readme.md"));
    // Step 3: If no 'readme.md' file is found, look for any other '.md' file in the shallowest folder
    if (readmeFiles.length === 0) readmeFiles = sortedFiles.filter((file)=>file.name.toLowerCase().endsWith(".md"));
    // Step 4: If no markdown file is found, return undefined
    if (readmeFiles.length === 0) return undefined;
    // Step 5: Return the first markdown file found in the shallowest folder
    return readmeFiles[0];
}
function cleanPathsIn(files) {
    for(let i in files){
        let folder = files[i].webkitRelativePath || files[i].path || "";
        if (folder) files[i]._path = folder.split("/").slice(1).join("/");
        else files[i]._path = "";
    }
    return files;
}
const Service = {
    PORT: "local",
    init: function(elmSend_, db_) {
        elmSend = elmSend_;
        db = db_;
        if (db) // @ts-ignore
        db.onReady(()=>{
            if (uri && Files) {
                (0, _logDefault.default).info("");
                storeFiles(Files);
            }
        });
        window.LIA.fileUpload = (event, uri_)=>{
            let files = Array.from(event.target.files);
            if (files.length === 1 && files[0].type === "application/zip") {
                LOG("ZIP file detected, let's extract it");
                // JSZip is only loaded if it is required
                if (!JSZip) {
                    require("f188a4605040c82c").then((module)=>{
                        // @ts-ignore
                        JSZip = module;
                        LOG("JSZip loaded at first");
                        window.LIA.fileUpload(event, uri_);
                    });
                    return;
                }
                let self = this;
                // Load the ZIP file using JSZip
                JSZip().loadAsync(files[0].arrayBuffer()).then(async function(zip) {
                    // Iterate over the files inside the ZIP
                    const extractedFiles = [];
                    let base = null;
                    let allInBase = true;
                    for(const fileName in zip.files){
                        if (base === null) base = fileName.split("/")[0];
                        else if (!fileName.startsWith(base)) {
                            allInBase = false;
                            break;
                        }
                    }
                    let trim = allInBase && base ? base.length + 1 : 0;
                    // Loop through each file in the zip
                    for(const fileName in zip.files){
                        const file = zip.files[fileName];
                        if (!file.dir) {
                            // If it's not a directory
                            // Extract the content of each file as an ArrayBuffer (or other formats)
                            const content = await file.async("blob");
                            // Create a new File object for each extracted file
                            const extractedFile = new File([
                                content
                            ], (allInBase ? fileName.slice(trim) : fileName) || fileName, {
                                type: getFileMimeType(fileName) || "application/octet-stream"
                            });
                            extractedFile["_path"] = allInBase ? fileName.slice(trim) : fileName;
                            LOG([
                                "Extracting file ->",
                                extractedFile["_path"]
                            ]);
                            extractedFiles.push(extractedFile) // Add the file to an array
                            ;
                        }
                    }
                    self.store(extractedFiles, uri_) // Array of File objects
                    ;
                }).catch((error)=>{
                    logError(`Could not extracting ZIP file (${files[0].name}) --> ${error.message}`);
                });
                return;
            }
            this.store(cleanPathsIn(files), uri_);
        };
        uri = window.location.search.slice(1);
        if (uri.startsWith("local://")) window.LIA.fetchError = (tag, src)=>{
            LOG([
                "trying to fetch",
                tag,
                src
            ]);
            if (db) // @ts-ignore
            db.getMisc(uri, null, src).then((data)=>{
                if (data) inject(tag, src, URL.createObjectURL(data[1]));
                else if (!src.startsWith("/")) window.LIA.fetchError(tag, "/" + src);
            });
        };
    },
    store: async function(files, uri_) {
        Files = files;
        const readme = findReadme(files);
        if (!readme) {
            let msg = "No markdown files found! These are the only files i got ... (";
            for(let i in files)msg += files[i].name + ", ";
            logError(msg.slice(0, -2) + ")");
            return;
        }
        uri = uri_ || "local://" + await hash(readme);
        const decoder = new TextDecoder("utf-8");
        // Decode the ArrayBuffer into a string
        const body = decoder.decode(await readme.arrayBuffer());
        let event = {
            reply: true,
            service: "local",
            track: [],
            message: {
                cmd: "load",
                param: {
                    template: false,
                    uri: uri,
                    data: {
                        ok: true,
                        body
                    }
                }
            }
        };
        if (elmSend) elmSend(event);
        window.LIA.fetchError = (tag, src)=>{
            if (!Files) {
                LOG([
                    "no files found"
                ]);
                return;
            }
            let file = Files.filter((file)=>file._path?.endsWith(src));
            if (file.length === 0) {
                LOG([
                    "file not found",
                    src
                ]);
                return;
            }
            const url = URL.createObjectURL(file[0]);
            if (url) inject(tag, src, url);
        };
    },
    handle: async function(event) {
        switch(event.message.cmd){
            case "clear":
                uri = "";
                Files = null;
                break;
            case "download":
                {
                    let url = event.message.param;
                    uri = "local://" + url;
                    fetch(url).then((response)=>{
                        return response.blob();
                    }).then((blob)=>{
                        window.LIA.fileUpload({
                            target: {
                                files: [
                                    new File([
                                        blob
                                    ], "downloaded.zip", {
                                        type: "application/zip"
                                    })
                                ]
                            }
                        }, "local://" + url);
                    });
                }
            default:
                console.warn("local: unknown event =>", event);
        }
    }
};
async function storeFiles(files) {
    if (db && uri) for(let i in files){
        let file = files[i];
        // @ts-ignore
        await db.addMisc(uri, null, file._path || file.name, [
            file.type,
            new Blob([
                file
            ], {
                type: file.type
            }),
            i
        ]);
    }
}
function inject(tag, src, url) {
    let sources = [
        src,
        window.location.origin + "/" + src
    ];
    // this adds normalized URLs to the source list as well, sometimes the URL
    // from a video.src might changed, if a timestamp is detected, which leads
    // to different upper and lowercase characters.
    try {
        let helperURL = new URL(src);
        sources.push(helperURL.href);
        sources.push(window.location.origin + "/" + helperURL.href);
    } catch (e) {}
    switch(tag){
        case "img":
            {
                const images = document.querySelectorAll("img,picture");
                for(let i = 0; i < images.length; i++){
                    let image = images[i];
                    let image_src = image.getAttribute("src") || image.src;
                    if (sources.includes(image_src)) {
                        image.src = url;
                        if (image.onclick) image.onclick = function() {
                            window.LIA.img.click(url);
                        };
                        break;
                    }
                }
                break;
            }
        case "audio":
            {
                const nodes = document.querySelectorAll("source");
                for(let i = 0; i < nodes.length; i++){
                    let elem = nodes[i];
                    let elem_src = elem.getAttribute("src") || elem.src;
                    if (sources.includes(elem_src)) {
                        elem.src = url;
                        elem.removeAttribute("onerror");
                        const parent = elem.parentNode;
                        // this forces the player to reload
                        parent.innerHTML = elem.outerHTML;
                        parent.play();
                        break;
                    }
                }
                break;
            }
        case "video":
            {
                const nodes = document.querySelectorAll("source");
                for(let i = 0; i < nodes.length; i++){
                    let elem = nodes[i];
                    let elem_src = elem.getAttribute("src") || elem.src;
                    if (sources.includes(elem_src)) {
                        const parent = elem.parentNode;
                        parent.src = url;
                        parent.load();
                        parent.onloadeddata = function() {
                            parent.play();
                        };
                        break;
                    }
                }
                break;
            }
        case "script":
            {
                const tag = document.createElement("script");
                tag.src = url;
                document.head.appendChild(tag);
                break;
            }
        case "link":
            {
                const tag = document.createElement("link");
                tag.href = url;
                tag.rel = "stylesheet";
                document.head.appendChild(tag);
                break;
            }
        default:
            console.warn("could not handle tag =>", tag, url);
    }
}
function logError(msg) {
    console.warn(msg);
    if (elmSend) elmSend({
        reply: true,
        service: "local",
        track: [
            [
                "index",
                -1
            ]
        ],
        message: {
            cmd: "loading_error",
            param: msg
        }
    });
}
exports.default = Service;

},{"../types/lia.d":"aT9qy","../log":"4dsMr","f188a4605040c82c":"cStA3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cStA3":[function(require,module,exports) {
module.exports = require("96673110b3894ba2")(require("f9ba92e40ef3f7a9").getBundleURL("kuqFz") + "jszip.min.909245e0.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("gA3EN"));

},{"96673110b3894ba2":"61B45","f9ba92e40ef3f7a9":"lgJ39"}],"61B45":[function(require,module,exports) {
"use strict";
var cacheLoader = require("86ce42311a1fc842");
module.exports = cacheLoader(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same script twice (e.g. if it was already in the HTML)
        var existingScripts = document.getElementsByTagName("script");
        if ([].concat(existingScripts).some(function isCurrentBundle(script) {
            return script.src === bundle;
        })) {
            resolve();
            return;
        }
        var preloadLink = document.createElement("link");
        preloadLink.href = bundle;
        preloadLink.rel = "preload";
        preloadLink.as = "script";
        document.head.appendChild(preloadLink);
        var script = document.createElement("script");
        script.async = true;
        script.type = "text/javascript";
        script.src = bundle;
        script.onerror = function(e) {
            var error = new TypeError("Failed to fetch dynamically imported module: ".concat(bundle, ". Error: ").concat(e.message));
            script.onerror = script.onload = null;
            script.remove();
            reject(error);
        };
        script.onload = function() {
            script.onerror = script.onload = null;
            resolve();
        };
        document.getElementsByTagName("head")[0].appendChild(script);
    });
});

},{"86ce42311a1fc842":"j49pS"}],"j49pS":[function(require,module,exports) {
"use strict";
var cachedBundles = {};
var cachedPreloads = {};
var cachedPrefetches = {};
function getCache(type) {
    switch(type){
        case "preload":
            return cachedPreloads;
        case "prefetch":
            return cachedPrefetches;
        default:
            return cachedBundles;
    }
}
module.exports = function(loader, type) {
    return function(bundle) {
        var cache = getCache(type);
        if (cache[bundle]) return cache[bundle];
        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {
            delete cache[bundle];
            throw e;
        });
    };
};

},{}],"5yqii":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Service", ()=>Service);
/**
 * Load a external JavaScript resource dynamically and attach it to the
 * HTML-head.
 *
 * @param url - A valid URL string
 * @param withSemaphore - indicates it the global semaphore should be applied.
 */ parcelHelpers.export(exports, "loadScript", ()=>loadScript);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
const Service = {
    /**
   * Service identifier 'resource', that is used to while service routing.
   */ PORT: "resource",
    /**
   * Generic handler for dynamically external resources. Currently supported
   * commands are:
   *
   * * `script`: referring to external javascript resources (*.js)
   * * `link`: referring to external style-sheets (*.css)
   *
   * @param event
   */ handle: function(event) {
        switch(event.message.cmd){
            case "script":
                loadScript(event.message.param, true, false);
                break;
            case "module":
                loadScript(event.message.param, true, true);
                break;
            case "link":
                loadLink(event.message.param);
                break;
            case "style":
                let tag = document.createElement("style");
                tag.innerHTML = event.message.param;
                document.head.appendChild(tag);
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    }
};
/**
 * This is a custom origin matcher that works also with
 * @param url
 * @returns
 */ function origin(url) {
    const match = url.match(/.*?:\/\/[^\/]*/);
    if (match && match.length > 0) return match[0];
    return null;
}
function loadScript(url, withSemaphore = false, asModule = false, callback) {
    // try to load all local scripts as blobs
    if (!url.startsWith("blob:") && origin(url) === window.location.origin) {
        loadScriptAsBlob(url, asModule, withSemaphore);
        return;
    }
    try {
        let tag = document.createElement("script");
        tag.src = url;
        tag.async = false // load all scripts in order
        ;
        tag.defer = true // load the scripts after the main HTML content
        ;
        tag.type = "text/javascript";
        if (asModule) tag.type = "module";
        if (withSemaphore) {
            // this semaphore is used by the system to block the evaluation of scripts
            // originating from a course until all javascript resources are loaded
            window.LIA.eventSemaphore++;
            // Decrease the semaphore counter in both cases
            tag.onload = function() {
                window.LIA.eventSemaphore--;
                (0, _logDefault.default).info("successfully loaded =>", url);
                if (callback) callback(true);
            };
            tag.onerror = function(_e) {
                window.LIA.eventSemaphore--;
                console.warn("could not load =>", url);
                // try to load all local scripts as blobs
                if (!url.startsWith("blob:")) loadScriptAsBlob(url, withSemaphore, asModule, callback);
                else if (callback) callback(false);
            };
        }
        document.head.appendChild(tag);
    } catch (e) {
        (0, _logDefault.default).warn("failed loading script => ", e);
        loadScriptAsBlob(url, withSemaphore, asModule);
    }
}
function loadScriptAsBlob(url, withSemaphore, asModule, callback) {
    if (!url.startsWith("blob:")) loadAsBlob("script", url, (blobUrl)=>{
        loadScript(blobUrl, withSemaphore, asModule, callback);
    }, withSemaphore ? (_url, _error)=>{
        window.LIA.eventSemaphore--;
    } : undefined);
}
function loadAsBlob(tag, url, onOk, onError) {
    if (url.startsWith("blob:")) {
        console.warn("failed to load blob", url);
        return;
    }
    let type = "text/";
    switch(tag){
        case "script":
            type += "javascript";
            break;
        case "link":
            type += "css";
            break;
        default:
            type += "plain";
    }
    fetch(url).then((response)=>{
        const header = response.headers.get("Content-Disposition");
        let match = header?.match('filename="([^"]+)"');
        let filename = "";
        if (match && match.length > 0) filename = match[1];
        const src = new URL(url);
        if (filename && filename !== src.pathname.split("/").slice(-1)[0]) throw new Error(`false redirect received "${filename}" instead of "${src.pathname}"`);
        return response.text();
    }).then((text)=>{
        const blob = new Blob([
            text
        ], {
            type
        });
        const blobUrl = window.URL.createObjectURL(blob);
        onOk(blobUrl);
    }).catch((e)=>{
        (0, _logDefault.default).warn("could not load", url, "as blob =>", e.message);
        if (onError) onError(url, e);
    });
}
/**
 * Load a external CSS resource dynamically and attach it to the HTML-head.
 *
 * @param url - A valid URL string
 */ function loadLink(url) {
    try {
        // Chrome will CORB block this request, therefor it can only be loaded as blob
        if (!!window["chrome"] && !url.startsWith("blob:")) throw new Error("Chrome does not support CORS for CSS files");
        let tag = document.createElement("link");
        tag.href = url;
        tag.rel = "stylesheet";
        tag.type = "text/css";
        tag.onerror = (_event)=>{
            console.warn("could not load =>", url);
            loadAsBlob("link", url, (blobUrl)=>{
                loadLink(blobUrl);
            });
        };
        document.head.appendChild(tag);
    } catch (e) {
        if (url.startsWith("blob:")) (0, _logDefault.default).warn("failed loading style => ", url, e.message);
        else {
            (0, _logDefault.default).warn("could not load =>", url, e);
            (0, _logDefault.default).warn("will try to import as blob");
            loadAsBlob("link", url, (blobUrl)=>{
                loadLink(blobUrl);
            });
        }
    }
}

},{"../log":"4dsMr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GV8AJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
/**
 * Service for sharing links via the browser share-API.
 */ const Service = {
    /**
   * Service identifier 'share', that is used to while service routing.
   */ PORT: "share",
    /**
   * Check if the browser offers a share-API.
   * @returns `true` if it does
   */ isSupported: function() {
        return !!navigator.share;
    },
    /**
   * Event handler for all share events. Currently it is only supported to
   * share links.
   *
   * TODO: The share-API also allows to share files, which could be nice
   * feature in the future.
   *
   * <https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share#shareable_file_types>
   *
   * @param event - LiaScript event
   */ handle: function(event) {
        switch(event.message.cmd){
            case "link":
                try {
                    if (!!navigator.share) shareLink(event.message.param);
                    else navigator.clipboard.writeText(event.message.param.url);
                } catch (e) {
                    (0, _logDefault.default).warn("sharing was not possible => ", event.message, e.message);
                }
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    }
};
function shareLink(param) {
    const fileUrls = param.files || [];
    const filePromises = fileUrls.map((url)=>fetch(url).then((response)=>response.blob()).then((blob)=>{
            // Extract the filename from the URL or use a default name
            const filename = url.substring(url.lastIndexOf("/") + 1) || "file";
            // Create a new File object from the Blob
            return new File([
                blob
            ], filename, {
                type: blob.type
            });
        }));
    Promise.all(filePromises).then((files)=>{
        // Prepare the data for sharing
        const shareData = {
            title: param.title,
            text: param.text,
            url: param.url,
            files: files
        };
        // Use the Web Share API to share the data
        navigator.share(shareData).then(()=>console.log("Share was successful.")).catch((error)=>console.log("Sharing failed", error));
    }).catch((error)=>{
        navigator.share({
            title: param.title,
            text: param.text,
            url: param.url,
            files: []
        });
        console.error("Error preparing files for sharing:", error);
    });
}
exports.default = Service;

},{"../log":"4dsMr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de3ED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Scroll a slide to the start and put the first header element within in focus.
 */ parcelHelpers.export(exports, "scrollUp", ()=>scrollUp);
/**
 * Move the element with the `id` that was passed smoothly into the view after
 * a `delay` of milliseconds. The delay is mostly required, since it might
 * require a certain time if new elements become visible, maybe they need to
 * be calculated, etc.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
 *
 * @param id - id of the DOM element
 * @param delay - in milliseconds
 */ parcelHelpers.export(exports, "scrollIntoView", ()=>scrollIntoView);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
/**
 * Service for **'slide'** used to put change the focus and for scrolling.
 */ const Service = {
    /**
   * Service identifier 'slide', that is used to while service routing.
   */ PORT: "slide",
    /**
   * Event handler for all events related to slide events. Currently supported
   * `cmd`s are:
   *
   * * __init__: called on every new slide initialization
   * * __scroll_up__: move the slide to the top
   * * __scroll_into_view__: scroll an element with a particular id and after
   * * __scroll_down__: scroll an element with a particular id down
   *   a particular delay into the viewport
   *
   * @param event - LiaScript event
   */ handle: function(event) {
        switch(event.message.cmd){
            case "init":
                {
                    document.title = event.message.param.title;
                    scrollUp();
                    // this the active link within the table of contents
                    const link = document.getElementById("focusedToc");
                    // if it exists and is not in the viewport it is moved into it
                    if (link && !link.getAttribute("aria-hidden") && !isInViewport(link)) scrollIntoView("focusedToc", 0);
                    break;
                }
            case "scroll_up":
                scrollUp();
                break;
            case "scroll_into_view":
                scrollIntoView(event.message.param.id, event.message.param.delay);
                break;
            case "scroll_down":
                setTimeout(function() {
                    const elem = document.getElementById(event.message.param.id);
                    if (elem) elem.scrollTo({
                        top: elem.scrollHeight,
                        behavior: "smooth"
                    });
                }, event.message.param.delay);
                break;
            case "fullscreen":
                if (!document.fullscreenElement) document.documentElement.requestFullscreen().catch((err)=>{
                    console.warn(`Error attempting to enable fullscreen mode: ${err.message}`);
                });
                else document.exitFullscreen().catch((err)=>{
                    console.error(`Error attempting to exit fullscreen mode: ${err.message}`);
                });
                break;
            default:
                (0, _logDefault.default).warn("(Service ", this.PORT, ") unknown message =>", event.message);
        }
    }
};
function scrollUp() {
    // every LiaScript slide consists of a main tag
    const main = document.querySelector('main:not([hidden=""])');
    if (main) {
        if (window.LIA.scrollUpOnMain) main.scrollTo(0, 0);
    }
}
/**
 * Check if a given element is in the visible viewport. This is mainly used at
 * slide changes to check if the active link within the table of contents is
 * visible.
 *
 * @param element - HTML element to be checked
 * @returns `true` if the element is visible
 */ function isInViewport(element) {
    const bounding = element.getBoundingClientRect();
    return bounding.top >= 85 && bounding.left >= 0 && bounding.bottom <= (window.innerHeight - 40 || document.documentElement.clientHeight - 40) && bounding.right <= (window.innerWidth || document.documentElement.clientWidth);
}
function scrollIntoView(id, delay) {
    setTimeout(function() {
        const elem = document.getElementById(id);
        if (elem) elem.scrollIntoView({
            behavior: "smooth"
        });
    }, delay);
}
exports.default = Service;

},{"../log":"4dsMr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyzFk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slide = require("./Slide");
let /**
 * Touch directions used for internal communication
 */ Dir;
(function(Dir) {
    Dir["none"] = "none";
    Dir["left"] = "left";
    Dir["right"] = "right";
    Dir["up"] = "up";
    Dir["down"] = "down";
})(Dir || (Dir = {}));
/**
 * **Helper:** Simple Swipe detection function.
 *
 * @param el - HTML to look for touch events
 * @param callback - send swipe directions
 */ function detect(el, callback) {
    let touchSurface = el;
    let swipeDir;
    let startX;
    let startY;
    let distX;
    let distY;
    let threshold = 150;
    let restraint = 100;
    let allowedTime = 300;
    let elapsedTime;
    let startTime;
    let isMousedown = false;
    let detectTouch = !!("ontouchstart" in window) || !!("ontouchstart" in document.documentElement) || !!window.ontouchstart || !!window.Touch || !!window.onmsgesturechange;
    //  || (window.DocumentTouch && window.document instanceof window.DocumentTouch)
    let handleSwipe = callback || function(_) {};
    function isContained(m, e) {
        if (!e) e = window.event;
        if (typeof e === "undefined") return false;
        let c = /(click)|(mousedown)|(mouseup)/i.test(e.type) ? e.target : e.relatedTarget || (e.type === "mouseover" ? e.fromElement : e.toElement);
        while(c && c !== m)try {
            c = c.parentNode;
        } catch (_) {
            c = m;
        }
        return c === m;
    }
    touchSurface.addEventListener("touchstart", function(e) {
        let touchObj = e.changedTouches[0];
        swipeDir = Dir.none;
        startX = touchObj.pageX;
        startY = touchObj.pageY;
        startTime = new Date().getTime() // record time when finger first makes contact with surface
        ;
    // e.preventDefault()
    }, {
        passive: true
    });
    touchSurface.addEventListener("touchmove", function(_) {
    // e.preventDefault() // prevent scrolling when inside DIV
    }, {
        passive: true
    });
    touchSurface.addEventListener("touchend", function(e) {
        let touchObj = e.changedTouches[0];
        distX = touchObj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
        ;
        distY = touchObj.pageY - startY // get vertical dist traveled by finger while in contact with surface
        ;
        elapsedTime = new Date().getTime() - startTime // get time elapsed
        ;
        if (elapsedTime <= allowedTime) {
            // first condition for a swipe met
            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) // 2nd condition for horizontal swipe met
            swipeDir = distX < 0 ? Dir.left : Dir.right;
            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) // 2nd condition for vertical swipe met
            swipeDir = distY < 0 ? Dir.up : Dir.down;
        }
        // check that elapsed time is within specified, horizontal dist traveled >= threshold, and vertical dist traveled <= 100
        if (swipeDir !== Dir.none) handleSwipe(swipeDir);
    // e.preventDefault()
    }, {
        passive: true
    });
    if (!detectTouch) {
        document.body.addEventListener("mousedown", function(e) {
            if (isContained(touchSurface, e)) {
                let touchObj = e;
                swipeDir = Dir.none;
                startX = touchObj.pageX;
                startY = touchObj.pageY;
                startTime = new Date().getTime() // record time when finger first makes contact with surface
                ;
                isMousedown = true;
            // e.preventDefault()
            }
        }, {
            passive: true
        });
        document.body.addEventListener("mousemove", function(_e) {
        // e.preventDefault() // prevent scrolling when inside DIV
        }, {
            passive: true
        });
        document.body.addEventListener("mouseup", function(e) {
            if (isMousedown) {
                let touchObj = e;
                distX = touchObj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
                ;
                distY = touchObj.pageY - startY // get vertical dist traveled by finger while in contact with surface
                ;
                elapsedTime = new Date().getTime() - startTime // get time elapsed
                ;
                if (elapsedTime <= allowedTime) {
                    // first condition for a swipe met
                    if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) // 2nd condition for horizontal swipe met
                    swipeDir = distX < 0 ? Dir.left : Dir.right;
                    else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) // 2nd condition for vertical swipe met
                    swipeDir = distY < 0 ? Dir.up : Dir.down;
                }
                // check that elapsed time is within specified, horizontal dist traveled >= threshold, and vertical dist traveled <= 100
                if (swipeDir !== Dir.none) handleSwipe(swipeDir);
                isMousedown = false;
            // e.preventDefault()
            }
        }, {
            passive: true
        });
    }
}
// Used multiple times, that is why it is defined as a constant here
const Port = "swipe";
/**
 * This 'swipe' Service for key navigation via the left-right arrow-keys or via
 * touch events (swipe left/right), sends navigation events to LiaScript.
 */ const Service = {
    /**
   * Service identifier 'swipe', that is used to while service routing.
   */ PORT: Port,
    /**
   * Attach an event listener for key pressed and swipe event to the DOM-`element`
   * @param element - DOM element to be observed for key
   * @param elmSend - callback for sending back to Lia
   */ init: function initNavigation(element, elmSend) {
        detect(element, function(swipeDir) {
            sendReply(elmSend, swipeDir);
        });
        element.addEventListener("keydown", (e)=>{
            if (e.key === "ArrowRight" || e.altKey && e.shiftKey && (e.key === "N" || e.key === "n")) {
                sendReply(elmSend, Dir.left);
                return;
            }
            if (e.key === "ArrowLeft" || e.altKey && e.shiftKey && (e.key === "P" || e.key === "p")) {
                sendReply(elmSend, Dir.right);
                return;
            }
            if (e.altKey && e.shiftKey && (e.key === "C" || e.key === "c")) {
                if (window.LIA.settings.table_of_contents) window.LIA.settings.table_of_contents = false;
                else {
                    window.LIA.settings.table_of_contents = true;
                    (0, _slide.scrollIntoView)("focusedToc", 300);
                    setTimeout(()=>{
                        const link = document.getElementById("focusedToc");
                        link?.focus();
                    }, 1000);
                }
                return;
            }
        }, false);
    }
};
/**
 * Helper function for sending, which also test for the necessity to send
 * messages to LiaScript.
 * @param elmSend - callback function
 * @param swipeDir - Direction parameter to be send
 */ function sendReply(elmSend, swipeDir) {
    // navigation messages are only send, if and only if, there is no element of
    // class 'lia-modal'. To all LiaScript modals this class is added to prevent
    // a slide change in background...
    if (document.getElementsByClassName("lia-modal").length === 0) elmSend({
        reply: true,
        track: [
            [
                Port,
                -1
            ]
        ],
        service: Port,
        message: {
            cmd: Port,
            param: swipeDir
        }
    });
// TODO: Navigation could also be useful for galleries and might another track!
}
exports.default = Service;

},{"./Slide":"de3ED","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65Itr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var sync;
var elmSend;
var Edrys;
// var Jitsi
// var Matrix
var PubNub;
var Gun;
var P2PT;
var Trystero;
function hasRTCPeerConnection() {
    return !!(window.RTCPeerConnection || // @ts-ignore
    window.mozRTCPeerConnection || // @ts-ignore
    window.webkitRTCPeerConnection);
}
const Service = {
    PORT: "sync",
    supported: [
        // remove these strings if you want to enable or disable certain sync support
        "edrys",
        "gun",
        //'jitsi',
        //'matrix',
        "mqtt",
        "nostr",
        "pubnub",
        hasRTCPeerConnection() ? "p2pt" : "",
        "torrent"
    ],
    init: function(elmSend_) {
        elmSend = elmSend_;
        if (window["LIA"]) window["LIA"]["classroom"] = {
            connected: false,
            publish,
            subscribe,
            unsubscribe,
            on
        };
    },
    handle: async function(event) {
        switch(event.message.cmd){
            case "connect":
                if (sync) sync = undefined;
                if (elmSend) {
                    // for what so ever reason perform a deep-copy
                    const event_ = {
                        ...event
                    };
                    const cbConnection = function(topic, msg) {
                        event_.message.cmd = topic;
                        event_.message.param = msg;
                        event_.reply = true;
                        if (elmSend) elmSend(event_);
                    };
                    event.message.param.backend;
                    (0, _logDefault.default).error("could not load =>", event.message);
                }
                if (sync) sync.connect(event.message.param.config);
                break;
            case "disconnect":
                if (sync) {
                    sync.disconnect();
                    sync = undefined;
                    window.LIA.classroom.publish = publish;
                    window.LIA.classroom.connected = false;
                    CALLBACK.disconnect.forEach((cb)=>cb());
                }
                break;
            default:
                if (sync) sync.publish(event);
        }
    }
};
exports.default = Service;
// Container for all subscriptions
var SUBSCRIPTIONS = {};
var BACKUP = {};
// Connection change callback container
var CALLBACK = {
    connect: [],
    disconnect: []
};
function publish(topic, message) {
    console.warn("Classroom: not connected, cannot publish topic => [object Object]");
}
function subscribe(topic, callback) {
    const id = Math.round(Math.random() * 1000000000);
    if (!SUBSCRIPTIONS[topic]) SUBSCRIPTIONS[topic] = [];
    SUBSCRIPTIONS[topic].push({
        id,
        callback
    });
    if (BACKUP[topic]) setTimeout(()=>callback(BACKUP[topic]), 100);
    return id;
}
function unsubscribe(id) {
    for(const topic in SUBSCRIPTIONS)SUBSCRIPTIONS[topic] = SUBSCRIPTIONS[topic].filter((sub)=>sub.id !== id);
}
function on(event, callback) {
    switch(event){
        case "connect":
            CALLBACK.connect.push(callback);
            // if the callback is added after the connection was established
            if (window.LIA.classroom.connected) callback();
            break;
        case "disconnect":
            CALLBACK.disconnect.push(callback);
            break;
        default:
            console.warn("Classroom: unknown event -> " + event);
    }
}
function onReceive(topic, message) {
    BACKUP[topic] = message;
    if (SUBSCRIPTIONS[topic]) SUBSCRIPTIONS[topic].forEach((sub)=>sub.callback(message));
}
function onConnect() {
    window.LIA.classroom.connected = true;
    window.LIA.classroom.publish = function(topic, message) {
        if (sync) {
            if (window.LIA.classroom.connected) sync.pubsubSend(topic, message);
            else publish(topic, message);
        }
    };
    CALLBACK.connect.forEach((cb)=>cb());
}

},{"../log":"4dsMr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bOfmx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _resource = require("./Resource");
// Checks if there has been a code injection jet
var googleTranslate = false;
/**
 * This is required to hide the DOM elements that are injected by the
 * Google-translation API.
 */ function changeGoogleStyles() {
    let goog = document.getElementById(":1.container");
    if (goog) {
        goog.style.visibility = "hidden";
        document.body.style.top = "";
    }
    // this has to be added in order to make the element not loosing the focus,
    // caused by the elm-settings in translations, which will automatically
    // close the menu, if the focus is lost
    let select = document.getElementsByClassName("goog-te-combo");
    if (select.length > 0) select[0].setAttribute("data-group-id", "translation");
    const removePopup = document.getElementById("goog-gt-tt");
    if (removePopup && removePopup.parentNode) removePopup.parentNode.removeChild(removePopup);
    const style = document.createElement("style");
    style.innerHTML = `font {
    background-color: transparent !important;
    box-shadow: none !important;
  }`;
    document.head.appendChild(style);
}
/**
 * Bootstrap for the google-translation API, defines the main configurations.
 *
 * @see <https://www.w3schools.com/howto/howto_google_translate.asp>
 */ function googleTranslateElementInit() {
    // @ts-ignore: will be injected by google
    new google.translate.TranslateElement({
        // use the course lang definition as default
        pageLanguage: document.documentElement.lang,
        // includedLanguages: 'ar,en,es,jv,ko,pa,pt,ru,zh-CN',
        // layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
        // multilanguagePage: true,
        // gaTrack: true,
        // gaId: 'todo'
        autoDisplay: false
    }, // this defines the `id` of the HTML element that will be replaced by
    // the google-drop-down field for selection languages
    "google_translate_element");
}
/**
 * Inject the Google translation API into the head of the document.
 */ function injectGoogleTranslate() {
    // inject the google translator
    if (!googleTranslate) {
        // TODO:
        // the general URL without protocol needs to be checked with other
        // protocols IPFS, Hyper, etc.
        _resource.loadScript("https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit", false, false);
        // Setup the global init function, this function is called by google as a
        // bootstrap and the name has to mach the `cp` parameter of the upper
        // resource.
        window.googleTranslateElementInit = googleTranslateElementInit;
        // from now on there won't be ne translations
        googleTranslate = true;
    }
}
const Port = "translate";
/**
 * Service handler for **translations**, currently only google is supported.
 */ const Service = {
    /**
   * Service identifier 'translate', that is used to while service routing.
   */ PORT: Port,
    /**
   * This adds a special mutation observer for the `lang` attribute within the
   * `<html>` tag. Whenever there is an external system that translates the
   * website, then the change of the `lang` attribute is send back to LiaScript
   * via the `elmSend` function.
   * @param elmSend - callback function for reaching out LiaScript
   */ init: function(elmSend) {
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                changeGoogleStyles();
                let displayNames = new Intl.DisplayNames([
                    "en"
                ], {
                    type: "language"
                });
                elmSend({
                    reply: true,
                    track: [],
                    service: Port,
                    message: {
                        cmd: "lang",
                        param: [
                            document.documentElement.lang,
                            displayNames.of(document.documentElement.lang)
                        ]
                    }
                });
            });
        });
        observer.observe(document.documentElement, {
            attributes: true,
            childList: false,
            characterData: false,
            // only observe changes of this specific attribute
            attributeFilter: [
                "lang"
            ]
        });
    },
    /**
   * Generic handler for event-routing.
   * @param event
   */ handle: function(event) {
        switch(event.message.cmd){
            case "google":
                injectGoogleTranslate();
                break;
            default:
                (0, _logDefault.default).warn("(Service Translate) unknown message =>", event.message);
        }
    }
};
exports.default = Service;

},{"../log":"4dsMr","./Resource":"5yqii","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d4zW4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("../log");
var _logDefault = parcelHelpers.interopDefault(_log);
var elmSend;
var pako;
const Service = {
    PORT: "zip",
    init: function(elmSend_) {
        elmSend = elmSend_;
    },
    handle: async function(event) {
        if (!pako) {
            require("453892ddb4fb79dd").then((e)=>{
                pako = e;
                Service.handle(event);
            });
            return;
        }
        switch(event.message.cmd){
            case "unzip":
                try {
                    const data = pako.ungzip(atob(event.message.param.data).split("").map(function(c) {
                        return c.charCodeAt(0);
                    }), {
                        to: "string"
                    });
                    event.message.param.data = {
                        ok: true,
                        body: data
                    };
                } catch (e) {
                    event.message.param.data = {
                        ok: false,
                        body: e.message
                    };
                }
                if (elmSend) elmSend(event);
                break;
            default:
                (0, _logDefault.default).warn("zip: unknown event =>", event);
        }
    }
};
exports.default = Service;

},{"../log":"4dsMr","453892ddb4fb79dd":"dJFNh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJFNh":[function(require,module,exports) {
module.exports = require("25bbbb89a7320ed8")(require("4f28610aa58231cd").getBundleURL("kuqFz") + "pako.esm.d7728f0d.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("afBDp"));

},{"25bbbb89a7320ed8":"61B45","4f28610aa58231cd":"lgJ39"}],"bYHRh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./Resource");
var elmSend;
var db = null;
const Service = {
    PORT: "torrent",
    init: function(elmSend_, db_) {
        elmSend = elmSend_;
        db = db_;
    },
    handle: async function(event, reload = false) {
        if (!window["WebTorrent"]) {
            (0, _resource.loadScript)("https://cdn.jsdelivr.net/webtorrent/latest/webtorrent.min.js", true, false, (ok)=>{
                if (ok) this.handle(event);
                else console.error("webtorrent failed to load");
            });
            return;
        }
        switch(event.message.cmd){
            case "load":
                {
                    // @ts-ignore
                    const client = new WebTorrent({
                        tracker: {
                            rtcConfig: {
                                iceServers: [
                                    {
                                        urls: "stun:stun.l.google.com:19302"
                                    },
                                    {
                                        urls: "stun:global.stun.twilio.com:3478"
                                    }
                                ]
                            }
                        }
                    });
                    if (reload) client.add(event.message.param.uri, serve(event, true));
                    else {
                        // @ts-ignore
                        const data = await db.getMisc(event.message.param.uri, null);
                        const files = toFileList(data || {});
                        if (files.length > 0) client.seed(files, serve(event, false));
                        else client.add(event.message.param.uri, serve(event, true));
                    }
                    break;
                }
            default:
                console.warn("torrent: unknown event =>", event);
        }
    }
};
function serve(event, doStore) {
    return (torrent)=>{
        if (!doStore && !event.message.param.uri.match(torrent.infoHash)) {
            console.warn("torrent not fully loaded");
            Service.handle(event, true);
            return;
        }
        let readme = torrent.files.filter((file)=>file.name.toLocaleLowerCase().endsWith("readme.md"));
        if (readme.length === 0) readme = torrent.files.filter((file)=>file.name.endsWith(".md"));
        if (readme.length === 0) {
            console.warn("No markdown files found");
            return;
        }
        readme = readme[0];
        readme.getBlobURL(function callback(err, url) {
            if (url) fetch(url).then((response)=>{
                return response.text();
            }).then((data)=>{
                event.message.param.data = {
                    ok: true,
                    body: data
                };
                if (elmSend) {
                    elmSend(event);
                    if (doStore) setTimeout(()=>{
                        storeFiles(event.message.param.uri, torrent.files);
                    }, 1000);
                }
            });
        });
        window.LIA.fetchError = (tag, src)=>{
            let file = torrent.files.filter((file)=>file.path.endsWith(src));
            if (file.length === 0) {
                console.warn("file not found", src);
                return;
            }
            file[0].getBlobURL(function callback(err, url) {
                if (url) inject(tag, window.location.origin + src, url);
            });
        };
    };
}
// add a dictionary type to the files object
function toFileList(files) {
    // sort the object by the index i
    return Object.entries(files).sort((a, b)=>a[1][2] - b[1][2]).map(([filename, [type, buffer, i]])=>new File([
            buffer
        ], filename, {
            type
        }));
}
function storeFiles(uri, files) {
    for(let i in files){
        let file = files[i];
        file.getBlobURL(function callback(err, url) {
            if (url) fetch(url).then((response)=>response.arrayBuffer()).then((data)=>{
                console.log("store file =>", i, file.path, file._getMimeType());
                if (db) // @ts-ignore
                db.addMisc(uri, null, file.path, [
                    file._getMimeType(),
                    data,
                    i
                ]);
            });
        });
    }
}
function inject(tag, src, url) {
    switch(tag){
        case "img":
            {
                const images = document.querySelectorAll("img,picture");
                for(let i = 0; i < images.length; i++){
                    let image = images[i];
                    if (image.src == src) {
                        image.src = url;
                        if (image.onclick) image.onclick = function() {
                            window.LIA.img.click(url);
                        };
                        break;
                    }
                }
                break;
            }
        case "audio":
            {
                const nodes = document.querySelectorAll("source");
                for(let i = 0; i < nodes.length; i++){
                    let elem = nodes[i];
                    if (elem.src == src) {
                        elem.src = url;
                        elem.removeAttribute("onerror");
                        const parent = elem.parentNode;
                        // this forces the player to reload
                        parent.innerHTML = elem.outerHTML;
                        parent.play();
                        break;
                    }
                }
                break;
            }
        case "video":
            {
                const nodes = document.querySelectorAll("source");
                for(let i = 0; i < nodes.length; i++){
                    let elem = nodes[i];
                    if (elem.src == src) {
                        const parent = elem.parentNode;
                        parent.src = url;
                        parent.load();
                        parent.onloadeddata = function() {
                            parent.play();
                        };
                        break;
                    }
                }
                break;
            }
        case "script":
            {
                const tag = document.createElement("script");
                tag.src = url;
                document.head.appendChild(tag);
                break;
            }
        case "link":
            {
                const tag = document.createElement("link");
                tag.href = url;
                tag.rel = "stylesheet";
                document.head.appendChild(tag);
                break;
            }
        default:
            console.warn("could not handle tag =>", tag, url);
    }
}
exports.default = Service;

},{"./Resource":"5yqii","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dX9nA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var elmSend;
var nostr = undefined;
const defaultRelays = [
    "wss://relay.damus.io",
    "wss://relay.nostr.band",
    "wss://nos.lol"
];
const Service = {
    PORT: "nostr",
    init: function(elmSend_) {
        elmSend = elmSend_;
    },
    handle: async function(event, reload = false) {
        nostr;
        switch(event.message.cmd){
            case "load":
                {
                    if (nostr === undefined) await loadNostrTools();
                    if (nostr === null) {
                        failure(event, "nostr is not initialized");
                        return;
                    }
                    const uri = event.message.param.uri;
                    try {
                        // Parse the URI to get the Nostr identifier
                        const identifier = uri.substring(6) // Remove 'nostr:'
                        ;
                        const decoded = nostr.nip19.decode(identifier);
                        switch(decoded.type){
                            case "note":
                                break;
                            case "nevent":
                                fetchNostrEvent(event, decoded);
                                break;
                            case "naddr":
                                fetchNostrNaddr(event, decoded);
                                break;
                            default:
                                failure(event, "unknown type " + decoded.type);
                        }
                    } catch (error) {
                        console.error("Error processing Nostr URI:", error);
                    }
                    break;
                }
        }
    }
};
function failure(event, message) {
    console.warn("Nostr: failure =>", message);
    event.message.param.data = {
        ok: false,
        body: message
    };
    send(event);
}
function send(event) {
    if (elmSend) elmSend(event);
}
async function loadNostrTools() {
    try {
        const importPromise = new Promise((resolve, reject)=>{
            const timeoutId = setTimeout(()=>{
                reject(new Error("Import timed out - possible CORS issue"));
            }, 5000);
            window["_tempNostrResolve"] = resolve;
            window["_tempNostrReject"] = reject;
            window["_tempNostrTimeoutId"] = timeoutId;
            window.eval(`
        import('https://esm.sh/nostr-tools@1.17.0')
          .then(module => {
            window._tempNostrModule = module;
            clearTimeout(window._tempNostrTimeoutId);
            window._tempNostrResolve(module);
          })
          .catch(error => {
            clearTimeout(window._tempNostrTimeoutId);
            window._tempNostrReject(error);
          });
      `);
        });
        await importPromise;
        nostr = window["_tempNostrModule"];
        delete window["_tempNostrModule"];
        delete window["_tempNostrResolve"];
        delete window["_tempNostrReject"];
        delete window["_tempNostrTimeoutId"];
        if (!nostr || !nostr["nip19"] || typeof nostr["nip19"].decode !== "function") {
            nostr = null;
            console.warn("Nostr failure: Invalid nostr-tools module structure");
        }
        console.log("Nostr-tools loaded successfully");
    } catch (e) {
        nostr = null;
        console.warn("Nostr failure: loading nostr-tools ->", e.message);
    }
}
async function fetchNostrEvent(event, decoded) {
    const eventId = decoded.data.id;
    const relayUrls = decoded.data.relays || defaultRelays;
    const pool = new nostr.SimplePool();
    let timeoutId = setTimeout(()=>{
        pool.close(relayUrls);
        event.message.param.data = {
            ok: false,
            body: "Timeout fetching Nostr event"
        };
        if (elmSend) elmSend(event);
    }, 10000);
    console.log("Fetching event", eventId, "from relays", relayUrls);
    const fetchedEvent = await pool.get(relayUrls, {
        ids: [
            eventId
        ]
    });
    clearTimeout(timeoutId);
    pool.close(relayUrls);
    if (!fetchedEvent) {
        failure(event, "Event not found on specified relays");
        return;
    }
    console.log("Successfully fetched event:", fetchedEvent.content);
    event.message.param.data = {
        ok: true,
        body: fetchedEvent.content
    };
    send(event);
}
async function fetchNostrNaddr(event, decoded) {
    const pool = new nostr.SimplePool();
    let timeoutId = setTimeout(()=>{
        pool.close(decoded.data.relays);
        failure(event, "Timeout fetching Nostr addressable content");
    }, 10000);
    console.log("Fetching naddr content from relays", decoded.data.relays, "with filter:", {
        kinds: [
            decoded.data.kind
        ],
        authors: [
            decoded.data.pubkey
        ],
        "#d": [
            decoded.data.identifier
        ]
    });
    const fetchedEvent = await pool.get(decoded.data.relays, {
        kinds: [
            decoded.data.kind
        ],
        authors: [
            decoded.data.pubkey
        ],
        "#d": [
            decoded.data.identifier
        ]
    });
    clearTimeout(timeoutId);
    pool.close(decoded.data.relays);
    if (!fetchedEvent) {
        failure(event, "Addressable content not found on specified relays");
        return;
    }
    console.log("Fetched naddr content:", fetchedEvent.content);
    event.message.param.data = {
        ok: true,
        body: fetchedEvent.content
    };
    send(event);
}
async function fetchNostrNote(event, decoded) {
    // For note type, decoded.data is directly the event ID
    const eventId = decoded.data;
    const pool = new nostr.SimplePool();
    // Set timeout to prevent hanging if relays don't respond
    let timeoutId = setTimeout(()=>{
        pool.close(defaultRelays);
        event.message.param.data = {
            ok: false,
            body: "Timeout fetching Nostr note"
        };
        if (elmSend) elmSend(event);
    }, 10000);
    console.log("Fetching note", eventId, "from relays", defaultRelays);
    try {
        const fetchedEvent = await pool.get(defaultRelays, {
            ids: [
                eventId
            ]
        });
        clearTimeout(timeoutId);
        pool.close(defaultRelays);
        if (!fetchedEvent) {
            failure(event, "Note not found on specified relays");
            return;
        }
        console.log("Successfully fetched note:", fetchedEvent.content);
        event.message.param.data = {
            ok: true,
            body: fetchedEvent.content
        };
        send(event);
    } catch (error) {
        clearTimeout(timeoutId);
        pool.close(defaultRelays);
        failure(event, `Error fetching note: ${error.message}`);
    }
}
exports.default = Service;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ifSPH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initGlobals", ()=>initGlobals);
var _globals = require("./types/globals");
function initGlobals() {
    if (!window.LIA) // @ts-ignore
    window.LIA = {};
    if (!window.LIA.version) window.LIA.version = "0.17.3";
    if (!window.LIA.eventSemaphore) window.LIA.eventSemaphore = 0;
    if (!window.LIA.img) window.LIA.img = img;
    if (window.LIA.focusOnMain == undefined) window.LIA.focusOnMain = true;
    if (window.LIA.scrollUpOnMain == undefined) window.LIA.scrollUpOnMain = true;
    if (window.LIA.debug === undefined) window.LIA.debug = false;
    if (window.LIA.onReady === undefined) window.LIA.onReady = (param)=>{
        if (parent) parent.postMessage({
            cmd: "lia-ready",
            param: param
        }, "*");
    };
    init("send");
    init("playback");
    init("showFootnote");
    init("goto");
    init("gotoNext");
    init("gotoPrevious");
    init("gotoLine");
    init("lineGoto");
    init("fetchError");
    init("fileUpload");
    init("injectResposivevoice");
}
function init(name) {
    // @ts-ignore
    if (!window.LIA[name]) // @ts-ignore
    window.LIA[name] = (_)=>notDefined(name);
}
function notDefined(name) {
    console.log("LIA." + name + " not defined");
}
const img = {
    load: function(_url, _width, _height) {
        notDefined("img.load");
    },
    click: function(_url) {
        notDefined("img.click");
    },
    zoom: function(e) {
        const target = e.target;
        if (target) {
            const zooming = e.currentTarget;
            if (zooming) {
                if (target.width < target.naturalWidth) {
                    var offsetX = e instanceof MouseEvent ? e.offsetX : e.touches[0].pageX;
                    var offsetY = e instanceof MouseEvent ? e.offsetY : e.touches[0].pageY;
                    var x = offsetX / zooming.offsetWidth * 100;
                    var y = offsetY / zooming.offsetHeight * 100;
                    zooming.style.backgroundPosition = x + "% " + y + "%";
                    zooming.style.cursor = "zoom-in";
                } else zooming.style.cursor = "";
            }
        }
    }
};

},{"./types/globals":"60gyf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8NtkP":[function(require,module,exports) {
module.exports = require("d98293cd6f6258fe")(require("19c807fbd1fc3a1d").getBundleURL("kuqFz") + "Browser.642efa31.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("annGt"));

},{"d98293cd6f6258fe":"61B45","19c807fbd1fc3a1d":"lgJ39"}]},["6Bcmf","l0Bxc"], "l0Bxc", "parcelRequire55a5")

//# sourceMappingURL=index.7ced810b.js.map
